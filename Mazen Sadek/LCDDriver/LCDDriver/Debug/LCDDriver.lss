
LCDDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000590  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000590  00000604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012a9  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073e  00000000  00000000  000019c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000087a  00000000  00000000  00002103  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00002980  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c8  00000000  00000000  00002a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a50  00000000  00000000  00002e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000038b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 97 02 	call	0x52e	; 0x52e <main>
  7a:	0c 94 c6 02 	jmp	0x58c	; 0x58c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <pinModeport>:


void pinModeport(u8 port,u8 states){
	
	//PORTA
	  if( (port==portA) &&(states==INPUT))
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	49 f4       	brne	.+18     	; 0x98 <pinModeport+0x16>
  86:	61 11       	cpse	r22, r1
  88:	02 c0       	rjmp	.+4      	; 0x8e <pinModeport+0xc>
		DDRA_REG =0x00;
  8a:	1a ba       	out	0x1a, r1	; 26
  8c:	1b c0       	rjmp	.+54     	; 0xc4 <pinModeport+0x42>
		else if  ( (port==portA) &&(states==OUTPUT) )
  8e:	61 30       	cpi	r22, 0x01	; 1
  90:	c9 f4       	brne	.+50     	; 0xc4 <pinModeport+0x42>
		DDRA_REG =0xff;
  92:	9f ef       	ldi	r25, 0xFF	; 255
  94:	9a bb       	out	0x1a, r25	; 26
  96:	16 c0       	rjmp	.+44     	; 0xc4 <pinModeport+0x42>
			DDRA_REG =0X00;
			PORTA_REG =0Xff;
		}
		
		//PORTB
		if( (port==portB) &&(states==INPUT))
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	49 f4       	brne	.+18     	; 0xae <pinModeport+0x2c>
  9c:	61 11       	cpse	r22, r1
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <pinModeport+0x22>
		DDRB_REG =0x00;
  a0:	17 ba       	out	0x17, r1	; 23
  a2:	08 95       	ret
		else if  ( (port==portB) &&(states==OUTPUT) )
  a4:	61 30       	cpi	r22, 0x01	; 1
  a6:	c1 f4       	brne	.+48     	; 0xd8 <pinModeport+0x56>
		DDRB_REG =0xff;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	87 bb       	out	0x17, r24	; 23
  ac:	08 95       	ret
			DDRB_REG =0X00;
			PORTB_REG =0Xff;
		}
		
		//PORTC
		if( (port==portC) &&(states==INPUT))
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	49 f4       	brne	.+18     	; 0xc4 <pinModeport+0x42>
  b2:	61 11       	cpse	r22, r1
  b4:	02 c0       	rjmp	.+4      	; 0xba <pinModeport+0x38>
		DDRC_REG =0x00;
  b6:	14 ba       	out	0x14, r1	; 20
  b8:	08 95       	ret
		else if  ( (port==portC) &&(states==OUTPUT) )
  ba:	61 30       	cpi	r22, 0x01	; 1
  bc:	69 f4       	brne	.+26     	; 0xd8 <pinModeport+0x56>
		DDRC_REG =0xff;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	84 bb       	out	0x14, r24	; 20
  c2:	08 95       	ret
			DDRC_REG =0X00;
			PORTC_REG =0Xff;
		}
		
		//PORTD
		if( (port==portD) &&(states==INPUT))
  c4:	84 30       	cpi	r24, 0x04	; 4
  c6:	41 f4       	brne	.+16     	; 0xd8 <pinModeport+0x56>
  c8:	61 11       	cpse	r22, r1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <pinModeport+0x4e>
		DDRD_REG =0x00;
  cc:	11 ba       	out	0x11, r1	; 17
  ce:	08 95       	ret
		else if  ( (port==portD) &&(states==OUTPUT) )
  d0:	61 30       	cpi	r22, 0x01	; 1
  d2:	11 f4       	brne	.+4      	; 0xd8 <pinModeport+0x56>
		DDRD_REG =0xff;
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	81 bb       	out	0x11, r24	; 17
  d8:	08 95       	ret

000000da <digitalWrightpin>:


void digitalWrightpin(u8 port,u8 pin ,u8 states){
	
//PORTA
	   if((port ==portA) && (states== HIGH))
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	e9 f4       	brne	.+58     	; 0x118 <digitalWrightpin+0x3e>
  de:	41 30       	cpi	r20, 0x01	; 1
  e0:	61 f4       	brne	.+24     	; 0xfa <digitalWrightpin+0x20>
		
		PORTA_REG |=(1<<pin);
  e2:	9b b3       	in	r25, 0x1b	; 27
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	06 2e       	mov	r0, r22
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <digitalWrightpin+0x16>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <digitalWrightpin+0x12>
  f4:	29 2b       	or	r18, r25
  f6:	2b bb       	out	0x1b, r18	; 27
  f8:	49 c0       	rjmp	.+146    	; 0x18c <digitalWrightpin+0xb2>
		
		else if((port ==portA) && (states==LOW))
  fa:	41 11       	cpse	r20, r1
  fc:	47 c0       	rjmp	.+142    	; 0x18c <digitalWrightpin+0xb2>
		
		PORTA_REG &=~(1<<pin);
  fe:	9b b3       	in	r25, 0x1b	; 27
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	06 2e       	mov	r0, r22
 106:	02 c0       	rjmp	.+4      	; 0x10c <digitalWrightpin+0x32>
 108:	22 0f       	add	r18, r18
 10a:	33 1f       	adc	r19, r19
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <digitalWrightpin+0x2e>
 110:	20 95       	com	r18
 112:	29 23       	and	r18, r25
 114:	2b bb       	out	0x1b, r18	; 27
 116:	3a c0       	rjmp	.+116    	; 0x18c <digitalWrightpin+0xb2>
		
 //PORTB
	
	if((port ==portB) &&  (states== HIGH))
 118:	82 30       	cpi	r24, 0x02	; 2
 11a:	d9 f4       	brne	.+54     	; 0x152 <digitalWrightpin+0x78>
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	59 f4       	brne	.+22     	; 0x136 <digitalWrightpin+0x5c>
	
	PORTB_REG |=(1<<pin);
 120:	28 b3       	in	r18, 0x18	; 24
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <digitalWrightpin+0x52>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <digitalWrightpin+0x4e>
 130:	82 2b       	or	r24, r18
 132:	88 bb       	out	0x18, r24	; 24
 134:	08 95       	ret
	
	else if((port ==portB) && (states==LOW))
 136:	41 11       	cpse	r20, r1
 138:	45 c0       	rjmp	.+138    	; 0x1c4 <digitalWrightpin+0xea>
	
	PORTB_REG &=~(1<<pin);
 13a:	28 b3       	in	r18, 0x18	; 24
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <digitalWrightpin+0x6c>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <digitalWrightpin+0x68>
 14a:	80 95       	com	r24
 14c:	82 23       	and	r24, r18
 14e:	88 bb       	out	0x18, r24	; 24
 150:	08 95       	ret
	
	//PORTC
	if((port ==portC) &&(states== HIGH))
 152:	83 30       	cpi	r24, 0x03	; 3
 154:	d9 f4       	brne	.+54     	; 0x18c <digitalWrightpin+0xb2>
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	59 f4       	brne	.+22     	; 0x170 <digitalWrightpin+0x96>
	
	PORTC_REG |=(1<<pin);
 15a:	25 b3       	in	r18, 0x15	; 21
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <digitalWrightpin+0x8c>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <digitalWrightpin+0x88>
 16a:	82 2b       	or	r24, r18
 16c:	85 bb       	out	0x15, r24	; 21
 16e:	08 95       	ret
	
	else if((port ==portC)&&(states==LOW))
 170:	41 11       	cpse	r20, r1
 172:	28 c0       	rjmp	.+80     	; 0x1c4 <digitalWrightpin+0xea>
	
	PORTC_REG &=~(1<<pin);
 174:	25 b3       	in	r18, 0x15	; 21
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <digitalWrightpin+0xa6>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <digitalWrightpin+0xa2>
 184:	80 95       	com	r24
 186:	82 23       	and	r24, r18
 188:	85 bb       	out	0x15, r24	; 21
 18a:	08 95       	ret
	
	//PORTD
	if((port ==portD) &&(states== HIGH))
 18c:	84 30       	cpi	r24, 0x04	; 4
 18e:	d1 f4       	brne	.+52     	; 0x1c4 <digitalWrightpin+0xea>
 190:	41 30       	cpi	r20, 0x01	; 1
 192:	59 f4       	brne	.+22     	; 0x1aa <digitalWrightpin+0xd0>
	
	PORTD_REG |=(1<<pin);
 194:	22 b3       	in	r18, 0x12	; 18
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <digitalWrightpin+0xc6>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <digitalWrightpin+0xc2>
 1a4:	82 2b       	or	r24, r18
 1a6:	82 bb       	out	0x12, r24	; 18
 1a8:	08 95       	ret
	
	else if((port ==portD)&&(states==LOW))
 1aa:	41 11       	cpse	r20, r1
 1ac:	0b c0       	rjmp	.+22     	; 0x1c4 <digitalWrightpin+0xea>
	
	PORTD_REG &=~(1<<pin);
 1ae:	22 b3       	in	r18, 0x12	; 18
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <digitalWrightpin+0xe0>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <digitalWrightpin+0xdc>
 1be:	80 95       	com	r24
 1c0:	82 23       	and	r24, r18
 1c2:	82 bb       	out	0x12, r24	; 18
 1c4:	08 95       	ret

000001c6 <digitalWrightport>:
}

void digitalWrightport(u8 port,u8 states){
	
	//	PORTA
	if((port ==portA ) && (states==HIGH))
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	69 f4       	brne	.+26     	; 0x1e4 <digitalWrightport+0x1e>
 1ca:	61 30       	cpi	r22, 0x01	; 1
 1cc:	19 f4       	brne	.+6      	; 0x1d4 <digitalWrightport+0xe>
		PORTA_REG =0xff;
 1ce:	9f ef       	ldi	r25, 0xFF	; 255
 1d0:	9b bb       	out	0x1b, r25	; 27
 1d2:	1e c0       	rjmp	.+60     	; 0x210 <digitalWrightport+0x4a>
		
   else if((port ==portA ) &&(states==LOW)) 
 1d4:	61 11       	cpse	r22, r1
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <digitalWrightport+0x16>
		PORTA_REG =0x00;
 1d8:	1b ba       	out	0x1b, r1	; 27
 1da:	1a c0       	rjmp	.+52     	; 0x210 <digitalWrightport+0x4a>
		
	else if	((port ==portA ) && ( (states!=LOW)&&(states!=HIGH) )  )
 1dc:	62 30       	cpi	r22, 0x02	; 2
 1de:	c0 f0       	brcs	.+48     	; 0x210 <digitalWrightport+0x4a>
	PORTA_REG=states;
 1e0:	6b bb       	out	0x1b, r22	; 27
 1e2:	16 c0       	rjmp	.+44     	; 0x210 <digitalWrightport+0x4a>
		
//PORTB
     if((port ==portB ) && (states==HIGH))
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	49 f4       	brne	.+18     	; 0x1fa <digitalWrightport+0x34>
 1e8:	61 30       	cpi	r22, 0x01	; 1
 1ea:	19 f4       	brne	.+6      	; 0x1f2 <digitalWrightport+0x2c>
	PORTB_REG =0xff;
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	88 bb       	out	0x18, r24	; 24
 1f0:	08 95       	ret

	else if((port ==portB ) &&(states==LOW))
 1f2:	61 11       	cpse	r22, r1
 1f4:	17 c0       	rjmp	.+46     	; 0x224 <digitalWrightport+0x5e>
	PORTB_REG =0x00;
 1f6:	18 ba       	out	0x18, r1	; 24
 1f8:	08 95       	ret

//PORTC
if((port ==portC ) && (states==HIGH))
 1fa:	83 30       	cpi	r24, 0x03	; 3
 1fc:	49 f4       	brne	.+18     	; 0x210 <digitalWrightport+0x4a>
 1fe:	61 30       	cpi	r22, 0x01	; 1
 200:	19 f4       	brne	.+6      	; 0x208 <digitalWrightport+0x42>
PORTC_REG =0xff;
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	85 bb       	out	0x15, r24	; 21
 206:	08 95       	ret

else if((port ==portC ) &&(states==LOW))
 208:	61 11       	cpse	r22, r1
 20a:	0c c0       	rjmp	.+24     	; 0x224 <digitalWrightport+0x5e>
PORTC_REG =0x00;
 20c:	15 ba       	out	0x15, r1	; 21
 20e:	08 95       	ret

//PORTD

if((port ==portD ) && (states==HIGH))
 210:	84 30       	cpi	r24, 0x04	; 4
 212:	41 f4       	brne	.+16     	; 0x224 <digitalWrightport+0x5e>
 214:	61 30       	cpi	r22, 0x01	; 1
 216:	19 f4       	brne	.+6      	; 0x21e <digitalWrightport+0x58>
PORTD_REG =0xff;
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	82 bb       	out	0x12, r24	; 18
 21c:	08 95       	ret

else if((port ==portD ) &&(states==LOW))
 21e:	61 11       	cpse	r22, r1
 220:	01 c0       	rjmp	.+2      	; 0x224 <digitalWrightport+0x5e>
PORTD_REG =0x00;
 222:	12 ba       	out	0x12, r1	; 18
 224:	08 95       	ret

00000226 <LCD_commend>:
#include "LCD.h"
#include "RegDIO.h"
#include <util/delay.h>

void LCD_commend(u8 comnd ,u8 states)
{
 226:	cf 93       	push	r28
 228:	c8 2f       	mov	r28, r24
	if(states== Eight_bits)
 22a:	62 30       	cpi	r22, 0x02	; 2
 22c:	19 f5       	brne	.+70     	; 0x274 <LCD_commend+0x4e>
	{
	digitalWrightport(data,comnd);
 22e:	68 2f       	mov	r22, r24
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <digitalWrightport>
	digitalWrightpin(command,RS,LOW);
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
	digitalWrightpin(command,RW,LOW);
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
	digitalWrightpin(command,E,HIGH);
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	62 e0       	ldi	r22, 0x02	; 2
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	85 e0       	ldi	r24, 0x05	; 5
 256:	8a 95       	dec	r24
 258:	f1 f7       	brne	.-4      	; 0x256 <LCD_commend+0x30>
 25a:	00 00       	nop
	_delay_us(1);
	digitalWrightpin(command,E,LOW);
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	62 e0       	ldi	r22, 0x02	; 2
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
 266:	8f e8       	ldi	r24, 0x8F	; 143
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <LCD_commend+0x44>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <LCD_commend+0x4a>
 270:	00 00       	nop
 272:	43 c0       	rjmp	.+134    	; 0x2fa <LCD_commend+0xd4>
	_delay_us(100);
	
	}
	
	else if(states== Four_bits)
 274:	61 30       	cpi	r22, 0x01	; 1
 276:	09 f0       	breq	.+2      	; 0x27a <LCD_commend+0x54>
 278:	40 c0       	rjmp	.+128    	; 0x2fa <LCD_commend+0xd4>
		
		{
		digitalWrightport(datacomm,( (datacomm&0x0f) | (comnd&0xf0) ) );
 27a:	68 2f       	mov	r22, r24
 27c:	60 7f       	andi	r22, 0xF0	; 240
 27e:	63 60       	ori	r22, 0x03	; 3
 280:	83 e0       	ldi	r24, 0x03	; 3
 282:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <digitalWrightport>
		digitalWrightpin(datacomm,RS,LOW);
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
		digitalWrightpin(datacomm,RW,LOW);
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
		digitalWrightpin(datacomm,E,HIGH);
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
 2a4:	95 e0       	ldi	r25, 0x05	; 5
 2a6:	9a 95       	dec	r25
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <LCD_commend+0x80>
 2aa:	00 00       	nop
		_delay_us(1);
		digitalWrightpin(datacomm,E,LOW);
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	62 e0       	ldi	r22, 0x02	; 2
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
 2b6:	8f e8       	ldi	r24, 0x8F	; 143
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCD_commend+0x94>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <LCD_commend+0x9a>
 2c0:	00 00       	nop
		_delay_us(100);
		digitalWrightport(datacomm,((datacomm&0x0f)|(comnd<<4) ));
 2c2:	90 e1       	ldi	r25, 0x10	; 16
 2c4:	c9 9f       	mul	r28, r25
 2c6:	b0 01       	movw	r22, r0
 2c8:	11 24       	eor	r1, r1
 2ca:	63 60       	ori	r22, 0x03	; 3
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <digitalWrightport>
		digitalWrightpin(datacomm,E,HIGH);
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
 2dc:	85 e0       	ldi	r24, 0x05	; 5
 2de:	8a 95       	dec	r24
 2e0:	f1 f7       	brne	.-4      	; 0x2de <LCD_commend+0xb8>
 2e2:	00 00       	nop
		_delay_us(1);
		digitalWrightpin(datacomm,E,LOW);
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	62 e0       	ldi	r22, 0x02	; 2
 2e8:	83 e0       	ldi	r24, 0x03	; 3
 2ea:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
 2ee:	8f e8       	ldi	r24, 0x8F	; 143
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <LCD_commend+0xcc>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <LCD_commend+0xd2>
 2f8:	00 00       	nop
		_delay_us(100);
		
	}
	
}
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <LCD_data>:


void LCD_data(u8 statment,u8 states){
 2fe:	cf 93       	push	r28
 300:	c8 2f       	mov	r28, r24
	
	if(states== Eight_bits)
 302:	62 30       	cpi	r22, 0x02	; 2
 304:	19 f5       	brne	.+70     	; 0x34c <LCD_data+0x4e>
	{
	digitalWrightport(data,statment);
 306:	68 2f       	mov	r22, r24
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <digitalWrightport>
	digitalWrightpin(command,RS,HIGH);
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
	digitalWrightpin(command,RW,LOW);
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
	digitalWrightpin(command,E,HIGH);
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	62 e0       	ldi	r22, 0x02	; 2
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
 32c:	85 e0       	ldi	r24, 0x05	; 5
 32e:	8a 95       	dec	r24
 330:	f1 f7       	brne	.-4      	; 0x32e <LCD_data+0x30>
 332:	00 00       	nop
	_delay_us(1);
	digitalWrightpin(command,E,LOW);
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	62 e0       	ldi	r22, 0x02	; 2
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
 33e:	8f e8       	ldi	r24, 0x8F	; 143
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <LCD_data+0x44>
 346:	00 c0       	rjmp	.+0      	; 0x348 <LCD_data+0x4a>
 348:	00 00       	nop
 34a:	43 c0       	rjmp	.+134    	; 0x3d2 <LCD_data+0xd4>
	_delay_us(100);
	}
	
	else if(states== Four_bits){
 34c:	61 30       	cpi	r22, 0x01	; 1
 34e:	09 f0       	breq	.+2      	; 0x352 <LCD_data+0x54>
 350:	40 c0       	rjmp	.+128    	; 0x3d2 <LCD_data+0xd4>
		
		
		digitalWrightport(datacomm,((datacomm&0x0f)|(statment&0xf0)));
 352:	68 2f       	mov	r22, r24
 354:	60 7f       	andi	r22, 0xF0	; 240
 356:	63 60       	ori	r22, 0x03	; 3
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <digitalWrightport>
		digitalWrightpin(datacomm,RS,HIGH);
 35e:	41 e0       	ldi	r20, 0x01	; 1
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	83 e0       	ldi	r24, 0x03	; 3
 364:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
		digitalWrightpin(datacomm,RW,LOW);
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
		digitalWrightpin(datacomm,E,HIGH);
 372:	41 e0       	ldi	r20, 0x01	; 1
 374:	62 e0       	ldi	r22, 0x02	; 2
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
 37c:	95 e0       	ldi	r25, 0x05	; 5
 37e:	9a 95       	dec	r25
 380:	f1 f7       	brne	.-4      	; 0x37e <LCD_data+0x80>
 382:	00 00       	nop
		_delay_us(1);
		digitalWrightpin(datacomm,E,LOW);
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	62 e0       	ldi	r22, 0x02	; 2
 388:	83 e0       	ldi	r24, 0x03	; 3
 38a:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
 38e:	8f e8       	ldi	r24, 0x8F	; 143
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <LCD_data+0x94>
 396:	00 c0       	rjmp	.+0      	; 0x398 <LCD_data+0x9a>
 398:	00 00       	nop
		_delay_us(100);
		digitalWrightport(datacomm,((datacomm&0x0f)|(statment<<4)));
 39a:	90 e1       	ldi	r25, 0x10	; 16
 39c:	c9 9f       	mul	r28, r25
 39e:	b0 01       	movw	r22, r0
 3a0:	11 24       	eor	r1, r1
 3a2:	63 60       	ori	r22, 0x03	; 3
 3a4:	83 e0       	ldi	r24, 0x03	; 3
 3a6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <digitalWrightport>
		digitalWrightpin(datacomm,E,HIGH);
 3aa:	41 e0       	ldi	r20, 0x01	; 1
 3ac:	62 e0       	ldi	r22, 0x02	; 2
 3ae:	83 e0       	ldi	r24, 0x03	; 3
 3b0:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
 3b4:	85 e0       	ldi	r24, 0x05	; 5
 3b6:	8a 95       	dec	r24
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <LCD_data+0xb8>
 3ba:	00 00       	nop
		_delay_us(1);
		digitalWrightpin(datacomm,E,LOW);
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	62 e0       	ldi	r22, 0x02	; 2
 3c0:	83 e0       	ldi	r24, 0x03	; 3
 3c2:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
 3c6:	8f e8       	ldi	r24, 0x8F	; 143
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCD_data+0xcc>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <LCD_data+0xd2>
 3d0:	00 00       	nop
		
		
	}
	
	
}
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <LCD_initalizaion>:


void LCD_initalizaion(u8 states){
	if(states== Eight_bits)
 3d6:	82 30       	cpi	r24, 0x02	; 2
 3d8:	51 f5       	brne	.+84     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	{
		
	
	pinModeport(data,OUTPUT);
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 41 00 	call	0x82	; 0x82 <pinModeport>
	pinModeport(command,OUTPUT);
 3e2:	61 e0       	ldi	r22, 0x01	; 1
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	0e 94 41 00 	call	0x82	; 0x82 <pinModeport>

	digitalWrightpin(data,E,LOW);
 3ea:	40 e0       	ldi	r20, 0x00	; 0
 3ec:	62 e0       	ldi	r22, 0x02	; 2
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f4:	8f e5       	ldi	r24, 0x5F	; 95
 3f6:	9a ee       	ldi	r25, 0xEA	; 234
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCD_initalizaion+0x22>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_initalizaion+0x28>
 3fe:	00 00       	nop
	_delay_ms(15);
	LCD_commend(0x38,Eight_bits);
 400:	62 e0       	ldi	r22, 0x02	; 2
 402:	88 e3       	ldi	r24, 0x38	; 56
 404:	0e 94 13 01 	call	0x226	; 0x226 <LCD_commend>
	LCD_commend(0x0E,Eight_bits);
 408:	62 e0       	ldi	r22, 0x02	; 2
 40a:	8e e0       	ldi	r24, 0x0E	; 14
 40c:	0e 94 13 01 	call	0x226	; 0x226 <LCD_commend>
	LCD_commend(0x01,Eight_bits);
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 13 01 	call	0x226	; 0x226 <LCD_commend>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 418:	8f e9       	ldi	r24, 0x9F	; 159
 41a:	9f e0       	ldi	r25, 0x0F	; 15
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 422:	00 00       	nop
	_delay_us(1000);
	LCD_commend(0x06,Eight_bits);
 424:	62 e0       	ldi	r22, 0x02	; 2
 426:	86 e0       	ldi	r24, 0x06	; 6
 428:	0e 94 13 01 	call	0x226	; 0x226 <LCD_commend>
 42c:	08 95       	ret
	
	}
	else if(states== Four_bits){
 42e:	81 30       	cpi	r24, 0x01	; 1
 430:	69 f5       	brne	.+90     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		
		 pinModeport(datacomm,OUTPUT);
 432:	61 e0       	ldi	r22, 0x01	; 1
 434:	83 e0       	ldi	r24, 0x03	; 3
 436:	0e 94 41 00 	call	0x82	; 0x82 <pinModeport>
		 digitalWrightpin(datacomm,E,LOW);
 43a:	40 e0       	ldi	r20, 0x00	; 0
 43c:	62 e0       	ldi	r22, 0x02	; 2
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	0e 94 6d 00 	call	0xda	; 0xda <digitalWrightpin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 444:	8f e5       	ldi	r24, 0x5F	; 95
 446:	9a ee       	ldi	r25, 0xEA	; 234
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44e:	00 00       	nop
		 _delay_ms(15);
		 LCD_commend(0x33,Four_bits);
 450:	61 e0       	ldi	r22, 0x01	; 1
 452:	83 e3       	ldi	r24, 0x33	; 51
 454:	0e 94 13 01 	call	0x226	; 0x226 <LCD_commend>
		 LCD_commend(0x32,Four_bits);
 458:	61 e0       	ldi	r22, 0x01	; 1
 45a:	82 e3       	ldi	r24, 0x32	; 50
 45c:	0e 94 13 01 	call	0x226	; 0x226 <LCD_commend>
		 LCD_commend(0x28,Four_bits);
 460:	61 e0       	ldi	r22, 0x01	; 1
 462:	88 e2       	ldi	r24, 0x28	; 40
 464:	0e 94 13 01 	call	0x226	; 0x226 <LCD_commend>
		 LCD_commend(0x0E,Four_bits);
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	8e e0       	ldi	r24, 0x0E	; 14
 46c:	0e 94 13 01 	call	0x226	; 0x226 <LCD_commend>
		 LCD_commend(0x01,Four_bits);
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	0e 94 13 01 	call	0x226	; 0x226 <LCD_commend>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 478:	8f e9       	ldi	r24, 0x9F	; 159
 47a:	9f e0       	ldi	r25, 0x0F	; 15
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 480:	00 c0       	rjmp	.+0      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 482:	00 00       	nop
		 _delay_us(1000);
		 LCD_commend(0x06,Four_bits);
 484:	61 e0       	ldi	r22, 0x01	; 1
 486:	86 e0       	ldi	r24, 0x06	; 6
 488:	0e 94 13 01 	call	0x226	; 0x226 <LCD_commend>
 48c:	08 95       	ret

0000048e <LCD_goto>:
	}
	
	
}

void LCD_goto(u8 x, u8 y,u8 states){
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	00 d0       	rcall	.+0      	; 0x494 <LCD_goto+0x6>
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62
	u8 arr[]={0x80,0xC0};
 498:	90 e8       	ldi	r25, 0x80	; 128
 49a:	99 83       	std	Y+1, r25	; 0x01
 49c:	90 ec       	ldi	r25, 0xC0	; 192
 49e:	9a 83       	std	Y+2, r25	; 0x02
		if(states==Eight_bits){
 4a0:	42 30       	cpi	r20, 0x02	; 2
 4a2:	51 f4       	brne	.+20     	; 0x4b8 <LCD_goto+0x2a>
	LCD_commend(arr[y-1]+x-1,Eight_bits);
 4a4:	fe 01       	movw	r30, r28
 4a6:	e6 0f       	add	r30, r22
 4a8:	f1 1d       	adc	r31, r1
 4aa:	81 50       	subi	r24, 0x01	; 1
 4ac:	90 81       	ld	r25, Z
 4ae:	62 e0       	ldi	r22, 0x02	; 2
 4b0:	89 0f       	add	r24, r25
 4b2:	0e 94 13 01 	call	0x226	; 0x226 <LCD_commend>
 4b6:	0b c0       	rjmp	.+22     	; 0x4ce <LCD_goto+0x40>
		}
		
		else if(states==Four_bits){
 4b8:	41 30       	cpi	r20, 0x01	; 1
 4ba:	49 f4       	brne	.+18     	; 0x4ce <LCD_goto+0x40>
			LCD_commend(arr[y-1]+x-1,Four_bits);
 4bc:	fe 01       	movw	r30, r28
 4be:	e6 0f       	add	r30, r22
 4c0:	f1 1d       	adc	r31, r1
 4c2:	81 50       	subi	r24, 0x01	; 1
 4c4:	90 81       	ld	r25, Z
 4c6:	61 e0       	ldi	r22, 0x01	; 1
 4c8:	89 0f       	add	r24, r25
 4ca:	0e 94 13 01 	call	0x226	; 0x226 <LCD_commend>
		}
}
 4ce:	0f 90       	pop	r0
 4d0:	0f 90       	pop	r0
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	08 95       	ret

000004d8 <LCD_print>:


void LCD_print(u8 *str ,u8 states){
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	8c 01       	movw	r16, r24
	
	if (states==Eight_bits)
 4e0:	62 30       	cpi	r22, 0x02	; 2
 4e2:	81 f4       	brne	.+32     	; 0x504 <LCD_print+0x2c>
	{
		u8 i=0;
		
		while(str[i]!=0)
 4e4:	fc 01       	movw	r30, r24
 4e6:	80 81       	ld	r24, Z
 4e8:	88 23       	and	r24, r24
 4ea:	e9 f0       	breq	.+58     	; 0x526 <LCD_print+0x4e>
 4ec:	c0 e0       	ldi	r28, 0x00	; 0
		{
			LCD_data(str[i],Eight_bits);
 4ee:	62 e0       	ldi	r22, 0x02	; 2
 4f0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LCD_data>
			i++;
 4f4:	cf 5f       	subi	r28, 0xFF	; 255
	
	if (states==Eight_bits)
	{
		u8 i=0;
		
		while(str[i]!=0)
 4f6:	f8 01       	movw	r30, r16
 4f8:	ec 0f       	add	r30, r28
 4fa:	f1 1d       	adc	r31, r1
 4fc:	80 81       	ld	r24, Z
 4fe:	81 11       	cpse	r24, r1
 500:	f6 cf       	rjmp	.-20     	; 0x4ee <LCD_print+0x16>
 502:	11 c0       	rjmp	.+34     	; 0x526 <LCD_print+0x4e>
			LCD_data(str[i],Eight_bits);
			i++;
		}
	}
		
		else if (states==Four_bits)
 504:	61 30       	cpi	r22, 0x01	; 1
 506:	79 f4       	brne	.+30     	; 0x526 <LCD_print+0x4e>
		{
			u8 i=0;
			
			while(str[i]!=0)
 508:	fc 01       	movw	r30, r24
 50a:	80 81       	ld	r24, Z
 50c:	88 23       	and	r24, r24
 50e:	59 f0       	breq	.+22     	; 0x526 <LCD_print+0x4e>
 510:	c0 e0       	ldi	r28, 0x00	; 0
			{
				
				LCD_data(str[i],Four_bits);
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LCD_data>
				i++;
 518:	cf 5f       	subi	r28, 0xFF	; 255
		
		else if (states==Four_bits)
		{
			u8 i=0;
			
			while(str[i]!=0)
 51a:	f8 01       	movw	r30, r16
 51c:	ec 0f       	add	r30, r28
 51e:	f1 1d       	adc	r31, r1
 520:	80 81       	ld	r24, Z
 522:	81 11       	cpse	r24, r1
 524:	f6 cf       	rjmp	.-20     	; 0x512 <LCD_print+0x3a>
			}
		
	}
	
	
}
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	08 95       	ret

0000052e <main>:
#include <avr/io.h>
#include "LCD.h"

int main(void)
{
	LCD_initalizaion(Eight_bits);
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_initalizaion>
	
	LCD_goto(1,1,Eight_bits);
 534:	42 e0       	ldi	r20, 0x02	; 2
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_goto>
	LCD_print("Mazen",Eight_bits);
 53e:	62 e0       	ldi	r22, 0x02	; 2
 540:	80 e6       	ldi	r24, 0x60	; 96
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_print>
   LCD_goto(1,2,Eight_bits);
 548:	42 e0       	ldi	r20, 0x02	; 2
 54a:	62 e0       	ldi	r22, 0x02	; 2
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_goto>

   LCD_print("Sadek",Eight_bits);
 552:	62 e0       	ldi	r22, 0x02	; 2
 554:	86 e6       	ldi	r24, 0x66	; 102
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_print>
	
	LCD_initalizaion(Four_bits);
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_initalizaion>
	
	LCD_goto(1,1,Four_bits);
 562:	41 e0       	ldi	r20, 0x01	; 1
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_goto>
	LCD_print("Mazen",Four_bits);
 56c:	61 e0       	ldi	r22, 0x01	; 1
 56e:	80 e6       	ldi	r24, 0x60	; 96
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_print>
	LCD_goto(1,2,Four_bits);
 576:	41 e0       	ldi	r20, 0x01	; 1
 578:	62 e0       	ldi	r22, 0x02	; 2
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_goto>

	LCD_print("Sadek",Four_bits);
 580:	61 e0       	ldi	r22, 0x01	; 1
 582:	86 e6       	ldi	r24, 0x66	; 102
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_print>
 58a:	ff cf       	rjmp	.-2      	; 0x58a <main+0x5c>

0000058c <_exit>:
 58c:	f8 94       	cli

0000058e <__stop_program>:
 58e:	ff cf       	rjmp	.-2      	; 0x58e <__stop_program>
