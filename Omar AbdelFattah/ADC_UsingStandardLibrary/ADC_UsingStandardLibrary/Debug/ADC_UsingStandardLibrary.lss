
ADC_UsingStandardLibrary.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000000f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000155  00000000  00000000  00000887  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000104  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021d  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000d00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000128  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000002b  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4c 00 	jmp	0x98	; 0x98 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
	int result;
	DDRA&=~(1<<PINA0);
  6c:	d0 98       	cbi	0x1a, 0	; 26
	DDRD=0xFF;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	81 bb       	out	0x11, r24	; 17
	ADCSRA|= 1<<ADEN; // enable ADC in register ADC control & status register A
  72:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA|=1<<ADPS2; //enable a prescaler in internal/external clock , datasheet says best freq for 8-bit is between 50Khz and 200Khz ,1M/50K=20 , use ps=16
  74:	32 9a       	sbi	0x06, 2	; 6
	ADMUX&=~(0x0F);	//use ADC0 then no change
  76:	87 b1       	in	r24, 0x07	; 7
  78:	80 7f       	andi	r24, 0xF0	; 240
  7a:	87 b9       	out	0x07, r24	; 7
	ADMUX|=1<<REFS0; // AVCC with external capacitor at AREF pin
  7c:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX|=1<<ADLAR; // choose the higher 8-bit to be in data register high  (from 2 to 9 ), this is an approximation to ignore first 2-bits
  7e:	3d 9a       	sbi	0x07, 5	; 7
    while(1)
    {
		
		
		ADMUX&=~(0x0F);	//use ADC0 then no change
  80:	87 b1       	in	r24, 0x07	; 7
  82:	80 7f       	andi	r24, 0xF0	; 240
  84:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADSC); //start coversion 
  86:	36 9a       	sbi	0x06, 6	; 6
		while (ADCSRA&(1<<ADIF)==0); //wait until interrupt flag be set ( conversion has end) 
  88:	86 b1       	in	r24, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	8a 95       	dec	r24
  8e:	f1 f7       	brne	.-4      	; 0x8c <main+0x20>
  90:	00 00       	nop
		_delay_us(10);
		result=ADCH; 
  92:	85 b1       	in	r24, 0x05	; 5
		PORTD=result;
  94:	82 bb       	out	0x12, r24	; 18
  96:	f4 cf       	rjmp	.-24     	; 0x80 <main+0x14>

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
