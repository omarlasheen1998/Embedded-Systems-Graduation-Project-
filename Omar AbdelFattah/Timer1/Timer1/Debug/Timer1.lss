
Timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000cf  00000000  00000000  000008c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000007a  00000000  00000000  00000996  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000177  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000cb  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000032  00000000  00000000  00000c73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include "drivers.h"

int main(void)
{
	DIO_DDRA=0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DIO_DDRD=0xFF;
  70:	81 bb       	out	0x11, r24	; 17
	DIO_PORTA|=0x00;
	DIO_PORTD=0x00;
  72:	12 ba       	out	0x12, r1	; 18
	TCCR1B|=   1<<CS11;
  74:	8e b5       	in	r24, 0x2e	; 46
  76:	82 60       	ori	r24, 0x02	; 2
  78:	8e bd       	out	0x2e, r24	; 46
	int LEDNUMBER [2]={3,0};
  7a:	60 e0       	ldi	r22, 0x00	; 0
  7c:	70 e0       	ldi	r23, 0x00	; 0
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	30 e0       	ldi	r19, 0x00	; 0
    while(1)
    {
		
         if (TCNT1 >25000){
			 TCNT1=0;
			  DIO_PORTD = 1 <<LEDNUMBER[0];
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	50 e0       	ldi	r21, 0x00	; 0
			  LEDNUMBER[0]++;
			  if (LEDNUMBER[0]>7 ){
				  LEDNUMBER[0]=0;
				  DIO_PORTA = 1 <<LEDNUMBER[1];
				  LEDNUMBER[1]++;
				  if (LEDNUMBER[1]>4 ) LEDNUMBER[1]=0;
  86:	e0 e0       	ldi	r30, 0x00	; 0
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	02 c0       	rjmp	.+4      	; 0x90 <main+0x24>
  8c:	bf 01       	movw	r22, r30
{
	DIO_DDRA=0xFF;
	DIO_DDRD=0xFF;
	DIO_PORTA|=0x00;
	DIO_PORTD=0x00;
	TCCR1B|=   1<<CS11;
  8e:	9f 01       	movw	r18, r30
  90:	a2 2f       	mov	r26, r18
	int LEDNUMBER [2]={3,0};
    while(1)
    {
		
         if (TCNT1 >25000){
  92:	8c b5       	in	r24, 0x2c	; 44
  94:	9d b5       	in	r25, 0x2d	; 45
  96:	b1 e6       	ldi	r27, 0x61	; 97
  98:	89 3a       	cpi	r24, 0xA9	; 169
  9a:	9b 07       	cpc	r25, r27
  9c:	d0 f3       	brcs	.-12     	; 0x92 <main+0x26>
			 TCNT1=0;
  9e:	1d bc       	out	0x2d, r1	; 45
  a0:	1c bc       	out	0x2c, r1	; 44
			  DIO_PORTD = 1 <<LEDNUMBER[0];
  a2:	ca 01       	movw	r24, r20
  a4:	02 c0       	rjmp	.+4      	; 0xaa <main+0x3e>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	aa 95       	dec	r26
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <main+0x3a>
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	2f 5f       	subi	r18, 0xFF	; 255
  b2:	3f 4f       	sbci	r19, 0xFF	; 255
			  LEDNUMBER[0]++;
			  if (LEDNUMBER[0]>7 ){
  b4:	28 30       	cpi	r18, 0x08	; 8
  b6:	31 05       	cpc	r19, r1
  b8:	5c f3       	brlt	.-42     	; 0x90 <main+0x24>
				  LEDNUMBER[0]=0;
				  DIO_PORTA = 1 <<LEDNUMBER[1];
  ba:	ca 01       	movw	r24, r20
  bc:	06 2e       	mov	r0, r22
  be:	02 c0       	rjmp	.+4      	; 0xc4 <main+0x58>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	0a 94       	dec	r0
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <main+0x54>
  c8:	8b bb       	out	0x1b, r24	; 27
				  LEDNUMBER[1]++;
  ca:	6f 5f       	subi	r22, 0xFF	; 255
  cc:	7f 4f       	sbci	r23, 0xFF	; 255
				  if (LEDNUMBER[1]>4 ) LEDNUMBER[1]=0;
  ce:	65 30       	cpi	r22, 0x05	; 5
  d0:	71 05       	cpc	r23, r1
  d2:	e4 f6       	brge	.-72     	; 0x8c <main+0x20>
  d4:	dc cf       	rjmp	.-72     	; 0x8e <main+0x22>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
