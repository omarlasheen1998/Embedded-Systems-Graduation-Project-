
LCD_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000076  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000031b  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014a  00000000  00000000  00000c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000323  00000000  00000000  00000dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000010f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000171  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  000012d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  00001311  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 83 00 	call	0x106	; 0x106 <main>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Peek_A_Boo>:
	}
	DataDir_MrLCDsCrib=0xFF;
}
void Peek_A_Boo(void)
{
	MrLCDsControl |= 1<<LCDEN;
  6c:	95 9a       	sbi	0x12, 5	; 18
asm volatile ("nop");
  6e:	00 00       	nop
asm volatile ("nop");
  70:	00 00       	nop
MrLCDsControl &= ~1<<LCDEN;
  72:	82 b3       	in	r24, 0x12	; 18
  74:	80 7c       	andi	r24, 0xC0	; 192
  76:	82 bb       	out	0x12, r24	; 18
}
  78:	08 95       	ret

0000007a <Check_IF_MrLCD_isBusy>:
	}       
}

void Check_IF_MrLCD_isBusy (void)
{
	DataDir_MrLCDsCrib=0; //tell Mcu to be input
  7a:	17 ba       	out	0x17, r1	; 23
	MrLCDsControl |=1<<ReadWriteBar; // tell LCD to be in read mode
  7c:	97 9a       	sbi	0x12, 7	; 18
	MrLCDsControl &=~(1<<DataCommandBar); //tell lcd to give us a command
  7e:	92 98       	cbi	0x12, 2	; 18
	while (MrLCDsCrib>=0x80) //busy means D7  =1
  80:	c7 9b       	sbis	0x18, 7	; 24
  82:	04 c0       	rjmp	.+8      	; 0x8c <Check_IF_MrLCD_isBusy+0x12>
	{
		Peek_A_Boo();
  84:	0e 94 36 00 	call	0x6c	; 0x6c <Peek_A_Boo>
void Check_IF_MrLCD_isBusy (void)
{
	DataDir_MrLCDsCrib=0; //tell Mcu to be input
	MrLCDsControl |=1<<ReadWriteBar; // tell LCD to be in read mode
	MrLCDsControl &=~(1<<DataCommandBar); //tell lcd to give us a command
	while (MrLCDsCrib>=0x80) //busy means D7  =1
  88:	c7 99       	sbic	0x18, 7	; 24
  8a:	fc cf       	rjmp	.-8      	; 0x84 <Check_IF_MrLCD_isBusy+0xa>
	{
		Peek_A_Boo();
	}
	DataDir_MrLCDsCrib=0xFF;
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	87 bb       	out	0x17, r24	; 23
}
  90:	08 95       	ret

00000092 <Send_A_Command>:
asm volatile ("nop");
asm volatile ("nop");
MrLCDsControl &= ~1<<LCDEN;
}
void Send_A_Command (unsigned char command)
{
  92:	1f 93       	push	r17
  94:	18 2f       	mov	r17, r24
	Check_IF_MrLCD_isBusy();
  96:	0e 94 3d 00 	call	0x7a	; 0x7a <Check_IF_MrLCD_isBusy>
MrLCDsCrib = command;
  9a:	18 bb       	out	0x18, r17	; 24
MrLCDsControl &= ~ ((1<<ReadWriteBar)|(1<<DataCommandBar));
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	8b 77       	andi	r24, 0x7B	; 123
  a0:	82 bb       	out	0x12, r24	; 18
Peek_A_Boo();
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <Peek_A_Boo>
MrLCDsCrib = 0;
  a6:	18 ba       	out	0x18, r1	; 24
}
  a8:	1f 91       	pop	r17
  aa:	08 95       	ret

000000ac <SendCharacter>:
void SendCharacter (unsigned char character)
{
  ac:	1f 93       	push	r17
  ae:	18 2f       	mov	r17, r24
	Check_IF_MrLCD_isBusy();
  b0:	0e 94 3d 00 	call	0x7a	; 0x7a <Check_IF_MrLCD_isBusy>
MrLCDsCrib = character;
  b4:	18 bb       	out	0x18, r17	; 24
MrLCDsControl &= ~ (1<<ReadWriteBar);
  b6:	97 98       	cbi	0x12, 7	; 18
MrLCDsControl |= 1<<DataCommandBar;
  b8:	92 9a       	sbi	0x12, 2	; 18
Peek_A_Boo();
  ba:	0e 94 36 00 	call	0x6c	; 0x6c <Peek_A_Boo>
MrLCDsCrib = 0;
  be:	18 ba       	out	0x18, r1	; 24
}
  c0:	1f 91       	pop	r17
  c2:	08 95       	ret

000000c4 <LCD_Init>:
void LCD_Init(void){
	DataDirMrLCDsControl |= 1<<LCDEN | 1<<ReadWriteBar | 1<DataCommandBar;
  c4:	81 b3       	in	r24, 0x11	; 17
  c6:	81 6a       	ori	r24, 0xA1	; 161
  c8:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	85 ea       	ldi	r24, 0xA5	; 165
  cc:	9e e0       	ldi	r25, 0x0E	; 14
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_Init+0xa>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_Init+0x10>
  d4:	00 00       	nop
	_delay_ms(15);
	Send_A_Command(0x01);
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 49 00 	call	0x92	; 0x92 <Send_A_Command>
  dc:	83 ef       	ldi	r24, 0xF3	; 243
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_Init+0x1c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_Init+0x22>
  e6:	00 00       	nop
	_delay_ms(2);
	Send_A_Command(0x38);
  e8:	88 e3       	ldi	r24, 0x38	; 56
  ea:	0e 94 49 00 	call	0x92	; 0x92 <Send_A_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	90 e1       	ldi	r25, 0x10	; 16
  f0:	9a 95       	dec	r25
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCD_Init+0x2c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_Init+0x32>
	_delay_us(50);
	Send_A_Command(0b00001110);
  f6:	8e e0       	ldi	r24, 0x0E	; 14
  f8:	0e 94 49 00 	call	0x92	; 0x92 <Send_A_Command>
  fc:	80 e1       	ldi	r24, 0x10	; 16
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_Init+0x3a>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_Init+0x40>
	_delay_us(50);
 104:	08 95       	ret

00000106 <main>:
void Peek_A_Boo(void);
void Send_A_Command (unsigned char command);
void SendCharacter (unsigned char character);
int main(void)
{
	LCD_Init();
 106:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_Init>
	SendCharacter(0x4E);
 10a:	8e e4       	ldi	r24, 0x4E	; 78
 10c:	0e 94 56 00 	call	0xac	; 0xac <SendCharacter>
	SendCharacter(0x4E);
 110:	8e e4       	ldi	r24, 0x4E	; 78
 112:	0e 94 56 00 	call	0xac	; 0xac <SendCharacter>
	SendCharacter(0x4E);
 116:	8e e4       	ldi	r24, 0x4E	; 78
 118:	0e 94 56 00 	call	0xac	; 0xac <SendCharacter>
 11c:	ff cf       	rjmp	.-2      	; 0x11c <main+0x16>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
