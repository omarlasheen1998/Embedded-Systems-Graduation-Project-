
RTOS Mutex.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00002d70  00002e04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003af  00800096  00800096  00002e3a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002e3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002e98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d0  00000000  00000000  00002ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005598  00000000  00000000  000033a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000115f  00000000  00000000  0000893c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000035b6  00000000  00000000  00009a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001090  00000000  00000000  0000d054  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ac9  00000000  00000000  0000e0e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000624a  00000000  00000000  0000fbad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000510  00000000  00000000  00015df7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 45 02 	jmp	0x48a	; 0x48a <__vector_1>
       8:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__vector_2>
       c:	0c 94 93 02 	jmp	0x526	; 0x526 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 6f 07 	jmp	0xede	; 0xede <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__vector_13>
      38:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	24 e0       	ldi	r18, 0x04	; 4
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 34       	cpi	r26, 0x45	; 69
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 91 04 	call	0x922	; 0x922 <main>
      8a:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pinMode>:

}

void Interrupts(void){
	
	sei();
      92:	88 30       	cpi	r24, 0x08	; 8
      94:	08 f0       	brcs	.+2      	; 0x98 <pinMode+0x6>
      96:	5e c0       	rjmp	.+188    	; 0x154 <pinMode+0xc2>
      98:	69 32       	cpi	r22, 0x29	; 41
      9a:	d1 f4       	brne	.+52     	; 0xd0 <pinMode+0x3e>
      9c:	4a b3       	in	r20, 0x1a	; 26
      9e:	9d ec       	ldi	r25, 0xCD	; 205
      a0:	89 9f       	mul	r24, r25
      a2:	91 2d       	mov	r25, r1
      a4:	11 24       	eor	r1, r1
      a6:	96 95       	lsr	r25
      a8:	96 95       	lsr	r25
      aa:	96 95       	lsr	r25
      ac:	99 0f       	add	r25, r25
      ae:	29 2f       	mov	r18, r25
      b0:	22 0f       	add	r18, r18
      b2:	22 0f       	add	r18, r18
      b4:	92 0f       	add	r25, r18
      b6:	89 1b       	sub	r24, r25
      b8:	21 e0       	ldi	r18, 0x01	; 1
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	b9 01       	movw	r22, r18
      be:	02 c0       	rjmp	.+4      	; 0xc4 <pinMode+0x32>
      c0:	66 0f       	add	r22, r22
      c2:	77 1f       	adc	r23, r23
      c4:	8a 95       	dec	r24
      c6:	e2 f7       	brpl	.-8      	; 0xc0 <pinMode+0x2e>
      c8:	cb 01       	movw	r24, r22
      ca:	84 2b       	or	r24, r20
      cc:	8a bb       	out	0x1a, r24	; 26
      ce:	08 95       	ret
      d0:	68 32       	cpi	r22, 0x28	; 40
      d2:	d9 f4       	brne	.+54     	; 0x10a <pinMode+0x78>
      d4:	4a b3       	in	r20, 0x1a	; 26
      d6:	9d ec       	ldi	r25, 0xCD	; 205
      d8:	89 9f       	mul	r24, r25
      da:	91 2d       	mov	r25, r1
      dc:	11 24       	eor	r1, r1
      de:	96 95       	lsr	r25
      e0:	96 95       	lsr	r25
      e2:	96 95       	lsr	r25
      e4:	99 0f       	add	r25, r25
      e6:	29 2f       	mov	r18, r25
      e8:	22 0f       	add	r18, r18
      ea:	22 0f       	add	r18, r18
      ec:	92 0f       	add	r25, r18
      ee:	89 1b       	sub	r24, r25
      f0:	21 e0       	ldi	r18, 0x01	; 1
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	b9 01       	movw	r22, r18
      f6:	02 c0       	rjmp	.+4      	; 0xfc <pinMode+0x6a>
      f8:	66 0f       	add	r22, r22
      fa:	77 1f       	adc	r23, r23
      fc:	8a 95       	dec	r24
      fe:	e2 f7       	brpl	.-8      	; 0xf8 <pinMode+0x66>
     100:	cb 01       	movw	r24, r22
     102:	80 95       	com	r24
     104:	84 23       	and	r24, r20
     106:	8a bb       	out	0x1a, r24	; 26
     108:	08 95       	ret
     10a:	6a 32       	cpi	r22, 0x2A	; 42
     10c:	09 f0       	breq	.+2      	; 0x110 <pinMode+0x7e>
     10e:	49 c1       	rjmp	.+658    	; 0x3a2 <pinMode+0x310>
     110:	4a b3       	in	r20, 0x1a	; 26
     112:	9d ec       	ldi	r25, 0xCD	; 205
     114:	89 9f       	mul	r24, r25
     116:	91 2d       	mov	r25, r1
     118:	11 24       	eor	r1, r1
     11a:	96 95       	lsr	r25
     11c:	96 95       	lsr	r25
     11e:	96 95       	lsr	r25
     120:	99 0f       	add	r25, r25
     122:	29 2f       	mov	r18, r25
     124:	22 0f       	add	r18, r18
     126:	22 0f       	add	r18, r18
     128:	92 0f       	add	r25, r18
     12a:	89 1b       	sub	r24, r25
     12c:	21 e0       	ldi	r18, 0x01	; 1
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	b9 01       	movw	r22, r18
     132:	02 c0       	rjmp	.+4      	; 0x138 <pinMode+0xa6>
     134:	66 0f       	add	r22, r22
     136:	77 1f       	adc	r23, r23
     138:	8a 95       	dec	r24
     13a:	e2 f7       	brpl	.-8      	; 0x134 <pinMode+0xa2>
     13c:	cb 01       	movw	r24, r22
     13e:	96 2f       	mov	r25, r22
     140:	90 95       	com	r25
     142:	94 23       	and	r25, r20
     144:	9a bb       	out	0x1a, r25	; 26
     146:	90 b7       	in	r25, 0x30	; 48
     148:	9b 7f       	andi	r25, 0xFB	; 251
     14a:	90 bf       	out	0x30, r25	; 48
     14c:	9b b3       	in	r25, 0x1b	; 27
     14e:	89 2b       	or	r24, r25
     150:	8b bb       	out	0x1b, r24	; 27
     152:	08 95       	ret
     154:	96 ef       	ldi	r25, 0xF6	; 246
     156:	98 0f       	add	r25, r24
     158:	98 30       	cpi	r25, 0x08	; 8
     15a:	08 f0       	brcs	.+2      	; 0x15e <pinMode+0xcc>
     15c:	5e c0       	rjmp	.+188    	; 0x21a <pinMode+0x188>
     15e:	69 32       	cpi	r22, 0x29	; 41
     160:	d1 f4       	brne	.+52     	; 0x196 <pinMode+0x104>
     162:	47 b3       	in	r20, 0x17	; 23
     164:	9d ec       	ldi	r25, 0xCD	; 205
     166:	89 9f       	mul	r24, r25
     168:	91 2d       	mov	r25, r1
     16a:	11 24       	eor	r1, r1
     16c:	96 95       	lsr	r25
     16e:	96 95       	lsr	r25
     170:	96 95       	lsr	r25
     172:	99 0f       	add	r25, r25
     174:	29 2f       	mov	r18, r25
     176:	22 0f       	add	r18, r18
     178:	22 0f       	add	r18, r18
     17a:	92 0f       	add	r25, r18
     17c:	89 1b       	sub	r24, r25
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	b9 01       	movw	r22, r18
     184:	02 c0       	rjmp	.+4      	; 0x18a <pinMode+0xf8>
     186:	66 0f       	add	r22, r22
     188:	77 1f       	adc	r23, r23
     18a:	8a 95       	dec	r24
     18c:	e2 f7       	brpl	.-8      	; 0x186 <pinMode+0xf4>
     18e:	cb 01       	movw	r24, r22
     190:	84 2b       	or	r24, r20
     192:	87 bb       	out	0x17, r24	; 23
     194:	08 95       	ret
     196:	68 32       	cpi	r22, 0x28	; 40
     198:	d9 f4       	brne	.+54     	; 0x1d0 <pinMode+0x13e>
     19a:	47 b3       	in	r20, 0x17	; 23
     19c:	9d ec       	ldi	r25, 0xCD	; 205
     19e:	89 9f       	mul	r24, r25
     1a0:	91 2d       	mov	r25, r1
     1a2:	11 24       	eor	r1, r1
     1a4:	96 95       	lsr	r25
     1a6:	96 95       	lsr	r25
     1a8:	96 95       	lsr	r25
     1aa:	99 0f       	add	r25, r25
     1ac:	29 2f       	mov	r18, r25
     1ae:	22 0f       	add	r18, r18
     1b0:	22 0f       	add	r18, r18
     1b2:	92 0f       	add	r25, r18
     1b4:	89 1b       	sub	r24, r25
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	b9 01       	movw	r22, r18
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <pinMode+0x130>
     1be:	66 0f       	add	r22, r22
     1c0:	77 1f       	adc	r23, r23
     1c2:	8a 95       	dec	r24
     1c4:	e2 f7       	brpl	.-8      	; 0x1be <pinMode+0x12c>
     1c6:	cb 01       	movw	r24, r22
     1c8:	80 95       	com	r24
     1ca:	84 23       	and	r24, r20
     1cc:	87 bb       	out	0x17, r24	; 23
     1ce:	08 95       	ret
     1d0:	6a 32       	cpi	r22, 0x2A	; 42
     1d2:	09 f0       	breq	.+2      	; 0x1d6 <pinMode+0x144>
     1d4:	e6 c0       	rjmp	.+460    	; 0x3a2 <pinMode+0x310>
     1d6:	47 b3       	in	r20, 0x17	; 23
     1d8:	9d ec       	ldi	r25, 0xCD	; 205
     1da:	89 9f       	mul	r24, r25
     1dc:	91 2d       	mov	r25, r1
     1de:	11 24       	eor	r1, r1
     1e0:	96 95       	lsr	r25
     1e2:	96 95       	lsr	r25
     1e4:	96 95       	lsr	r25
     1e6:	99 0f       	add	r25, r25
     1e8:	29 2f       	mov	r18, r25
     1ea:	22 0f       	add	r18, r18
     1ec:	22 0f       	add	r18, r18
     1ee:	92 0f       	add	r25, r18
     1f0:	89 1b       	sub	r24, r25
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	b9 01       	movw	r22, r18
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <pinMode+0x16c>
     1fa:	66 0f       	add	r22, r22
     1fc:	77 1f       	adc	r23, r23
     1fe:	8a 95       	dec	r24
     200:	e2 f7       	brpl	.-8      	; 0x1fa <pinMode+0x168>
     202:	cb 01       	movw	r24, r22
     204:	96 2f       	mov	r25, r22
     206:	90 95       	com	r25
     208:	94 23       	and	r25, r20
     20a:	97 bb       	out	0x17, r25	; 23
     20c:	90 b7       	in	r25, 0x30	; 48
     20e:	9b 7f       	andi	r25, 0xFB	; 251
     210:	90 bf       	out	0x30, r25	; 48
     212:	98 b3       	in	r25, 0x18	; 24
     214:	89 2b       	or	r24, r25
     216:	88 bb       	out	0x18, r24	; 24
     218:	08 95       	ret
     21a:	9c ee       	ldi	r25, 0xEC	; 236
     21c:	98 0f       	add	r25, r24
     21e:	98 30       	cpi	r25, 0x08	; 8
     220:	08 f0       	brcs	.+2      	; 0x224 <pinMode+0x192>
     222:	5e c0       	rjmp	.+188    	; 0x2e0 <pinMode+0x24e>
     224:	69 32       	cpi	r22, 0x29	; 41
     226:	d1 f4       	brne	.+52     	; 0x25c <pinMode+0x1ca>
     228:	44 b3       	in	r20, 0x14	; 20
     22a:	9d ec       	ldi	r25, 0xCD	; 205
     22c:	89 9f       	mul	r24, r25
     22e:	91 2d       	mov	r25, r1
     230:	11 24       	eor	r1, r1
     232:	96 95       	lsr	r25
     234:	96 95       	lsr	r25
     236:	96 95       	lsr	r25
     238:	99 0f       	add	r25, r25
     23a:	29 2f       	mov	r18, r25
     23c:	22 0f       	add	r18, r18
     23e:	22 0f       	add	r18, r18
     240:	92 0f       	add	r25, r18
     242:	89 1b       	sub	r24, r25
     244:	21 e0       	ldi	r18, 0x01	; 1
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	b9 01       	movw	r22, r18
     24a:	02 c0       	rjmp	.+4      	; 0x250 <pinMode+0x1be>
     24c:	66 0f       	add	r22, r22
     24e:	77 1f       	adc	r23, r23
     250:	8a 95       	dec	r24
     252:	e2 f7       	brpl	.-8      	; 0x24c <pinMode+0x1ba>
     254:	cb 01       	movw	r24, r22
     256:	84 2b       	or	r24, r20
     258:	84 bb       	out	0x14, r24	; 20
     25a:	08 95       	ret
     25c:	68 32       	cpi	r22, 0x28	; 40
     25e:	d9 f4       	brne	.+54     	; 0x296 <pinMode+0x204>
     260:	44 b3       	in	r20, 0x14	; 20
     262:	9d ec       	ldi	r25, 0xCD	; 205
     264:	89 9f       	mul	r24, r25
     266:	91 2d       	mov	r25, r1
     268:	11 24       	eor	r1, r1
     26a:	96 95       	lsr	r25
     26c:	96 95       	lsr	r25
     26e:	96 95       	lsr	r25
     270:	99 0f       	add	r25, r25
     272:	29 2f       	mov	r18, r25
     274:	22 0f       	add	r18, r18
     276:	22 0f       	add	r18, r18
     278:	92 0f       	add	r25, r18
     27a:	89 1b       	sub	r24, r25
     27c:	21 e0       	ldi	r18, 0x01	; 1
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	b9 01       	movw	r22, r18
     282:	02 c0       	rjmp	.+4      	; 0x288 <pinMode+0x1f6>
     284:	66 0f       	add	r22, r22
     286:	77 1f       	adc	r23, r23
     288:	8a 95       	dec	r24
     28a:	e2 f7       	brpl	.-8      	; 0x284 <pinMode+0x1f2>
     28c:	cb 01       	movw	r24, r22
     28e:	80 95       	com	r24
     290:	84 23       	and	r24, r20
     292:	84 bb       	out	0x14, r24	; 20
     294:	08 95       	ret
     296:	6a 32       	cpi	r22, 0x2A	; 42
     298:	09 f0       	breq	.+2      	; 0x29c <pinMode+0x20a>
     29a:	83 c0       	rjmp	.+262    	; 0x3a2 <pinMode+0x310>
     29c:	44 b3       	in	r20, 0x14	; 20
     29e:	9d ec       	ldi	r25, 0xCD	; 205
     2a0:	89 9f       	mul	r24, r25
     2a2:	91 2d       	mov	r25, r1
     2a4:	11 24       	eor	r1, r1
     2a6:	96 95       	lsr	r25
     2a8:	96 95       	lsr	r25
     2aa:	96 95       	lsr	r25
     2ac:	99 0f       	add	r25, r25
     2ae:	29 2f       	mov	r18, r25
     2b0:	22 0f       	add	r18, r18
     2b2:	22 0f       	add	r18, r18
     2b4:	92 0f       	add	r25, r18
     2b6:	89 1b       	sub	r24, r25
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	b9 01       	movw	r22, r18
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <pinMode+0x232>
     2c0:	66 0f       	add	r22, r22
     2c2:	77 1f       	adc	r23, r23
     2c4:	8a 95       	dec	r24
     2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <pinMode+0x22e>
     2c8:	cb 01       	movw	r24, r22
     2ca:	96 2f       	mov	r25, r22
     2cc:	90 95       	com	r25
     2ce:	94 23       	and	r25, r20
     2d0:	94 bb       	out	0x14, r25	; 20
     2d2:	90 b7       	in	r25, 0x30	; 48
     2d4:	9b 7f       	andi	r25, 0xFB	; 251
     2d6:	90 bf       	out	0x30, r25	; 48
     2d8:	95 b3       	in	r25, 0x15	; 21
     2da:	89 2b       	or	r24, r25
     2dc:	85 bb       	out	0x15, r24	; 21
     2de:	08 95       	ret
     2e0:	92 ee       	ldi	r25, 0xE2	; 226
     2e2:	98 0f       	add	r25, r24
     2e4:	98 30       	cpi	r25, 0x08	; 8
     2e6:	08 f0       	brcs	.+2      	; 0x2ea <pinMode+0x258>
     2e8:	5c c0       	rjmp	.+184    	; 0x3a2 <pinMode+0x310>
     2ea:	69 32       	cpi	r22, 0x29	; 41
     2ec:	d1 f4       	brne	.+52     	; 0x322 <pinMode+0x290>
     2ee:	41 b3       	in	r20, 0x11	; 17
     2f0:	9d ec       	ldi	r25, 0xCD	; 205
     2f2:	89 9f       	mul	r24, r25
     2f4:	91 2d       	mov	r25, r1
     2f6:	11 24       	eor	r1, r1
     2f8:	96 95       	lsr	r25
     2fa:	96 95       	lsr	r25
     2fc:	96 95       	lsr	r25
     2fe:	99 0f       	add	r25, r25
     300:	29 2f       	mov	r18, r25
     302:	22 0f       	add	r18, r18
     304:	22 0f       	add	r18, r18
     306:	92 0f       	add	r25, r18
     308:	89 1b       	sub	r24, r25
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	b9 01       	movw	r22, r18
     310:	02 c0       	rjmp	.+4      	; 0x316 <pinMode+0x284>
     312:	66 0f       	add	r22, r22
     314:	77 1f       	adc	r23, r23
     316:	8a 95       	dec	r24
     318:	e2 f7       	brpl	.-8      	; 0x312 <pinMode+0x280>
     31a:	cb 01       	movw	r24, r22
     31c:	84 2b       	or	r24, r20
     31e:	81 bb       	out	0x11, r24	; 17
     320:	08 95       	ret
     322:	68 32       	cpi	r22, 0x28	; 40
     324:	d9 f4       	brne	.+54     	; 0x35c <pinMode+0x2ca>
     326:	41 b3       	in	r20, 0x11	; 17
     328:	9d ec       	ldi	r25, 0xCD	; 205
     32a:	89 9f       	mul	r24, r25
     32c:	91 2d       	mov	r25, r1
     32e:	11 24       	eor	r1, r1
     330:	96 95       	lsr	r25
     332:	96 95       	lsr	r25
     334:	96 95       	lsr	r25
     336:	99 0f       	add	r25, r25
     338:	29 2f       	mov	r18, r25
     33a:	22 0f       	add	r18, r18
     33c:	22 0f       	add	r18, r18
     33e:	92 0f       	add	r25, r18
     340:	89 1b       	sub	r24, r25
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	b9 01       	movw	r22, r18
     348:	02 c0       	rjmp	.+4      	; 0x34e <pinMode+0x2bc>
     34a:	66 0f       	add	r22, r22
     34c:	77 1f       	adc	r23, r23
     34e:	8a 95       	dec	r24
     350:	e2 f7       	brpl	.-8      	; 0x34a <pinMode+0x2b8>
     352:	cb 01       	movw	r24, r22
     354:	80 95       	com	r24
     356:	84 23       	and	r24, r20
     358:	81 bb       	out	0x11, r24	; 17
     35a:	08 95       	ret
     35c:	6a 32       	cpi	r22, 0x2A	; 42
     35e:	09 f5       	brne	.+66     	; 0x3a2 <pinMode+0x310>
     360:	41 b3       	in	r20, 0x11	; 17
     362:	9d ec       	ldi	r25, 0xCD	; 205
     364:	89 9f       	mul	r24, r25
     366:	91 2d       	mov	r25, r1
     368:	11 24       	eor	r1, r1
     36a:	96 95       	lsr	r25
     36c:	96 95       	lsr	r25
     36e:	96 95       	lsr	r25
     370:	99 0f       	add	r25, r25
     372:	29 2f       	mov	r18, r25
     374:	22 0f       	add	r18, r18
     376:	22 0f       	add	r18, r18
     378:	92 0f       	add	r25, r18
     37a:	89 1b       	sub	r24, r25
     37c:	21 e0       	ldi	r18, 0x01	; 1
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	b9 01       	movw	r22, r18
     382:	02 c0       	rjmp	.+4      	; 0x388 <pinMode+0x2f6>
     384:	66 0f       	add	r22, r22
     386:	77 1f       	adc	r23, r23
     388:	8a 95       	dec	r24
     38a:	e2 f7       	brpl	.-8      	; 0x384 <pinMode+0x2f2>
     38c:	cb 01       	movw	r24, r22
     38e:	96 2f       	mov	r25, r22
     390:	90 95       	com	r25
     392:	94 23       	and	r25, r20
     394:	91 bb       	out	0x11, r25	; 17
     396:	90 b7       	in	r25, 0x30	; 48
     398:	9b 7f       	andi	r25, 0xFB	; 251
     39a:	90 bf       	out	0x30, r25	; 48
     39c:	92 b3       	in	r25, 0x12	; 18
     39e:	89 2b       	or	r24, r25
     3a0:	82 bb       	out	0x12, r24	; 18
     3a2:	08 95       	ret

000003a4 <digitalRead>:
     3a4:	88 30       	cpi	r24, 0x08	; 8
     3a6:	c8 f4       	brcc	.+50     	; 0x3da <digitalRead+0x36>
     3a8:	29 b3       	in	r18, 0x19	; 25
     3aa:	9d ec       	ldi	r25, 0xCD	; 205
     3ac:	89 9f       	mul	r24, r25
     3ae:	91 2d       	mov	r25, r1
     3b0:	11 24       	eor	r1, r1
     3b2:	96 95       	lsr	r25
     3b4:	96 95       	lsr	r25
     3b6:	96 95       	lsr	r25
     3b8:	99 0f       	add	r25, r25
     3ba:	39 2f       	mov	r19, r25
     3bc:	33 0f       	add	r19, r19
     3be:	33 0f       	add	r19, r19
     3c0:	93 0f       	add	r25, r19
     3c2:	89 1b       	sub	r24, r25
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <digitalRead+0x28>
     3c8:	35 95       	asr	r19
     3ca:	27 95       	ror	r18
     3cc:	8a 95       	dec	r24
     3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <digitalRead+0x24>
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	20 fd       	sbrc	r18, 0
     3d4:	59 c0       	rjmp	.+178    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	08 95       	ret
     3da:	96 ef       	ldi	r25, 0xF6	; 246
     3dc:	98 0f       	add	r25, r24
     3de:	98 30       	cpi	r25, 0x08	; 8
     3e0:	c8 f4       	brcc	.+50     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     3e2:	26 b3       	in	r18, 0x16	; 22
     3e4:	9d ec       	ldi	r25, 0xCD	; 205
     3e6:	89 9f       	mul	r24, r25
     3e8:	91 2d       	mov	r25, r1
     3ea:	11 24       	eor	r1, r1
     3ec:	96 95       	lsr	r25
     3ee:	96 95       	lsr	r25
     3f0:	96 95       	lsr	r25
     3f2:	99 0f       	add	r25, r25
     3f4:	39 2f       	mov	r19, r25
     3f6:	33 0f       	add	r19, r19
     3f8:	33 0f       	add	r19, r19
     3fa:	93 0f       	add	r25, r19
     3fc:	89 1b       	sub	r24, r25
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     402:	35 95       	asr	r19
     404:	27 95       	ror	r18
     406:	8a 95       	dec	r24
     408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	20 fd       	sbrc	r18, 0
     40e:	3c c0       	rjmp	.+120    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	08 95       	ret
     414:	9c ee       	ldi	r25, 0xEC	; 236
     416:	98 0f       	add	r25, r24
     418:	98 30       	cpi	r25, 0x08	; 8
     41a:	c8 f4       	brcc	.+50     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     41c:	23 b3       	in	r18, 0x13	; 19
     41e:	9d ec       	ldi	r25, 0xCD	; 205
     420:	89 9f       	mul	r24, r25
     422:	91 2d       	mov	r25, r1
     424:	11 24       	eor	r1, r1
     426:	96 95       	lsr	r25
     428:	96 95       	lsr	r25
     42a:	96 95       	lsr	r25
     42c:	99 0f       	add	r25, r25
     42e:	39 2f       	mov	r19, r25
     430:	33 0f       	add	r19, r19
     432:	33 0f       	add	r19, r19
     434:	93 0f       	add	r25, r19
     436:	89 1b       	sub	r24, r25
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     43c:	35 95       	asr	r19
     43e:	27 95       	ror	r18
     440:	8a 95       	dec	r24
     442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	20 fd       	sbrc	r18, 0
     448:	1f c0       	rjmp	.+62     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	08 95       	ret
     44e:	92 ee       	ldi	r25, 0xE2	; 226
     450:	98 0f       	add	r25, r24
     452:	98 30       	cpi	r25, 0x08	; 8
     454:	c8 f4       	brcc	.+50     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     456:	20 b3       	in	r18, 0x10	; 16
     458:	9d ec       	ldi	r25, 0xCD	; 205
     45a:	89 9f       	mul	r24, r25
     45c:	91 2d       	mov	r25, r1
     45e:	11 24       	eor	r1, r1
     460:	96 95       	lsr	r25
     462:	96 95       	lsr	r25
     464:	96 95       	lsr	r25
     466:	99 0f       	add	r25, r25
     468:	39 2f       	mov	r19, r25
     46a:	33 0f       	add	r19, r19
     46c:	33 0f       	add	r19, r19
     46e:	93 0f       	add	r25, r19
     470:	89 1b       	sub	r24, r25
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	02 c0       	rjmp	.+4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     476:	35 95       	asr	r19
     478:	27 95       	ror	r18
     47a:	8a 95       	dec	r24
     47c:	e2 f7       	brpl	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	20 fd       	sbrc	r18, 0
     482:	02 c0       	rjmp	.+4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	08 95       	ret
     488:	08 95       	ret

0000048a <__vector_1>:
}


ISR(INT0_vect)
{
     48a:	1f 92       	push	r1
     48c:	0f 92       	push	r0
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	0f 92       	push	r0
     492:	11 24       	eor	r1, r1
     494:	2f 93       	push	r18
     496:	3f 93       	push	r19
     498:	4f 93       	push	r20
     49a:	5f 93       	push	r21
     49c:	6f 93       	push	r22
     49e:	7f 93       	push	r23
     4a0:	8f 93       	push	r24
     4a2:	9f 93       	push	r25
     4a4:	af 93       	push	r26
     4a6:	bf 93       	push	r27
     4a8:	ef 93       	push	r30
     4aa:	ff 93       	push	r31
	ISR0();
     4ac:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <ISR0>
     4b0:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <ISR0+0x1>
     4b4:	09 95       	icall
}
     4b6:	ff 91       	pop	r31
     4b8:	ef 91       	pop	r30
     4ba:	bf 91       	pop	r27
     4bc:	af 91       	pop	r26
     4be:	9f 91       	pop	r25
     4c0:	8f 91       	pop	r24
     4c2:	7f 91       	pop	r23
     4c4:	6f 91       	pop	r22
     4c6:	5f 91       	pop	r21
     4c8:	4f 91       	pop	r20
     4ca:	3f 91       	pop	r19
     4cc:	2f 91       	pop	r18
     4ce:	0f 90       	pop	r0
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	0f 90       	pop	r0
     4d4:	1f 90       	pop	r1
     4d6:	18 95       	reti

000004d8 <__vector_2>:

ISR(INT1_vect)
{
     4d8:	1f 92       	push	r1
     4da:	0f 92       	push	r0
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	0f 92       	push	r0
     4e0:	11 24       	eor	r1, r1
     4e2:	2f 93       	push	r18
     4e4:	3f 93       	push	r19
     4e6:	4f 93       	push	r20
     4e8:	5f 93       	push	r21
     4ea:	6f 93       	push	r22
     4ec:	7f 93       	push	r23
     4ee:	8f 93       	push	r24
     4f0:	9f 93       	push	r25
     4f2:	af 93       	push	r26
     4f4:	bf 93       	push	r27
     4f6:	ef 93       	push	r30
     4f8:	ff 93       	push	r31
	ISR1();
     4fa:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <ISR1>
     4fe:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <ISR1+0x1>
     502:	09 95       	icall
}
     504:	ff 91       	pop	r31
     506:	ef 91       	pop	r30
     508:	bf 91       	pop	r27
     50a:	af 91       	pop	r26
     50c:	9f 91       	pop	r25
     50e:	8f 91       	pop	r24
     510:	7f 91       	pop	r23
     512:	6f 91       	pop	r22
     514:	5f 91       	pop	r21
     516:	4f 91       	pop	r20
     518:	3f 91       	pop	r19
     51a:	2f 91       	pop	r18
     51c:	0f 90       	pop	r0
     51e:	0f be       	out	0x3f, r0	; 63
     520:	0f 90       	pop	r0
     522:	1f 90       	pop	r1
     524:	18 95       	reti

00000526 <__vector_3>:

ISR(INT2_vect)
{
     526:	1f 92       	push	r1
     528:	0f 92       	push	r0
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	0f 92       	push	r0
     52e:	11 24       	eor	r1, r1
     530:	2f 93       	push	r18
     532:	3f 93       	push	r19
     534:	4f 93       	push	r20
     536:	5f 93       	push	r21
     538:	6f 93       	push	r22
     53a:	7f 93       	push	r23
     53c:	8f 93       	push	r24
     53e:	9f 93       	push	r25
     540:	af 93       	push	r26
     542:	bf 93       	push	r27
     544:	ef 93       	push	r30
     546:	ff 93       	push	r31
	ISR2();
     548:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <__data_end>
     54c:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <__data_end+0x1>
     550:	09 95       	icall
}
     552:	ff 91       	pop	r31
     554:	ef 91       	pop	r30
     556:	bf 91       	pop	r27
     558:	af 91       	pop	r26
     55a:	9f 91       	pop	r25
     55c:	8f 91       	pop	r24
     55e:	7f 91       	pop	r23
     560:	6f 91       	pop	r22
     562:	5f 91       	pop	r21
     564:	4f 91       	pop	r20
     566:	3f 91       	pop	r19
     568:	2f 91       	pop	r18
     56a:	0f 90       	pop	r0
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	0f 90       	pop	r0
     570:	1f 90       	pop	r1
     572:	18 95       	reti

00000574 <Serial_print>:
	
	}
	x[i] = '\0';                           // ensure string is null terminated
	
	
}
     574:	4f 92       	push	r4
     576:	5f 92       	push	r5
     578:	6f 92       	push	r6
     57a:	7f 92       	push	r7
     57c:	8f 92       	push	r8
     57e:	9f 92       	push	r9
     580:	af 92       	push	r10
     582:	bf 92       	push	r11
     584:	cf 92       	push	r12
     586:	df 92       	push	r13
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	60 97       	sbiw	r28, 0x10	; 16
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	dc 01       	movw	r26, r24
     5a2:	69 32       	cpi	r22, 0x29	; 41
     5a4:	39 f5       	brne	.+78     	; 0x5f4 <Serial_print+0x80>
     5a6:	11 96       	adiw	r26, 0x01	; 1
     5a8:	8c 91       	ld	r24, X
     5aa:	11 97       	sbiw	r26, 0x01	; 1
     5ac:	8f 93       	push	r24
     5ae:	8c 91       	ld	r24, X
     5b0:	8f 93       	push	r24
     5b2:	86 e6       	ldi	r24, 0x66	; 102
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	9f 93       	push	r25
     5b8:	8f 93       	push	r24
     5ba:	ce 01       	movw	r24, r28
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	9f 93       	push	r25
     5c0:	8f 93       	push	r24
     5c2:	0e 94 cc 13 	call	0x2798	; 0x2798 <sprintf>
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <Serial_print+0x6c>
     5d8:	5d 9b       	sbis	0x0b, 5	; 11
     5da:	fe cf       	rjmp	.-4      	; 0x5d8 <Serial_print+0x64>
     5dc:	2c b9       	out	0x0c, r18	; 12
     5de:	01 96       	adiw	r24, 0x01	; 1
     5e0:	e1 e0       	ldi	r30, 0x01	; 1
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	ec 0f       	add	r30, r28
     5e6:	fd 1f       	adc	r31, r29
     5e8:	e8 0f       	add	r30, r24
     5ea:	f9 1f       	adc	r31, r25
     5ec:	20 81       	ld	r18, Z
     5ee:	21 11       	cpse	r18, r1
     5f0:	f3 cf       	rjmp	.-26     	; 0x5d8 <Serial_print+0x64>
     5f2:	5f c0       	rjmp	.+190    	; 0x6b2 <Serial_print+0x13e>
     5f4:	68 32       	cpi	r22, 0x28	; 40
     5f6:	09 f0       	breq	.+2      	; 0x5fa <Serial_print+0x86>
     5f8:	46 c0       	rjmp	.+140    	; 0x686 <Serial_print+0x112>
     5fa:	cd 90       	ld	r12, X+
     5fc:	dd 90       	ld	r13, X+
     5fe:	ed 90       	ld	r14, X+
     600:	fc 90       	ld	r15, X
     602:	c7 01       	movw	r24, r14
     604:	b6 01       	movw	r22, r12
     606:	0e 94 70 12 	call	0x24e0	; 0x24e0 <floor>
     60a:	2b 01       	movw	r4, r22
     60c:	3c 01       	movw	r6, r24
     60e:	9b 01       	movw	r18, r22
     610:	ac 01       	movw	r20, r24
     612:	c7 01       	movw	r24, r14
     614:	b6 01       	movw	r22, r12
     616:	0e 94 cd 11 	call	0x239a	; 0x239a <__subsf3>
     61a:	4b 01       	movw	r8, r22
     61c:	5c 01       	movw	r10, r24
     61e:	c3 01       	movw	r24, r6
     620:	b2 01       	movw	r22, r4
     622:	0e 94 3a 12 	call	0x2474	; 0x2474 <__fixsfsi>
     626:	f6 2e       	mov	r15, r22
     628:	e7 2e       	mov	r14, r23
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	4a e7       	ldi	r20, 0x7A	; 122
     630:	54 e4       	ldi	r21, 0x44	; 68
     632:	c5 01       	movw	r24, r10
     634:	b4 01       	movw	r22, r8
     636:	0e 94 19 13 	call	0x2632	; 0x2632 <__mulsf3>
     63a:	0e 94 3a 12 	call	0x2474	; 0x2474 <__fixsfsi>
     63e:	7f 93       	push	r23
     640:	6f 93       	push	r22
     642:	ef 92       	push	r14
     644:	ff 92       	push	r15
     646:	83 e6       	ldi	r24, 0x63	; 99
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	9f 93       	push	r25
     64c:	8f 93       	push	r24
     64e:	ce 01       	movw	r24, r28
     650:	01 96       	adiw	r24, 0x01	; 1
     652:	9f 93       	push	r25
     654:	8f 93       	push	r24
     656:	0e 94 cc 13 	call	0x2798	; 0x2798 <sprintf>
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	04 c0       	rjmp	.+8      	; 0x672 <Serial_print+0xfe>
     66a:	5d 9b       	sbis	0x0b, 5	; 11
     66c:	fe cf       	rjmp	.-4      	; 0x66a <Serial_print+0xf6>
     66e:	2c b9       	out	0x0c, r18	; 12
     670:	01 96       	adiw	r24, 0x01	; 1
     672:	e1 e0       	ldi	r30, 0x01	; 1
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	ec 0f       	add	r30, r28
     678:	fd 1f       	adc	r31, r29
     67a:	e8 0f       	add	r30, r24
     67c:	f9 1f       	adc	r31, r25
     67e:	20 81       	ld	r18, Z
     680:	21 11       	cpse	r18, r1
     682:	f3 cf       	rjmp	.-26     	; 0x66a <Serial_print+0xf6>
     684:	16 c0       	rjmp	.+44     	; 0x6b2 <Serial_print+0x13e>
     686:	6a 32       	cpi	r22, 0x2A	; 42
     688:	19 f4       	brne	.+6      	; 0x690 <Serial_print+0x11c>
     68a:	8c 91       	ld	r24, X
     68c:	8c b9       	out	0x0c, r24	; 12
     68e:	11 c0       	rjmp	.+34     	; 0x6b2 <Serial_print+0x13e>
     690:	6b 32       	cpi	r22, 0x2B	; 43
     692:	79 f4       	brne	.+30     	; 0x6b2 <Serial_print+0x13e>
     694:	06 c0       	rjmp	.+12     	; 0x6a2 <Serial_print+0x12e>
     696:	5d 9b       	sbis	0x0b, 5	; 11
     698:	fe cf       	rjmp	.-4      	; 0x696 <Serial_print+0x122>
     69a:	9c b9       	out	0x0c, r25	; 12
     69c:	2f 5f       	subi	r18, 0xFF	; 255
     69e:	3f 4f       	sbci	r19, 0xFF	; 255
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <Serial_print+0x132>
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	fd 01       	movw	r30, r26
     6a8:	e2 0f       	add	r30, r18
     6aa:	f3 1f       	adc	r31, r19
     6ac:	90 81       	ld	r25, Z
     6ae:	91 11       	cpse	r25, r1
     6b0:	f2 cf       	rjmp	.-28     	; 0x696 <Serial_print+0x122>
     6b2:	60 96       	adiw	r28, 0x10	; 16
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	f8 94       	cli
     6b8:	de bf       	out	0x3e, r29	; 62
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	cd bf       	out	0x3d, r28	; 61
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	ff 90       	pop	r15
     6c4:	ef 90       	pop	r14
     6c6:	df 90       	pop	r13
     6c8:	cf 90       	pop	r12
     6ca:	bf 90       	pop	r11
     6cc:	af 90       	pop	r10
     6ce:	9f 90       	pop	r9
     6d0:	8f 90       	pop	r8
     6d2:	7f 90       	pop	r7
     6d4:	6f 90       	pop	r6
     6d6:	5f 90       	pop	r5
     6d8:	4f 90       	pop	r4
     6da:	08 95       	ret

000006dc <Serial_begin>:
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <baud+0x1>
     6e8:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <baud>
     6ec:	09 2e       	mov	r0, r25
     6ee:	00 0c       	add	r0, r0
     6f0:	aa 0b       	sbc	r26, r26
     6f2:	bb 0b       	sbc	r27, r27
     6f4:	88 0f       	add	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	aa 1f       	adc	r26, r26
     6fa:	bb 1f       	adc	r27, r27
     6fc:	88 0f       	add	r24, r24
     6fe:	99 1f       	adc	r25, r25
     700:	aa 1f       	adc	r26, r26
     702:	bb 1f       	adc	r27, r27
     704:	9c 01       	movw	r18, r24
     706:	ad 01       	movw	r20, r26
     708:	22 0f       	add	r18, r18
     70a:	33 1f       	adc	r19, r19
     70c:	44 1f       	adc	r20, r20
     70e:	55 1f       	adc	r21, r21
     710:	22 0f       	add	r18, r18
     712:	33 1f       	adc	r19, r19
     714:	44 1f       	adc	r20, r20
     716:	55 1f       	adc	r21, r21
     718:	0f 2e       	mov	r0, r31
     71a:	c1 2c       	mov	r12, r1
     71c:	f2 e1       	ldi	r31, 0x12	; 18
     71e:	df 2e       	mov	r13, r31
     720:	fa e7       	ldi	r31, 0x7A	; 122
     722:	ef 2e       	mov	r14, r31
     724:	f1 2c       	mov	r15, r1
     726:	f0 2d       	mov	r31, r0
     728:	c7 01       	movw	r24, r14
     72a:	b6 01       	movw	r22, r12
     72c:	0e 94 9a 13 	call	0x2734	; 0x2734 <__udivmodsi4>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	01 97       	sbiw	r24, 0x01	; 1
     736:	a1 09       	sbc	r26, r1
     738:	b1 09       	sbc	r27, r1
     73a:	89 2f       	mov	r24, r25
     73c:	9a 2f       	mov	r25, r26
     73e:	ab 2f       	mov	r26, r27
     740:	bb 27       	eor	r27, r27
     742:	80 bd       	out	0x20, r24	; 32
     744:	20 91 3f 04 	lds	r18, 0x043F	; 0x80043f <baud>
     748:	30 91 40 04 	lds	r19, 0x0440	; 0x800440 <baud+0x1>
     74c:	c9 01       	movw	r24, r18
     74e:	33 0f       	add	r19, r19
     750:	aa 0b       	sbc	r26, r26
     752:	bb 0b       	sbc	r27, r27
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	aa 1f       	adc	r26, r26
     75a:	bb 1f       	adc	r27, r27
     75c:	88 0f       	add	r24, r24
     75e:	99 1f       	adc	r25, r25
     760:	aa 1f       	adc	r26, r26
     762:	bb 1f       	adc	r27, r27
     764:	9c 01       	movw	r18, r24
     766:	ad 01       	movw	r20, r26
     768:	22 0f       	add	r18, r18
     76a:	33 1f       	adc	r19, r19
     76c:	44 1f       	adc	r20, r20
     76e:	55 1f       	adc	r21, r21
     770:	22 0f       	add	r18, r18
     772:	33 1f       	adc	r19, r19
     774:	44 1f       	adc	r20, r20
     776:	55 1f       	adc	r21, r21
     778:	c7 01       	movw	r24, r14
     77a:	b6 01       	movw	r22, r12
     77c:	0e 94 9a 13 	call	0x2734	; 0x2734 <__udivmodsi4>
     780:	21 50       	subi	r18, 0x01	; 1
     782:	29 b9       	out	0x09, r18	; 9
     784:	8a b1       	in	r24, 0x0a	; 10
     786:	88 61       	ori	r24, 0x18	; 24
     788:	8a b9       	out	0x0a, r24	; 10
     78a:	80 b5       	in	r24, 0x20	; 32
     78c:	86 68       	ori	r24, 0x86	; 134
     78e:	80 bd       	out	0x20, r24	; 32
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	df 90       	pop	r13
     796:	cf 90       	pop	r12
     798:	08 95       	ret

0000079a <__vector_13>:

ISR(USART_RXC_vect){
     79a:	1f 92       	push	r1
     79c:	0f 92       	push	r0
     79e:	0f b6       	in	r0, 0x3f	; 63
     7a0:	0f 92       	push	r0
     7a2:	11 24       	eor	r1, r1
     7a4:	2f 93       	push	r18
     7a6:	3f 93       	push	r19
     7a8:	4f 93       	push	r20
     7aa:	5f 93       	push	r21
     7ac:	6f 93       	push	r22
     7ae:	7f 93       	push	r23
     7b0:	8f 93       	push	r24
     7b2:	9f 93       	push	r25
     7b4:	af 93       	push	r26
     7b6:	bf 93       	push	r27
     7b8:	ef 93       	push	r30
     7ba:	ff 93       	push	r31
RXC_ISR();		
     7bc:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <RXC_ISR>
     7c0:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <RXC_ISR+0x1>
     7c4:	09 95       	icall
}
     7c6:	ff 91       	pop	r31
     7c8:	ef 91       	pop	r30
     7ca:	bf 91       	pop	r27
     7cc:	af 91       	pop	r26
     7ce:	9f 91       	pop	r25
     7d0:	8f 91       	pop	r24
     7d2:	7f 91       	pop	r23
     7d4:	6f 91       	pop	r22
     7d6:	5f 91       	pop	r21
     7d8:	4f 91       	pop	r20
     7da:	3f 91       	pop	r19
     7dc:	2f 91       	pop	r18
     7de:	0f 90       	pop	r0
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	0f 90       	pop	r0
     7e4:	1f 90       	pop	r1
     7e6:	18 95       	reti

000007e8 <__vector_14>:
ISR(USART_UDRE_vect){
     7e8:	1f 92       	push	r1
     7ea:	0f 92       	push	r0
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	0f 92       	push	r0
     7f0:	11 24       	eor	r1, r1
     7f2:	2f 93       	push	r18
     7f4:	3f 93       	push	r19
     7f6:	4f 93       	push	r20
     7f8:	5f 93       	push	r21
     7fa:	6f 93       	push	r22
     7fc:	7f 93       	push	r23
     7fe:	8f 93       	push	r24
     800:	9f 93       	push	r25
     802:	af 93       	push	r26
     804:	bf 93       	push	r27
     806:	ef 93       	push	r30
     808:	ff 93       	push	r31
TXC_ISR();	
     80a:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <TXC_ISR>
     80e:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <TXC_ISR+0x1>
     812:	09 95       	icall
     814:	ff 91       	pop	r31
     816:	ef 91       	pop	r30
     818:	bf 91       	pop	r27
     81a:	af 91       	pop	r26
     81c:	9f 91       	pop	r25
     81e:	8f 91       	pop	r24
     820:	7f 91       	pop	r23
     822:	6f 91       	pop	r22
     824:	5f 91       	pop	r21
     826:	4f 91       	pop	r20
     828:	3f 91       	pop	r19
     82a:	2f 91       	pop	r18
     82c:	0f 90       	pop	r0
     82e:	0f be       	out	0x3f, r0	; 63
     830:	0f 90       	pop	r0
     832:	1f 90       	pop	r1
     834:	18 95       	reti

00000836 <print_tarek>:
void print_tarek(void *ptr)
{
	
	while (1)
	{
		xSemaphoreTake(mutex, portMAX_DELAY);
     836:	6f ef       	ldi	r22, 0xFF	; 255
     838:	7f ef       	ldi	r23, 0xFF	; 255
     83a:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <mutex>
     83e:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <mutex+0x1>
     842:	0e 94 9c 09 	call	0x1338	; 0x1338 <xQueueSemaphoreTake>
		//taskENTER_CRITICAL();
		if(digitalRead(A0) == 0)
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalRead>
     84c:	81 11       	cpse	r24, r1
     84e:	35 c0       	rjmp	.+106    	; 0x8ba <__stack+0x5b>
		{
			x++;
     850:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <x>
     854:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <x+0x1>
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <x+0x1>
     85e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <x>
			y++;
     862:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <y>
     866:	30 91 a1 00 	lds	r19, 0x00A1	; 0x8000a1 <y+0x1>
     86a:	2f 5f       	subi	r18, 0xFF	; 255
     86c:	3f 4f       	sbci	r19, 0xFF	; 255
     86e:	30 93 a1 00 	sts	0x00A1, r19	; 0x8000a1 <y+0x1>
     872:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <y>
			if(x==y && x==100)
     876:	82 17       	cp	r24, r18
     878:	93 07       	cpc	r25, r19
     87a:	59 f4       	brne	.+22     	; 0x892 <__stack+0x33>
     87c:	84 36       	cpi	r24, 0x64	; 100
     87e:	91 05       	cpc	r25, r1
     880:	41 f4       	brne	.+16     	; 0x892 <__stack+0x33>
			{
			x=0;
     882:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <x+0x1>
     886:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <x>
			y=0;
     88a:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <y+0x1>
     88e:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <y>
			}
			
			Serial_print((int*)&x,INT);
     892:	69 e2       	ldi	r22, 0x29	; 41
     894:	82 ea       	ldi	r24, 0xA2	; 162
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 ba 02 	call	0x574	; 0x574 <Serial_print>
			Serial_print("...",STRING);
     89c:	6b e2       	ldi	r22, 0x2B	; 43
     89e:	8f e7       	ldi	r24, 0x7F	; 127
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 ba 02 	call	0x574	; 0x574 <Serial_print>
			Serial_print((int*)&y,INT);
     8a6:	69 e2       	ldi	r22, 0x29	; 41
     8a8:	80 ea       	ldi	r24, 0xA0	; 160
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 ba 02 	call	0x574	; 0x574 <Serial_print>
			Serial_print("...",STRING);
     8b0:	6b e2       	ldi	r22, 0x2B	; 43
     8b2:	8f e7       	ldi	r24, 0x7F	; 127
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 ba 02 	call	0x574	; 0x574 <Serial_print>
		}
		//taskEXIT_CRITICAL();
		xSemaphoreGive(mutex);
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <mutex>
     8c8:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <mutex+0x1>
     8cc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <xQueueGenericSend>
	}
     8d0:	b2 cf       	rjmp	.-156    	; 0x836 <print_tarek>

000008d2 <print_omar>:

void print_omar(void *ptr)
{
	while (1)
	{
		xSemaphoreTake(mutex, portMAX_DELAY);
     8d2:	6f ef       	ldi	r22, 0xFF	; 255
     8d4:	7f ef       	ldi	r23, 0xFF	; 255
     8d6:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <mutex>
     8da:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <mutex+0x1>
     8de:	0e 94 9c 09 	call	0x1338	; 0x1338 <xQueueSemaphoreTake>
		if(x != y)
     8e2:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <x>
     8e6:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <x+0x1>
     8ea:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <y>
     8ee:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <y+0x1>
     8f2:	28 17       	cp	r18, r24
     8f4:	39 07       	cpc	r19, r25
     8f6:	29 f0       	breq	.+10     	; 0x902 <print_omar+0x30>
		{
			Serial_print("...shared Data problem...",STRING);
     8f8:	6b e2       	ldi	r22, 0x2B	; 43
     8fa:	89 e6       	ldi	r24, 0x69	; 105
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 ba 02 	call	0x574	; 0x574 <Serial_print>
		}
		xSemaphoreGive(mutex);
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <mutex>
     910:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <mutex+0x1>
     914:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <xQueueGenericSend>
       vTaskDelay(5);
     918:	85 e0       	ldi	r24, 0x05	; 5
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vTaskDelay>
		
	}
     920:	d8 cf       	rjmp	.-80     	; 0x8d2 <print_omar>

00000922 <main>:
void print_omar(void *ptr);
TaskHandle_t omar;

int x=0,y=0;
int main(void)
{
     922:	ef 92       	push	r14
     924:	ff 92       	push	r15
     926:	0f 93       	push	r16
	pinMode(A0,INPUT_PULLUP);
     928:	6a e2       	ldi	r22, 0x2A	; 42
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	0e 94 49 00 	call	0x92	; 0x92 <pinMode>
	Serial_begin(9600);
     930:	80 e8       	ldi	r24, 0x80	; 128
     932:	95 e2       	ldi	r25, 0x25	; 37
     934:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Serial_begin>
	
	xTaskCreate(print_tarek,"TAREK",150,NULL,1,tarek);
     938:	e0 90 41 04 	lds	r14, 0x0441	; 0x800441 <tarek>
     93c:	f0 90 42 04 	lds	r15, 0x0442	; 0x800442 <tarek+0x1>
     940:	01 e0       	ldi	r16, 0x01	; 1
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	46 e9       	ldi	r20, 0x96	; 150
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	63 e8       	ldi	r22, 0x83	; 131
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	8b e1       	ldi	r24, 0x1B	; 27
     950:	94 e0       	ldi	r25, 0x04	; 4
     952:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <xTaskCreate>
	xTaskCreate(print_omar,"LASHEEN",150,NULL,2,omar);
     956:	e0 90 43 04 	lds	r14, 0x0443	; 0x800443 <omar>
     95a:	f0 90 44 04 	lds	r15, 0x0444	; 0x800444 <omar+0x1>
     95e:	02 e0       	ldi	r16, 0x02	; 2
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	46 e9       	ldi	r20, 0x96	; 150
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	69 e8       	ldi	r22, 0x89	; 137
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	89 e6       	ldi	r24, 0x69	; 105
     96e:	94 e0       	ldi	r25, 0x04	; 4
     970:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <xTaskCreate>
	mutex = xSemaphoreCreateMutex();
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	0e 94 8e 09 	call	0x131c	; 0x131c <xQueueCreateMutex>
     97a:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <mutex+0x1>
     97e:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <mutex>

	vTaskStartScheduler();
     982:	0e 94 bf 0c 	call	0x197e	; 0x197e <vTaskStartScheduler>
	
}
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	08 95       	ret

00000992 <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     992:	ab ea       	ldi	r26, 0xAB	; 171
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	ef ea       	ldi	r30, 0xAF	; 175
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	11 96       	adiw	r26, 0x01	; 1
     99c:	fc 93       	st	X, r31
     99e:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
     9a0:	13 96       	adiw	r26, 0x03	; 3
     9a2:	1c 92       	st	X, r1
     9a4:	1e 92       	st	-X, r1
     9a6:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     9a8:	a7 ea       	ldi	r26, 0xA7	; 167
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	8f e1       	ldi	r24, 0x1F	; 31
     9ae:	93 e0       	ldi	r25, 0x03	; 3
     9b0:	13 96       	adiw	r26, 0x03	; 3
     9b2:	9c 93       	st	X, r25
     9b4:	8e 93       	st	-X, r24
     9b6:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
     9b8:	11 96       	adiw	r26, 0x01	; 1
     9ba:	1c 92       	st	X, r1
     9bc:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     9be:	93 83       	std	Z+3, r25	; 0x03
     9c0:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     9c2:	b1 83       	std	Z+1, r27	; 0x01
     9c4:	a0 83       	st	Z, r26
     9c6:	08 95       	ret

000009c8 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     9c8:	ef 92       	push	r14
     9ca:	ff 92       	push	r15
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     9d6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     9da:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <xHeapHasBeenInitialised.2121>
     9de:	81 11       	cpse	r24, r1
     9e0:	05 c0       	rjmp	.+10     	; 0x9ec <pvPortMalloc+0x24>
        {
            prvHeapInit();
     9e2:	0e 94 c9 04 	call	0x992	; 0x992 <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <xHeapHasBeenInitialised.2121>
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     9ec:	20 97       	sbiw	r28, 0x00	; 0
     9ee:	71 f0       	breq	.+28     	; 0xa0c <pvPortMalloc+0x44>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
     9f0:	ce 01       	movw	r24, r28
     9f2:	04 96       	adiw	r24, 0x04	; 4
            xHeapHasBeenInitialised = pdTRUE;
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     9f4:	c8 17       	cp	r28, r24
     9f6:	d9 07       	cpc	r29, r25
     9f8:	38 f4       	brcc	.+14     	; 0xa08 <pvPortMalloc+0x40>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
        {
            xWantedSize += heapSTRUCT_SIZE;

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
     9fa:	25 96       	adiw	r28, 0x05	; 5
     9fc:	8c 17       	cp	r24, r28
     9fe:	9d 07       	cpc	r25, r29
     a00:	28 f0       	brcs	.+10     	; 0xa0c <pvPortMalloc+0x44>
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
            }
            else
            {
                xWantedSize = 0;
     a02:	c0 e0       	ldi	r28, 0x00	; 0
     a04:	d0 e0       	ldi	r29, 0x00	; 0
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <pvPortMalloc+0x44>
            }
        }
        else
        {
            xWantedSize = 0;
     a08:	c0 e0       	ldi	r28, 0x00	; 0
     a0a:	d0 e0       	ldi	r29, 0x00	; 0
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     a0c:	20 97       	sbiw	r28, 0x00	; 0
     a0e:	09 f4       	brne	.+2      	; 0xa12 <pvPortMalloc+0x4a>
     a10:	5e c0       	rjmp	.+188    	; 0xace <pvPortMalloc+0x106>
     a12:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     a16:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     a1a:	2c 17       	cp	r18, r28
     a1c:	3d 07       	cpc	r19, r29
     a1e:	08 f4       	brcc	.+2      	; 0xa22 <pvPortMalloc+0x5a>
     a20:	59 c0       	rjmp	.+178    	; 0xad4 <pvPortMalloc+0x10c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;
     a22:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <xStart>
     a26:	f0 91 ac 00 	lds	r31, 0x00AC	; 0x8000ac <xStart+0x1>

        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
     a2a:	ab ea       	ldi	r26, 0xAB	; 171
     a2c:	b0 e0       	ldi	r27, 0x00	; 0
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <pvPortMalloc+0x6c>
            {
                pxPreviousBlock = pxBlock;
     a30:	df 01       	movw	r26, r30
                pxBlock = pxBlock->pxNextFreeBlock;
     a32:	fc 01       	movw	r30, r24
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a34:	82 81       	ldd	r24, Z+2	; 0x02
     a36:	93 81       	ldd	r25, Z+3	; 0x03
     a38:	8c 17       	cp	r24, r28
     a3a:	9d 07       	cpc	r25, r29
     a3c:	20 f4       	brcc	.+8      	; 0xa46 <pvPortMalloc+0x7e>
     a3e:	80 81       	ld	r24, Z
     a40:	91 81       	ldd	r25, Z+1	; 0x01
     a42:	00 97       	sbiw	r24, 0x00	; 0
     a44:	a9 f7       	brne	.-22     	; 0xa30 <pvPortMalloc+0x68>
                pxPreviousBlock = pxBlock;
                pxBlock = pxBlock->pxNextFreeBlock;
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	e7 3a       	cpi	r30, 0xA7	; 167
     a4a:	f8 07       	cpc	r31, r24
     a4c:	09 f4       	brne	.+2      	; 0xa50 <pvPortMalloc+0x88>
     a4e:	45 c0       	rjmp	.+138    	; 0xada <pvPortMalloc+0x112>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     a50:	0d 91       	ld	r16, X+
     a52:	1c 91       	ld	r17, X
     a54:	11 97       	sbiw	r26, 0x01	; 1
     a56:	0c 5f       	subi	r16, 0xFC	; 252
     a58:	1f 4f       	sbci	r17, 0xFF	; 255

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     a5a:	80 81       	ld	r24, Z
     a5c:	91 81       	ldd	r25, Z+1	; 0x01
     a5e:	8d 93       	st	X+, r24
     a60:	9c 93       	st	X, r25

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     a62:	82 81       	ldd	r24, Z+2	; 0x02
     a64:	93 81       	ldd	r25, Z+3	; 0x03
     a66:	8c 1b       	sub	r24, r28
     a68:	9d 0b       	sbc	r25, r29
     a6a:	89 30       	cpi	r24, 0x09	; 9
     a6c:	91 05       	cpc	r25, r1
     a6e:	30 f1       	brcs	.+76     	; 0xabc <pvPortMalloc+0xf4>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     a70:	bf 01       	movw	r22, r30
     a72:	6c 0f       	add	r22, r28
     a74:	7d 1f       	adc	r23, r29

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     a76:	db 01       	movw	r26, r22
     a78:	13 96       	adiw	r26, 0x03	; 3
     a7a:	9c 93       	st	X, r25
     a7c:	8e 93       	st	-X, r24
     a7e:	12 97       	sbiw	r26, 0x02	; 2
                    pxBlock->xBlockSize = xWantedSize;
     a80:	d3 83       	std	Z+3, r29	; 0x03
     a82:	c2 83       	std	Z+2, r28	; 0x02

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     a84:	12 96       	adiw	r26, 0x02	; 2
     a86:	4d 91       	ld	r20, X+
     a88:	5c 91       	ld	r21, X
     a8a:	13 97       	sbiw	r26, 0x03	; 3
     a8c:	0f 2e       	mov	r0, r31
     a8e:	fb ea       	ldi	r31, 0xAB	; 171
     a90:	ef 2e       	mov	r14, r31
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	ff 2e       	mov	r15, r31
     a96:	f0 2d       	mov	r31, r0
     a98:	01 c0       	rjmp	.+2      	; 0xa9c <pvPortMalloc+0xd4>
     a9a:	7d 01       	movw	r14, r26
     a9c:	e7 01       	movw	r28, r14
     a9e:	a8 81       	ld	r26, Y
     aa0:	b9 81       	ldd	r27, Y+1	; 0x01
     aa2:	12 96       	adiw	r26, 0x02	; 2
     aa4:	8d 91       	ld	r24, X+
     aa6:	9c 91       	ld	r25, X
     aa8:	13 97       	sbiw	r26, 0x03	; 3
     aaa:	84 17       	cp	r24, r20
     aac:	95 07       	cpc	r25, r21
     aae:	a8 f3       	brcs	.-22     	; 0xa9a <pvPortMalloc+0xd2>
     ab0:	eb 01       	movw	r28, r22
     ab2:	b9 83       	std	Y+1, r27	; 0x01
     ab4:	a8 83       	st	Y, r26
     ab6:	d7 01       	movw	r26, r14
     ab8:	6d 93       	st	X+, r22
     aba:	7c 93       	st	X, r23
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
     abc:	82 81       	ldd	r24, Z+2	; 0x02
     abe:	93 81       	ldd	r25, Z+3	; 0x03
     ac0:	28 1b       	sub	r18, r24
     ac2:	39 0b       	sbc	r19, r25
     ac4:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     ac8:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
     acc:	08 c0       	rjmp	.+16     	; 0xade <pvPortMalloc+0x116>

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     ace:	00 e0       	ldi	r16, 0x00	; 0
     ad0:	10 e0       	ldi	r17, 0x00	; 0
     ad2:	05 c0       	rjmp	.+10     	; 0xade <pvPortMalloc+0x116>
     ad4:	00 e0       	ldi	r16, 0x00	; 0
     ad6:	10 e0       	ldi	r17, 0x00	; 0
     ad8:	02 c0       	rjmp	.+4      	; 0xade <pvPortMalloc+0x116>
     ada:	00 e0       	ldi	r16, 0x00	; 0
     adc:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     ade:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     ae2:	c8 01       	movw	r24, r16
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	08 95       	ret

00000af2 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     afa:	00 97       	sbiw	r24, 0x00	; 0
     afc:	41 f1       	breq	.+80     	; 0xb4e <vPortFree+0x5c>
     afe:	ec 01       	movw	r28, r24
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     b00:	8c 01       	movw	r16, r24
     b02:	04 50       	subi	r16, 0x04	; 4
     b04:	11 09       	sbc	r17, r1

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;

        vTaskSuspendAll();
     b06:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     b0a:	f8 01       	movw	r30, r16
     b0c:	42 81       	ldd	r20, Z+2	; 0x02
     b0e:	53 81       	ldd	r21, Z+3	; 0x03
     b10:	ab ea       	ldi	r26, 0xAB	; 171
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	01 c0       	rjmp	.+2      	; 0xb18 <vPortFree+0x26>
     b16:	df 01       	movw	r26, r30
     b18:	ed 91       	ld	r30, X+
     b1a:	fc 91       	ld	r31, X
     b1c:	11 97       	sbiw	r26, 0x01	; 1
     b1e:	22 81       	ldd	r18, Z+2	; 0x02
     b20:	33 81       	ldd	r19, Z+3	; 0x03
     b22:	24 17       	cp	r18, r20
     b24:	35 07       	cpc	r19, r21
     b26:	b8 f3       	brcs	.-18     	; 0xb16 <vPortFree+0x24>
     b28:	24 97       	sbiw	r28, 0x04	; 4
     b2a:	f9 83       	std	Y+1, r31	; 0x01
     b2c:	e8 83       	st	Y, r30
     b2e:	0d 93       	st	X+, r16
     b30:	1c 93       	st	X, r17
            xFreeBytesRemaining += pxLink->xBlockSize;
     b32:	8a 81       	ldd	r24, Y+2	; 0x02
     b34:	9b 81       	ldd	r25, Y+3	; 0x03
     b36:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b3a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     b3e:	82 0f       	add	r24, r18
     b40:	93 1f       	adc	r25, r19
     b42:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     b46:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
     b4a:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <xTaskResumeAll>
    }
}
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	08 95       	ret

00000b58 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     b58:	fc 01       	movw	r30, r24
     b5a:	03 96       	adiw	r24, 0x03	; 3
     b5c:	92 83       	std	Z+2, r25	; 0x02
     b5e:	81 83       	std	Z+1, r24	; 0x01
     b60:	2f ef       	ldi	r18, 0xFF	; 255
     b62:	3f ef       	ldi	r19, 0xFF	; 255
     b64:	34 83       	std	Z+4, r19	; 0x04
     b66:	23 83       	std	Z+3, r18	; 0x03
     b68:	96 83       	std	Z+6, r25	; 0x06
     b6a:	85 83       	std	Z+5, r24	; 0x05
     b6c:	90 87       	std	Z+8, r25	; 0x08
     b6e:	87 83       	std	Z+7, r24	; 0x07
     b70:	10 82       	st	Z, r1
     b72:	08 95       	ret

00000b74 <vListInitialiseItem>:
     b74:	fc 01       	movw	r30, r24
     b76:	11 86       	std	Z+9, r1	; 0x09
     b78:	10 86       	std	Z+8, r1	; 0x08
     b7a:	08 95       	ret

00000b7c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     b82:	48 81       	ld	r20, Y
     b84:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     b86:	4f 3f       	cpi	r20, 0xFF	; 255
     b88:	2f ef       	ldi	r18, 0xFF	; 255
     b8a:	52 07       	cpc	r21, r18
     b8c:	21 f4       	brne	.+8      	; 0xb96 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     b8e:	fc 01       	movw	r30, r24
     b90:	a7 81       	ldd	r26, Z+7	; 0x07
     b92:	b0 85       	ldd	r27, Z+8	; 0x08
     b94:	0d c0       	rjmp	.+26     	; 0xbb0 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     b96:	dc 01       	movw	r26, r24
     b98:	13 96       	adiw	r26, 0x03	; 3
     b9a:	01 c0       	rjmp	.+2      	; 0xb9e <vListInsert+0x22>
     b9c:	df 01       	movw	r26, r30
     b9e:	12 96       	adiw	r26, 0x02	; 2
     ba0:	ed 91       	ld	r30, X+
     ba2:	fc 91       	ld	r31, X
     ba4:	13 97       	sbiw	r26, 0x03	; 3
     ba6:	20 81       	ld	r18, Z
     ba8:	31 81       	ldd	r19, Z+1	; 0x01
     baa:	42 17       	cp	r20, r18
     bac:	53 07       	cpc	r21, r19
     bae:	b0 f7       	brcc	.-20     	; 0xb9c <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     bb0:	12 96       	adiw	r26, 0x02	; 2
     bb2:	ed 91       	ld	r30, X+
     bb4:	fc 91       	ld	r31, X
     bb6:	13 97       	sbiw	r26, 0x03	; 3
     bb8:	fb 83       	std	Y+3, r31	; 0x03
     bba:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     bbc:	d5 83       	std	Z+5, r29	; 0x05
     bbe:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     bc0:	bd 83       	std	Y+5, r27	; 0x05
     bc2:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	dc 93       	st	X, r29
     bc8:	ce 93       	st	-X, r28
     bca:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     bcc:	99 87       	std	Y+9, r25	; 0x09
     bce:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     bd0:	fc 01       	movw	r30, r24
     bd2:	20 81       	ld	r18, Z
     bd4:	2f 5f       	subi	r18, 0xFF	; 255
     bd6:	20 83       	st	Z, r18
}
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	08 95       	ret

00000bde <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     be4:	a0 85       	ldd	r26, Z+8	; 0x08
     be6:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     be8:	c2 81       	ldd	r28, Z+2	; 0x02
     bea:	d3 81       	ldd	r29, Z+3	; 0x03
     bec:	84 81       	ldd	r24, Z+4	; 0x04
     bee:	95 81       	ldd	r25, Z+5	; 0x05
     bf0:	9d 83       	std	Y+5, r25	; 0x05
     bf2:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     bf4:	c4 81       	ldd	r28, Z+4	; 0x04
     bf6:	d5 81       	ldd	r29, Z+5	; 0x05
     bf8:	82 81       	ldd	r24, Z+2	; 0x02
     bfa:	93 81       	ldd	r25, Z+3	; 0x03
     bfc:	9b 83       	std	Y+3, r25	; 0x03
     bfe:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     c00:	11 96       	adiw	r26, 0x01	; 1
     c02:	8d 91       	ld	r24, X+
     c04:	9c 91       	ld	r25, X
     c06:	12 97       	sbiw	r26, 0x02	; 2
     c08:	e8 17       	cp	r30, r24
     c0a:	f9 07       	cpc	r31, r25
     c0c:	31 f4       	brne	.+12     	; 0xc1a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     c0e:	84 81       	ldd	r24, Z+4	; 0x04
     c10:	95 81       	ldd	r25, Z+5	; 0x05
     c12:	12 96       	adiw	r26, 0x02	; 2
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     c1a:	11 86       	std	Z+9, r1	; 0x09
     c1c:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     c1e:	8c 91       	ld	r24, X
     c20:	81 50       	subi	r24, 0x01	; 1
     c22:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     c24:	8c 91       	ld	r24, X
}
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	08 95       	ret

00000c2c <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     c2c:	1b bc       	out	0x2b, r1	; 43
     c2e:	8c e7       	ldi	r24, 0x7C	; 124
     c30:	8a bd       	out	0x2a, r24	; 42
     c32:	8b e0       	ldi	r24, 0x0B	; 11
     c34:	8e bd       	out	0x2e, r24	; 46
     c36:	89 b7       	in	r24, 0x39	; 57
     c38:	80 61       	ori	r24, 0x10	; 16
     c3a:	89 bf       	out	0x39, r24	; 57
     c3c:	08 95       	ret

00000c3e <pxPortInitialiseStack>:
     c3e:	31 e1       	ldi	r19, 0x11	; 17
     c40:	fc 01       	movw	r30, r24
     c42:	30 83       	st	Z, r19
     c44:	31 97       	sbiw	r30, 0x01	; 1
     c46:	22 e2       	ldi	r18, 0x22	; 34
     c48:	20 83       	st	Z, r18
     c4a:	31 97       	sbiw	r30, 0x01	; 1
     c4c:	a3 e3       	ldi	r26, 0x33	; 51
     c4e:	a0 83       	st	Z, r26
     c50:	31 97       	sbiw	r30, 0x01	; 1
     c52:	60 83       	st	Z, r22
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	70 83       	st	Z, r23
     c58:	31 97       	sbiw	r30, 0x01	; 1
     c5a:	10 82       	st	Z, r1
     c5c:	31 97       	sbiw	r30, 0x01	; 1
     c5e:	60 e8       	ldi	r22, 0x80	; 128
     c60:	60 83       	st	Z, r22
     c62:	31 97       	sbiw	r30, 0x01	; 1
     c64:	10 82       	st	Z, r1
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	60 83       	st	Z, r22
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	63 e0       	ldi	r22, 0x03	; 3
     c70:	60 83       	st	Z, r22
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	64 e0       	ldi	r22, 0x04	; 4
     c76:	60 83       	st	Z, r22
     c78:	31 97       	sbiw	r30, 0x01	; 1
     c7a:	65 e0       	ldi	r22, 0x05	; 5
     c7c:	60 83       	st	Z, r22
     c7e:	31 97       	sbiw	r30, 0x01	; 1
     c80:	66 e0       	ldi	r22, 0x06	; 6
     c82:	60 83       	st	Z, r22
     c84:	31 97       	sbiw	r30, 0x01	; 1
     c86:	67 e0       	ldi	r22, 0x07	; 7
     c88:	60 83       	st	Z, r22
     c8a:	31 97       	sbiw	r30, 0x01	; 1
     c8c:	68 e0       	ldi	r22, 0x08	; 8
     c8e:	60 83       	st	Z, r22
     c90:	31 97       	sbiw	r30, 0x01	; 1
     c92:	69 e0       	ldi	r22, 0x09	; 9
     c94:	60 83       	st	Z, r22
     c96:	31 97       	sbiw	r30, 0x01	; 1
     c98:	60 e1       	ldi	r22, 0x10	; 16
     c9a:	60 83       	st	Z, r22
     c9c:	31 97       	sbiw	r30, 0x01	; 1
     c9e:	30 83       	st	Z, r19
     ca0:	31 97       	sbiw	r30, 0x01	; 1
     ca2:	32 e1       	ldi	r19, 0x12	; 18
     ca4:	30 83       	st	Z, r19
     ca6:	31 97       	sbiw	r30, 0x01	; 1
     ca8:	33 e1       	ldi	r19, 0x13	; 19
     caa:	30 83       	st	Z, r19
     cac:	31 97       	sbiw	r30, 0x01	; 1
     cae:	34 e1       	ldi	r19, 0x14	; 20
     cb0:	30 83       	st	Z, r19
     cb2:	31 97       	sbiw	r30, 0x01	; 1
     cb4:	35 e1       	ldi	r19, 0x15	; 21
     cb6:	30 83       	st	Z, r19
     cb8:	31 97       	sbiw	r30, 0x01	; 1
     cba:	36 e1       	ldi	r19, 0x16	; 22
     cbc:	30 83       	st	Z, r19
     cbe:	31 97       	sbiw	r30, 0x01	; 1
     cc0:	37 e1       	ldi	r19, 0x17	; 23
     cc2:	30 83       	st	Z, r19
     cc4:	31 97       	sbiw	r30, 0x01	; 1
     cc6:	38 e1       	ldi	r19, 0x18	; 24
     cc8:	30 83       	st	Z, r19
     cca:	31 97       	sbiw	r30, 0x01	; 1
     ccc:	39 e1       	ldi	r19, 0x19	; 25
     cce:	30 83       	st	Z, r19
     cd0:	31 97       	sbiw	r30, 0x01	; 1
     cd2:	30 e2       	ldi	r19, 0x20	; 32
     cd4:	30 83       	st	Z, r19
     cd6:	31 97       	sbiw	r30, 0x01	; 1
     cd8:	31 e2       	ldi	r19, 0x21	; 33
     cda:	30 83       	st	Z, r19
     cdc:	31 97       	sbiw	r30, 0x01	; 1
     cde:	20 83       	st	Z, r18
     ce0:	31 97       	sbiw	r30, 0x01	; 1
     ce2:	23 e2       	ldi	r18, 0x23	; 35
     ce4:	20 83       	st	Z, r18
     ce6:	31 97       	sbiw	r30, 0x01	; 1
     ce8:	40 83       	st	Z, r20
     cea:	31 97       	sbiw	r30, 0x01	; 1
     cec:	50 83       	st	Z, r21
     cee:	31 97       	sbiw	r30, 0x01	; 1
     cf0:	26 e2       	ldi	r18, 0x26	; 38
     cf2:	20 83       	st	Z, r18
     cf4:	31 97       	sbiw	r30, 0x01	; 1
     cf6:	27 e2       	ldi	r18, 0x27	; 39
     cf8:	20 83       	st	Z, r18
     cfa:	31 97       	sbiw	r30, 0x01	; 1
     cfc:	28 e2       	ldi	r18, 0x28	; 40
     cfe:	20 83       	st	Z, r18
     d00:	31 97       	sbiw	r30, 0x01	; 1
     d02:	29 e2       	ldi	r18, 0x29	; 41
     d04:	20 83       	st	Z, r18
     d06:	31 97       	sbiw	r30, 0x01	; 1
     d08:	20 e3       	ldi	r18, 0x30	; 48
     d0a:	20 83       	st	Z, r18
     d0c:	31 97       	sbiw	r30, 0x01	; 1
     d0e:	21 e3       	ldi	r18, 0x31	; 49
     d10:	20 83       	st	Z, r18
     d12:	86 97       	sbiw	r24, 0x26	; 38
     d14:	08 95       	ret

00000d16 <xPortStartScheduler>:
     d16:	0e 94 16 06 	call	0xc2c	; 0xc2c <prvSetupTimerInterrupt>
     d1a:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <pxCurrentTCB>
     d1e:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
     d22:	cd 91       	ld	r28, X+
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	dd 91       	ld	r29, X+
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	ff 91       	pop	r31
     d2c:	ef 91       	pop	r30
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	7f 91       	pop	r23
     d3c:	6f 91       	pop	r22
     d3e:	5f 91       	pop	r21
     d40:	4f 91       	pop	r20
     d42:	3f 91       	pop	r19
     d44:	2f 91       	pop	r18
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	df 90       	pop	r13
     d50:	cf 90       	pop	r12
     d52:	bf 90       	pop	r11
     d54:	af 90       	pop	r10
     d56:	9f 90       	pop	r9
     d58:	8f 90       	pop	r8
     d5a:	7f 90       	pop	r7
     d5c:	6f 90       	pop	r6
     d5e:	5f 90       	pop	r5
     d60:	4f 90       	pop	r4
     d62:	3f 90       	pop	r3
     d64:	2f 90       	pop	r2
     d66:	1f 90       	pop	r1
     d68:	0f 90       	pop	r0
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	0f 90       	pop	r0
     d6e:	08 95       	ret
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	08 95       	ret

00000d74 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d74:	0f 92       	push	r0
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	0f 92       	push	r0
     d7c:	1f 92       	push	r1
     d7e:	11 24       	eor	r1, r1
     d80:	2f 92       	push	r2
     d82:	3f 92       	push	r3
     d84:	4f 92       	push	r4
     d86:	5f 92       	push	r5
     d88:	6f 92       	push	r6
     d8a:	7f 92       	push	r7
     d8c:	8f 92       	push	r8
     d8e:	9f 92       	push	r9
     d90:	af 92       	push	r10
     d92:	bf 92       	push	r11
     d94:	cf 92       	push	r12
     d96:	df 92       	push	r13
     d98:	ef 92       	push	r14
     d9a:	ff 92       	push	r15
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	2f 93       	push	r18
     da2:	3f 93       	push	r19
     da4:	4f 93       	push	r20
     da6:	5f 93       	push	r21
     da8:	6f 93       	push	r22
     daa:	7f 93       	push	r23
     dac:	8f 93       	push	r24
     dae:	9f 93       	push	r25
     db0:	af 93       	push	r26
     db2:	bf 93       	push	r27
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	ef 93       	push	r30
     dba:	ff 93       	push	r31
     dbc:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <pxCurrentTCB>
     dc0:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
     dc4:	0d b6       	in	r0, 0x3d	; 61
     dc6:	0d 92       	st	X+, r0
     dc8:	0e b6       	in	r0, 0x3e	; 62
     dca:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     dcc:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     dd0:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <pxCurrentTCB>
     dd4:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
     dd8:	cd 91       	ld	r28, X+
     dda:	cd bf       	out	0x3d, r28	; 61
     ddc:	dd 91       	ld	r29, X+
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	ff 91       	pop	r31
     de2:	ef 91       	pop	r30
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	bf 91       	pop	r27
     dea:	af 91       	pop	r26
     dec:	9f 91       	pop	r25
     dee:	8f 91       	pop	r24
     df0:	7f 91       	pop	r23
     df2:	6f 91       	pop	r22
     df4:	5f 91       	pop	r21
     df6:	4f 91       	pop	r20
     df8:	3f 91       	pop	r19
     dfa:	2f 91       	pop	r18
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	cf 90       	pop	r12
     e08:	bf 90       	pop	r11
     e0a:	af 90       	pop	r10
     e0c:	9f 90       	pop	r9
     e0e:	8f 90       	pop	r8
     e10:	7f 90       	pop	r7
     e12:	6f 90       	pop	r6
     e14:	5f 90       	pop	r5
     e16:	4f 90       	pop	r4
     e18:	3f 90       	pop	r3
     e1a:	2f 90       	pop	r2
     e1c:	1f 90       	pop	r1
     e1e:	0f 90       	pop	r0
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	0f 90       	pop	r0

	asm volatile ( "ret" );
     e24:	08 95       	ret

00000e26 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     e26:	0f 92       	push	r0
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	0f 92       	push	r0
     e2e:	1f 92       	push	r1
     e30:	11 24       	eor	r1, r1
     e32:	2f 92       	push	r2
     e34:	3f 92       	push	r3
     e36:	4f 92       	push	r4
     e38:	5f 92       	push	r5
     e3a:	6f 92       	push	r6
     e3c:	7f 92       	push	r7
     e3e:	8f 92       	push	r8
     e40:	9f 92       	push	r9
     e42:	af 92       	push	r10
     e44:	bf 92       	push	r11
     e46:	cf 92       	push	r12
     e48:	df 92       	push	r13
     e4a:	ef 92       	push	r14
     e4c:	ff 92       	push	r15
     e4e:	0f 93       	push	r16
     e50:	1f 93       	push	r17
     e52:	2f 93       	push	r18
     e54:	3f 93       	push	r19
     e56:	4f 93       	push	r20
     e58:	5f 93       	push	r21
     e5a:	6f 93       	push	r22
     e5c:	7f 93       	push	r23
     e5e:	8f 93       	push	r24
     e60:	9f 93       	push	r25
     e62:	af 93       	push	r26
     e64:	bf 93       	push	r27
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	ef 93       	push	r30
     e6c:	ff 93       	push	r31
     e6e:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <pxCurrentTCB>
     e72:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
     e76:	0d b6       	in	r0, 0x3d	; 61
     e78:	0d 92       	st	X+, r0
     e7a:	0e b6       	in	r0, 0x3e	; 62
     e7c:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     e7e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <xTaskIncrementTick>
     e82:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     e84:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     e88:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <pxCurrentTCB>
     e8c:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
     e90:	cd 91       	ld	r28, X+
     e92:	cd bf       	out	0x3d, r28	; 61
     e94:	dd 91       	ld	r29, X+
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	ff 91       	pop	r31
     e9a:	ef 91       	pop	r30
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	bf 91       	pop	r27
     ea2:	af 91       	pop	r26
     ea4:	9f 91       	pop	r25
     ea6:	8f 91       	pop	r24
     ea8:	7f 91       	pop	r23
     eaa:	6f 91       	pop	r22
     eac:	5f 91       	pop	r21
     eae:	4f 91       	pop	r20
     eb0:	3f 91       	pop	r19
     eb2:	2f 91       	pop	r18
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	df 90       	pop	r13
     ebe:	cf 90       	pop	r12
     ec0:	bf 90       	pop	r11
     ec2:	af 90       	pop	r10
     ec4:	9f 90       	pop	r9
     ec6:	8f 90       	pop	r8
     ec8:	7f 90       	pop	r7
     eca:	6f 90       	pop	r6
     ecc:	5f 90       	pop	r5
     ece:	4f 90       	pop	r4
     ed0:	3f 90       	pop	r3
     ed2:	2f 90       	pop	r2
     ed4:	1f 90       	pop	r1
     ed6:	0f 90       	pop	r0
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	0f 90       	pop	r0

	asm volatile ( "ret" );
     edc:	08 95       	ret

00000ede <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     ede:	0e 94 13 07 	call	0xe26	; 0xe26 <vPortYieldFromTick>
		asm volatile ( "reti" );
     ee2:	18 95       	reti

00000ee4 <prvGetDisinheritPriorityAfterTimeout>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     ee4:	dc 01       	movw	r26, r24
     ee6:	51 96       	adiw	r26, 0x11	; 17
     ee8:	2c 91       	ld	r18, X
     eea:	51 97       	sbiw	r26, 0x11	; 17
     eec:	22 23       	and	r18, r18
     eee:	41 f0       	breq	.+16     	; 0xf00 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     ef0:	56 96       	adiw	r26, 0x16	; 22
     ef2:	ed 91       	ld	r30, X+
     ef4:	fc 91       	ld	r31, X
     ef6:	57 97       	sbiw	r26, 0x17	; 23
     ef8:	90 81       	ld	r25, Z
     efa:	85 e0       	ldi	r24, 0x05	; 5
     efc:	89 1b       	sub	r24, r25
     efe:	08 95       	ret
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	08 95       	ret

00000f04 <prvIsQueueEmpty>:
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	0f 92       	push	r0
     f0a:	fc 01       	movw	r30, r24
     f0c:	82 8d       	ldd	r24, Z+26	; 0x1a
     f0e:	81 11       	cpse	r24, r1
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <prvIsQueueEmpty+0x12>
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <prvIsQueueEmpty+0x14>
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	0f 90       	pop	r0
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	08 95       	ret

00000f1e <prvIsQueueFull>:
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	0f 92       	push	r0
     f24:	fc 01       	movw	r30, r24
     f26:	22 8d       	ldd	r18, Z+26	; 0x1a
     f28:	83 8d       	ldd	r24, Z+27	; 0x1b
     f2a:	28 13       	cpse	r18, r24
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <prvIsQueueFull+0x14>
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <prvIsQueueFull+0x16>
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	0f 90       	pop	r0
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	08 95       	ret

00000f3a <prvCopyDataToQueue>:
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	ec 01       	movw	r28, r24
     f44:	04 2f       	mov	r16, r20
     f46:	1a 8d       	ldd	r17, Y+26	; 0x1a
     f48:	4c 8d       	ldd	r20, Y+28	; 0x1c
     f4a:	41 11       	cpse	r20, r1
     f4c:	0c c0       	rjmp	.+24     	; 0xf66 <prvCopyDataToQueue+0x2c>
     f4e:	88 81       	ld	r24, Y
     f50:	99 81       	ldd	r25, Y+1	; 0x01
     f52:	89 2b       	or	r24, r25
     f54:	09 f0       	breq	.+2      	; 0xf58 <prvCopyDataToQueue+0x1e>
     f56:	42 c0       	rjmp	.+132    	; 0xfdc <prvCopyDataToQueue+0xa2>
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	9d 81       	ldd	r25, Y+5	; 0x05
     f5c:	0e 94 e5 10 	call	0x21ca	; 0x21ca <xTaskPriorityDisinherit>
     f60:	1d 82       	std	Y+5, r1	; 0x05
     f62:	1c 82       	std	Y+4, r1	; 0x04
     f64:	42 c0       	rjmp	.+132    	; 0xfea <prvCopyDataToQueue+0xb0>
     f66:	01 11       	cpse	r16, r1
     f68:	17 c0       	rjmp	.+46     	; 0xf98 <prvCopyDataToQueue+0x5e>
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	9b 81       	ldd	r25, Y+3	; 0x03
     f70:	0e 94 bc 13 	call	0x2778	; 0x2778 <memcpy>
     f74:	2c 8d       	ldd	r18, Y+28	; 0x1c
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	9b 81       	ldd	r25, Y+3	; 0x03
     f7a:	82 0f       	add	r24, r18
     f7c:	91 1d       	adc	r25, r1
     f7e:	9b 83       	std	Y+3, r25	; 0x03
     f80:	8a 83       	std	Y+2, r24	; 0x02
     f82:	2c 81       	ldd	r18, Y+4	; 0x04
     f84:	3d 81       	ldd	r19, Y+5	; 0x05
     f86:	82 17       	cp	r24, r18
     f88:	93 07       	cpc	r25, r19
     f8a:	50 f1       	brcs	.+84     	; 0xfe0 <prvCopyDataToQueue+0xa6>
     f8c:	88 81       	ld	r24, Y
     f8e:	99 81       	ldd	r25, Y+1	; 0x01
     f90:	9b 83       	std	Y+3, r25	; 0x03
     f92:	8a 83       	std	Y+2, r24	; 0x02
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	29 c0       	rjmp	.+82     	; 0xfea <prvCopyDataToQueue+0xb0>
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	8e 81       	ldd	r24, Y+6	; 0x06
     f9c:	9f 81       	ldd	r25, Y+7	; 0x07
     f9e:	0e 94 bc 13 	call	0x2778	; 0x2778 <memcpy>
     fa2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	91 95       	neg	r25
     fa8:	81 95       	neg	r24
     faa:	91 09       	sbc	r25, r1
     fac:	2e 81       	ldd	r18, Y+6	; 0x06
     fae:	3f 81       	ldd	r19, Y+7	; 0x07
     fb0:	28 0f       	add	r18, r24
     fb2:	39 1f       	adc	r19, r25
     fb4:	3f 83       	std	Y+7, r19	; 0x07
     fb6:	2e 83       	std	Y+6, r18	; 0x06
     fb8:	48 81       	ld	r20, Y
     fba:	59 81       	ldd	r21, Y+1	; 0x01
     fbc:	24 17       	cp	r18, r20
     fbe:	35 07       	cpc	r19, r21
     fc0:	30 f4       	brcc	.+12     	; 0xfce <prvCopyDataToQueue+0x94>
     fc2:	2c 81       	ldd	r18, Y+4	; 0x04
     fc4:	3d 81       	ldd	r19, Y+5	; 0x05
     fc6:	82 0f       	add	r24, r18
     fc8:	93 1f       	adc	r25, r19
     fca:	9f 83       	std	Y+7, r25	; 0x07
     fcc:	8e 83       	std	Y+6, r24	; 0x06
     fce:	02 30       	cpi	r16, 0x02	; 2
     fd0:	49 f4       	brne	.+18     	; 0xfe4 <prvCopyDataToQueue+0xaa>
     fd2:	11 23       	and	r17, r17
     fd4:	49 f0       	breq	.+18     	; 0xfe8 <prvCopyDataToQueue+0xae>
     fd6:	11 50       	subi	r17, 0x01	; 1
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	07 c0       	rjmp	.+14     	; 0xfea <prvCopyDataToQueue+0xb0>
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	05 c0       	rjmp	.+10     	; 0xfea <prvCopyDataToQueue+0xb0>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	03 c0       	rjmp	.+6      	; 0xfea <prvCopyDataToQueue+0xb0>
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	01 c0       	rjmp	.+2      	; 0xfea <prvCopyDataToQueue+0xb0>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	1f 5f       	subi	r17, 0xFF	; 255
     fec:	1a 8f       	std	Y+26, r17	; 0x1a
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	08 95       	ret

00000ff8 <prvUnlockQueue>:
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	ec 01       	movw	r28, r24
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	0f 92       	push	r0
    1006:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1008:	0b c0       	rjmp	.+22     	; 0x1020 <prvUnlockQueue+0x28>
    100a:	89 89       	ldd	r24, Y+17	; 0x11
    100c:	88 23       	and	r24, r24
    100e:	51 f0       	breq	.+20     	; 0x1024 <prvUnlockQueue+0x2c>
    1010:	ce 01       	movw	r24, r28
    1012:	41 96       	adiw	r24, 0x11	; 17
    1014:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTaskRemoveFromEventList>
    1018:	81 11       	cpse	r24, r1
    101a:	0e 94 4d 10 	call	0x209a	; 0x209a <vTaskMissedYield>
    101e:	11 50       	subi	r17, 0x01	; 1
    1020:	11 16       	cp	r1, r17
    1022:	9c f3       	brlt	.-26     	; 0x100a <prvUnlockQueue+0x12>
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	8e 8f       	std	Y+30, r24	; 0x1e
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	0f 92       	push	r0
    1032:	1d 8d       	ldd	r17, Y+29	; 0x1d
    1034:	0b c0       	rjmp	.+22     	; 0x104c <prvUnlockQueue+0x54>
    1036:	88 85       	ldd	r24, Y+8	; 0x08
    1038:	88 23       	and	r24, r24
    103a:	51 f0       	breq	.+20     	; 0x1050 <prvUnlockQueue+0x58>
    103c:	ce 01       	movw	r24, r28
    103e:	08 96       	adiw	r24, 0x08	; 8
    1040:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTaskRemoveFromEventList>
    1044:	81 11       	cpse	r24, r1
    1046:	0e 94 4d 10 	call	0x209a	; 0x209a <vTaskMissedYield>
    104a:	11 50       	subi	r17, 0x01	; 1
    104c:	11 16       	cp	r1, r17
    104e:	9c f3       	brlt	.-26     	; 0x1036 <prvUnlockQueue+0x3e>
    1050:	8f ef       	ldi	r24, 0xFF	; 255
    1052:	8d 8f       	std	Y+29, r24	; 0x1d
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	08 95       	ret

00001060 <xQueueGenericReset>:
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	fc 01       	movw	r30, r24
    106a:	36 2f       	mov	r19, r22
    106c:	89 2b       	or	r24, r25
    106e:	09 f4       	brne	.+2      	; 0x1072 <xQueueGenericReset+0x12>
    1070:	4d c0       	rjmp	.+154    	; 0x110c <xQueueGenericReset+0xac>
    1072:	23 8d       	ldd	r18, Z+27	; 0x1b
    1074:	22 23       	and	r18, r18
    1076:	09 f4       	brne	.+2      	; 0x107a <xQueueGenericReset+0x1a>
    1078:	4b c0       	rjmp	.+150    	; 0x1110 <xQueueGenericReset+0xb0>
    107a:	02 2f       	mov	r16, r18
    107c:	10 e0       	ldi	r17, 0x00	; 0
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	9f ef       	ldi	r25, 0xFF	; 255
    1082:	b8 01       	movw	r22, r16
    1084:	0e 94 86 13 	call	0x270c	; 0x270c <__udivmodhi4>
    1088:	44 8d       	ldd	r20, Z+28	; 0x1c
    108a:	84 2f       	mov	r24, r20
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	68 17       	cp	r22, r24
    1090:	79 07       	cpc	r23, r25
    1092:	08 f4       	brcc	.+2      	; 0x1096 <xQueueGenericReset+0x36>
    1094:	3f c0       	rjmp	.+126    	; 0x1114 <xQueueGenericReset+0xb4>
    1096:	ef 01       	movw	r28, r30
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	0f 92       	push	r0
    109e:	60 81       	ld	r22, Z
    10a0:	71 81       	ldd	r23, Z+1	; 0x01
    10a2:	fb 01       	movw	r30, r22
    10a4:	24 9f       	mul	r18, r20
    10a6:	e0 0d       	add	r30, r0
    10a8:	f1 1d       	adc	r31, r1
    10aa:	11 24       	eor	r1, r1
    10ac:	fd 83       	std	Y+5, r31	; 0x05
    10ae:	ec 83       	std	Y+4, r30	; 0x04
    10b0:	1a 8e       	std	Y+26, r1	; 0x1a
    10b2:	7b 83       	std	Y+3, r23	; 0x03
    10b4:	6a 83       	std	Y+2, r22	; 0x02
    10b6:	01 50       	subi	r16, 0x01	; 1
    10b8:	11 09       	sbc	r17, r1
    10ba:	80 9f       	mul	r24, r16
    10bc:	a0 01       	movw	r20, r0
    10be:	81 9f       	mul	r24, r17
    10c0:	50 0d       	add	r21, r0
    10c2:	90 9f       	mul	r25, r16
    10c4:	50 0d       	add	r21, r0
    10c6:	11 24       	eor	r1, r1
    10c8:	cb 01       	movw	r24, r22
    10ca:	84 0f       	add	r24, r20
    10cc:	95 1f       	adc	r25, r21
    10ce:	9f 83       	std	Y+7, r25	; 0x07
    10d0:	8e 83       	std	Y+6, r24	; 0x06
    10d2:	8f ef       	ldi	r24, 0xFF	; 255
    10d4:	8d 8f       	std	Y+29, r24	; 0x1d
    10d6:	8e 8f       	std	Y+30, r24	; 0x1e
    10d8:	31 11       	cpse	r19, r1
    10da:	0c c0       	rjmp	.+24     	; 0x10f4 <xQueueGenericReset+0x94>
    10dc:	88 85       	ldd	r24, Y+8	; 0x08
    10de:	88 23       	and	r24, r24
    10e0:	89 f0       	breq	.+34     	; 0x1104 <xQueueGenericReset+0xa4>
    10e2:	ce 01       	movw	r24, r28
    10e4:	08 96       	adiw	r24, 0x08	; 8
    10e6:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTaskRemoveFromEventList>
    10ea:	88 23       	and	r24, r24
    10ec:	59 f0       	breq	.+22     	; 0x1104 <xQueueGenericReset+0xa4>
    10ee:	0e 94 ba 06 	call	0xd74	; 0xd74 <vPortYield>
    10f2:	08 c0       	rjmp	.+16     	; 0x1104 <xQueueGenericReset+0xa4>
    10f4:	ce 01       	movw	r24, r28
    10f6:	08 96       	adiw	r24, 0x08	; 8
    10f8:	0e 94 ac 05 	call	0xb58	; 0xb58 <vListInitialise>
    10fc:	ce 01       	movw	r24, r28
    10fe:	41 96       	adiw	r24, 0x11	; 17
    1100:	0e 94 ac 05 	call	0xb58	; 0xb58 <vListInitialise>
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	05 c0       	rjmp	.+10     	; 0x1116 <xQueueGenericReset+0xb6>
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	03 c0       	rjmp	.+6      	; 0x1116 <xQueueGenericReset+0xb6>
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <xQueueGenericReset+0xb6>
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	08 95       	ret

00001120 <prvInitialiseNewQueue>:
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	f2 2e       	mov	r15, r18
    112c:	e8 01       	movw	r28, r16
    112e:	61 11       	cpse	r22, r1
    1130:	03 c0       	rjmp	.+6      	; 0x1138 <prvInitialiseNewQueue+0x18>
    1132:	19 83       	std	Y+1, r17	; 0x01
    1134:	08 83       	st	Y, r16
    1136:	02 c0       	rjmp	.+4      	; 0x113c <prvInitialiseNewQueue+0x1c>
    1138:	59 83       	std	Y+1, r21	; 0x01
    113a:	48 83       	st	Y, r20
    113c:	8b 8f       	std	Y+27, r24	; 0x1b
    113e:	6c 8f       	std	Y+28, r22	; 0x1c
    1140:	61 e0       	ldi	r22, 0x01	; 1
    1142:	ce 01       	movw	r24, r28
    1144:	0e 94 30 08 	call	0x1060	; 0x1060 <xQueueGenericReset>
    1148:	f8 a2       	std	Y+32, r15	; 0x20
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	ff 90       	pop	r15
    1154:	08 95       	ret

00001156 <xQueueGenericCreate>:
    1156:	df 92       	push	r13
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	38 2f       	mov	r19, r24
    1166:	e6 2f       	mov	r30, r22
    1168:	88 23       	and	r24, r24
    116a:	29 f1       	breq	.+74     	; 0x11b6 <xQueueGenericCreate+0x60>
    116c:	68 2f       	mov	r22, r24
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	8f ef       	ldi	r24, 0xFF	; 255
    1172:	9f ef       	ldi	r25, 0xFF	; 255
    1174:	0e 94 86 13 	call	0x270c	; 0x270c <__udivmodhi4>
    1178:	8e 2f       	mov	r24, r30
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	68 17       	cp	r22, r24
    117e:	79 07       	cpc	r23, r25
    1180:	e8 f0       	brcs	.+58     	; 0x11bc <xQueueGenericCreate+0x66>
    1182:	3e 9f       	mul	r19, r30
    1184:	c0 01       	movw	r24, r0
    1186:	11 24       	eor	r1, r1
    1188:	8f 3d       	cpi	r24, 0xDF	; 223
    118a:	2f ef       	ldi	r18, 0xFF	; 255
    118c:	92 07       	cpc	r25, r18
    118e:	c8 f4       	brcc	.+50     	; 0x11c2 <xQueueGenericCreate+0x6c>
    1190:	d4 2e       	mov	r13, r20
    1192:	de 2f       	mov	r29, r30
    1194:	c3 2f       	mov	r28, r19
    1196:	81 96       	adiw	r24, 0x21	; 33
    1198:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <pvPortMalloc>
    119c:	7c 01       	movw	r14, r24
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	91 f0       	breq	.+36     	; 0x11c6 <xQueueGenericCreate+0x70>
    11a2:	8c 01       	movw	r16, r24
    11a4:	2d 2d       	mov	r18, r13
    11a6:	ac 01       	movw	r20, r24
    11a8:	4f 5d       	subi	r20, 0xDF	; 223
    11aa:	5f 4f       	sbci	r21, 0xFF	; 255
    11ac:	6d 2f       	mov	r22, r29
    11ae:	8c 2f       	mov	r24, r28
    11b0:	0e 94 90 08 	call	0x1120	; 0x1120 <prvInitialiseNewQueue>
    11b4:	08 c0       	rjmp	.+16     	; 0x11c6 <xQueueGenericCreate+0x70>
    11b6:	e1 2c       	mov	r14, r1
    11b8:	f1 2c       	mov	r15, r1
    11ba:	05 c0       	rjmp	.+10     	; 0x11c6 <xQueueGenericCreate+0x70>
    11bc:	e1 2c       	mov	r14, r1
    11be:	f1 2c       	mov	r15, r1
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <xQueueGenericCreate+0x70>
    11c2:	e1 2c       	mov	r14, r1
    11c4:	f1 2c       	mov	r15, r1
    11c6:	c7 01       	movw	r24, r14
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	ff 90       	pop	r15
    11d2:	ef 90       	pop	r14
    11d4:	df 90       	pop	r13
    11d6:	08 95       	ret

000011d8 <xQueueGenericSend>:
    11d8:	cf 92       	push	r12
    11da:	df 92       	push	r13
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <xQueueGenericSend+0x12>
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <xQueueGenericSend+0x14>
    11ec:	1f 92       	push	r1
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	8c 01       	movw	r16, r24
    11f4:	7b 01       	movw	r14, r22
    11f6:	5d 83       	std	Y+5, r21	; 0x05
    11f8:	4c 83       	std	Y+4, r20	; 0x04
    11fa:	c2 2e       	mov	r12, r18
    11fc:	d1 2c       	mov	r13, r1
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	0f 92       	push	r0
    1204:	f8 01       	movw	r30, r16
    1206:	92 8d       	ldd	r25, Z+26	; 0x1a
    1208:	83 8d       	ldd	r24, Z+27	; 0x1b
    120a:	98 17       	cp	r25, r24
    120c:	18 f0       	brcs	.+6      	; 0x1214 <xQueueGenericSend+0x3c>
    120e:	f2 e0       	ldi	r31, 0x02	; 2
    1210:	cf 12       	cpse	r12, r31
    1212:	19 c0       	rjmp	.+50     	; 0x1246 <xQueueGenericSend+0x6e>
    1214:	4c 2d       	mov	r20, r12
    1216:	b7 01       	movw	r22, r14
    1218:	c8 01       	movw	r24, r16
    121a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <prvCopyDataToQueue>
    121e:	f8 01       	movw	r30, r16
    1220:	91 89       	ldd	r25, Z+17	; 0x11
    1222:	99 23       	and	r25, r25
    1224:	49 f0       	breq	.+18     	; 0x1238 <xQueueGenericSend+0x60>
    1226:	c8 01       	movw	r24, r16
    1228:	41 96       	adiw	r24, 0x11	; 17
    122a:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTaskRemoveFromEventList>
    122e:	88 23       	and	r24, r24
    1230:	31 f0       	breq	.+12     	; 0x123e <xQueueGenericSend+0x66>
    1232:	0e 94 ba 06 	call	0xd74	; 0xd74 <vPortYield>
    1236:	03 c0       	rjmp	.+6      	; 0x123e <xQueueGenericSend+0x66>
    1238:	81 11       	cpse	r24, r1
    123a:	0e 94 ba 06 	call	0xd74	; 0xd74 <vPortYield>
    123e:	0f 90       	pop	r0
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	4d c0       	rjmp	.+154    	; 0x12e0 <xQueueGenericSend+0x108>
    1246:	8c 81       	ldd	r24, Y+4	; 0x04
    1248:	9d 81       	ldd	r25, Y+5	; 0x05
    124a:	89 2b       	or	r24, r25
    124c:	21 f4       	brne	.+8      	; 0x1256 <xQueueGenericSend+0x7e>
    124e:	0f 90       	pop	r0
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	45 c0       	rjmp	.+138    	; 0x12e0 <xQueueGenericSend+0x108>
    1256:	d1 10       	cpse	r13, r1
    1258:	06 c0       	rjmp	.+12     	; 0x1266 <xQueueGenericSend+0x8e>
    125a:	ce 01       	movw	r24, r28
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	0e 94 03 10 	call	0x2006	; 0x2006 <vTaskInternalSetTimeOutState>
    1262:	dd 24       	eor	r13, r13
    1264:	d3 94       	inc	r13
    1266:	0f 90       	pop	r0
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <vTaskSuspendAll>
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	0f 92       	push	r0
    1274:	f8 01       	movw	r30, r16
    1276:	85 8d       	ldd	r24, Z+29	; 0x1d
    1278:	8f 3f       	cpi	r24, 0xFF	; 255
    127a:	09 f4       	brne	.+2      	; 0x127e <xQueueGenericSend+0xa6>
    127c:	15 8e       	std	Z+29, r1	; 0x1d
    127e:	f8 01       	movw	r30, r16
    1280:	86 8d       	ldd	r24, Z+30	; 0x1e
    1282:	8f 3f       	cpi	r24, 0xFF	; 255
    1284:	09 f4       	brne	.+2      	; 0x1288 <xQueueGenericSend+0xb0>
    1286:	16 8e       	std	Z+30, r1	; 0x1e
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	be 01       	movw	r22, r28
    128e:	6c 5f       	subi	r22, 0xFC	; 252
    1290:	7f 4f       	sbci	r23, 0xFF	; 255
    1292:	ce 01       	movw	r24, r28
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	0e 94 0e 10 	call	0x201c	; 0x201c <xTaskCheckForTimeOut>
    129a:	81 11       	cpse	r24, r1
    129c:	1b c0       	rjmp	.+54     	; 0x12d4 <xQueueGenericSend+0xfc>
    129e:	c8 01       	movw	r24, r16
    12a0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <prvIsQueueFull>
    12a4:	88 23       	and	r24, r24
    12a6:	81 f0       	breq	.+32     	; 0x12c8 <xQueueGenericSend+0xf0>
    12a8:	6c 81       	ldd	r22, Y+4	; 0x04
    12aa:	7d 81       	ldd	r23, Y+5	; 0x05
    12ac:	c8 01       	movw	r24, r16
    12ae:	08 96       	adiw	r24, 0x08	; 8
    12b0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <vTaskPlaceOnEventList>
    12b4:	c8 01       	movw	r24, r16
    12b6:	0e 94 fc 07 	call	0xff8	; 0xff8 <prvUnlockQueue>
    12ba:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <xTaskResumeAll>
    12be:	81 11       	cpse	r24, r1
    12c0:	9e cf       	rjmp	.-196    	; 0x11fe <xQueueGenericSend+0x26>
    12c2:	0e 94 ba 06 	call	0xd74	; 0xd74 <vPortYield>
    12c6:	9b cf       	rjmp	.-202    	; 0x11fe <xQueueGenericSend+0x26>
    12c8:	c8 01       	movw	r24, r16
    12ca:	0e 94 fc 07 	call	0xff8	; 0xff8 <prvUnlockQueue>
    12ce:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <xTaskResumeAll>
    12d2:	95 cf       	rjmp	.-214    	; 0x11fe <xQueueGenericSend+0x26>
    12d4:	c8 01       	movw	r24, r16
    12d6:	0e 94 fc 07 	call	0xff8	; 0xff8 <prvUnlockQueue>
    12da:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <xTaskResumeAll>
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	ff 90       	pop	r15
    12f4:	ef 90       	pop	r14
    12f6:	df 90       	pop	r13
    12f8:	cf 90       	pop	r12
    12fa:	08 95       	ret

000012fc <prvInitialiseMutex>:
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	69 f0       	breq	.+26     	; 0x131a <prvInitialiseMutex+0x1e>
    1300:	fc 01       	movw	r30, r24
    1302:	15 82       	std	Z+5, r1	; 0x05
    1304:	14 82       	std	Z+4, r1	; 0x04
    1306:	11 82       	std	Z+1, r1	; 0x01
    1308:	10 82       	st	Z, r1
    130a:	16 82       	std	Z+6, r1	; 0x06
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <xQueueGenericSend>
    131a:	08 95       	ret

0000131c <xQueueCreateMutex>:
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	48 2f       	mov	r20, r24
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	0e 94 ab 08 	call	0x1156	; 0x1156 <xQueueGenericCreate>
    132a:	ec 01       	movw	r28, r24
    132c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <prvInitialiseMutex>
    1330:	ce 01       	movw	r24, r28
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	08 95       	ret

00001338 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	00 d0       	rcall	.+0      	; 0x1346 <xQueueSemaphoreTake+0xe>
    1346:	00 d0       	rcall	.+0      	; 0x1348 <xQueueSemaphoreTake+0x10>
    1348:	1f 92       	push	r1
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	8c 01       	movw	r16, r24
    1350:	7d 83       	std	Y+5, r23	; 0x05
    1352:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
    1354:	e1 2c       	mov	r14, r1
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    BaseType_t xEntryTimeSet = pdFALSE;
    1356:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    135e:	f8 01       	movw	r30, r16
    1360:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    1362:	88 23       	and	r24, r24
    1364:	d1 f0       	breq	.+52     	; 0x139a <xQueueSemaphoreTake+0x62>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    1366:	81 50       	subi	r24, 0x01	; 1
    1368:	82 8f       	std	Z+26, r24	; 0x1a

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    136a:	80 81       	ld	r24, Z
    136c:	91 81       	ldd	r25, Z+1	; 0x01
    136e:	89 2b       	or	r24, r25
    1370:	29 f4       	brne	.+10     	; 0x137c <xQueueSemaphoreTake+0x44>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
    1372:	0e 94 bb 11 	call	0x2376	; 0x2376 <pvTaskIncrementMutexHeldCount>
    1376:	f8 01       	movw	r30, r16
    1378:	95 83       	std	Z+5, r25	; 0x05
    137a:	84 83       	std	Z+4, r24	; 0x04
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    137c:	f8 01       	movw	r30, r16
    137e:	80 85       	ldd	r24, Z+8	; 0x08
    1380:	88 23       	and	r24, r24
    1382:	39 f0       	breq	.+14     	; 0x1392 <xQueueSemaphoreTake+0x5a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1384:	c8 01       	movw	r24, r16
    1386:	08 96       	adiw	r24, 0x08	; 8
    1388:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTaskRemoveFromEventList>
    138c:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    138e:	0e 94 ba 06 	call	0xd74	; 0xd74 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    1392:	0f 90       	pop	r0
    1394:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	74 c0       	rjmp	.+232    	; 0x1482 <xQueueSemaphoreTake+0x14a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	9d 81       	ldd	r25, Y+5	; 0x05
    139e:	89 2b       	or	r24, r25
    13a0:	21 f4       	brne	.+8      	; 0x13aa <xQueueSemaphoreTake+0x72>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
    13a2:	0f 90       	pop	r0
    13a4:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	6c c0       	rjmp	.+216    	; 0x1482 <xQueueSemaphoreTake+0x14a>
                }
                else if( xEntryTimeSet == pdFALSE )
    13aa:	f1 10       	cpse	r15, r1
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <xQueueSemaphoreTake+0x82>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    13ae:	ce 01       	movw	r24, r28
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	0e 94 03 10 	call	0x2006	; 0x2006 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
    13b6:	ff 24       	eor	r15, r15
    13b8:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    13ba:	0f 90       	pop	r0
    13bc:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
    13be:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	0f 92       	push	r0
    13c8:	f8 01       	movw	r30, r16
    13ca:	85 8d       	ldd	r24, Z+29	; 0x1d
    13cc:	8f 3f       	cpi	r24, 0xFF	; 255
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <xQueueSemaphoreTake+0x9a>
    13d0:	15 8e       	std	Z+29, r1	; 0x1d
    13d2:	f8 01       	movw	r30, r16
    13d4:	86 8d       	ldd	r24, Z+30	; 0x1e
    13d6:	8f 3f       	cpi	r24, 0xFF	; 255
    13d8:	09 f4       	brne	.+2      	; 0x13dc <xQueueSemaphoreTake+0xa4>
    13da:	16 8e       	std	Z+30, r1	; 0x1e
    13dc:	0f 90       	pop	r0
    13de:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    13e0:	be 01       	movw	r22, r28
    13e2:	6c 5f       	subi	r22, 0xFC	; 252
    13e4:	7f 4f       	sbci	r23, 0xFF	; 255
    13e6:	ce 01       	movw	r24, r28
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	0e 94 0e 10 	call	0x201c	; 0x201c <xTaskCheckForTimeOut>
    13ee:	81 11       	cpse	r24, r1
    13f0:	2a c0       	rjmp	.+84     	; 0x1446 <xQueueSemaphoreTake+0x10e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    13f2:	c8 01       	movw	r24, r16
    13f4:	0e 94 82 07 	call	0xf04	; 0xf04 <prvIsQueueEmpty>
    13f8:	88 23       	and	r24, r24
    13fa:	f9 f0       	breq	.+62     	; 0x143a <xQueueSemaphoreTake+0x102>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    13fc:	f8 01       	movw	r30, r16
    13fe:	80 81       	ld	r24, Z
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	89 2b       	or	r24, r25
    1404:	51 f4       	brne	.+20     	; 0x141a <xQueueSemaphoreTake+0xe2>
                        {
                            taskENTER_CRITICAL();
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	0f 92       	push	r0
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
    140c:	84 81       	ldd	r24, Z+4	; 0x04
    140e:	95 81       	ldd	r25, Z+5	; 0x05
    1410:	0e 94 51 10 	call	0x20a2	; 0x20a2 <xTaskPriorityInherit>
    1414:	e8 2e       	mov	r14, r24
                            }
                            taskEXIT_CRITICAL();
    1416:	0f 90       	pop	r0
    1418:	0f be       	out	0x3f, r0	; 63
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    141a:	6c 81       	ldd	r22, Y+4	; 0x04
    141c:	7d 81       	ldd	r23, Y+5	; 0x05
    141e:	c8 01       	movw	r24, r16
    1420:	41 96       	adiw	r24, 0x11	; 17
    1422:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    1426:	c8 01       	movw	r24, r16
    1428:	0e 94 fc 07 	call	0xff8	; 0xff8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    142c:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <xTaskResumeAll>
    1430:	81 11       	cpse	r24, r1
    1432:	92 cf       	rjmp	.-220    	; 0x1358 <xQueueSemaphoreTake+0x20>
                {
                    portYIELD_WITHIN_API();
    1434:	0e 94 ba 06 	call	0xd74	; 0xd74 <vPortYield>
    1438:	8f cf       	rjmp	.-226    	; 0x1358 <xQueueSemaphoreTake+0x20>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
    143a:	c8 01       	movw	r24, r16
    143c:	0e 94 fc 07 	call	0xff8	; 0xff8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    1440:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <xTaskResumeAll>
    1444:	89 cf       	rjmp	.-238    	; 0x1358 <xQueueSemaphoreTake+0x20>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
    1446:	c8 01       	movw	r24, r16
    1448:	0e 94 fc 07 	call	0xff8	; 0xff8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    144c:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1450:	c8 01       	movw	r24, r16
    1452:	0e 94 82 07 	call	0xf04	; 0xf04 <prvIsQueueEmpty>
    1456:	88 23       	and	r24, r24
    1458:	09 f4       	brne	.+2      	; 0x145c <xQueueSemaphoreTake+0x124>
    145a:	7e cf       	rjmp	.-260    	; 0x1358 <xQueueSemaphoreTake+0x20>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
    145c:	ee 20       	and	r14, r14
    145e:	81 f0       	breq	.+32     	; 0x1480 <xQueueSemaphoreTake+0x148>
                        {
                            taskENTER_CRITICAL();
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	0f 92       	push	r0
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    1466:	c8 01       	movw	r24, r16
    1468:	0e 94 72 07 	call	0xee4	; 0xee4 <prvGetDisinheritPriorityAfterTimeout>
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
    146c:	68 2f       	mov	r22, r24
    146e:	f8 01       	movw	r30, r16
    1470:	84 81       	ldd	r24, Z+4	; 0x04
    1472:	95 81       	ldd	r25, Z+5	; 0x05
    1474:	0e 94 48 11 	call	0x2290	; 0x2290 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
    1478:	0f 90       	pop	r0
    147a:	0f be       	out	0x3f, r0	; 63
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <xQueueSemaphoreTake+0x14a>
    1480:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	1f 91       	pop	r17
    1492:	0f 91       	pop	r16
    1494:	ff 90       	pop	r15
    1496:	ef 90       	pop	r14
    1498:	08 95       	ret

0000149a <prvResetNextTaskUnblockTime>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
    149a:	e0 91 fc 03 	lds	r30, 0x03FC	; 0x8003fc <pxDelayedTaskList>
    149e:	f0 91 fd 03 	lds	r31, 0x03FD	; 0x8003fd <pxDelayedTaskList+0x1>
    14a2:	80 81       	ld	r24, Z
    14a4:	81 11       	cpse	r24, r1
    14a6:	07 c0       	rjmp	.+14     	; 0x14b6 <prvResetNextTaskUnblockTime+0x1c>
    14a8:	8f ef       	ldi	r24, 0xFF	; 255
    14aa:	9f ef       	ldi	r25, 0xFF	; 255
    14ac:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <xNextTaskUnblockTime+0x1>
    14b0:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <xNextTaskUnblockTime>
    14b4:	08 95       	ret
    14b6:	e0 91 fc 03 	lds	r30, 0x03FC	; 0x8003fc <pxDelayedTaskList>
    14ba:	f0 91 fd 03 	lds	r31, 0x03FD	; 0x8003fd <pxDelayedTaskList+0x1>
    14be:	05 80       	ldd	r0, Z+5	; 0x05
    14c0:	f6 81       	ldd	r31, Z+6	; 0x06
    14c2:	e0 2d       	mov	r30, r0
    14c4:	80 81       	ld	r24, Z
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <xNextTaskUnblockTime+0x1>
    14cc:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <xNextTaskUnblockTime>
    14d0:	08 95       	ret

000014d2 <prvDeleteTCB>:
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	ec 01       	movw	r28, r24
    14d8:	8f 89       	ldd	r24, Y+23	; 0x17
    14da:	98 8d       	ldd	r25, Y+24	; 0x18
    14dc:	0e 94 79 05 	call	0xaf2	; 0xaf2 <vPortFree>
    14e0:	ce 01       	movw	r24, r28
    14e2:	0e 94 79 05 	call	0xaf2	; 0xaf2 <vPortFree>
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	08 95       	ret

000014ec <prvInitialiseNewTask>:
    14ec:	2f 92       	push	r2
    14ee:	3f 92       	push	r3
    14f0:	4f 92       	push	r4
    14f2:	5f 92       	push	r5
    14f4:	6f 92       	push	r6
    14f6:	7f 92       	push	r7
    14f8:	8f 92       	push	r8
    14fa:	9f 92       	push	r9
    14fc:	af 92       	push	r10
    14fe:	bf 92       	push	r11
    1500:	cf 92       	push	r12
    1502:	df 92       	push	r13
    1504:	ef 92       	push	r14
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	1c 01       	movw	r2, r24
    1514:	4b 01       	movw	r8, r22
    1516:	29 01       	movw	r4, r18
    1518:	3a 01       	movw	r6, r20
    151a:	a9 01       	movw	r20, r18
    151c:	65 ea       	ldi	r22, 0xA5	; 165
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	d5 01       	movw	r26, r10
    1522:	57 96       	adiw	r26, 0x17	; 23
    1524:	8d 91       	ld	r24, X+
    1526:	9c 91       	ld	r25, X
    1528:	58 97       	sbiw	r26, 0x18	; 24
    152a:	0e 94 c5 13 	call	0x278a	; 0x278a <memset>
    152e:	f5 01       	movw	r30, r10
    1530:	87 89       	ldd	r24, Z+23	; 0x17
    1532:	90 8d       	ldd	r25, Z+24	; 0x18
    1534:	f1 e0       	ldi	r31, 0x01	; 1
    1536:	4f 1a       	sub	r4, r31
    1538:	51 08       	sbc	r5, r1
    153a:	48 0e       	add	r4, r24
    153c:	59 1e       	adc	r5, r25
    153e:	81 14       	cp	r8, r1
    1540:	91 04       	cpc	r9, r1
    1542:	89 f4       	brne	.+34     	; 0x1566 <prvInitialiseNewTask+0x7a>
    1544:	17 c0       	rjmp	.+46     	; 0x1574 <prvInitialiseNewTask+0x88>
    1546:	82 2f       	mov	r24, r18
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	f4 01       	movw	r30, r8
    154c:	e8 0f       	add	r30, r24
    154e:	f9 1f       	adc	r31, r25
    1550:	30 81       	ld	r19, Z
    1552:	d5 01       	movw	r26, r10
    1554:	a8 0f       	add	r26, r24
    1556:	b9 1f       	adc	r27, r25
    1558:	59 96       	adiw	r26, 0x19	; 25
    155a:	3c 93       	st	X, r19
    155c:	80 81       	ld	r24, Z
    155e:	88 23       	and	r24, r24
    1560:	29 f0       	breq	.+10     	; 0x156c <prvInitialiseNewTask+0x80>
    1562:	2f 5f       	subi	r18, 0xFF	; 255
    1564:	01 c0       	rjmp	.+2      	; 0x1568 <prvInitialiseNewTask+0x7c>
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	2a 30       	cpi	r18, 0x0A	; 10
    156a:	68 f3       	brcs	.-38     	; 0x1546 <prvInitialiseNewTask+0x5a>
    156c:	d5 01       	movw	r26, r10
    156e:	92 96       	adiw	r26, 0x22	; 34
    1570:	1c 92       	st	X, r1
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <prvInitialiseNewTask+0x8c>
    1574:	f5 01       	movw	r30, r10
    1576:	11 8e       	std	Z+25, r1	; 0x19
    1578:	f4 e0       	ldi	r31, 0x04	; 4
    157a:	fe 15       	cp	r31, r14
    157c:	18 f4       	brcc	.+6      	; 0x1584 <prvInitialiseNewTask+0x98>
    157e:	68 94       	set
    1580:	ee 24       	eor	r14, r14
    1582:	e2 f8       	bld	r14, 2
    1584:	d5 01       	movw	r26, r10
    1586:	56 96       	adiw	r26, 0x16	; 22
    1588:	ec 92       	st	X, r14
    158a:	56 97       	sbiw	r26, 0x16	; 22
    158c:	95 96       	adiw	r26, 0x25	; 37
    158e:	ec 92       	st	X, r14
    1590:	95 97       	sbiw	r26, 0x25	; 37
    1592:	96 96       	adiw	r26, 0x26	; 38
    1594:	1c 92       	st	X, r1
    1596:	c5 01       	movw	r24, r10
    1598:	02 96       	adiw	r24, 0x02	; 2
    159a:	0e 94 ba 05 	call	0xb74	; 0xb74 <vListInitialiseItem>
    159e:	c5 01       	movw	r24, r10
    15a0:	0c 96       	adiw	r24, 0x0c	; 12
    15a2:	0e 94 ba 05 	call	0xb74	; 0xb74 <vListInitialiseItem>
    15a6:	f5 01       	movw	r30, r10
    15a8:	b1 86       	std	Z+9, r11	; 0x09
    15aa:	a0 86       	std	Z+8, r10	; 0x08
    15ac:	85 e0       	ldi	r24, 0x05	; 5
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	8e 19       	sub	r24, r14
    15b2:	91 09       	sbc	r25, r1
    15b4:	95 87       	std	Z+13, r25	; 0x0d
    15b6:	84 87       	std	Z+12, r24	; 0x0c
    15b8:	b3 8a       	std	Z+19, r11	; 0x13
    15ba:	a2 8a       	std	Z+18, r10	; 0x12
    15bc:	84 e0       	ldi	r24, 0x04	; 4
    15be:	b7 96       	adiw	r30, 0x27	; 39
    15c0:	df 01       	movw	r26, r30
    15c2:	1d 92       	st	X+, r1
    15c4:	8a 95       	dec	r24
    15c6:	e9 f7       	brne	.-6      	; 0x15c2 <prvInitialiseNewTask+0xd6>
    15c8:	f5 01       	movw	r30, r10
    15ca:	13 a6       	std	Z+43, r1	; 0x2b
    15cc:	a8 01       	movw	r20, r16
    15ce:	b1 01       	movw	r22, r2
    15d0:	c2 01       	movw	r24, r4
    15d2:	0e 94 1f 06 	call	0xc3e	; 0xc3e <pxPortInitialiseStack>
    15d6:	d5 01       	movw	r26, r10
    15d8:	8d 93       	st	X+, r24
    15da:	9c 93       	st	X, r25
    15dc:	c1 14       	cp	r12, r1
    15de:	d1 04       	cpc	r13, r1
    15e0:	19 f0       	breq	.+6      	; 0x15e8 <prvInitialiseNewTask+0xfc>
    15e2:	f6 01       	movw	r30, r12
    15e4:	b1 82       	std	Z+1, r11	; 0x01
    15e6:	a0 82       	st	Z, r10
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	ef 90       	pop	r14
    15f2:	df 90       	pop	r13
    15f4:	cf 90       	pop	r12
    15f6:	bf 90       	pop	r11
    15f8:	af 90       	pop	r10
    15fa:	9f 90       	pop	r9
    15fc:	8f 90       	pop	r8
    15fe:	7f 90       	pop	r7
    1600:	6f 90       	pop	r6
    1602:	5f 90       	pop	r5
    1604:	4f 90       	pop	r4
    1606:	3f 90       	pop	r3
    1608:	2f 90       	pop	r2
    160a:	08 95       	ret

0000160c <prvInitialiseTaskLists>:
    160c:	cf 93       	push	r28
    160e:	c0 e0       	ldi	r28, 0x00	; 0
    1610:	10 c0       	rjmp	.+32     	; 0x1632 <prvInitialiseTaskLists+0x26>
    1612:	8c 2f       	mov	r24, r28
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	9c 01       	movw	r18, r24
    1618:	22 0f       	add	r18, r18
    161a:	33 1f       	adc	r19, r19
    161c:	22 0f       	add	r18, r18
    161e:	33 1f       	adc	r19, r19
    1620:	22 0f       	add	r18, r18
    1622:	33 1f       	adc	r19, r19
    1624:	82 0f       	add	r24, r18
    1626:	93 1f       	adc	r25, r19
    1628:	80 5f       	subi	r24, 0xF0	; 240
    162a:	9b 4f       	sbci	r25, 0xFB	; 251
    162c:	0e 94 ac 05 	call	0xb58	; 0xb58 <vListInitialise>
    1630:	cf 5f       	subi	r28, 0xFF	; 255
    1632:	c5 30       	cpi	r28, 0x05	; 5
    1634:	70 f3       	brcs	.-36     	; 0x1612 <prvInitialiseTaskLists+0x6>
    1636:	87 e0       	ldi	r24, 0x07	; 7
    1638:	94 e0       	ldi	r25, 0x04	; 4
    163a:	0e 94 ac 05 	call	0xb58	; 0xb58 <vListInitialise>
    163e:	8e ef       	ldi	r24, 0xFE	; 254
    1640:	93 e0       	ldi	r25, 0x03	; 3
    1642:	0e 94 ac 05 	call	0xb58	; 0xb58 <vListInitialise>
    1646:	81 ef       	ldi	r24, 0xF1	; 241
    1648:	93 e0       	ldi	r25, 0x03	; 3
    164a:	0e 94 ac 05 	call	0xb58	; 0xb58 <vListInitialise>
    164e:	88 ee       	ldi	r24, 0xE8	; 232
    1650:	93 e0       	ldi	r25, 0x03	; 3
    1652:	0e 94 ac 05 	call	0xb58	; 0xb58 <vListInitialise>
    1656:	8e ed       	ldi	r24, 0xDE	; 222
    1658:	93 e0       	ldi	r25, 0x03	; 3
    165a:	0e 94 ac 05 	call	0xb58	; 0xb58 <vListInitialise>
    165e:	87 e0       	ldi	r24, 0x07	; 7
    1660:	94 e0       	ldi	r25, 0x04	; 4
    1662:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <pxDelayedTaskList+0x1>
    1666:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <pxDelayedTaskList>
    166a:	8e ef       	ldi	r24, 0xFE	; 254
    166c:	93 e0       	ldi	r25, 0x03	; 3
    166e:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <pxOverflowDelayedTaskList+0x1>
    1672:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <pxOverflowDelayedTaskList>
    1676:	cf 91       	pop	r28
    1678:	08 95       	ret

0000167a <prvAddNewTaskToReadyList>:
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	ec 01       	movw	r28, r24
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	0f 92       	push	r0
    1686:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <uxCurrentNumberOfTasks>
    168a:	8f 5f       	subi	r24, 0xFF	; 255
    168c:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <uxCurrentNumberOfTasks>
    1690:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <pxCurrentTCB>
    1694:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    1698:	89 2b       	or	r24, r25
    169a:	59 f4       	brne	.+22     	; 0x16b2 <prvAddNewTaskToReadyList+0x38>
    169c:	d0 93 3e 04 	sts	0x043E, r29	; 0x80043e <pxCurrentTCB+0x1>
    16a0:	c0 93 3d 04 	sts	0x043D, r28	; 0x80043d <pxCurrentTCB>
    16a4:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <uxCurrentNumberOfTasks>
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	99 f4       	brne	.+38     	; 0x16d2 <prvAddNewTaskToReadyList+0x58>
    16ac:	0e 94 06 0b 	call	0x160c	; 0x160c <prvInitialiseTaskLists>
    16b0:	10 c0       	rjmp	.+32     	; 0x16d2 <prvAddNewTaskToReadyList+0x58>
    16b2:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <xSchedulerRunning>
    16b6:	81 11       	cpse	r24, r1
    16b8:	0c c0       	rjmp	.+24     	; 0x16d2 <prvAddNewTaskToReadyList+0x58>
    16ba:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <pxCurrentTCB>
    16be:	f0 91 3e 04 	lds	r31, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    16c2:	96 89       	ldd	r25, Z+22	; 0x16
    16c4:	8e 89       	ldd	r24, Y+22	; 0x16
    16c6:	89 17       	cp	r24, r25
    16c8:	20 f0       	brcs	.+8      	; 0x16d2 <prvAddNewTaskToReadyList+0x58>
    16ca:	d0 93 3e 04 	sts	0x043E, r29	; 0x80043e <pxCurrentTCB+0x1>
    16ce:	c0 93 3d 04 	sts	0x043D, r28	; 0x80043d <pxCurrentTCB>
    16d2:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <uxTaskNumber>
    16d6:	8f 5f       	subi	r24, 0xFF	; 255
    16d8:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <uxTaskNumber>
    16dc:	8b a3       	std	Y+35, r24	; 0x23
    16de:	8e 89       	ldd	r24, Y+22	; 0x16
    16e0:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <uxTopReadyPriority>
    16e4:	98 17       	cp	r25, r24
    16e6:	10 f4       	brcc	.+4      	; 0x16ec <prvAddNewTaskToReadyList+0x72>
    16e8:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <uxTopReadyPriority>
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	fc 01       	movw	r30, r24
    16f0:	ee 0f       	add	r30, r30
    16f2:	ff 1f       	adc	r31, r31
    16f4:	ee 0f       	add	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	ee 0f       	add	r30, r30
    16fa:	ff 1f       	adc	r31, r31
    16fc:	8e 0f       	add	r24, r30
    16fe:	9f 1f       	adc	r25, r31
    1700:	fc 01       	movw	r30, r24
    1702:	e0 5f       	subi	r30, 0xF0	; 240
    1704:	fb 4f       	sbci	r31, 0xFB	; 251
    1706:	01 80       	ldd	r0, Z+1	; 0x01
    1708:	f2 81       	ldd	r31, Z+2	; 0x02
    170a:	e0 2d       	mov	r30, r0
    170c:	fd 83       	std	Y+5, r31	; 0x05
    170e:	ec 83       	std	Y+4, r30	; 0x04
    1710:	84 81       	ldd	r24, Z+4	; 0x04
    1712:	95 81       	ldd	r25, Z+5	; 0x05
    1714:	9f 83       	std	Y+7, r25	; 0x07
    1716:	8e 83       	std	Y+6, r24	; 0x06
    1718:	a4 81       	ldd	r26, Z+4	; 0x04
    171a:	b5 81       	ldd	r27, Z+5	; 0x05
    171c:	ce 01       	movw	r24, r28
    171e:	02 96       	adiw	r24, 0x02	; 2
    1720:	13 96       	adiw	r26, 0x03	; 3
    1722:	9c 93       	st	X, r25
    1724:	8e 93       	st	-X, r24
    1726:	12 97       	sbiw	r26, 0x02	; 2
    1728:	95 83       	std	Z+5, r25	; 0x05
    172a:	84 83       	std	Z+4, r24	; 0x04
    172c:	ee 89       	ldd	r30, Y+22	; 0x16
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	cf 01       	movw	r24, r30
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	e8 0f       	add	r30, r24
    1740:	f9 1f       	adc	r31, r25
    1742:	e0 5f       	subi	r30, 0xF0	; 240
    1744:	fb 4f       	sbci	r31, 0xFB	; 251
    1746:	fb 87       	std	Y+11, r31	; 0x0b
    1748:	ea 87       	std	Y+10, r30	; 0x0a
    174a:	80 81       	ld	r24, Z
    174c:	8f 5f       	subi	r24, 0xFF	; 255
    174e:	80 83       	st	Z, r24
    1750:	0f 90       	pop	r0
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <xSchedulerRunning>
    1758:	88 23       	and	r24, r24
    175a:	51 f0       	breq	.+20     	; 0x1770 <prvAddNewTaskToReadyList+0xf6>
    175c:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <pxCurrentTCB>
    1760:	f0 91 3e 04 	lds	r31, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    1764:	96 89       	ldd	r25, Z+22	; 0x16
    1766:	8e 89       	ldd	r24, Y+22	; 0x16
    1768:	98 17       	cp	r25, r24
    176a:	10 f4       	brcc	.+4      	; 0x1770 <prvAddNewTaskToReadyList+0xf6>
    176c:	0e 94 ba 06 	call	0xd74	; 0xd74 <vPortYield>
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	08 95       	ret

00001776 <prvCheckTasksWaitingTermination>:
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	1c c0       	rjmp	.+56     	; 0x17b4 <prvCheckTasksWaitingTermination+0x3e>
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	0f 92       	push	r0
    1782:	e0 91 ed 03 	lds	r30, 0x03ED	; 0x8003ed <xTasksWaitingTermination+0x5>
    1786:	f0 91 ee 03 	lds	r31, 0x03EE	; 0x8003ee <xTasksWaitingTermination+0x6>
    178a:	c6 81       	ldd	r28, Z+6	; 0x06
    178c:	d7 81       	ldd	r29, Z+7	; 0x07
    178e:	ce 01       	movw	r24, r28
    1790:	02 96       	adiw	r24, 0x02	; 2
    1792:	0e 94 ef 05 	call	0xbde	; 0xbde <uxListRemove>
    1796:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <uxCurrentNumberOfTasks>
    179a:	81 50       	subi	r24, 0x01	; 1
    179c:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <uxCurrentNumberOfTasks>
    17a0:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <uxDeletedTasksWaitingCleanUp>
    17a4:	81 50       	subi	r24, 0x01	; 1
    17a6:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <uxDeletedTasksWaitingCleanUp>
    17aa:	0f 90       	pop	r0
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	ce 01       	movw	r24, r28
    17b0:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <prvDeleteTCB>
    17b4:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <uxDeletedTasksWaitingCleanUp>
    17b8:	81 11       	cpse	r24, r1
    17ba:	e0 cf       	rjmp	.-64     	; 0x177c <prvCheckTasksWaitingTermination+0x6>
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	08 95       	ret

000017c2 <prvIdleTask>:
    17c2:	0e 94 bb 0b 	call	0x1776	; 0x1776 <prvCheckTasksWaitingTermination>
    17c6:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <pxReadyTasksLists>
    17ca:	82 30       	cpi	r24, 0x02	; 2
    17cc:	d0 f3       	brcs	.-12     	; 0x17c2 <prvIdleTask>
    17ce:	0e 94 ba 06 	call	0xd74	; 0xd74 <vPortYield>
    17d2:	f7 cf       	rjmp	.-18     	; 0x17c2 <prvIdleTask>

000017d4 <prvAddCurrentTaskToDelayedList>:
    17d4:	ff 92       	push	r15
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	ec 01       	movw	r28, r24
    17e0:	f6 2e       	mov	r15, r22
    17e2:	00 91 db 03 	lds	r16, 0x03DB	; 0x8003db <xTickCount>
    17e6:	10 91 dc 03 	lds	r17, 0x03DC	; 0x8003dc <xTickCount+0x1>
    17ea:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <pxCurrentTCB>
    17ee:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    17f2:	02 96       	adiw	r24, 0x02	; 2
    17f4:	0e 94 ef 05 	call	0xbde	; 0xbde <uxListRemove>
    17f8:	cf 3f       	cpi	r28, 0xFF	; 255
    17fa:	8f ef       	ldi	r24, 0xFF	; 255
    17fc:	d8 07       	cpc	r29, r24
    17fe:	b1 f5       	brne	.+108    	; 0x186c <prvAddCurrentTaskToDelayedList+0x98>
    1800:	ff 20       	and	r15, r15
    1802:	a1 f1       	breq	.+104    	; 0x186c <prvAddCurrentTaskToDelayedList+0x98>
    1804:	ee ed       	ldi	r30, 0xDE	; 222
    1806:	f3 e0       	ldi	r31, 0x03	; 3
    1808:	a1 81       	ldd	r26, Z+1	; 0x01
    180a:	b2 81       	ldd	r27, Z+2	; 0x02
    180c:	c0 91 3d 04 	lds	r28, 0x043D	; 0x80043d <pxCurrentTCB>
    1810:	d0 91 3e 04 	lds	r29, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    1814:	bd 83       	std	Y+5, r27	; 0x05
    1816:	ac 83       	std	Y+4, r26	; 0x04
    1818:	c0 91 3d 04 	lds	r28, 0x043D	; 0x80043d <pxCurrentTCB>
    181c:	d0 91 3e 04 	lds	r29, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    1820:	14 96       	adiw	r26, 0x04	; 4
    1822:	8d 91       	ld	r24, X+
    1824:	9c 91       	ld	r25, X
    1826:	15 97       	sbiw	r26, 0x05	; 5
    1828:	9f 83       	std	Y+7, r25	; 0x07
    182a:	8e 83       	std	Y+6, r24	; 0x06
    182c:	14 96       	adiw	r26, 0x04	; 4
    182e:	cd 91       	ld	r28, X+
    1830:	dc 91       	ld	r29, X
    1832:	15 97       	sbiw	r26, 0x05	; 5
    1834:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <pxCurrentTCB>
    1838:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    183c:	02 96       	adiw	r24, 0x02	; 2
    183e:	9b 83       	std	Y+3, r25	; 0x03
    1840:	8a 83       	std	Y+2, r24	; 0x02
    1842:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <pxCurrentTCB>
    1846:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    184a:	02 96       	adiw	r24, 0x02	; 2
    184c:	15 96       	adiw	r26, 0x05	; 5
    184e:	9c 93       	st	X, r25
    1850:	8e 93       	st	-X, r24
    1852:	14 97       	sbiw	r26, 0x04	; 4
    1854:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <pxCurrentTCB>
    1858:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    185c:	1b 96       	adiw	r26, 0x0b	; 11
    185e:	fc 93       	st	X, r31
    1860:	ee 93       	st	-X, r30
    1862:	1a 97       	sbiw	r26, 0x0a	; 10
    1864:	80 81       	ld	r24, Z
    1866:	8f 5f       	subi	r24, 0xFF	; 255
    1868:	80 83       	st	Z, r24
    186a:	2f c0       	rjmp	.+94     	; 0x18ca <prvAddCurrentTaskToDelayedList+0xf6>
    186c:	c0 0f       	add	r28, r16
    186e:	d1 1f       	adc	r29, r17
    1870:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <pxCurrentTCB>
    1874:	f0 91 3e 04 	lds	r31, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    1878:	d3 83       	std	Z+3, r29	; 0x03
    187a:	c2 83       	std	Z+2, r28	; 0x02
    187c:	c0 17       	cp	r28, r16
    187e:	d1 07       	cpc	r29, r17
    1880:	68 f4       	brcc	.+26     	; 0x189c <prvAddCurrentTaskToDelayedList+0xc8>
    1882:	60 91 3d 04 	lds	r22, 0x043D	; 0x80043d <pxCurrentTCB>
    1886:	70 91 3e 04 	lds	r23, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    188a:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <pxOverflowDelayedTaskList>
    188e:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <pxOverflowDelayedTaskList+0x1>
    1892:	6e 5f       	subi	r22, 0xFE	; 254
    1894:	7f 4f       	sbci	r23, 0xFF	; 255
    1896:	0e 94 be 05 	call	0xb7c	; 0xb7c <vListInsert>
    189a:	17 c0       	rjmp	.+46     	; 0x18ca <prvAddCurrentTaskToDelayedList+0xf6>
    189c:	60 91 3d 04 	lds	r22, 0x043D	; 0x80043d <pxCurrentTCB>
    18a0:	70 91 3e 04 	lds	r23, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    18a4:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <pxDelayedTaskList>
    18a8:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <pxDelayedTaskList+0x1>
    18ac:	6e 5f       	subi	r22, 0xFE	; 254
    18ae:	7f 4f       	sbci	r23, 0xFF	; 255
    18b0:	0e 94 be 05 	call	0xb7c	; 0xb7c <vListInsert>
    18b4:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <xNextTaskUnblockTime>
    18b8:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <xNextTaskUnblockTime+0x1>
    18bc:	c8 17       	cp	r28, r24
    18be:	d9 07       	cpc	r29, r25
    18c0:	20 f4       	brcc	.+8      	; 0x18ca <prvAddCurrentTaskToDelayedList+0xf6>
    18c2:	d0 93 d3 03 	sts	0x03D3, r29	; 0x8003d3 <xNextTaskUnblockTime+0x1>
    18c6:	c0 93 d2 03 	sts	0x03D2, r28	; 0x8003d2 <xNextTaskUnblockTime>
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	ff 90       	pop	r15
    18d4:	08 95       	ret

000018d6 <xTaskCreate>:
    18d6:	2f 92       	push	r2
    18d8:	3f 92       	push	r3
    18da:	4f 92       	push	r4
    18dc:	5f 92       	push	r5
    18de:	6f 92       	push	r6
    18e0:	7f 92       	push	r7
    18e2:	8f 92       	push	r8
    18e4:	9f 92       	push	r9
    18e6:	af 92       	push	r10
    18e8:	bf 92       	push	r11
    18ea:	cf 92       	push	r12
    18ec:	df 92       	push	r13
    18ee:	ef 92       	push	r14
    18f0:	ff 92       	push	r15
    18f2:	0f 93       	push	r16
    18f4:	1f 93       	push	r17
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	3c 01       	movw	r6, r24
    18fc:	1b 01       	movw	r2, r22
    18fe:	5a 01       	movw	r10, r20
    1900:	29 01       	movw	r4, r18
    1902:	ca 01       	movw	r24, r20
    1904:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <pvPortMalloc>
    1908:	6c 01       	movw	r12, r24
    190a:	89 2b       	or	r24, r25
    190c:	71 f0       	breq	.+28     	; 0x192a <xTaskCreate+0x54>
    190e:	8c e2       	ldi	r24, 0x2C	; 44
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <pvPortMalloc>
    1916:	ec 01       	movw	r28, r24
    1918:	89 2b       	or	r24, r25
    191a:	19 f0       	breq	.+6      	; 0x1922 <xTaskCreate+0x4c>
    191c:	d8 8e       	std	Y+24, r13	; 0x18
    191e:	cf 8a       	std	Y+23, r12	; 0x17
    1920:	06 c0       	rjmp	.+12     	; 0x192e <xTaskCreate+0x58>
    1922:	c6 01       	movw	r24, r12
    1924:	0e 94 79 05 	call	0xaf2	; 0xaf2 <vPortFree>
    1928:	02 c0       	rjmp	.+4      	; 0x192e <xTaskCreate+0x58>
    192a:	c0 e0       	ldi	r28, 0x00	; 0
    192c:	d0 e0       	ldi	r29, 0x00	; 0
    192e:	20 97       	sbiw	r28, 0x00	; 0
    1930:	91 f0       	breq	.+36     	; 0x1956 <xTaskCreate+0x80>
    1932:	95 01       	movw	r18, r10
    1934:	40 e0       	ldi	r20, 0x00	; 0
    1936:	50 e0       	ldi	r21, 0x00	; 0
    1938:	81 2c       	mov	r8, r1
    193a:	91 2c       	mov	r9, r1
    193c:	5e 01       	movw	r10, r28
    193e:	67 01       	movw	r12, r14
    1940:	e0 2e       	mov	r14, r16
    1942:	82 01       	movw	r16, r4
    1944:	b1 01       	movw	r22, r2
    1946:	c3 01       	movw	r24, r6
    1948:	0e 94 76 0a 	call	0x14ec	; 0x14ec <prvInitialiseNewTask>
    194c:	ce 01       	movw	r24, r28
    194e:	0e 94 3d 0b 	call	0x167a	; 0x167a <prvAddNewTaskToReadyList>
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	01 c0       	rjmp	.+2      	; 0x1958 <xTaskCreate+0x82>
    1956:	8f ef       	ldi	r24, 0xFF	; 255
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	1f 91       	pop	r17
    195e:	0f 91       	pop	r16
    1960:	ff 90       	pop	r15
    1962:	ef 90       	pop	r14
    1964:	df 90       	pop	r13
    1966:	cf 90       	pop	r12
    1968:	bf 90       	pop	r11
    196a:	af 90       	pop	r10
    196c:	9f 90       	pop	r9
    196e:	8f 90       	pop	r8
    1970:	7f 90       	pop	r7
    1972:	6f 90       	pop	r6
    1974:	5f 90       	pop	r5
    1976:	4f 90       	pop	r4
    1978:	3f 90       	pop	r3
    197a:	2f 90       	pop	r2
    197c:	08 95       	ret

0000197e <vTaskStartScheduler>:
    197e:	ef 92       	push	r14
    1980:	ff 92       	push	r15
    1982:	0f 93       	push	r16
    1984:	0f 2e       	mov	r0, r31
    1986:	f0 ed       	ldi	r31, 0xD0	; 208
    1988:	ef 2e       	mov	r14, r31
    198a:	f3 e0       	ldi	r31, 0x03	; 3
    198c:	ff 2e       	mov	r15, r31
    198e:	f0 2d       	mov	r31, r0
    1990:	00 e0       	ldi	r16, 0x00	; 0
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	48 ec       	ldi	r20, 0xC8	; 200
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	61 e9       	ldi	r22, 0x91	; 145
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	81 ee       	ldi	r24, 0xE1	; 225
    19a0:	9b e0       	ldi	r25, 0x0B	; 11
    19a2:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <xTaskCreate>
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	81 f4       	brne	.+32     	; 0x19ca <vTaskStartScheduler+0x4c>
    19aa:	f8 94       	cli
    19ac:	8f ef       	ldi	r24, 0xFF	; 255
    19ae:	9f ef       	ldi	r25, 0xFF	; 255
    19b0:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <xNextTaskUnblockTime+0x1>
    19b4:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <xNextTaskUnblockTime>
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <xSchedulerRunning>
    19be:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <xTickCount+0x1>
    19c2:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <xTickCount>
    19c6:	0e 94 8b 06 	call	0xd16	; 0xd16 <xPortStartScheduler>
    19ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <uxTopUsedPriority>
    19ce:	0f 91       	pop	r16
    19d0:	ff 90       	pop	r15
    19d2:	ef 90       	pop	r14
    19d4:	08 95       	ret

000019d6 <vTaskSuspendAll>:
    19d6:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <uxSchedulerSuspended>
    19da:	8f 5f       	subi	r24, 0xFF	; 255
    19dc:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <uxSchedulerSuspended>
    19e0:	08 95       	ret

000019e2 <xTaskIncrementTick>:
    19e2:	0f 93       	push	r16
    19e4:	1f 93       	push	r17
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <uxSchedulerSuspended>
    19ee:	81 11       	cpse	r24, r1
    19f0:	eb c0       	rjmp	.+470    	; 0x1bc8 <xTaskIncrementTick+0x1e6>
    19f2:	c0 91 db 03 	lds	r28, 0x03DB	; 0x8003db <xTickCount>
    19f6:	d0 91 dc 03 	lds	r29, 0x03DC	; 0x8003dc <xTickCount+0x1>
    19fa:	8e 01       	movw	r16, r28
    19fc:	0f 5f       	subi	r16, 0xFF	; 255
    19fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1a00:	10 93 dc 03 	sts	0x03DC, r17	; 0x8003dc <xTickCount+0x1>
    1a04:	00 93 db 03 	sts	0x03DB, r16	; 0x8003db <xTickCount>
    1a08:	01 15       	cp	r16, r1
    1a0a:	11 05       	cpc	r17, r1
    1a0c:	b9 f4       	brne	.+46     	; 0x1a3c <xTaskIncrementTick+0x5a>
    1a0e:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <pxDelayedTaskList>
    1a12:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <pxDelayedTaskList+0x1>
    1a16:	20 91 fa 03 	lds	r18, 0x03FA	; 0x8003fa <pxOverflowDelayedTaskList>
    1a1a:	30 91 fb 03 	lds	r19, 0x03FB	; 0x8003fb <pxOverflowDelayedTaskList+0x1>
    1a1e:	30 93 fd 03 	sts	0x03FD, r19	; 0x8003fd <pxDelayedTaskList+0x1>
    1a22:	20 93 fc 03 	sts	0x03FC, r18	; 0x8003fc <pxDelayedTaskList>
    1a26:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <pxOverflowDelayedTaskList+0x1>
    1a2a:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <pxOverflowDelayedTaskList>
    1a2e:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <xNumOfOverflows>
    1a32:	8f 5f       	subi	r24, 0xFF	; 255
    1a34:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <xNumOfOverflows>
    1a38:	0e 94 4d 0a 	call	0x149a	; 0x149a <prvResetNextTaskUnblockTime>
    1a3c:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <xNextTaskUnblockTime>
    1a40:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <xNextTaskUnblockTime+0x1>
    1a44:	08 17       	cp	r16, r24
    1a46:	19 07       	cpc	r17, r25
    1a48:	20 f4       	brcc	.+8      	; 0x1a52 <xTaskIncrementTick+0x70>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	b8 c0       	rjmp	.+368    	; 0x1bbe <xTaskIncrementTick+0x1dc>
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	01 c0       	rjmp	.+2      	; 0x1a54 <xTaskIncrementTick+0x72>
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	e0 91 fc 03 	lds	r30, 0x03FC	; 0x8003fc <pxDelayedTaskList>
    1a58:	f0 91 fd 03 	lds	r31, 0x03FD	; 0x8003fd <pxDelayedTaskList+0x1>
    1a5c:	90 81       	ld	r25, Z
    1a5e:	91 11       	cpse	r25, r1
    1a60:	07 c0       	rjmp	.+14     	; 0x1a70 <xTaskIncrementTick+0x8e>
    1a62:	2f ef       	ldi	r18, 0xFF	; 255
    1a64:	3f ef       	ldi	r19, 0xFF	; 255
    1a66:	30 93 d3 03 	sts	0x03D3, r19	; 0x8003d3 <xNextTaskUnblockTime+0x1>
    1a6a:	20 93 d2 03 	sts	0x03D2, r18	; 0x8003d2 <xNextTaskUnblockTime>
    1a6e:	a7 c0       	rjmp	.+334    	; 0x1bbe <xTaskIncrementTick+0x1dc>
    1a70:	e0 91 fc 03 	lds	r30, 0x03FC	; 0x8003fc <pxDelayedTaskList>
    1a74:	f0 91 fd 03 	lds	r31, 0x03FD	; 0x8003fd <pxDelayedTaskList+0x1>
    1a78:	05 80       	ldd	r0, Z+5	; 0x05
    1a7a:	f6 81       	ldd	r31, Z+6	; 0x06
    1a7c:	e0 2d       	mov	r30, r0
    1a7e:	06 80       	ldd	r0, Z+6	; 0x06
    1a80:	f7 81       	ldd	r31, Z+7	; 0x07
    1a82:	e0 2d       	mov	r30, r0
    1a84:	22 81       	ldd	r18, Z+2	; 0x02
    1a86:	33 81       	ldd	r19, Z+3	; 0x03
    1a88:	02 17       	cp	r16, r18
    1a8a:	13 07       	cpc	r17, r19
    1a8c:	28 f4       	brcc	.+10     	; 0x1a98 <xTaskIncrementTick+0xb6>
    1a8e:	30 93 d3 03 	sts	0x03D3, r19	; 0x8003d3 <xNextTaskUnblockTime+0x1>
    1a92:	20 93 d2 03 	sts	0x03D2, r18	; 0x8003d2 <xNextTaskUnblockTime>
    1a96:	93 c0       	rjmp	.+294    	; 0x1bbe <xTaskIncrementTick+0x1dc>
    1a98:	a2 85       	ldd	r26, Z+10	; 0x0a
    1a9a:	b3 85       	ldd	r27, Z+11	; 0x0b
    1a9c:	24 81       	ldd	r18, Z+4	; 0x04
    1a9e:	35 81       	ldd	r19, Z+5	; 0x05
    1aa0:	46 81       	ldd	r20, Z+6	; 0x06
    1aa2:	57 81       	ldd	r21, Z+7	; 0x07
    1aa4:	e9 01       	movw	r28, r18
    1aa6:	5d 83       	std	Y+5, r21	; 0x05
    1aa8:	4c 83       	std	Y+4, r20	; 0x04
    1aaa:	26 81       	ldd	r18, Z+6	; 0x06
    1aac:	37 81       	ldd	r19, Z+7	; 0x07
    1aae:	44 81       	ldd	r20, Z+4	; 0x04
    1ab0:	55 81       	ldd	r21, Z+5	; 0x05
    1ab2:	e9 01       	movw	r28, r18
    1ab4:	5b 83       	std	Y+3, r21	; 0x03
    1ab6:	4a 83       	std	Y+2, r20	; 0x02
    1ab8:	11 96       	adiw	r26, 0x01	; 1
    1aba:	2d 91       	ld	r18, X+
    1abc:	3c 91       	ld	r19, X
    1abe:	12 97       	sbiw	r26, 0x02	; 2
    1ac0:	af 01       	movw	r20, r30
    1ac2:	4e 5f       	subi	r20, 0xFE	; 254
    1ac4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac6:	24 17       	cp	r18, r20
    1ac8:	35 07       	cpc	r19, r21
    1aca:	31 f4       	brne	.+12     	; 0x1ad8 <xTaskIncrementTick+0xf6>
    1acc:	26 81       	ldd	r18, Z+6	; 0x06
    1ace:	37 81       	ldd	r19, Z+7	; 0x07
    1ad0:	12 96       	adiw	r26, 0x02	; 2
    1ad2:	3c 93       	st	X, r19
    1ad4:	2e 93       	st	-X, r18
    1ad6:	11 97       	sbiw	r26, 0x01	; 1
    1ad8:	13 86       	std	Z+11, r1	; 0x0b
    1ada:	12 86       	std	Z+10, r1	; 0x0a
    1adc:	9c 91       	ld	r25, X
    1ade:	91 50       	subi	r25, 0x01	; 1
    1ae0:	9c 93       	st	X, r25
    1ae2:	a4 89       	ldd	r26, Z+20	; 0x14
    1ae4:	b5 89       	ldd	r27, Z+21	; 0x15
    1ae6:	10 97       	sbiw	r26, 0x00	; 0
    1ae8:	19 f1       	breq	.+70     	; 0x1b30 <xTaskIncrementTick+0x14e>
    1aea:	26 85       	ldd	r18, Z+14	; 0x0e
    1aec:	37 85       	ldd	r19, Z+15	; 0x0f
    1aee:	60 89       	ldd	r22, Z+16	; 0x10
    1af0:	71 89       	ldd	r23, Z+17	; 0x11
    1af2:	e9 01       	movw	r28, r18
    1af4:	7d 83       	std	Y+5, r23	; 0x05
    1af6:	6c 83       	std	Y+4, r22	; 0x04
    1af8:	20 89       	ldd	r18, Z+16	; 0x10
    1afa:	31 89       	ldd	r19, Z+17	; 0x11
    1afc:	66 85       	ldd	r22, Z+14	; 0x0e
    1afe:	77 85       	ldd	r23, Z+15	; 0x0f
    1b00:	e9 01       	movw	r28, r18
    1b02:	7b 83       	std	Y+3, r23	; 0x03
    1b04:	6a 83       	std	Y+2, r22	; 0x02
    1b06:	11 96       	adiw	r26, 0x01	; 1
    1b08:	6d 91       	ld	r22, X+
    1b0a:	7c 91       	ld	r23, X
    1b0c:	12 97       	sbiw	r26, 0x02	; 2
    1b0e:	9f 01       	movw	r18, r30
    1b10:	24 5f       	subi	r18, 0xF4	; 244
    1b12:	3f 4f       	sbci	r19, 0xFF	; 255
    1b14:	62 17       	cp	r22, r18
    1b16:	73 07       	cpc	r23, r19
    1b18:	31 f4       	brne	.+12     	; 0x1b26 <xTaskIncrementTick+0x144>
    1b1a:	20 89       	ldd	r18, Z+16	; 0x10
    1b1c:	31 89       	ldd	r19, Z+17	; 0x11
    1b1e:	12 96       	adiw	r26, 0x02	; 2
    1b20:	3c 93       	st	X, r19
    1b22:	2e 93       	st	-X, r18
    1b24:	11 97       	sbiw	r26, 0x01	; 1
    1b26:	15 8a       	std	Z+21, r1	; 0x15
    1b28:	14 8a       	std	Z+20, r1	; 0x14
    1b2a:	9c 91       	ld	r25, X
    1b2c:	91 50       	subi	r25, 0x01	; 1
    1b2e:	9c 93       	st	X, r25
    1b30:	26 89       	ldd	r18, Z+22	; 0x16
    1b32:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <uxTopReadyPriority>
    1b36:	92 17       	cp	r25, r18
    1b38:	10 f4       	brcc	.+4      	; 0x1b3e <xTaskIncrementTick+0x15c>
    1b3a:	20 93 da 03 	sts	0x03DA, r18	; 0x8003da <uxTopReadyPriority>
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	d9 01       	movw	r26, r18
    1b42:	aa 0f       	add	r26, r26
    1b44:	bb 1f       	adc	r27, r27
    1b46:	aa 0f       	add	r26, r26
    1b48:	bb 1f       	adc	r27, r27
    1b4a:	aa 0f       	add	r26, r26
    1b4c:	bb 1f       	adc	r27, r27
    1b4e:	2a 0f       	add	r18, r26
    1b50:	3b 1f       	adc	r19, r27
    1b52:	d9 01       	movw	r26, r18
    1b54:	a0 5f       	subi	r26, 0xF0	; 240
    1b56:	bb 4f       	sbci	r27, 0xFB	; 251
    1b58:	11 96       	adiw	r26, 0x01	; 1
    1b5a:	0d 90       	ld	r0, X+
    1b5c:	bc 91       	ld	r27, X
    1b5e:	a0 2d       	mov	r26, r0
    1b60:	b5 83       	std	Z+5, r27	; 0x05
    1b62:	a4 83       	std	Z+4, r26	; 0x04
    1b64:	14 96       	adiw	r26, 0x04	; 4
    1b66:	2d 91       	ld	r18, X+
    1b68:	3c 91       	ld	r19, X
    1b6a:	15 97       	sbiw	r26, 0x05	; 5
    1b6c:	37 83       	std	Z+7, r19	; 0x07
    1b6e:	26 83       	std	Z+6, r18	; 0x06
    1b70:	14 96       	adiw	r26, 0x04	; 4
    1b72:	2d 91       	ld	r18, X+
    1b74:	3c 91       	ld	r19, X
    1b76:	15 97       	sbiw	r26, 0x05	; 5
    1b78:	e9 01       	movw	r28, r18
    1b7a:	5b 83       	std	Y+3, r21	; 0x03
    1b7c:	4a 83       	std	Y+2, r20	; 0x02
    1b7e:	15 96       	adiw	r26, 0x05	; 5
    1b80:	5c 93       	st	X, r21
    1b82:	4e 93       	st	-X, r20
    1b84:	14 97       	sbiw	r26, 0x04	; 4
    1b86:	a6 89       	ldd	r26, Z+22	; 0x16
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	9d 01       	movw	r18, r26
    1b8c:	22 0f       	add	r18, r18
    1b8e:	33 1f       	adc	r19, r19
    1b90:	22 0f       	add	r18, r18
    1b92:	33 1f       	adc	r19, r19
    1b94:	22 0f       	add	r18, r18
    1b96:	33 1f       	adc	r19, r19
    1b98:	a2 0f       	add	r26, r18
    1b9a:	b3 1f       	adc	r27, r19
    1b9c:	a0 5f       	subi	r26, 0xF0	; 240
    1b9e:	bb 4f       	sbci	r27, 0xFB	; 251
    1ba0:	b3 87       	std	Z+11, r27	; 0x0b
    1ba2:	a2 87       	std	Z+10, r26	; 0x0a
    1ba4:	9c 91       	ld	r25, X
    1ba6:	9f 5f       	subi	r25, 0xFF	; 255
    1ba8:	9c 93       	st	X, r25
    1baa:	26 89       	ldd	r18, Z+22	; 0x16
    1bac:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <pxCurrentTCB>
    1bb0:	f0 91 3e 04 	lds	r31, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    1bb4:	96 89       	ldd	r25, Z+22	; 0x16
    1bb6:	29 17       	cp	r18, r25
    1bb8:	08 f0       	brcs	.+2      	; 0x1bbc <xTaskIncrementTick+0x1da>
    1bba:	49 cf       	rjmp	.-366    	; 0x1a4e <xTaskIncrementTick+0x6c>
    1bbc:	4b cf       	rjmp	.-362    	; 0x1a54 <xTaskIncrementTick+0x72>
    1bbe:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <xYieldPending>
    1bc2:	91 11       	cpse	r25, r1
    1bc4:	0c c0       	rjmp	.+24     	; 0x1bde <xTaskIncrementTick+0x1fc>
    1bc6:	0c c0       	rjmp	.+24     	; 0x1be0 <xTaskIncrementTick+0x1fe>
    1bc8:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <xPendedTicks>
    1bcc:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <xPendedTicks+0x1>
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	90 93 d8 03 	sts	0x03D8, r25	; 0x8003d8 <xPendedTicks+0x1>
    1bd6:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <xPendedTicks>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	01 c0       	rjmp	.+2      	; 0x1be0 <xTaskIncrementTick+0x1fe>
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	1f 91       	pop	r17
    1be6:	0f 91       	pop	r16
    1be8:	08 95       	ret

00001bea <xTaskResumeAll>:
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	0f 92       	push	r0
    1bf4:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <uxSchedulerSuspended>
    1bf8:	81 50       	subi	r24, 0x01	; 1
    1bfa:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <uxSchedulerSuspended>
    1bfe:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <uxSchedulerSuspended>
    1c02:	81 11       	cpse	r24, r1
    1c04:	bf c0       	rjmp	.+382    	; 0x1d84 <xTaskResumeAll+0x19a>
    1c06:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <uxCurrentNumberOfTasks>
    1c0a:	81 11       	cpse	r24, r1
    1c0c:	96 c0       	rjmp	.+300    	; 0x1d3a <xTaskResumeAll+0x150>
    1c0e:	bd c0       	rjmp	.+378    	; 0x1d8a <xTaskResumeAll+0x1a0>
    1c10:	e0 91 f6 03 	lds	r30, 0x03F6	; 0x8003f6 <xPendingReadyList+0x5>
    1c14:	f0 91 f7 03 	lds	r31, 0x03F7	; 0x8003f7 <xPendingReadyList+0x6>
    1c18:	06 80       	ldd	r0, Z+6	; 0x06
    1c1a:	f7 81       	ldd	r31, Z+7	; 0x07
    1c1c:	e0 2d       	mov	r30, r0
    1c1e:	a4 89       	ldd	r26, Z+20	; 0x14
    1c20:	b5 89       	ldd	r27, Z+21	; 0x15
    1c22:	c6 85       	ldd	r28, Z+14	; 0x0e
    1c24:	d7 85       	ldd	r29, Z+15	; 0x0f
    1c26:	80 89       	ldd	r24, Z+16	; 0x10
    1c28:	91 89       	ldd	r25, Z+17	; 0x11
    1c2a:	9d 83       	std	Y+5, r25	; 0x05
    1c2c:	8c 83       	std	Y+4, r24	; 0x04
    1c2e:	c0 89       	ldd	r28, Z+16	; 0x10
    1c30:	d1 89       	ldd	r29, Z+17	; 0x11
    1c32:	86 85       	ldd	r24, Z+14	; 0x0e
    1c34:	97 85       	ldd	r25, Z+15	; 0x0f
    1c36:	9b 83       	std	Y+3, r25	; 0x03
    1c38:	8a 83       	std	Y+2, r24	; 0x02
    1c3a:	11 96       	adiw	r26, 0x01	; 1
    1c3c:	2d 91       	ld	r18, X+
    1c3e:	3c 91       	ld	r19, X
    1c40:	12 97       	sbiw	r26, 0x02	; 2
    1c42:	cf 01       	movw	r24, r30
    1c44:	0c 96       	adiw	r24, 0x0c	; 12
    1c46:	28 17       	cp	r18, r24
    1c48:	39 07       	cpc	r19, r25
    1c4a:	31 f4       	brne	.+12     	; 0x1c58 <xTaskResumeAll+0x6e>
    1c4c:	80 89       	ldd	r24, Z+16	; 0x10
    1c4e:	91 89       	ldd	r25, Z+17	; 0x11
    1c50:	12 96       	adiw	r26, 0x02	; 2
    1c52:	9c 93       	st	X, r25
    1c54:	8e 93       	st	-X, r24
    1c56:	11 97       	sbiw	r26, 0x01	; 1
    1c58:	15 8a       	std	Z+21, r1	; 0x15
    1c5a:	14 8a       	std	Z+20, r1	; 0x14
    1c5c:	8c 91       	ld	r24, X
    1c5e:	81 50       	subi	r24, 0x01	; 1
    1c60:	8c 93       	st	X, r24
    1c62:	a2 85       	ldd	r26, Z+10	; 0x0a
    1c64:	b3 85       	ldd	r27, Z+11	; 0x0b
    1c66:	c4 81       	ldd	r28, Z+4	; 0x04
    1c68:	d5 81       	ldd	r29, Z+5	; 0x05
    1c6a:	86 81       	ldd	r24, Z+6	; 0x06
    1c6c:	97 81       	ldd	r25, Z+7	; 0x07
    1c6e:	9d 83       	std	Y+5, r25	; 0x05
    1c70:	8c 83       	std	Y+4, r24	; 0x04
    1c72:	c6 81       	ldd	r28, Z+6	; 0x06
    1c74:	d7 81       	ldd	r29, Z+7	; 0x07
    1c76:	84 81       	ldd	r24, Z+4	; 0x04
    1c78:	95 81       	ldd	r25, Z+5	; 0x05
    1c7a:	9b 83       	std	Y+3, r25	; 0x03
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
    1c7e:	11 96       	adiw	r26, 0x01	; 1
    1c80:	8d 91       	ld	r24, X+
    1c82:	9c 91       	ld	r25, X
    1c84:	12 97       	sbiw	r26, 0x02	; 2
    1c86:	9f 01       	movw	r18, r30
    1c88:	2e 5f       	subi	r18, 0xFE	; 254
    1c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8c:	82 17       	cp	r24, r18
    1c8e:	93 07       	cpc	r25, r19
    1c90:	31 f4       	brne	.+12     	; 0x1c9e <xTaskResumeAll+0xb4>
    1c92:	86 81       	ldd	r24, Z+6	; 0x06
    1c94:	97 81       	ldd	r25, Z+7	; 0x07
    1c96:	12 96       	adiw	r26, 0x02	; 2
    1c98:	9c 93       	st	X, r25
    1c9a:	8e 93       	st	-X, r24
    1c9c:	11 97       	sbiw	r26, 0x01	; 1
    1c9e:	13 86       	std	Z+11, r1	; 0x0b
    1ca0:	12 86       	std	Z+10, r1	; 0x0a
    1ca2:	8c 91       	ld	r24, X
    1ca4:	81 50       	subi	r24, 0x01	; 1
    1ca6:	8c 93       	st	X, r24
    1ca8:	86 89       	ldd	r24, Z+22	; 0x16
    1caa:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <uxTopReadyPriority>
    1cae:	98 17       	cp	r25, r24
    1cb0:	10 f4       	brcc	.+4      	; 0x1cb6 <xTaskResumeAll+0xcc>
    1cb2:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <uxTopReadyPriority>
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	dc 01       	movw	r26, r24
    1cba:	aa 0f       	add	r26, r26
    1cbc:	bb 1f       	adc	r27, r27
    1cbe:	aa 0f       	add	r26, r26
    1cc0:	bb 1f       	adc	r27, r27
    1cc2:	aa 0f       	add	r26, r26
    1cc4:	bb 1f       	adc	r27, r27
    1cc6:	8a 0f       	add	r24, r26
    1cc8:	9b 1f       	adc	r25, r27
    1cca:	dc 01       	movw	r26, r24
    1ccc:	a0 5f       	subi	r26, 0xF0	; 240
    1cce:	bb 4f       	sbci	r27, 0xFB	; 251
    1cd0:	11 96       	adiw	r26, 0x01	; 1
    1cd2:	0d 90       	ld	r0, X+
    1cd4:	bc 91       	ld	r27, X
    1cd6:	a0 2d       	mov	r26, r0
    1cd8:	b5 83       	std	Z+5, r27	; 0x05
    1cda:	a4 83       	std	Z+4, r26	; 0x04
    1cdc:	14 96       	adiw	r26, 0x04	; 4
    1cde:	8d 91       	ld	r24, X+
    1ce0:	9c 91       	ld	r25, X
    1ce2:	15 97       	sbiw	r26, 0x05	; 5
    1ce4:	97 83       	std	Z+7, r25	; 0x07
    1ce6:	86 83       	std	Z+6, r24	; 0x06
    1ce8:	14 96       	adiw	r26, 0x04	; 4
    1cea:	cd 91       	ld	r28, X+
    1cec:	dc 91       	ld	r29, X
    1cee:	15 97       	sbiw	r26, 0x05	; 5
    1cf0:	3b 83       	std	Y+3, r19	; 0x03
    1cf2:	2a 83       	std	Y+2, r18	; 0x02
    1cf4:	15 96       	adiw	r26, 0x05	; 5
    1cf6:	3c 93       	st	X, r19
    1cf8:	2e 93       	st	-X, r18
    1cfa:	14 97       	sbiw	r26, 0x04	; 4
    1cfc:	a6 89       	ldd	r26, Z+22	; 0x16
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	cd 01       	movw	r24, r26
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	a8 0f       	add	r26, r24
    1d10:	b9 1f       	adc	r27, r25
    1d12:	a0 5f       	subi	r26, 0xF0	; 240
    1d14:	bb 4f       	sbci	r27, 0xFB	; 251
    1d16:	b3 87       	std	Z+11, r27	; 0x0b
    1d18:	a2 87       	std	Z+10, r26	; 0x0a
    1d1a:	8c 91       	ld	r24, X
    1d1c:	8f 5f       	subi	r24, 0xFF	; 255
    1d1e:	8c 93       	st	X, r24
    1d20:	96 89       	ldd	r25, Z+22	; 0x16
    1d22:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <pxCurrentTCB>
    1d26:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    1d2a:	56 96       	adiw	r26, 0x16	; 22
    1d2c:	8c 91       	ld	r24, X
    1d2e:	98 17       	cp	r25, r24
    1d30:	30 f0       	brcs	.+12     	; 0x1d3e <xTaskResumeAll+0x154>
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <xYieldPending>
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <xTaskResumeAll+0x154>
    1d3a:	e0 e0       	ldi	r30, 0x00	; 0
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <xPendingReadyList>
    1d42:	81 11       	cpse	r24, r1
    1d44:	65 cf       	rjmp	.-310    	; 0x1c10 <xTaskResumeAll+0x26>
    1d46:	ef 2b       	or	r30, r31
    1d48:	11 f0       	breq	.+4      	; 0x1d4e <xTaskResumeAll+0x164>
    1d4a:	0e 94 4d 0a 	call	0x149a	; 0x149a <prvResetNextTaskUnblockTime>
    1d4e:	c0 91 d7 03 	lds	r28, 0x03D7	; 0x8003d7 <xPendedTicks>
    1d52:	d0 91 d8 03 	lds	r29, 0x03D8	; 0x8003d8 <xPendedTicks+0x1>
    1d56:	20 97       	sbiw	r28, 0x00	; 0
    1d58:	69 f0       	breq	.+26     	; 0x1d74 <xTaskResumeAll+0x18a>
    1d5a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <xTaskIncrementTick>
    1d5e:	88 23       	and	r24, r24
    1d60:	19 f0       	breq	.+6      	; 0x1d68 <xTaskResumeAll+0x17e>
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <xYieldPending>
    1d68:	21 97       	sbiw	r28, 0x01	; 1
    1d6a:	b9 f7       	brne	.-18     	; 0x1d5a <xTaskResumeAll+0x170>
    1d6c:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <xPendedTicks+0x1>
    1d70:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <xPendedTicks>
    1d74:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <xYieldPending>
    1d78:	88 23       	and	r24, r24
    1d7a:	31 f0       	breq	.+12     	; 0x1d88 <xTaskResumeAll+0x19e>
    1d7c:	0e 94 ba 06 	call	0xd74	; 0xd74 <vPortYield>
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	03 c0       	rjmp	.+6      	; 0x1d8a <xTaskResumeAll+0x1a0>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	01 c0       	rjmp	.+2      	; 0x1d8a <xTaskResumeAll+0x1a0>
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	08 95       	ret

00001d94 <vTaskDelay>:
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	ec 01       	movw	r28, r24
    1d9a:	89 2b       	or	r24, r25
    1d9c:	49 f0       	breq	.+18     	; 0x1db0 <vTaskDelay+0x1c>
    1d9e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <vTaskSuspendAll>
    1da2:	60 e0       	ldi	r22, 0x00	; 0
    1da4:	ce 01       	movw	r24, r28
    1da6:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <prvAddCurrentTaskToDelayedList>
    1daa:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <xTaskResumeAll>
    1dae:	01 c0       	rjmp	.+2      	; 0x1db2 <vTaskDelay+0x1e>
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	81 11       	cpse	r24, r1
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <vTaskDelay+0x26>
    1db6:	0e 94 ba 06 	call	0xd74	; 0xd74 <vPortYield>
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	08 95       	ret

00001dc0 <vTaskSwitchContext>:
    1dc0:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <uxSchedulerSuspended>
    1dc4:	88 23       	and	r24, r24
    1dc6:	21 f0       	breq	.+8      	; 0x1dd0 <vTaskSwitchContext+0x10>
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <xYieldPending>
    1dce:	08 95       	ret
    1dd0:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <xYieldPending>
    1dd4:	20 91 da 03 	lds	r18, 0x03DA	; 0x8003da <uxTopReadyPriority>
    1dd8:	01 c0       	rjmp	.+2      	; 0x1ddc <vTaskSwitchContext+0x1c>
    1dda:	21 50       	subi	r18, 0x01	; 1
    1ddc:	82 2f       	mov	r24, r18
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	fc 01       	movw	r30, r24
    1de2:	ee 0f       	add	r30, r30
    1de4:	ff 1f       	adc	r31, r31
    1de6:	ee 0f       	add	r30, r30
    1de8:	ff 1f       	adc	r31, r31
    1dea:	ee 0f       	add	r30, r30
    1dec:	ff 1f       	adc	r31, r31
    1dee:	e8 0f       	add	r30, r24
    1df0:	f9 1f       	adc	r31, r25
    1df2:	e0 5f       	subi	r30, 0xF0	; 240
    1df4:	fb 4f       	sbci	r31, 0xFB	; 251
    1df6:	30 81       	ld	r19, Z
    1df8:	33 23       	and	r19, r19
    1dfa:	79 f3       	breq	.-34     	; 0x1dda <vTaskSwitchContext+0x1a>
    1dfc:	ac 01       	movw	r20, r24
    1dfe:	44 0f       	add	r20, r20
    1e00:	55 1f       	adc	r21, r21
    1e02:	44 0f       	add	r20, r20
    1e04:	55 1f       	adc	r21, r21
    1e06:	44 0f       	add	r20, r20
    1e08:	55 1f       	adc	r21, r21
    1e0a:	48 0f       	add	r20, r24
    1e0c:	59 1f       	adc	r21, r25
    1e0e:	df 01       	movw	r26, r30
    1e10:	01 80       	ldd	r0, Z+1	; 0x01
    1e12:	f2 81       	ldd	r31, Z+2	; 0x02
    1e14:	e0 2d       	mov	r30, r0
    1e16:	02 80       	ldd	r0, Z+2	; 0x02
    1e18:	f3 81       	ldd	r31, Z+3	; 0x03
    1e1a:	e0 2d       	mov	r30, r0
    1e1c:	12 96       	adiw	r26, 0x02	; 2
    1e1e:	fc 93       	st	X, r31
    1e20:	ee 93       	st	-X, r30
    1e22:	11 97       	sbiw	r26, 0x01	; 1
    1e24:	4d 5e       	subi	r20, 0xED	; 237
    1e26:	5b 4f       	sbci	r21, 0xFB	; 251
    1e28:	e4 17       	cp	r30, r20
    1e2a:	f5 07       	cpc	r31, r21
    1e2c:	29 f4       	brne	.+10     	; 0x1e38 <vTaskSwitchContext+0x78>
    1e2e:	42 81       	ldd	r20, Z+2	; 0x02
    1e30:	53 81       	ldd	r21, Z+3	; 0x03
    1e32:	fd 01       	movw	r30, r26
    1e34:	52 83       	std	Z+2, r21	; 0x02
    1e36:	41 83       	std	Z+1, r20	; 0x01
    1e38:	fc 01       	movw	r30, r24
    1e3a:	ee 0f       	add	r30, r30
    1e3c:	ff 1f       	adc	r31, r31
    1e3e:	ee 0f       	add	r30, r30
    1e40:	ff 1f       	adc	r31, r31
    1e42:	ee 0f       	add	r30, r30
    1e44:	ff 1f       	adc	r31, r31
    1e46:	8e 0f       	add	r24, r30
    1e48:	9f 1f       	adc	r25, r31
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	e0 5f       	subi	r30, 0xF0	; 240
    1e4e:	fb 4f       	sbci	r31, 0xFB	; 251
    1e50:	01 80       	ldd	r0, Z+1	; 0x01
    1e52:	f2 81       	ldd	r31, Z+2	; 0x02
    1e54:	e0 2d       	mov	r30, r0
    1e56:	86 81       	ldd	r24, Z+6	; 0x06
    1e58:	97 81       	ldd	r25, Z+7	; 0x07
    1e5a:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <pxCurrentTCB+0x1>
    1e5e:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <pxCurrentTCB>
    1e62:	20 93 da 03 	sts	0x03DA, r18	; 0x8003da <uxTopReadyPriority>
    1e66:	08 95       	ret

00001e68 <vTaskPlaceOnEventList>:
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
    1e6c:	eb 01       	movw	r28, r22
    1e6e:	60 91 3d 04 	lds	r22, 0x043D	; 0x80043d <pxCurrentTCB>
    1e72:	70 91 3e 04 	lds	r23, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    1e76:	64 5f       	subi	r22, 0xF4	; 244
    1e78:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7a:	0e 94 be 05 	call	0xb7c	; 0xb7c <vListInsert>
    1e7e:	61 e0       	ldi	r22, 0x01	; 1
    1e80:	ce 01       	movw	r24, r28
    1e82:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <prvAddCurrentTaskToDelayedList>
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	08 95       	ret

00001e8c <xTaskRemoveFromEventList>:
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	dc 01       	movw	r26, r24
    1e92:	15 96       	adiw	r26, 0x05	; 5
    1e94:	ed 91       	ld	r30, X+
    1e96:	fc 91       	ld	r31, X
    1e98:	16 97       	sbiw	r26, 0x06	; 6
    1e9a:	06 80       	ldd	r0, Z+6	; 0x06
    1e9c:	f7 81       	ldd	r31, Z+7	; 0x07
    1e9e:	e0 2d       	mov	r30, r0
    1ea0:	a4 89       	ldd	r26, Z+20	; 0x14
    1ea2:	b5 89       	ldd	r27, Z+21	; 0x15
    1ea4:	c6 85       	ldd	r28, Z+14	; 0x0e
    1ea6:	d7 85       	ldd	r29, Z+15	; 0x0f
    1ea8:	80 89       	ldd	r24, Z+16	; 0x10
    1eaa:	91 89       	ldd	r25, Z+17	; 0x11
    1eac:	9d 83       	std	Y+5, r25	; 0x05
    1eae:	8c 83       	std	Y+4, r24	; 0x04
    1eb0:	c0 89       	ldd	r28, Z+16	; 0x10
    1eb2:	d1 89       	ldd	r29, Z+17	; 0x11
    1eb4:	86 85       	ldd	r24, Z+14	; 0x0e
    1eb6:	97 85       	ldd	r25, Z+15	; 0x0f
    1eb8:	9b 83       	std	Y+3, r25	; 0x03
    1eba:	8a 83       	std	Y+2, r24	; 0x02
    1ebc:	11 96       	adiw	r26, 0x01	; 1
    1ebe:	8d 91       	ld	r24, X+
    1ec0:	9c 91       	ld	r25, X
    1ec2:	12 97       	sbiw	r26, 0x02	; 2
    1ec4:	9f 01       	movw	r18, r30
    1ec6:	24 5f       	subi	r18, 0xF4	; 244
    1ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eca:	82 17       	cp	r24, r18
    1ecc:	93 07       	cpc	r25, r19
    1ece:	31 f4       	brne	.+12     	; 0x1edc <xTaskRemoveFromEventList+0x50>
    1ed0:	80 89       	ldd	r24, Z+16	; 0x10
    1ed2:	91 89       	ldd	r25, Z+17	; 0x11
    1ed4:	12 96       	adiw	r26, 0x02	; 2
    1ed6:	9c 93       	st	X, r25
    1ed8:	8e 93       	st	-X, r24
    1eda:	11 97       	sbiw	r26, 0x01	; 1
    1edc:	15 8a       	std	Z+21, r1	; 0x15
    1ede:	14 8a       	std	Z+20, r1	; 0x14
    1ee0:	8c 91       	ld	r24, X
    1ee2:	81 50       	subi	r24, 0x01	; 1
    1ee4:	8c 93       	st	X, r24
    1ee6:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <uxSchedulerSuspended>
    1eea:	81 11       	cpse	r24, r1
    1eec:	60 c0       	rjmp	.+192    	; 0x1fae <xTaskRemoveFromEventList+0x122>
    1eee:	a2 85       	ldd	r26, Z+10	; 0x0a
    1ef0:	b3 85       	ldd	r27, Z+11	; 0x0b
    1ef2:	c4 81       	ldd	r28, Z+4	; 0x04
    1ef4:	d5 81       	ldd	r29, Z+5	; 0x05
    1ef6:	86 81       	ldd	r24, Z+6	; 0x06
    1ef8:	97 81       	ldd	r25, Z+7	; 0x07
    1efa:	9d 83       	std	Y+5, r25	; 0x05
    1efc:	8c 83       	std	Y+4, r24	; 0x04
    1efe:	c6 81       	ldd	r28, Z+6	; 0x06
    1f00:	d7 81       	ldd	r29, Z+7	; 0x07
    1f02:	84 81       	ldd	r24, Z+4	; 0x04
    1f04:	95 81       	ldd	r25, Z+5	; 0x05
    1f06:	9b 83       	std	Y+3, r25	; 0x03
    1f08:	8a 83       	std	Y+2, r24	; 0x02
    1f0a:	11 96       	adiw	r26, 0x01	; 1
    1f0c:	8d 91       	ld	r24, X+
    1f0e:	9c 91       	ld	r25, X
    1f10:	12 97       	sbiw	r26, 0x02	; 2
    1f12:	9f 01       	movw	r18, r30
    1f14:	2e 5f       	subi	r18, 0xFE	; 254
    1f16:	3f 4f       	sbci	r19, 0xFF	; 255
    1f18:	82 17       	cp	r24, r18
    1f1a:	93 07       	cpc	r25, r19
    1f1c:	31 f4       	brne	.+12     	; 0x1f2a <xTaskRemoveFromEventList+0x9e>
    1f1e:	86 81       	ldd	r24, Z+6	; 0x06
    1f20:	97 81       	ldd	r25, Z+7	; 0x07
    1f22:	12 96       	adiw	r26, 0x02	; 2
    1f24:	9c 93       	st	X, r25
    1f26:	8e 93       	st	-X, r24
    1f28:	11 97       	sbiw	r26, 0x01	; 1
    1f2a:	13 86       	std	Z+11, r1	; 0x0b
    1f2c:	12 86       	std	Z+10, r1	; 0x0a
    1f2e:	8c 91       	ld	r24, X
    1f30:	81 50       	subi	r24, 0x01	; 1
    1f32:	8c 93       	st	X, r24
    1f34:	86 89       	ldd	r24, Z+22	; 0x16
    1f36:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <uxTopReadyPriority>
    1f3a:	98 17       	cp	r25, r24
    1f3c:	10 f4       	brcc	.+4      	; 0x1f42 <xTaskRemoveFromEventList+0xb6>
    1f3e:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <uxTopReadyPriority>
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	dc 01       	movw	r26, r24
    1f46:	aa 0f       	add	r26, r26
    1f48:	bb 1f       	adc	r27, r27
    1f4a:	aa 0f       	add	r26, r26
    1f4c:	bb 1f       	adc	r27, r27
    1f4e:	aa 0f       	add	r26, r26
    1f50:	bb 1f       	adc	r27, r27
    1f52:	8a 0f       	add	r24, r26
    1f54:	9b 1f       	adc	r25, r27
    1f56:	dc 01       	movw	r26, r24
    1f58:	a0 5f       	subi	r26, 0xF0	; 240
    1f5a:	bb 4f       	sbci	r27, 0xFB	; 251
    1f5c:	11 96       	adiw	r26, 0x01	; 1
    1f5e:	0d 90       	ld	r0, X+
    1f60:	bc 91       	ld	r27, X
    1f62:	a0 2d       	mov	r26, r0
    1f64:	b5 83       	std	Z+5, r27	; 0x05
    1f66:	a4 83       	std	Z+4, r26	; 0x04
    1f68:	14 96       	adiw	r26, 0x04	; 4
    1f6a:	8d 91       	ld	r24, X+
    1f6c:	9c 91       	ld	r25, X
    1f6e:	15 97       	sbiw	r26, 0x05	; 5
    1f70:	97 83       	std	Z+7, r25	; 0x07
    1f72:	86 83       	std	Z+6, r24	; 0x06
    1f74:	14 96       	adiw	r26, 0x04	; 4
    1f76:	cd 91       	ld	r28, X+
    1f78:	dc 91       	ld	r29, X
    1f7a:	15 97       	sbiw	r26, 0x05	; 5
    1f7c:	3b 83       	std	Y+3, r19	; 0x03
    1f7e:	2a 83       	std	Y+2, r18	; 0x02
    1f80:	15 96       	adiw	r26, 0x05	; 5
    1f82:	3c 93       	st	X, r19
    1f84:	2e 93       	st	-X, r18
    1f86:	14 97       	sbiw	r26, 0x04	; 4
    1f88:	a6 89       	ldd	r26, Z+22	; 0x16
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	a8 0f       	add	r26, r24
    1f9c:	b9 1f       	adc	r27, r25
    1f9e:	a0 5f       	subi	r26, 0xF0	; 240
    1fa0:	bb 4f       	sbci	r27, 0xFB	; 251
    1fa2:	b3 87       	std	Z+11, r27	; 0x0b
    1fa4:	a2 87       	std	Z+10, r26	; 0x0a
    1fa6:	8c 91       	ld	r24, X
    1fa8:	8f 5f       	subi	r24, 0xFF	; 255
    1faa:	8c 93       	st	X, r24
    1fac:	1c c0       	rjmp	.+56     	; 0x1fe6 <xTaskRemoveFromEventList+0x15a>
    1fae:	41 ef       	ldi	r20, 0xF1	; 241
    1fb0:	53 e0       	ldi	r21, 0x03	; 3
    1fb2:	da 01       	movw	r26, r20
    1fb4:	11 96       	adiw	r26, 0x01	; 1
    1fb6:	cd 91       	ld	r28, X+
    1fb8:	dc 91       	ld	r29, X
    1fba:	12 97       	sbiw	r26, 0x02	; 2
    1fbc:	d7 87       	std	Z+15, r29	; 0x0f
    1fbe:	c6 87       	std	Z+14, r28	; 0x0e
    1fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc4:	91 8b       	std	Z+17, r25	; 0x11
    1fc6:	80 8b       	std	Z+16, r24	; 0x10
    1fc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fca:	9d 81       	ldd	r25, Y+5	; 0x05
    1fcc:	dc 01       	movw	r26, r24
    1fce:	13 96       	adiw	r26, 0x03	; 3
    1fd0:	3c 93       	st	X, r19
    1fd2:	2e 93       	st	-X, r18
    1fd4:	12 97       	sbiw	r26, 0x02	; 2
    1fd6:	3d 83       	std	Y+5, r19	; 0x05
    1fd8:	2c 83       	std	Y+4, r18	; 0x04
    1fda:	55 8b       	std	Z+21, r21	; 0x15
    1fdc:	44 8b       	std	Z+20, r20	; 0x14
    1fde:	da 01       	movw	r26, r20
    1fe0:	8c 91       	ld	r24, X
    1fe2:	8f 5f       	subi	r24, 0xFF	; 255
    1fe4:	8c 93       	st	X, r24
    1fe6:	96 89       	ldd	r25, Z+22	; 0x16
    1fe8:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <pxCurrentTCB>
    1fec:	f0 91 3e 04 	lds	r31, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    1ff0:	86 89       	ldd	r24, Z+22	; 0x16
    1ff2:	89 17       	cp	r24, r25
    1ff4:	20 f4       	brcc	.+8      	; 0x1ffe <xTaskRemoveFromEventList+0x172>
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <xYieldPending>
    1ffc:	01 c0       	rjmp	.+2      	; 0x2000 <xTaskRemoveFromEventList+0x174>
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	08 95       	ret

00002006 <vTaskInternalSetTimeOutState>:
    2006:	20 91 d5 03 	lds	r18, 0x03D5	; 0x8003d5 <xNumOfOverflows>
    200a:	fc 01       	movw	r30, r24
    200c:	20 83       	st	Z, r18
    200e:	20 91 db 03 	lds	r18, 0x03DB	; 0x8003db <xTickCount>
    2012:	30 91 dc 03 	lds	r19, 0x03DC	; 0x8003dc <xTickCount+0x1>
    2016:	32 83       	std	Z+2, r19	; 0x02
    2018:	21 83       	std	Z+1, r18	; 0x01
    201a:	08 95       	ret

0000201c <xTaskCheckForTimeOut>:
    201c:	1f 93       	push	r17
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	0f 92       	push	r0
    2028:	e0 91 db 03 	lds	r30, 0x03DB	; 0x8003db <xTickCount>
    202c:	f0 91 dc 03 	lds	r31, 0x03DC	; 0x8003dc <xTickCount+0x1>
    2030:	dc 01       	movw	r26, r24
    2032:	11 96       	adiw	r26, 0x01	; 1
    2034:	4d 91       	ld	r20, X+
    2036:	5c 91       	ld	r21, X
    2038:	12 97       	sbiw	r26, 0x02	; 2
    203a:	df 01       	movw	r26, r30
    203c:	a4 1b       	sub	r26, r20
    203e:	b5 0b       	sbc	r27, r21
    2040:	eb 01       	movw	r28, r22
    2042:	28 81       	ld	r18, Y
    2044:	39 81       	ldd	r19, Y+1	; 0x01
    2046:	2f 3f       	cpi	r18, 0xFF	; 255
    2048:	df ef       	ldi	r29, 0xFF	; 255
    204a:	3d 07       	cpc	r19, r29
    204c:	f9 f0       	breq	.+62     	; 0x208c <xTaskCheckForTimeOut+0x70>
    204e:	ec 01       	movw	r28, r24
    2050:	18 81       	ld	r17, Y
    2052:	c0 91 d5 03 	lds	r28, 0x03D5	; 0x8003d5 <xNumOfOverflows>
    2056:	1c 17       	cp	r17, r28
    2058:	41 f0       	breq	.+16     	; 0x206a <xTaskCheckForTimeOut+0x4e>
    205a:	e4 17       	cp	r30, r20
    205c:	f5 07       	cpc	r31, r21
    205e:	28 f0       	brcs	.+10     	; 0x206a <xTaskCheckForTimeOut+0x4e>
    2060:	fb 01       	movw	r30, r22
    2062:	11 82       	std	Z+1, r1	; 0x01
    2064:	10 82       	st	Z, r1
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	12 c0       	rjmp	.+36     	; 0x208e <xTaskCheckForTimeOut+0x72>
    206a:	a2 17       	cp	r26, r18
    206c:	b3 07       	cpc	r27, r19
    206e:	48 f4       	brcc	.+18     	; 0x2082 <xTaskCheckForTimeOut+0x66>
    2070:	fb 01       	movw	r30, r22
    2072:	2a 1b       	sub	r18, r26
    2074:	3b 0b       	sbc	r19, r27
    2076:	31 83       	std	Z+1, r19	; 0x01
    2078:	20 83       	st	Z, r18
    207a:	0e 94 03 10 	call	0x2006	; 0x2006 <vTaskInternalSetTimeOutState>
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	06 c0       	rjmp	.+12     	; 0x208e <xTaskCheckForTimeOut+0x72>
    2082:	db 01       	movw	r26, r22
    2084:	1d 92       	st	X+, r1
    2086:	1c 92       	st	X, r1
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	01 c0       	rjmp	.+2      	; 0x208e <xTaskCheckForTimeOut+0x72>
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	0f 90       	pop	r0
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	1f 91       	pop	r17
    2098:	08 95       	ret

0000209a <vTaskMissedYield>:
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <xYieldPending>
    20a0:	08 95       	ret

000020a2 <xTaskPriorityInherit>:
    20a2:	0f 93       	push	r16
    20a4:	1f 93       	push	r17
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	fc 01       	movw	r30, r24
    20ac:	89 2b       	or	r24, r25
    20ae:	09 f4       	brne	.+2      	; 0x20b2 <xTaskPriorityInherit+0x10>
    20b0:	84 c0       	rjmp	.+264    	; 0x21ba <xTaskPriorityInherit+0x118>
    20b2:	26 89       	ldd	r18, Z+22	; 0x16
    20b4:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <pxCurrentTCB>
    20b8:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    20bc:	56 96       	adiw	r26, 0x16	; 22
    20be:	8c 91       	ld	r24, X
    20c0:	28 17       	cp	r18, r24
    20c2:	08 f0       	brcs	.+2      	; 0x20c6 <xTaskPriorityInherit+0x24>
    20c4:	70 c0       	rjmp	.+224    	; 0x21a6 <xTaskPriorityInherit+0x104>
    20c6:	84 85       	ldd	r24, Z+12	; 0x0c
    20c8:	95 85       	ldd	r25, Z+13	; 0x0d
    20ca:	99 23       	and	r25, r25
    20cc:	64 f0       	brlt	.+24     	; 0x20e6 <xTaskPriorityInherit+0x44>
    20ce:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <pxCurrentTCB>
    20d2:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    20d6:	56 96       	adiw	r26, 0x16	; 22
    20d8:	3c 91       	ld	r19, X
    20da:	85 e0       	ldi	r24, 0x05	; 5
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	83 1b       	sub	r24, r19
    20e0:	91 09       	sbc	r25, r1
    20e2:	95 87       	std	Z+13, r25	; 0x0d
    20e4:	84 87       	std	Z+12, r24	; 0x0c
    20e6:	82 85       	ldd	r24, Z+10	; 0x0a
    20e8:	93 85       	ldd	r25, Z+11	; 0x0b
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	a9 01       	movw	r20, r18
    20ee:	44 0f       	add	r20, r20
    20f0:	55 1f       	adc	r21, r21
    20f2:	44 0f       	add	r20, r20
    20f4:	55 1f       	adc	r21, r21
    20f6:	44 0f       	add	r20, r20
    20f8:	55 1f       	adc	r21, r21
    20fa:	24 0f       	add	r18, r20
    20fc:	35 1f       	adc	r19, r21
    20fe:	20 5f       	subi	r18, 0xF0	; 240
    2100:	3b 4f       	sbci	r19, 0xFB	; 251
    2102:	82 17       	cp	r24, r18
    2104:	93 07       	cpc	r25, r19
    2106:	09 f0       	breq	.+2      	; 0x210a <xTaskPriorityInherit+0x68>
    2108:	45 c0       	rjmp	.+138    	; 0x2194 <xTaskPriorityInherit+0xf2>
    210a:	ef 01       	movw	r28, r30
    210c:	8f 01       	movw	r16, r30
    210e:	0e 5f       	subi	r16, 0xFE	; 254
    2110:	1f 4f       	sbci	r17, 0xFF	; 255
    2112:	c8 01       	movw	r24, r16
    2114:	0e 94 ef 05 	call	0xbde	; 0xbde <uxListRemove>
    2118:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <pxCurrentTCB>
    211c:	f0 91 3e 04 	lds	r31, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    2120:	86 89       	ldd	r24, Z+22	; 0x16
    2122:	8e 8b       	std	Y+22, r24	; 0x16
    2124:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <uxTopReadyPriority>
    2128:	98 17       	cp	r25, r24
    212a:	10 f4       	brcc	.+4      	; 0x2130 <xTaskPriorityInherit+0x8e>
    212c:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <uxTopReadyPriority>
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	fc 01       	movw	r30, r24
    2134:	ee 0f       	add	r30, r30
    2136:	ff 1f       	adc	r31, r31
    2138:	ee 0f       	add	r30, r30
    213a:	ff 1f       	adc	r31, r31
    213c:	ee 0f       	add	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	8e 0f       	add	r24, r30
    2142:	9f 1f       	adc	r25, r31
    2144:	fc 01       	movw	r30, r24
    2146:	e0 5f       	subi	r30, 0xF0	; 240
    2148:	fb 4f       	sbci	r31, 0xFB	; 251
    214a:	01 80       	ldd	r0, Z+1	; 0x01
    214c:	f2 81       	ldd	r31, Z+2	; 0x02
    214e:	e0 2d       	mov	r30, r0
    2150:	fd 83       	std	Y+5, r31	; 0x05
    2152:	ec 83       	std	Y+4, r30	; 0x04
    2154:	84 81       	ldd	r24, Z+4	; 0x04
    2156:	95 81       	ldd	r25, Z+5	; 0x05
    2158:	9f 83       	std	Y+7, r25	; 0x07
    215a:	8e 83       	std	Y+6, r24	; 0x06
    215c:	a4 81       	ldd	r26, Z+4	; 0x04
    215e:	b5 81       	ldd	r27, Z+5	; 0x05
    2160:	13 96       	adiw	r26, 0x03	; 3
    2162:	1c 93       	st	X, r17
    2164:	0e 93       	st	-X, r16
    2166:	12 97       	sbiw	r26, 0x02	; 2
    2168:	15 83       	std	Z+5, r17	; 0x05
    216a:	04 83       	std	Z+4, r16	; 0x04
    216c:	8e 89       	ldd	r24, Y+22	; 0x16
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	fc 01       	movw	r30, r24
    2172:	ee 0f       	add	r30, r30
    2174:	ff 1f       	adc	r31, r31
    2176:	ee 0f       	add	r30, r30
    2178:	ff 1f       	adc	r31, r31
    217a:	ee 0f       	add	r30, r30
    217c:	ff 1f       	adc	r31, r31
    217e:	e8 0f       	add	r30, r24
    2180:	f9 1f       	adc	r31, r25
    2182:	e0 5f       	subi	r30, 0xF0	; 240
    2184:	fb 4f       	sbci	r31, 0xFB	; 251
    2186:	fb 87       	std	Y+11, r31	; 0x0b
    2188:	ea 87       	std	Y+10, r30	; 0x0a
    218a:	80 81       	ld	r24, Z
    218c:	8f 5f       	subi	r24, 0xFF	; 255
    218e:	80 83       	st	Z, r24
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	16 c0       	rjmp	.+44     	; 0x21c0 <xTaskPriorityInherit+0x11e>
    2194:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <pxCurrentTCB>
    2198:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    219c:	56 96       	adiw	r26, 0x16	; 22
    219e:	8c 91       	ld	r24, X
    21a0:	86 8b       	std	Z+22, r24	; 0x16
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	0d c0       	rjmp	.+26     	; 0x21c0 <xTaskPriorityInherit+0x11e>
    21a6:	95 a1       	ldd	r25, Z+37	; 0x25
    21a8:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <pxCurrentTCB>
    21ac:	f0 91 3e 04 	lds	r31, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    21b0:	86 89       	ldd	r24, Z+22	; 0x16
    21b2:	98 17       	cp	r25, r24
    21b4:	20 f0       	brcs	.+8      	; 0x21be <xTaskPriorityInherit+0x11c>
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	03 c0       	rjmp	.+6      	; 0x21c0 <xTaskPriorityInherit+0x11e>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	01 c0       	rjmp	.+2      	; 0x21c0 <xTaskPriorityInherit+0x11e>
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	df 91       	pop	r29
    21c2:	cf 91       	pop	r28
    21c4:	1f 91       	pop	r17
    21c6:	0f 91       	pop	r16
    21c8:	08 95       	ret

000021ca <xTaskPriorityDisinherit>:
    21ca:	0f 93       	push	r16
    21cc:	1f 93       	push	r17
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	fc 01       	movw	r30, r24
    21d4:	89 2b       	or	r24, r25
    21d6:	09 f4       	brne	.+2      	; 0x21da <xTaskPriorityDisinherit+0x10>
    21d8:	51 c0       	rjmp	.+162    	; 0x227c <xTaskPriorityDisinherit+0xb2>
    21da:	86 a1       	ldd	r24, Z+38	; 0x26
    21dc:	81 50       	subi	r24, 0x01	; 1
    21de:	86 a3       	std	Z+38, r24	; 0x26
    21e0:	26 89       	ldd	r18, Z+22	; 0x16
    21e2:	95 a1       	ldd	r25, Z+37	; 0x25
    21e4:	29 17       	cp	r18, r25
    21e6:	09 f4       	brne	.+2      	; 0x21ea <xTaskPriorityDisinherit+0x20>
    21e8:	4b c0       	rjmp	.+150    	; 0x2280 <xTaskPriorityDisinherit+0xb6>
    21ea:	81 11       	cpse	r24, r1
    21ec:	4b c0       	rjmp	.+150    	; 0x2284 <xTaskPriorityDisinherit+0xba>
    21ee:	ef 01       	movw	r28, r30
    21f0:	8f 01       	movw	r16, r30
    21f2:	0e 5f       	subi	r16, 0xFE	; 254
    21f4:	1f 4f       	sbci	r17, 0xFF	; 255
    21f6:	c8 01       	movw	r24, r16
    21f8:	0e 94 ef 05 	call	0xbde	; 0xbde <uxListRemove>
    21fc:	8d a1       	ldd	r24, Y+37	; 0x25
    21fe:	8e 8b       	std	Y+22, r24	; 0x16
    2200:	25 e0       	ldi	r18, 0x05	; 5
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	28 1b       	sub	r18, r24
    2206:	31 09       	sbc	r19, r1
    2208:	3d 87       	std	Y+13, r19	; 0x0d
    220a:	2c 87       	std	Y+12, r18	; 0x0c
    220c:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <uxTopReadyPriority>
    2210:	98 17       	cp	r25, r24
    2212:	10 f4       	brcc	.+4      	; 0x2218 <xTaskPriorityDisinherit+0x4e>
    2214:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <uxTopReadyPriority>
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	fc 01       	movw	r30, r24
    221c:	ee 0f       	add	r30, r30
    221e:	ff 1f       	adc	r31, r31
    2220:	ee 0f       	add	r30, r30
    2222:	ff 1f       	adc	r31, r31
    2224:	ee 0f       	add	r30, r30
    2226:	ff 1f       	adc	r31, r31
    2228:	8e 0f       	add	r24, r30
    222a:	9f 1f       	adc	r25, r31
    222c:	fc 01       	movw	r30, r24
    222e:	e0 5f       	subi	r30, 0xF0	; 240
    2230:	fb 4f       	sbci	r31, 0xFB	; 251
    2232:	01 80       	ldd	r0, Z+1	; 0x01
    2234:	f2 81       	ldd	r31, Z+2	; 0x02
    2236:	e0 2d       	mov	r30, r0
    2238:	fd 83       	std	Y+5, r31	; 0x05
    223a:	ec 83       	std	Y+4, r30	; 0x04
    223c:	84 81       	ldd	r24, Z+4	; 0x04
    223e:	95 81       	ldd	r25, Z+5	; 0x05
    2240:	9f 83       	std	Y+7, r25	; 0x07
    2242:	8e 83       	std	Y+6, r24	; 0x06
    2244:	a4 81       	ldd	r26, Z+4	; 0x04
    2246:	b5 81       	ldd	r27, Z+5	; 0x05
    2248:	13 96       	adiw	r26, 0x03	; 3
    224a:	1c 93       	st	X, r17
    224c:	0e 93       	st	-X, r16
    224e:	12 97       	sbiw	r26, 0x02	; 2
    2250:	15 83       	std	Z+5, r17	; 0x05
    2252:	04 83       	std	Z+4, r16	; 0x04
    2254:	ee 89       	ldd	r30, Y+22	; 0x16
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	cf 01       	movw	r24, r30
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	88 0f       	add	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	e8 0f       	add	r30, r24
    2268:	f9 1f       	adc	r31, r25
    226a:	e0 5f       	subi	r30, 0xF0	; 240
    226c:	fb 4f       	sbci	r31, 0xFB	; 251
    226e:	fb 87       	std	Y+11, r31	; 0x0b
    2270:	ea 87       	std	Y+10, r30	; 0x0a
    2272:	80 81       	ld	r24, Z
    2274:	8f 5f       	subi	r24, 0xFF	; 255
    2276:	80 83       	st	Z, r24
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	05 c0       	rjmp	.+10     	; 0x2286 <xTaskPriorityDisinherit+0xbc>
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	03 c0       	rjmp	.+6      	; 0x2286 <xTaskPriorityDisinherit+0xbc>
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	01 c0       	rjmp	.+2      	; 0x2286 <xTaskPriorityDisinherit+0xbc>
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	1f 91       	pop	r17
    228c:	0f 91       	pop	r16
    228e:	08 95       	ret

00002290 <vTaskPriorityDisinheritAfterTimeout>:
    2290:	0f 93       	push	r16
    2292:	1f 93       	push	r17
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	fc 01       	movw	r30, r24
    229a:	89 2b       	or	r24, r25
    229c:	09 f4       	brne	.+2      	; 0x22a0 <vTaskPriorityDisinheritAfterTimeout+0x10>
    229e:	66 c0       	rjmp	.+204    	; 0x236c <vTaskPriorityDisinheritAfterTimeout+0xdc>
    22a0:	95 a1       	ldd	r25, Z+37	; 0x25
    22a2:	96 17       	cp	r25, r22
    22a4:	08 f4       	brcc	.+2      	; 0x22a8 <vTaskPriorityDisinheritAfterTimeout+0x18>
    22a6:	96 2f       	mov	r25, r22
    22a8:	86 89       	ldd	r24, Z+22	; 0x16
    22aa:	98 17       	cp	r25, r24
    22ac:	09 f4       	brne	.+2      	; 0x22b0 <vTaskPriorityDisinheritAfterTimeout+0x20>
    22ae:	5e c0       	rjmp	.+188    	; 0x236c <vTaskPriorityDisinheritAfterTimeout+0xdc>
    22b0:	26 a1       	ldd	r18, Z+38	; 0x26
    22b2:	21 30       	cpi	r18, 0x01	; 1
    22b4:	09 f0       	breq	.+2      	; 0x22b8 <vTaskPriorityDisinheritAfterTimeout+0x28>
    22b6:	5a c0       	rjmp	.+180    	; 0x236c <vTaskPriorityDisinheritAfterTimeout+0xdc>
    22b8:	96 8b       	std	Z+22, r25	; 0x16
    22ba:	24 85       	ldd	r18, Z+12	; 0x0c
    22bc:	35 85       	ldd	r19, Z+13	; 0x0d
    22be:	33 23       	and	r19, r19
    22c0:	34 f0       	brlt	.+12     	; 0x22ce <vTaskPriorityDisinheritAfterTimeout+0x3e>
    22c2:	25 e0       	ldi	r18, 0x05	; 5
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	29 1b       	sub	r18, r25
    22c8:	31 09       	sbc	r19, r1
    22ca:	35 87       	std	Z+13, r19	; 0x0d
    22cc:	24 87       	std	Z+12, r18	; 0x0c
    22ce:	22 85       	ldd	r18, Z+10	; 0x0a
    22d0:	33 85       	ldd	r19, Z+11	; 0x0b
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	ac 01       	movw	r20, r24
    22d6:	44 0f       	add	r20, r20
    22d8:	55 1f       	adc	r21, r21
    22da:	44 0f       	add	r20, r20
    22dc:	55 1f       	adc	r21, r21
    22de:	44 0f       	add	r20, r20
    22e0:	55 1f       	adc	r21, r21
    22e2:	84 0f       	add	r24, r20
    22e4:	95 1f       	adc	r25, r21
    22e6:	80 5f       	subi	r24, 0xF0	; 240
    22e8:	9b 4f       	sbci	r25, 0xFB	; 251
    22ea:	28 17       	cp	r18, r24
    22ec:	39 07       	cpc	r19, r25
    22ee:	f1 f5       	brne	.+124    	; 0x236c <vTaskPriorityDisinheritAfterTimeout+0xdc>
    22f0:	ef 01       	movw	r28, r30
    22f2:	8f 01       	movw	r16, r30
    22f4:	0e 5f       	subi	r16, 0xFE	; 254
    22f6:	1f 4f       	sbci	r17, 0xFF	; 255
    22f8:	c8 01       	movw	r24, r16
    22fa:	0e 94 ef 05 	call	0xbde	; 0xbde <uxListRemove>
    22fe:	8e 89       	ldd	r24, Y+22	; 0x16
    2300:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <uxTopReadyPriority>
    2304:	98 17       	cp	r25, r24
    2306:	10 f4       	brcc	.+4      	; 0x230c <vTaskPriorityDisinheritAfterTimeout+0x7c>
    2308:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <uxTopReadyPriority>
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	fc 01       	movw	r30, r24
    2310:	ee 0f       	add	r30, r30
    2312:	ff 1f       	adc	r31, r31
    2314:	ee 0f       	add	r30, r30
    2316:	ff 1f       	adc	r31, r31
    2318:	ee 0f       	add	r30, r30
    231a:	ff 1f       	adc	r31, r31
    231c:	8e 0f       	add	r24, r30
    231e:	9f 1f       	adc	r25, r31
    2320:	fc 01       	movw	r30, r24
    2322:	e0 5f       	subi	r30, 0xF0	; 240
    2324:	fb 4f       	sbci	r31, 0xFB	; 251
    2326:	01 80       	ldd	r0, Z+1	; 0x01
    2328:	f2 81       	ldd	r31, Z+2	; 0x02
    232a:	e0 2d       	mov	r30, r0
    232c:	fd 83       	std	Y+5, r31	; 0x05
    232e:	ec 83       	std	Y+4, r30	; 0x04
    2330:	84 81       	ldd	r24, Z+4	; 0x04
    2332:	95 81       	ldd	r25, Z+5	; 0x05
    2334:	9f 83       	std	Y+7, r25	; 0x07
    2336:	8e 83       	std	Y+6, r24	; 0x06
    2338:	a4 81       	ldd	r26, Z+4	; 0x04
    233a:	b5 81       	ldd	r27, Z+5	; 0x05
    233c:	13 96       	adiw	r26, 0x03	; 3
    233e:	1c 93       	st	X, r17
    2340:	0e 93       	st	-X, r16
    2342:	12 97       	sbiw	r26, 0x02	; 2
    2344:	15 83       	std	Z+5, r17	; 0x05
    2346:	04 83       	std	Z+4, r16	; 0x04
    2348:	8e 89       	ldd	r24, Y+22	; 0x16
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	fc 01       	movw	r30, r24
    234e:	ee 0f       	add	r30, r30
    2350:	ff 1f       	adc	r31, r31
    2352:	ee 0f       	add	r30, r30
    2354:	ff 1f       	adc	r31, r31
    2356:	ee 0f       	add	r30, r30
    2358:	ff 1f       	adc	r31, r31
    235a:	e8 0f       	add	r30, r24
    235c:	f9 1f       	adc	r31, r25
    235e:	e0 5f       	subi	r30, 0xF0	; 240
    2360:	fb 4f       	sbci	r31, 0xFB	; 251
    2362:	fb 87       	std	Y+11, r31	; 0x0b
    2364:	ea 87       	std	Y+10, r30	; 0x0a
    2366:	80 81       	ld	r24, Z
    2368:	8f 5f       	subi	r24, 0xFF	; 255
    236a:	80 83       	st	Z, r24
    236c:	df 91       	pop	r29
    236e:	cf 91       	pop	r28
    2370:	1f 91       	pop	r17
    2372:	0f 91       	pop	r16
    2374:	08 95       	ret

00002376 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    2376:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <pxCurrentTCB>
    237a:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    237e:	89 2b       	or	r24, r25
    2380:	39 f0       	breq	.+14     	; 0x2390 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    2382:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <pxCurrentTCB>
    2386:	f0 91 3e 04 	lds	r31, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    238a:	86 a1       	ldd	r24, Z+38	; 0x26
    238c:	8f 5f       	subi	r24, 0xFF	; 255
    238e:	86 a3       	std	Z+38, r24	; 0x26
        }

        return pxCurrentTCB;
    2390:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <pxCurrentTCB>
    2394:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <pxCurrentTCB+0x1>
    }
    2398:	08 95       	ret

0000239a <__subsf3>:
    239a:	50 58       	subi	r21, 0x80	; 128

0000239c <__addsf3>:
    239c:	bb 27       	eor	r27, r27
    239e:	aa 27       	eor	r26, r26
    23a0:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__addsf3x>
    23a4:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__fp_round>
    23a8:	0e 94 b9 12 	call	0x2572	; 0x2572 <__fp_pscA>
    23ac:	38 f0       	brcs	.+14     	; 0x23bc <__addsf3+0x20>
    23ae:	0e 94 c0 12 	call	0x2580	; 0x2580 <__fp_pscB>
    23b2:	20 f0       	brcs	.+8      	; 0x23bc <__addsf3+0x20>
    23b4:	39 f4       	brne	.+14     	; 0x23c4 <__addsf3+0x28>
    23b6:	9f 3f       	cpi	r25, 0xFF	; 255
    23b8:	19 f4       	brne	.+6      	; 0x23c0 <__addsf3+0x24>
    23ba:	26 f4       	brtc	.+8      	; 0x23c4 <__addsf3+0x28>
    23bc:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__fp_nan>
    23c0:	0e f4       	brtc	.+2      	; 0x23c4 <__addsf3+0x28>
    23c2:	e0 95       	com	r30
    23c4:	e7 fb       	bst	r30, 7
    23c6:	0c 94 87 12 	jmp	0x250e	; 0x250e <__fp_inf>

000023ca <__addsf3x>:
    23ca:	e9 2f       	mov	r30, r25
    23cc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <__fp_split3>
    23d0:	58 f3       	brcs	.-42     	; 0x23a8 <__addsf3+0xc>
    23d2:	ba 17       	cp	r27, r26
    23d4:	62 07       	cpc	r22, r18
    23d6:	73 07       	cpc	r23, r19
    23d8:	84 07       	cpc	r24, r20
    23da:	95 07       	cpc	r25, r21
    23dc:	20 f0       	brcs	.+8      	; 0x23e6 <__addsf3x+0x1c>
    23de:	79 f4       	brne	.+30     	; 0x23fe <__addsf3x+0x34>
    23e0:	a6 f5       	brtc	.+104    	; 0x244a <__addsf3x+0x80>
    23e2:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__fp_zero>
    23e6:	0e f4       	brtc	.+2      	; 0x23ea <__addsf3x+0x20>
    23e8:	e0 95       	com	r30
    23ea:	0b 2e       	mov	r0, r27
    23ec:	ba 2f       	mov	r27, r26
    23ee:	a0 2d       	mov	r26, r0
    23f0:	0b 01       	movw	r0, r22
    23f2:	b9 01       	movw	r22, r18
    23f4:	90 01       	movw	r18, r0
    23f6:	0c 01       	movw	r0, r24
    23f8:	ca 01       	movw	r24, r20
    23fa:	a0 01       	movw	r20, r0
    23fc:	11 24       	eor	r1, r1
    23fe:	ff 27       	eor	r31, r31
    2400:	59 1b       	sub	r21, r25
    2402:	99 f0       	breq	.+38     	; 0x242a <__addsf3x+0x60>
    2404:	59 3f       	cpi	r21, 0xF9	; 249
    2406:	50 f4       	brcc	.+20     	; 0x241c <__addsf3x+0x52>
    2408:	50 3e       	cpi	r21, 0xE0	; 224
    240a:	68 f1       	brcs	.+90     	; 0x2466 <__addsf3x+0x9c>
    240c:	1a 16       	cp	r1, r26
    240e:	f0 40       	sbci	r31, 0x00	; 0
    2410:	a2 2f       	mov	r26, r18
    2412:	23 2f       	mov	r18, r19
    2414:	34 2f       	mov	r19, r20
    2416:	44 27       	eor	r20, r20
    2418:	58 5f       	subi	r21, 0xF8	; 248
    241a:	f3 cf       	rjmp	.-26     	; 0x2402 <__addsf3x+0x38>
    241c:	46 95       	lsr	r20
    241e:	37 95       	ror	r19
    2420:	27 95       	ror	r18
    2422:	a7 95       	ror	r26
    2424:	f0 40       	sbci	r31, 0x00	; 0
    2426:	53 95       	inc	r21
    2428:	c9 f7       	brne	.-14     	; 0x241c <__addsf3x+0x52>
    242a:	7e f4       	brtc	.+30     	; 0x244a <__addsf3x+0x80>
    242c:	1f 16       	cp	r1, r31
    242e:	ba 0b       	sbc	r27, r26
    2430:	62 0b       	sbc	r22, r18
    2432:	73 0b       	sbc	r23, r19
    2434:	84 0b       	sbc	r24, r20
    2436:	ba f0       	brmi	.+46     	; 0x2466 <__addsf3x+0x9c>
    2438:	91 50       	subi	r25, 0x01	; 1
    243a:	a1 f0       	breq	.+40     	; 0x2464 <__addsf3x+0x9a>
    243c:	ff 0f       	add	r31, r31
    243e:	bb 1f       	adc	r27, r27
    2440:	66 1f       	adc	r22, r22
    2442:	77 1f       	adc	r23, r23
    2444:	88 1f       	adc	r24, r24
    2446:	c2 f7       	brpl	.-16     	; 0x2438 <__addsf3x+0x6e>
    2448:	0e c0       	rjmp	.+28     	; 0x2466 <__addsf3x+0x9c>
    244a:	ba 0f       	add	r27, r26
    244c:	62 1f       	adc	r22, r18
    244e:	73 1f       	adc	r23, r19
    2450:	84 1f       	adc	r24, r20
    2452:	48 f4       	brcc	.+18     	; 0x2466 <__addsf3x+0x9c>
    2454:	87 95       	ror	r24
    2456:	77 95       	ror	r23
    2458:	67 95       	ror	r22
    245a:	b7 95       	ror	r27
    245c:	f7 95       	ror	r31
    245e:	9e 3f       	cpi	r25, 0xFE	; 254
    2460:	08 f0       	brcs	.+2      	; 0x2464 <__addsf3x+0x9a>
    2462:	b0 cf       	rjmp	.-160    	; 0x23c4 <__addsf3+0x28>
    2464:	93 95       	inc	r25
    2466:	88 0f       	add	r24, r24
    2468:	08 f0       	brcs	.+2      	; 0x246c <__addsf3x+0xa2>
    246a:	99 27       	eor	r25, r25
    246c:	ee 0f       	add	r30, r30
    246e:	97 95       	ror	r25
    2470:	87 95       	ror	r24
    2472:	08 95       	ret

00002474 <__fixsfsi>:
    2474:	0e 94 41 12 	call	0x2482	; 0x2482 <__fixunssfsi>
    2478:	68 94       	set
    247a:	b1 11       	cpse	r27, r1
    247c:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__fp_szero>
    2480:	08 95       	ret

00002482 <__fixunssfsi>:
    2482:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__fp_splitA>
    2486:	88 f0       	brcs	.+34     	; 0x24aa <__fixunssfsi+0x28>
    2488:	9f 57       	subi	r25, 0x7F	; 127
    248a:	98 f0       	brcs	.+38     	; 0x24b2 <__fixunssfsi+0x30>
    248c:	b9 2f       	mov	r27, r25
    248e:	99 27       	eor	r25, r25
    2490:	b7 51       	subi	r27, 0x17	; 23
    2492:	b0 f0       	brcs	.+44     	; 0x24c0 <__fixunssfsi+0x3e>
    2494:	e1 f0       	breq	.+56     	; 0x24ce <__fixunssfsi+0x4c>
    2496:	66 0f       	add	r22, r22
    2498:	77 1f       	adc	r23, r23
    249a:	88 1f       	adc	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	1a f0       	brmi	.+6      	; 0x24a6 <__fixunssfsi+0x24>
    24a0:	ba 95       	dec	r27
    24a2:	c9 f7       	brne	.-14     	; 0x2496 <__fixunssfsi+0x14>
    24a4:	14 c0       	rjmp	.+40     	; 0x24ce <__fixunssfsi+0x4c>
    24a6:	b1 30       	cpi	r27, 0x01	; 1
    24a8:	91 f0       	breq	.+36     	; 0x24ce <__fixunssfsi+0x4c>
    24aa:	0e 94 12 13 	call	0x2624	; 0x2624 <__fp_zero>
    24ae:	b1 e0       	ldi	r27, 0x01	; 1
    24b0:	08 95       	ret
    24b2:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__fp_zero>
    24b6:	67 2f       	mov	r22, r23
    24b8:	78 2f       	mov	r23, r24
    24ba:	88 27       	eor	r24, r24
    24bc:	b8 5f       	subi	r27, 0xF8	; 248
    24be:	39 f0       	breq	.+14     	; 0x24ce <__fixunssfsi+0x4c>
    24c0:	b9 3f       	cpi	r27, 0xF9	; 249
    24c2:	cc f3       	brlt	.-14     	; 0x24b6 <__fixunssfsi+0x34>
    24c4:	86 95       	lsr	r24
    24c6:	77 95       	ror	r23
    24c8:	67 95       	ror	r22
    24ca:	b3 95       	inc	r27
    24cc:	d9 f7       	brne	.-10     	; 0x24c4 <__fixunssfsi+0x42>
    24ce:	3e f4       	brtc	.+14     	; 0x24de <__fixunssfsi+0x5c>
    24d0:	90 95       	com	r25
    24d2:	80 95       	com	r24
    24d4:	70 95       	com	r23
    24d6:	61 95       	neg	r22
    24d8:	7f 4f       	sbci	r23, 0xFF	; 255
    24da:	8f 4f       	sbci	r24, 0xFF	; 255
    24dc:	9f 4f       	sbci	r25, 0xFF	; 255
    24de:	08 95       	ret

000024e0 <floor>:
    24e0:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__fp_trunc>
    24e4:	90 f0       	brcs	.+36     	; 0x250a <floor+0x2a>
    24e6:	9f 37       	cpi	r25, 0x7F	; 127
    24e8:	48 f4       	brcc	.+18     	; 0x24fc <floor+0x1c>
    24ea:	91 11       	cpse	r25, r1
    24ec:	16 f0       	brts	.+4      	; 0x24f2 <floor+0x12>
    24ee:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__fp_szero>
    24f2:	60 e0       	ldi	r22, 0x00	; 0
    24f4:	70 e0       	ldi	r23, 0x00	; 0
    24f6:	80 e8       	ldi	r24, 0x80	; 128
    24f8:	9f eb       	ldi	r25, 0xBF	; 191
    24fa:	08 95       	ret
    24fc:	26 f4       	brtc	.+8      	; 0x2506 <floor+0x26>
    24fe:	1b 16       	cp	r1, r27
    2500:	61 1d       	adc	r22, r1
    2502:	71 1d       	adc	r23, r1
    2504:	81 1d       	adc	r24, r1
    2506:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__fp_mintl>
    250a:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__fp_mpack>

0000250e <__fp_inf>:
    250e:	97 f9       	bld	r25, 7
    2510:	9f 67       	ori	r25, 0x7F	; 127
    2512:	80 e8       	ldi	r24, 0x80	; 128
    2514:	70 e0       	ldi	r23, 0x00	; 0
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	08 95       	ret

0000251a <__fp_mintl>:
    251a:	88 23       	and	r24, r24
    251c:	71 f4       	brne	.+28     	; 0x253a <__fp_mintl+0x20>
    251e:	77 23       	and	r23, r23
    2520:	21 f0       	breq	.+8      	; 0x252a <__fp_mintl+0x10>
    2522:	98 50       	subi	r25, 0x08	; 8
    2524:	87 2b       	or	r24, r23
    2526:	76 2f       	mov	r23, r22
    2528:	07 c0       	rjmp	.+14     	; 0x2538 <__fp_mintl+0x1e>
    252a:	66 23       	and	r22, r22
    252c:	11 f4       	brne	.+4      	; 0x2532 <__fp_mintl+0x18>
    252e:	99 27       	eor	r25, r25
    2530:	0d c0       	rjmp	.+26     	; 0x254c <__fp_mintl+0x32>
    2532:	90 51       	subi	r25, 0x10	; 16
    2534:	86 2b       	or	r24, r22
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	2a f0       	brmi	.+10     	; 0x2546 <__fp_mintl+0x2c>
    253c:	9a 95       	dec	r25
    253e:	66 0f       	add	r22, r22
    2540:	77 1f       	adc	r23, r23
    2542:	88 1f       	adc	r24, r24
    2544:	da f7       	brpl	.-10     	; 0x253c <__fp_mintl+0x22>
    2546:	88 0f       	add	r24, r24
    2548:	96 95       	lsr	r25
    254a:	87 95       	ror	r24
    254c:	97 f9       	bld	r25, 7
    254e:	08 95       	ret

00002550 <__fp_mpack>:
    2550:	9f 3f       	cpi	r25, 0xFF	; 255
    2552:	31 f0       	breq	.+12     	; 0x2560 <__fp_mpack_finite+0xc>

00002554 <__fp_mpack_finite>:
    2554:	91 50       	subi	r25, 0x01	; 1
    2556:	20 f4       	brcc	.+8      	; 0x2560 <__fp_mpack_finite+0xc>
    2558:	87 95       	ror	r24
    255a:	77 95       	ror	r23
    255c:	67 95       	ror	r22
    255e:	b7 95       	ror	r27
    2560:	88 0f       	add	r24, r24
    2562:	91 1d       	adc	r25, r1
    2564:	96 95       	lsr	r25
    2566:	87 95       	ror	r24
    2568:	97 f9       	bld	r25, 7
    256a:	08 95       	ret

0000256c <__fp_nan>:
    256c:	9f ef       	ldi	r25, 0xFF	; 255
    256e:	80 ec       	ldi	r24, 0xC0	; 192
    2570:	08 95       	ret

00002572 <__fp_pscA>:
    2572:	00 24       	eor	r0, r0
    2574:	0a 94       	dec	r0
    2576:	16 16       	cp	r1, r22
    2578:	17 06       	cpc	r1, r23
    257a:	18 06       	cpc	r1, r24
    257c:	09 06       	cpc	r0, r25
    257e:	08 95       	ret

00002580 <__fp_pscB>:
    2580:	00 24       	eor	r0, r0
    2582:	0a 94       	dec	r0
    2584:	12 16       	cp	r1, r18
    2586:	13 06       	cpc	r1, r19
    2588:	14 06       	cpc	r1, r20
    258a:	05 06       	cpc	r0, r21
    258c:	08 95       	ret

0000258e <__fp_round>:
    258e:	09 2e       	mov	r0, r25
    2590:	03 94       	inc	r0
    2592:	00 0c       	add	r0, r0
    2594:	11 f4       	brne	.+4      	; 0x259a <__fp_round+0xc>
    2596:	88 23       	and	r24, r24
    2598:	52 f0       	brmi	.+20     	; 0x25ae <__fp_round+0x20>
    259a:	bb 0f       	add	r27, r27
    259c:	40 f4       	brcc	.+16     	; 0x25ae <__fp_round+0x20>
    259e:	bf 2b       	or	r27, r31
    25a0:	11 f4       	brne	.+4      	; 0x25a6 <__fp_round+0x18>
    25a2:	60 ff       	sbrs	r22, 0
    25a4:	04 c0       	rjmp	.+8      	; 0x25ae <__fp_round+0x20>
    25a6:	6f 5f       	subi	r22, 0xFF	; 255
    25a8:	7f 4f       	sbci	r23, 0xFF	; 255
    25aa:	8f 4f       	sbci	r24, 0xFF	; 255
    25ac:	9f 4f       	sbci	r25, 0xFF	; 255
    25ae:	08 95       	ret

000025b0 <__fp_split3>:
    25b0:	57 fd       	sbrc	r21, 7
    25b2:	90 58       	subi	r25, 0x80	; 128
    25b4:	44 0f       	add	r20, r20
    25b6:	55 1f       	adc	r21, r21
    25b8:	59 f0       	breq	.+22     	; 0x25d0 <__fp_splitA+0x10>
    25ba:	5f 3f       	cpi	r21, 0xFF	; 255
    25bc:	71 f0       	breq	.+28     	; 0x25da <__fp_splitA+0x1a>
    25be:	47 95       	ror	r20

000025c0 <__fp_splitA>:
    25c0:	88 0f       	add	r24, r24
    25c2:	97 fb       	bst	r25, 7
    25c4:	99 1f       	adc	r25, r25
    25c6:	61 f0       	breq	.+24     	; 0x25e0 <__fp_splitA+0x20>
    25c8:	9f 3f       	cpi	r25, 0xFF	; 255
    25ca:	79 f0       	breq	.+30     	; 0x25ea <__fp_splitA+0x2a>
    25cc:	87 95       	ror	r24
    25ce:	08 95       	ret
    25d0:	12 16       	cp	r1, r18
    25d2:	13 06       	cpc	r1, r19
    25d4:	14 06       	cpc	r1, r20
    25d6:	55 1f       	adc	r21, r21
    25d8:	f2 cf       	rjmp	.-28     	; 0x25be <__fp_split3+0xe>
    25da:	46 95       	lsr	r20
    25dc:	f1 df       	rcall	.-30     	; 0x25c0 <__fp_splitA>
    25de:	08 c0       	rjmp	.+16     	; 0x25f0 <__fp_splitA+0x30>
    25e0:	16 16       	cp	r1, r22
    25e2:	17 06       	cpc	r1, r23
    25e4:	18 06       	cpc	r1, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	f1 cf       	rjmp	.-30     	; 0x25cc <__fp_splitA+0xc>
    25ea:	86 95       	lsr	r24
    25ec:	71 05       	cpc	r23, r1
    25ee:	61 05       	cpc	r22, r1
    25f0:	08 94       	sec
    25f2:	08 95       	ret

000025f4 <__fp_trunc>:
    25f4:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__fp_splitA>
    25f8:	a0 f0       	brcs	.+40     	; 0x2622 <__fp_trunc+0x2e>
    25fa:	be e7       	ldi	r27, 0x7E	; 126
    25fc:	b9 17       	cp	r27, r25
    25fe:	88 f4       	brcc	.+34     	; 0x2622 <__fp_trunc+0x2e>
    2600:	bb 27       	eor	r27, r27
    2602:	9f 38       	cpi	r25, 0x8F	; 143
    2604:	60 f4       	brcc	.+24     	; 0x261e <__fp_trunc+0x2a>
    2606:	16 16       	cp	r1, r22
    2608:	b1 1d       	adc	r27, r1
    260a:	67 2f       	mov	r22, r23
    260c:	78 2f       	mov	r23, r24
    260e:	88 27       	eor	r24, r24
    2610:	98 5f       	subi	r25, 0xF8	; 248
    2612:	f7 cf       	rjmp	.-18     	; 0x2602 <__fp_trunc+0xe>
    2614:	86 95       	lsr	r24
    2616:	77 95       	ror	r23
    2618:	67 95       	ror	r22
    261a:	b1 1d       	adc	r27, r1
    261c:	93 95       	inc	r25
    261e:	96 39       	cpi	r25, 0x96	; 150
    2620:	c8 f3       	brcs	.-14     	; 0x2614 <__fp_trunc+0x20>
    2622:	08 95       	ret

00002624 <__fp_zero>:
    2624:	e8 94       	clt

00002626 <__fp_szero>:
    2626:	bb 27       	eor	r27, r27
    2628:	66 27       	eor	r22, r22
    262a:	77 27       	eor	r23, r23
    262c:	cb 01       	movw	r24, r22
    262e:	97 f9       	bld	r25, 7
    2630:	08 95       	ret

00002632 <__mulsf3>:
    2632:	0e 94 2c 13 	call	0x2658	; 0x2658 <__mulsf3x>
    2636:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__fp_round>
    263a:	0e 94 b9 12 	call	0x2572	; 0x2572 <__fp_pscA>
    263e:	38 f0       	brcs	.+14     	; 0x264e <__mulsf3+0x1c>
    2640:	0e 94 c0 12 	call	0x2580	; 0x2580 <__fp_pscB>
    2644:	20 f0       	brcs	.+8      	; 0x264e <__mulsf3+0x1c>
    2646:	95 23       	and	r25, r21
    2648:	11 f0       	breq	.+4      	; 0x264e <__mulsf3+0x1c>
    264a:	0c 94 87 12 	jmp	0x250e	; 0x250e <__fp_inf>
    264e:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__fp_nan>
    2652:	11 24       	eor	r1, r1
    2654:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__fp_szero>

00002658 <__mulsf3x>:
    2658:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <__fp_split3>
    265c:	70 f3       	brcs	.-36     	; 0x263a <__mulsf3+0x8>

0000265e <__mulsf3_pse>:
    265e:	95 9f       	mul	r25, r21
    2660:	c1 f3       	breq	.-16     	; 0x2652 <__mulsf3+0x20>
    2662:	95 0f       	add	r25, r21
    2664:	50 e0       	ldi	r21, 0x00	; 0
    2666:	55 1f       	adc	r21, r21
    2668:	62 9f       	mul	r22, r18
    266a:	f0 01       	movw	r30, r0
    266c:	72 9f       	mul	r23, r18
    266e:	bb 27       	eor	r27, r27
    2670:	f0 0d       	add	r31, r0
    2672:	b1 1d       	adc	r27, r1
    2674:	63 9f       	mul	r22, r19
    2676:	aa 27       	eor	r26, r26
    2678:	f0 0d       	add	r31, r0
    267a:	b1 1d       	adc	r27, r1
    267c:	aa 1f       	adc	r26, r26
    267e:	64 9f       	mul	r22, r20
    2680:	66 27       	eor	r22, r22
    2682:	b0 0d       	add	r27, r0
    2684:	a1 1d       	adc	r26, r1
    2686:	66 1f       	adc	r22, r22
    2688:	82 9f       	mul	r24, r18
    268a:	22 27       	eor	r18, r18
    268c:	b0 0d       	add	r27, r0
    268e:	a1 1d       	adc	r26, r1
    2690:	62 1f       	adc	r22, r18
    2692:	73 9f       	mul	r23, r19
    2694:	b0 0d       	add	r27, r0
    2696:	a1 1d       	adc	r26, r1
    2698:	62 1f       	adc	r22, r18
    269a:	83 9f       	mul	r24, r19
    269c:	a0 0d       	add	r26, r0
    269e:	61 1d       	adc	r22, r1
    26a0:	22 1f       	adc	r18, r18
    26a2:	74 9f       	mul	r23, r20
    26a4:	33 27       	eor	r19, r19
    26a6:	a0 0d       	add	r26, r0
    26a8:	61 1d       	adc	r22, r1
    26aa:	23 1f       	adc	r18, r19
    26ac:	84 9f       	mul	r24, r20
    26ae:	60 0d       	add	r22, r0
    26b0:	21 1d       	adc	r18, r1
    26b2:	82 2f       	mov	r24, r18
    26b4:	76 2f       	mov	r23, r22
    26b6:	6a 2f       	mov	r22, r26
    26b8:	11 24       	eor	r1, r1
    26ba:	9f 57       	subi	r25, 0x7F	; 127
    26bc:	50 40       	sbci	r21, 0x00	; 0
    26be:	9a f0       	brmi	.+38     	; 0x26e6 <__mulsf3_pse+0x88>
    26c0:	f1 f0       	breq	.+60     	; 0x26fe <__mulsf3_pse+0xa0>
    26c2:	88 23       	and	r24, r24
    26c4:	4a f0       	brmi	.+18     	; 0x26d8 <__mulsf3_pse+0x7a>
    26c6:	ee 0f       	add	r30, r30
    26c8:	ff 1f       	adc	r31, r31
    26ca:	bb 1f       	adc	r27, r27
    26cc:	66 1f       	adc	r22, r22
    26ce:	77 1f       	adc	r23, r23
    26d0:	88 1f       	adc	r24, r24
    26d2:	91 50       	subi	r25, 0x01	; 1
    26d4:	50 40       	sbci	r21, 0x00	; 0
    26d6:	a9 f7       	brne	.-22     	; 0x26c2 <__mulsf3_pse+0x64>
    26d8:	9e 3f       	cpi	r25, 0xFE	; 254
    26da:	51 05       	cpc	r21, r1
    26dc:	80 f0       	brcs	.+32     	; 0x26fe <__mulsf3_pse+0xa0>
    26de:	0c 94 87 12 	jmp	0x250e	; 0x250e <__fp_inf>
    26e2:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__fp_szero>
    26e6:	5f 3f       	cpi	r21, 0xFF	; 255
    26e8:	e4 f3       	brlt	.-8      	; 0x26e2 <__mulsf3_pse+0x84>
    26ea:	98 3e       	cpi	r25, 0xE8	; 232
    26ec:	d4 f3       	brlt	.-12     	; 0x26e2 <__mulsf3_pse+0x84>
    26ee:	86 95       	lsr	r24
    26f0:	77 95       	ror	r23
    26f2:	67 95       	ror	r22
    26f4:	b7 95       	ror	r27
    26f6:	f7 95       	ror	r31
    26f8:	e7 95       	ror	r30
    26fa:	9f 5f       	subi	r25, 0xFF	; 255
    26fc:	c1 f7       	brne	.-16     	; 0x26ee <__mulsf3_pse+0x90>
    26fe:	fe 2b       	or	r31, r30
    2700:	88 0f       	add	r24, r24
    2702:	91 1d       	adc	r25, r1
    2704:	96 95       	lsr	r25
    2706:	87 95       	ror	r24
    2708:	97 f9       	bld	r25, 7
    270a:	08 95       	ret

0000270c <__udivmodhi4>:
    270c:	aa 1b       	sub	r26, r26
    270e:	bb 1b       	sub	r27, r27
    2710:	51 e1       	ldi	r21, 0x11	; 17
    2712:	07 c0       	rjmp	.+14     	; 0x2722 <__udivmodhi4_ep>

00002714 <__udivmodhi4_loop>:
    2714:	aa 1f       	adc	r26, r26
    2716:	bb 1f       	adc	r27, r27
    2718:	a6 17       	cp	r26, r22
    271a:	b7 07       	cpc	r27, r23
    271c:	10 f0       	brcs	.+4      	; 0x2722 <__udivmodhi4_ep>
    271e:	a6 1b       	sub	r26, r22
    2720:	b7 0b       	sbc	r27, r23

00002722 <__udivmodhi4_ep>:
    2722:	88 1f       	adc	r24, r24
    2724:	99 1f       	adc	r25, r25
    2726:	5a 95       	dec	r21
    2728:	a9 f7       	brne	.-22     	; 0x2714 <__udivmodhi4_loop>
    272a:	80 95       	com	r24
    272c:	90 95       	com	r25
    272e:	bc 01       	movw	r22, r24
    2730:	cd 01       	movw	r24, r26
    2732:	08 95       	ret

00002734 <__udivmodsi4>:
    2734:	a1 e2       	ldi	r26, 0x21	; 33
    2736:	1a 2e       	mov	r1, r26
    2738:	aa 1b       	sub	r26, r26
    273a:	bb 1b       	sub	r27, r27
    273c:	fd 01       	movw	r30, r26
    273e:	0d c0       	rjmp	.+26     	; 0x275a <__udivmodsi4_ep>

00002740 <__udivmodsi4_loop>:
    2740:	aa 1f       	adc	r26, r26
    2742:	bb 1f       	adc	r27, r27
    2744:	ee 1f       	adc	r30, r30
    2746:	ff 1f       	adc	r31, r31
    2748:	a2 17       	cp	r26, r18
    274a:	b3 07       	cpc	r27, r19
    274c:	e4 07       	cpc	r30, r20
    274e:	f5 07       	cpc	r31, r21
    2750:	20 f0       	brcs	.+8      	; 0x275a <__udivmodsi4_ep>
    2752:	a2 1b       	sub	r26, r18
    2754:	b3 0b       	sbc	r27, r19
    2756:	e4 0b       	sbc	r30, r20
    2758:	f5 0b       	sbc	r31, r21

0000275a <__udivmodsi4_ep>:
    275a:	66 1f       	adc	r22, r22
    275c:	77 1f       	adc	r23, r23
    275e:	88 1f       	adc	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	1a 94       	dec	r1
    2764:	69 f7       	brne	.-38     	; 0x2740 <__udivmodsi4_loop>
    2766:	60 95       	com	r22
    2768:	70 95       	com	r23
    276a:	80 95       	com	r24
    276c:	90 95       	com	r25
    276e:	9b 01       	movw	r18, r22
    2770:	ac 01       	movw	r20, r24
    2772:	bd 01       	movw	r22, r26
    2774:	cf 01       	movw	r24, r30
    2776:	08 95       	ret

00002778 <memcpy>:
    2778:	fb 01       	movw	r30, r22
    277a:	dc 01       	movw	r26, r24
    277c:	02 c0       	rjmp	.+4      	; 0x2782 <memcpy+0xa>
    277e:	01 90       	ld	r0, Z+
    2780:	0d 92       	st	X+, r0
    2782:	41 50       	subi	r20, 0x01	; 1
    2784:	50 40       	sbci	r21, 0x00	; 0
    2786:	d8 f7       	brcc	.-10     	; 0x277e <memcpy+0x6>
    2788:	08 95       	ret

0000278a <memset>:
    278a:	dc 01       	movw	r26, r24
    278c:	01 c0       	rjmp	.+2      	; 0x2790 <memset+0x6>
    278e:	6d 93       	st	X+, r22
    2790:	41 50       	subi	r20, 0x01	; 1
    2792:	50 40       	sbci	r21, 0x00	; 0
    2794:	e0 f7       	brcc	.-8      	; 0x278e <memset+0x4>
    2796:	08 95       	ret

00002798 <sprintf>:
    2798:	ae e0       	ldi	r26, 0x0E	; 14
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	e2 ed       	ldi	r30, 0xD2	; 210
    279e:	f3 e1       	ldi	r31, 0x13	; 19
    27a0:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__+0x1c>
    27a4:	0d 89       	ldd	r16, Y+21	; 0x15
    27a6:	1e 89       	ldd	r17, Y+22	; 0x16
    27a8:	86 e0       	ldi	r24, 0x06	; 6
    27aa:	8c 83       	std	Y+4, r24	; 0x04
    27ac:	1a 83       	std	Y+2, r17	; 0x02
    27ae:	09 83       	std	Y+1, r16	; 0x01
    27b0:	8f ef       	ldi	r24, 0xFF	; 255
    27b2:	9f e7       	ldi	r25, 0x7F	; 127
    27b4:	9e 83       	std	Y+6, r25	; 0x06
    27b6:	8d 83       	std	Y+5, r24	; 0x05
    27b8:	ae 01       	movw	r20, r28
    27ba:	47 5e       	subi	r20, 0xE7	; 231
    27bc:	5f 4f       	sbci	r21, 0xFF	; 255
    27be:	6f 89       	ldd	r22, Y+23	; 0x17
    27c0:	78 8d       	ldd	r23, Y+24	; 0x18
    27c2:	ce 01       	movw	r24, r28
    27c4:	01 96       	adiw	r24, 0x01	; 1
    27c6:	0e 94 ee 13 	call	0x27dc	; 0x27dc <vfprintf>
    27ca:	ef 81       	ldd	r30, Y+7	; 0x07
    27cc:	f8 85       	ldd	r31, Y+8	; 0x08
    27ce:	e0 0f       	add	r30, r16
    27d0:	f1 1f       	adc	r31, r17
    27d2:	10 82       	st	Z, r1
    27d4:	2e 96       	adiw	r28, 0x0e	; 14
    27d6:	e4 e0       	ldi	r30, 0x04	; 4
    27d8:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__+0x1c>

000027dc <vfprintf>:
    27dc:	ab e0       	ldi	r26, 0x0B	; 11
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	e4 ef       	ldi	r30, 0xF4	; 244
    27e2:	f3 e1       	ldi	r31, 0x13	; 19
    27e4:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__prologue_saves__>
    27e8:	6c 01       	movw	r12, r24
    27ea:	7b 01       	movw	r14, r22
    27ec:	8a 01       	movw	r16, r20
    27ee:	fc 01       	movw	r30, r24
    27f0:	17 82       	std	Z+7, r1	; 0x07
    27f2:	16 82       	std	Z+6, r1	; 0x06
    27f4:	83 81       	ldd	r24, Z+3	; 0x03
    27f6:	81 ff       	sbrs	r24, 1
    27f8:	cc c1       	rjmp	.+920    	; 0x2b92 <vfprintf+0x3b6>
    27fa:	ce 01       	movw	r24, r28
    27fc:	01 96       	adiw	r24, 0x01	; 1
    27fe:	3c 01       	movw	r6, r24
    2800:	f6 01       	movw	r30, r12
    2802:	93 81       	ldd	r25, Z+3	; 0x03
    2804:	f7 01       	movw	r30, r14
    2806:	93 fd       	sbrc	r25, 3
    2808:	85 91       	lpm	r24, Z+
    280a:	93 ff       	sbrs	r25, 3
    280c:	81 91       	ld	r24, Z+
    280e:	7f 01       	movw	r14, r30
    2810:	88 23       	and	r24, r24
    2812:	09 f4       	brne	.+2      	; 0x2816 <vfprintf+0x3a>
    2814:	ba c1       	rjmp	.+884    	; 0x2b8a <vfprintf+0x3ae>
    2816:	85 32       	cpi	r24, 0x25	; 37
    2818:	39 f4       	brne	.+14     	; 0x2828 <vfprintf+0x4c>
    281a:	93 fd       	sbrc	r25, 3
    281c:	85 91       	lpm	r24, Z+
    281e:	93 ff       	sbrs	r25, 3
    2820:	81 91       	ld	r24, Z+
    2822:	7f 01       	movw	r14, r30
    2824:	85 32       	cpi	r24, 0x25	; 37
    2826:	29 f4       	brne	.+10     	; 0x2832 <vfprintf+0x56>
    2828:	b6 01       	movw	r22, r12
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <fputc>
    2830:	e7 cf       	rjmp	.-50     	; 0x2800 <vfprintf+0x24>
    2832:	91 2c       	mov	r9, r1
    2834:	21 2c       	mov	r2, r1
    2836:	31 2c       	mov	r3, r1
    2838:	ff e1       	ldi	r31, 0x1F	; 31
    283a:	f3 15       	cp	r31, r3
    283c:	d8 f0       	brcs	.+54     	; 0x2874 <vfprintf+0x98>
    283e:	8b 32       	cpi	r24, 0x2B	; 43
    2840:	79 f0       	breq	.+30     	; 0x2860 <vfprintf+0x84>
    2842:	38 f4       	brcc	.+14     	; 0x2852 <vfprintf+0x76>
    2844:	80 32       	cpi	r24, 0x20	; 32
    2846:	79 f0       	breq	.+30     	; 0x2866 <vfprintf+0x8a>
    2848:	83 32       	cpi	r24, 0x23	; 35
    284a:	a1 f4       	brne	.+40     	; 0x2874 <vfprintf+0x98>
    284c:	23 2d       	mov	r18, r3
    284e:	20 61       	ori	r18, 0x10	; 16
    2850:	1d c0       	rjmp	.+58     	; 0x288c <vfprintf+0xb0>
    2852:	8d 32       	cpi	r24, 0x2D	; 45
    2854:	61 f0       	breq	.+24     	; 0x286e <vfprintf+0x92>
    2856:	80 33       	cpi	r24, 0x30	; 48
    2858:	69 f4       	brne	.+26     	; 0x2874 <vfprintf+0x98>
    285a:	23 2d       	mov	r18, r3
    285c:	21 60       	ori	r18, 0x01	; 1
    285e:	16 c0       	rjmp	.+44     	; 0x288c <vfprintf+0xb0>
    2860:	83 2d       	mov	r24, r3
    2862:	82 60       	ori	r24, 0x02	; 2
    2864:	38 2e       	mov	r3, r24
    2866:	e3 2d       	mov	r30, r3
    2868:	e4 60       	ori	r30, 0x04	; 4
    286a:	3e 2e       	mov	r3, r30
    286c:	2a c0       	rjmp	.+84     	; 0x28c2 <vfprintf+0xe6>
    286e:	f3 2d       	mov	r31, r3
    2870:	f8 60       	ori	r31, 0x08	; 8
    2872:	1d c0       	rjmp	.+58     	; 0x28ae <vfprintf+0xd2>
    2874:	37 fc       	sbrc	r3, 7
    2876:	2d c0       	rjmp	.+90     	; 0x28d2 <vfprintf+0xf6>
    2878:	20 ed       	ldi	r18, 0xD0	; 208
    287a:	28 0f       	add	r18, r24
    287c:	2a 30       	cpi	r18, 0x0A	; 10
    287e:	40 f0       	brcs	.+16     	; 0x2890 <vfprintf+0xb4>
    2880:	8e 32       	cpi	r24, 0x2E	; 46
    2882:	b9 f4       	brne	.+46     	; 0x28b2 <vfprintf+0xd6>
    2884:	36 fc       	sbrc	r3, 6
    2886:	81 c1       	rjmp	.+770    	; 0x2b8a <vfprintf+0x3ae>
    2888:	23 2d       	mov	r18, r3
    288a:	20 64       	ori	r18, 0x40	; 64
    288c:	32 2e       	mov	r3, r18
    288e:	19 c0       	rjmp	.+50     	; 0x28c2 <vfprintf+0xe6>
    2890:	36 fe       	sbrs	r3, 6
    2892:	06 c0       	rjmp	.+12     	; 0x28a0 <vfprintf+0xc4>
    2894:	8a e0       	ldi	r24, 0x0A	; 10
    2896:	98 9e       	mul	r9, r24
    2898:	20 0d       	add	r18, r0
    289a:	11 24       	eor	r1, r1
    289c:	92 2e       	mov	r9, r18
    289e:	11 c0       	rjmp	.+34     	; 0x28c2 <vfprintf+0xe6>
    28a0:	ea e0       	ldi	r30, 0x0A	; 10
    28a2:	2e 9e       	mul	r2, r30
    28a4:	20 0d       	add	r18, r0
    28a6:	11 24       	eor	r1, r1
    28a8:	22 2e       	mov	r2, r18
    28aa:	f3 2d       	mov	r31, r3
    28ac:	f0 62       	ori	r31, 0x20	; 32
    28ae:	3f 2e       	mov	r3, r31
    28b0:	08 c0       	rjmp	.+16     	; 0x28c2 <vfprintf+0xe6>
    28b2:	8c 36       	cpi	r24, 0x6C	; 108
    28b4:	21 f4       	brne	.+8      	; 0x28be <vfprintf+0xe2>
    28b6:	83 2d       	mov	r24, r3
    28b8:	80 68       	ori	r24, 0x80	; 128
    28ba:	38 2e       	mov	r3, r24
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <vfprintf+0xe6>
    28be:	88 36       	cpi	r24, 0x68	; 104
    28c0:	41 f4       	brne	.+16     	; 0x28d2 <vfprintf+0xf6>
    28c2:	f7 01       	movw	r30, r14
    28c4:	93 fd       	sbrc	r25, 3
    28c6:	85 91       	lpm	r24, Z+
    28c8:	93 ff       	sbrs	r25, 3
    28ca:	81 91       	ld	r24, Z+
    28cc:	7f 01       	movw	r14, r30
    28ce:	81 11       	cpse	r24, r1
    28d0:	b3 cf       	rjmp	.-154    	; 0x2838 <vfprintf+0x5c>
    28d2:	98 2f       	mov	r25, r24
    28d4:	9f 7d       	andi	r25, 0xDF	; 223
    28d6:	95 54       	subi	r25, 0x45	; 69
    28d8:	93 30       	cpi	r25, 0x03	; 3
    28da:	28 f4       	brcc	.+10     	; 0x28e6 <vfprintf+0x10a>
    28dc:	0c 5f       	subi	r16, 0xFC	; 252
    28de:	1f 4f       	sbci	r17, 0xFF	; 255
    28e0:	9f e3       	ldi	r25, 0x3F	; 63
    28e2:	99 83       	std	Y+1, r25	; 0x01
    28e4:	0d c0       	rjmp	.+26     	; 0x2900 <vfprintf+0x124>
    28e6:	83 36       	cpi	r24, 0x63	; 99
    28e8:	31 f0       	breq	.+12     	; 0x28f6 <vfprintf+0x11a>
    28ea:	83 37       	cpi	r24, 0x73	; 115
    28ec:	71 f0       	breq	.+28     	; 0x290a <vfprintf+0x12e>
    28ee:	83 35       	cpi	r24, 0x53	; 83
    28f0:	09 f0       	breq	.+2      	; 0x28f4 <vfprintf+0x118>
    28f2:	59 c0       	rjmp	.+178    	; 0x29a6 <vfprintf+0x1ca>
    28f4:	21 c0       	rjmp	.+66     	; 0x2938 <vfprintf+0x15c>
    28f6:	f8 01       	movw	r30, r16
    28f8:	80 81       	ld	r24, Z
    28fa:	89 83       	std	Y+1, r24	; 0x01
    28fc:	0e 5f       	subi	r16, 0xFE	; 254
    28fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2900:	88 24       	eor	r8, r8
    2902:	83 94       	inc	r8
    2904:	91 2c       	mov	r9, r1
    2906:	53 01       	movw	r10, r6
    2908:	13 c0       	rjmp	.+38     	; 0x2930 <vfprintf+0x154>
    290a:	28 01       	movw	r4, r16
    290c:	f2 e0       	ldi	r31, 0x02	; 2
    290e:	4f 0e       	add	r4, r31
    2910:	51 1c       	adc	r5, r1
    2912:	f8 01       	movw	r30, r16
    2914:	a0 80       	ld	r10, Z
    2916:	b1 80       	ldd	r11, Z+1	; 0x01
    2918:	36 fe       	sbrs	r3, 6
    291a:	03 c0       	rjmp	.+6      	; 0x2922 <vfprintf+0x146>
    291c:	69 2d       	mov	r22, r9
    291e:	70 e0       	ldi	r23, 0x00	; 0
    2920:	02 c0       	rjmp	.+4      	; 0x2926 <vfprintf+0x14a>
    2922:	6f ef       	ldi	r22, 0xFF	; 255
    2924:	7f ef       	ldi	r23, 0xFF	; 255
    2926:	c5 01       	movw	r24, r10
    2928:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <strnlen>
    292c:	4c 01       	movw	r8, r24
    292e:	82 01       	movw	r16, r4
    2930:	f3 2d       	mov	r31, r3
    2932:	ff 77       	andi	r31, 0x7F	; 127
    2934:	3f 2e       	mov	r3, r31
    2936:	16 c0       	rjmp	.+44     	; 0x2964 <vfprintf+0x188>
    2938:	28 01       	movw	r4, r16
    293a:	22 e0       	ldi	r18, 0x02	; 2
    293c:	42 0e       	add	r4, r18
    293e:	51 1c       	adc	r5, r1
    2940:	f8 01       	movw	r30, r16
    2942:	a0 80       	ld	r10, Z
    2944:	b1 80       	ldd	r11, Z+1	; 0x01
    2946:	36 fe       	sbrs	r3, 6
    2948:	03 c0       	rjmp	.+6      	; 0x2950 <vfprintf+0x174>
    294a:	69 2d       	mov	r22, r9
    294c:	70 e0       	ldi	r23, 0x00	; 0
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <vfprintf+0x178>
    2950:	6f ef       	ldi	r22, 0xFF	; 255
    2952:	7f ef       	ldi	r23, 0xFF	; 255
    2954:	c5 01       	movw	r24, r10
    2956:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <strnlen_P>
    295a:	4c 01       	movw	r8, r24
    295c:	f3 2d       	mov	r31, r3
    295e:	f0 68       	ori	r31, 0x80	; 128
    2960:	3f 2e       	mov	r3, r31
    2962:	82 01       	movw	r16, r4
    2964:	33 fc       	sbrc	r3, 3
    2966:	1b c0       	rjmp	.+54     	; 0x299e <vfprintf+0x1c2>
    2968:	82 2d       	mov	r24, r2
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	88 16       	cp	r8, r24
    296e:	99 06       	cpc	r9, r25
    2970:	b0 f4       	brcc	.+44     	; 0x299e <vfprintf+0x1c2>
    2972:	b6 01       	movw	r22, r12
    2974:	80 e2       	ldi	r24, 0x20	; 32
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	0e 94 e5 15 	call	0x2bca	; 0x2bca <fputc>
    297c:	2a 94       	dec	r2
    297e:	f4 cf       	rjmp	.-24     	; 0x2968 <vfprintf+0x18c>
    2980:	f5 01       	movw	r30, r10
    2982:	37 fc       	sbrc	r3, 7
    2984:	85 91       	lpm	r24, Z+
    2986:	37 fe       	sbrs	r3, 7
    2988:	81 91       	ld	r24, Z+
    298a:	5f 01       	movw	r10, r30
    298c:	b6 01       	movw	r22, r12
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	0e 94 e5 15 	call	0x2bca	; 0x2bca <fputc>
    2994:	21 10       	cpse	r2, r1
    2996:	2a 94       	dec	r2
    2998:	21 e0       	ldi	r18, 0x01	; 1
    299a:	82 1a       	sub	r8, r18
    299c:	91 08       	sbc	r9, r1
    299e:	81 14       	cp	r8, r1
    29a0:	91 04       	cpc	r9, r1
    29a2:	71 f7       	brne	.-36     	; 0x2980 <vfprintf+0x1a4>
    29a4:	e8 c0       	rjmp	.+464    	; 0x2b76 <vfprintf+0x39a>
    29a6:	84 36       	cpi	r24, 0x64	; 100
    29a8:	11 f0       	breq	.+4      	; 0x29ae <vfprintf+0x1d2>
    29aa:	89 36       	cpi	r24, 0x69	; 105
    29ac:	41 f5       	brne	.+80     	; 0x29fe <vfprintf+0x222>
    29ae:	f8 01       	movw	r30, r16
    29b0:	37 fe       	sbrs	r3, 7
    29b2:	07 c0       	rjmp	.+14     	; 0x29c2 <vfprintf+0x1e6>
    29b4:	60 81       	ld	r22, Z
    29b6:	71 81       	ldd	r23, Z+1	; 0x01
    29b8:	82 81       	ldd	r24, Z+2	; 0x02
    29ba:	93 81       	ldd	r25, Z+3	; 0x03
    29bc:	0c 5f       	subi	r16, 0xFC	; 252
    29be:	1f 4f       	sbci	r17, 0xFF	; 255
    29c0:	08 c0       	rjmp	.+16     	; 0x29d2 <vfprintf+0x1f6>
    29c2:	60 81       	ld	r22, Z
    29c4:	71 81       	ldd	r23, Z+1	; 0x01
    29c6:	07 2e       	mov	r0, r23
    29c8:	00 0c       	add	r0, r0
    29ca:	88 0b       	sbc	r24, r24
    29cc:	99 0b       	sbc	r25, r25
    29ce:	0e 5f       	subi	r16, 0xFE	; 254
    29d0:	1f 4f       	sbci	r17, 0xFF	; 255
    29d2:	f3 2d       	mov	r31, r3
    29d4:	ff 76       	andi	r31, 0x6F	; 111
    29d6:	3f 2e       	mov	r3, r31
    29d8:	97 ff       	sbrs	r25, 7
    29da:	09 c0       	rjmp	.+18     	; 0x29ee <vfprintf+0x212>
    29dc:	90 95       	com	r25
    29de:	80 95       	com	r24
    29e0:	70 95       	com	r23
    29e2:	61 95       	neg	r22
    29e4:	7f 4f       	sbci	r23, 0xFF	; 255
    29e6:	8f 4f       	sbci	r24, 0xFF	; 255
    29e8:	9f 4f       	sbci	r25, 0xFF	; 255
    29ea:	f0 68       	ori	r31, 0x80	; 128
    29ec:	3f 2e       	mov	r3, r31
    29ee:	2a e0       	ldi	r18, 0x0A	; 10
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	a3 01       	movw	r20, r6
    29f4:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__ultoa_invert>
    29f8:	88 2e       	mov	r8, r24
    29fa:	86 18       	sub	r8, r6
    29fc:	45 c0       	rjmp	.+138    	; 0x2a88 <vfprintf+0x2ac>
    29fe:	85 37       	cpi	r24, 0x75	; 117
    2a00:	31 f4       	brne	.+12     	; 0x2a0e <vfprintf+0x232>
    2a02:	23 2d       	mov	r18, r3
    2a04:	2f 7e       	andi	r18, 0xEF	; 239
    2a06:	b2 2e       	mov	r11, r18
    2a08:	2a e0       	ldi	r18, 0x0A	; 10
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	25 c0       	rjmp	.+74     	; 0x2a58 <vfprintf+0x27c>
    2a0e:	93 2d       	mov	r25, r3
    2a10:	99 7f       	andi	r25, 0xF9	; 249
    2a12:	b9 2e       	mov	r11, r25
    2a14:	8f 36       	cpi	r24, 0x6F	; 111
    2a16:	c1 f0       	breq	.+48     	; 0x2a48 <vfprintf+0x26c>
    2a18:	18 f4       	brcc	.+6      	; 0x2a20 <vfprintf+0x244>
    2a1a:	88 35       	cpi	r24, 0x58	; 88
    2a1c:	79 f0       	breq	.+30     	; 0x2a3c <vfprintf+0x260>
    2a1e:	b5 c0       	rjmp	.+362    	; 0x2b8a <vfprintf+0x3ae>
    2a20:	80 37       	cpi	r24, 0x70	; 112
    2a22:	19 f0       	breq	.+6      	; 0x2a2a <vfprintf+0x24e>
    2a24:	88 37       	cpi	r24, 0x78	; 120
    2a26:	21 f0       	breq	.+8      	; 0x2a30 <vfprintf+0x254>
    2a28:	b0 c0       	rjmp	.+352    	; 0x2b8a <vfprintf+0x3ae>
    2a2a:	e9 2f       	mov	r30, r25
    2a2c:	e0 61       	ori	r30, 0x10	; 16
    2a2e:	be 2e       	mov	r11, r30
    2a30:	b4 fe       	sbrs	r11, 4
    2a32:	0d c0       	rjmp	.+26     	; 0x2a4e <vfprintf+0x272>
    2a34:	fb 2d       	mov	r31, r11
    2a36:	f4 60       	ori	r31, 0x04	; 4
    2a38:	bf 2e       	mov	r11, r31
    2a3a:	09 c0       	rjmp	.+18     	; 0x2a4e <vfprintf+0x272>
    2a3c:	34 fe       	sbrs	r3, 4
    2a3e:	0a c0       	rjmp	.+20     	; 0x2a54 <vfprintf+0x278>
    2a40:	29 2f       	mov	r18, r25
    2a42:	26 60       	ori	r18, 0x06	; 6
    2a44:	b2 2e       	mov	r11, r18
    2a46:	06 c0       	rjmp	.+12     	; 0x2a54 <vfprintf+0x278>
    2a48:	28 e0       	ldi	r18, 0x08	; 8
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	05 c0       	rjmp	.+10     	; 0x2a58 <vfprintf+0x27c>
    2a4e:	20 e1       	ldi	r18, 0x10	; 16
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	02 c0       	rjmp	.+4      	; 0x2a58 <vfprintf+0x27c>
    2a54:	20 e1       	ldi	r18, 0x10	; 16
    2a56:	32 e0       	ldi	r19, 0x02	; 2
    2a58:	f8 01       	movw	r30, r16
    2a5a:	b7 fe       	sbrs	r11, 7
    2a5c:	07 c0       	rjmp	.+14     	; 0x2a6c <vfprintf+0x290>
    2a5e:	60 81       	ld	r22, Z
    2a60:	71 81       	ldd	r23, Z+1	; 0x01
    2a62:	82 81       	ldd	r24, Z+2	; 0x02
    2a64:	93 81       	ldd	r25, Z+3	; 0x03
    2a66:	0c 5f       	subi	r16, 0xFC	; 252
    2a68:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6a:	06 c0       	rjmp	.+12     	; 0x2a78 <vfprintf+0x29c>
    2a6c:	60 81       	ld	r22, Z
    2a6e:	71 81       	ldd	r23, Z+1	; 0x01
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	0e 5f       	subi	r16, 0xFE	; 254
    2a76:	1f 4f       	sbci	r17, 0xFF	; 255
    2a78:	a3 01       	movw	r20, r6
    2a7a:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__ultoa_invert>
    2a7e:	88 2e       	mov	r8, r24
    2a80:	86 18       	sub	r8, r6
    2a82:	fb 2d       	mov	r31, r11
    2a84:	ff 77       	andi	r31, 0x7F	; 127
    2a86:	3f 2e       	mov	r3, r31
    2a88:	36 fe       	sbrs	r3, 6
    2a8a:	0d c0       	rjmp	.+26     	; 0x2aa6 <vfprintf+0x2ca>
    2a8c:	23 2d       	mov	r18, r3
    2a8e:	2e 7f       	andi	r18, 0xFE	; 254
    2a90:	a2 2e       	mov	r10, r18
    2a92:	89 14       	cp	r8, r9
    2a94:	58 f4       	brcc	.+22     	; 0x2aac <vfprintf+0x2d0>
    2a96:	34 fe       	sbrs	r3, 4
    2a98:	0b c0       	rjmp	.+22     	; 0x2ab0 <vfprintf+0x2d4>
    2a9a:	32 fc       	sbrc	r3, 2
    2a9c:	09 c0       	rjmp	.+18     	; 0x2ab0 <vfprintf+0x2d4>
    2a9e:	83 2d       	mov	r24, r3
    2aa0:	8e 7e       	andi	r24, 0xEE	; 238
    2aa2:	a8 2e       	mov	r10, r24
    2aa4:	05 c0       	rjmp	.+10     	; 0x2ab0 <vfprintf+0x2d4>
    2aa6:	b8 2c       	mov	r11, r8
    2aa8:	a3 2c       	mov	r10, r3
    2aaa:	03 c0       	rjmp	.+6      	; 0x2ab2 <vfprintf+0x2d6>
    2aac:	b8 2c       	mov	r11, r8
    2aae:	01 c0       	rjmp	.+2      	; 0x2ab2 <vfprintf+0x2d6>
    2ab0:	b9 2c       	mov	r11, r9
    2ab2:	a4 fe       	sbrs	r10, 4
    2ab4:	0f c0       	rjmp	.+30     	; 0x2ad4 <vfprintf+0x2f8>
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e8 0d       	add	r30, r8
    2aba:	f1 1d       	adc	r31, r1
    2abc:	80 81       	ld	r24, Z
    2abe:	80 33       	cpi	r24, 0x30	; 48
    2ac0:	21 f4       	brne	.+8      	; 0x2aca <vfprintf+0x2ee>
    2ac2:	9a 2d       	mov	r25, r10
    2ac4:	99 7e       	andi	r25, 0xE9	; 233
    2ac6:	a9 2e       	mov	r10, r25
    2ac8:	09 c0       	rjmp	.+18     	; 0x2adc <vfprintf+0x300>
    2aca:	a2 fe       	sbrs	r10, 2
    2acc:	06 c0       	rjmp	.+12     	; 0x2ada <vfprintf+0x2fe>
    2ace:	b3 94       	inc	r11
    2ad0:	b3 94       	inc	r11
    2ad2:	04 c0       	rjmp	.+8      	; 0x2adc <vfprintf+0x300>
    2ad4:	8a 2d       	mov	r24, r10
    2ad6:	86 78       	andi	r24, 0x86	; 134
    2ad8:	09 f0       	breq	.+2      	; 0x2adc <vfprintf+0x300>
    2ada:	b3 94       	inc	r11
    2adc:	a3 fc       	sbrc	r10, 3
    2ade:	11 c0       	rjmp	.+34     	; 0x2b02 <vfprintf+0x326>
    2ae0:	a0 fe       	sbrs	r10, 0
    2ae2:	06 c0       	rjmp	.+12     	; 0x2af0 <vfprintf+0x314>
    2ae4:	b2 14       	cp	r11, r2
    2ae6:	88 f4       	brcc	.+34     	; 0x2b0a <vfprintf+0x32e>
    2ae8:	28 0c       	add	r2, r8
    2aea:	92 2c       	mov	r9, r2
    2aec:	9b 18       	sub	r9, r11
    2aee:	0e c0       	rjmp	.+28     	; 0x2b0c <vfprintf+0x330>
    2af0:	b2 14       	cp	r11, r2
    2af2:	60 f4       	brcc	.+24     	; 0x2b0c <vfprintf+0x330>
    2af4:	b6 01       	movw	r22, r12
    2af6:	80 e2       	ldi	r24, 0x20	; 32
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	0e 94 e5 15 	call	0x2bca	; 0x2bca <fputc>
    2afe:	b3 94       	inc	r11
    2b00:	f7 cf       	rjmp	.-18     	; 0x2af0 <vfprintf+0x314>
    2b02:	b2 14       	cp	r11, r2
    2b04:	18 f4       	brcc	.+6      	; 0x2b0c <vfprintf+0x330>
    2b06:	2b 18       	sub	r2, r11
    2b08:	02 c0       	rjmp	.+4      	; 0x2b0e <vfprintf+0x332>
    2b0a:	98 2c       	mov	r9, r8
    2b0c:	21 2c       	mov	r2, r1
    2b0e:	a4 fe       	sbrs	r10, 4
    2b10:	10 c0       	rjmp	.+32     	; 0x2b32 <vfprintf+0x356>
    2b12:	b6 01       	movw	r22, r12
    2b14:	80 e3       	ldi	r24, 0x30	; 48
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	0e 94 e5 15 	call	0x2bca	; 0x2bca <fputc>
    2b1c:	a2 fe       	sbrs	r10, 2
    2b1e:	17 c0       	rjmp	.+46     	; 0x2b4e <vfprintf+0x372>
    2b20:	a1 fc       	sbrc	r10, 1
    2b22:	03 c0       	rjmp	.+6      	; 0x2b2a <vfprintf+0x34e>
    2b24:	88 e7       	ldi	r24, 0x78	; 120
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	02 c0       	rjmp	.+4      	; 0x2b2e <vfprintf+0x352>
    2b2a:	88 e5       	ldi	r24, 0x58	; 88
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	b6 01       	movw	r22, r12
    2b30:	0c c0       	rjmp	.+24     	; 0x2b4a <vfprintf+0x36e>
    2b32:	8a 2d       	mov	r24, r10
    2b34:	86 78       	andi	r24, 0x86	; 134
    2b36:	59 f0       	breq	.+22     	; 0x2b4e <vfprintf+0x372>
    2b38:	a1 fe       	sbrs	r10, 1
    2b3a:	02 c0       	rjmp	.+4      	; 0x2b40 <vfprintf+0x364>
    2b3c:	8b e2       	ldi	r24, 0x2B	; 43
    2b3e:	01 c0       	rjmp	.+2      	; 0x2b42 <vfprintf+0x366>
    2b40:	80 e2       	ldi	r24, 0x20	; 32
    2b42:	a7 fc       	sbrc	r10, 7
    2b44:	8d e2       	ldi	r24, 0x2D	; 45
    2b46:	b6 01       	movw	r22, r12
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <fputc>
    2b4e:	89 14       	cp	r8, r9
    2b50:	38 f4       	brcc	.+14     	; 0x2b60 <vfprintf+0x384>
    2b52:	b6 01       	movw	r22, r12
    2b54:	80 e3       	ldi	r24, 0x30	; 48
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	0e 94 e5 15 	call	0x2bca	; 0x2bca <fputc>
    2b5c:	9a 94       	dec	r9
    2b5e:	f7 cf       	rjmp	.-18     	; 0x2b4e <vfprintf+0x372>
    2b60:	8a 94       	dec	r8
    2b62:	f3 01       	movw	r30, r6
    2b64:	e8 0d       	add	r30, r8
    2b66:	f1 1d       	adc	r31, r1
    2b68:	80 81       	ld	r24, Z
    2b6a:	b6 01       	movw	r22, r12
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <fputc>
    2b72:	81 10       	cpse	r8, r1
    2b74:	f5 cf       	rjmp	.-22     	; 0x2b60 <vfprintf+0x384>
    2b76:	22 20       	and	r2, r2
    2b78:	09 f4       	brne	.+2      	; 0x2b7c <vfprintf+0x3a0>
    2b7a:	42 ce       	rjmp	.-892    	; 0x2800 <vfprintf+0x24>
    2b7c:	b6 01       	movw	r22, r12
    2b7e:	80 e2       	ldi	r24, 0x20	; 32
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	0e 94 e5 15 	call	0x2bca	; 0x2bca <fputc>
    2b86:	2a 94       	dec	r2
    2b88:	f6 cf       	rjmp	.-20     	; 0x2b76 <vfprintf+0x39a>
    2b8a:	f6 01       	movw	r30, r12
    2b8c:	86 81       	ldd	r24, Z+6	; 0x06
    2b8e:	97 81       	ldd	r25, Z+7	; 0x07
    2b90:	02 c0       	rjmp	.+4      	; 0x2b96 <vfprintf+0x3ba>
    2b92:	8f ef       	ldi	r24, 0xFF	; 255
    2b94:	9f ef       	ldi	r25, 0xFF	; 255
    2b96:	2b 96       	adiw	r28, 0x0b	; 11
    2b98:	e2 e1       	ldi	r30, 0x12	; 18
    2b9a:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__epilogue_restores__>

00002b9e <strnlen_P>:
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	05 90       	lpm	r0, Z+
    2ba2:	61 50       	subi	r22, 0x01	; 1
    2ba4:	70 40       	sbci	r23, 0x00	; 0
    2ba6:	01 10       	cpse	r0, r1
    2ba8:	d8 f7       	brcc	.-10     	; 0x2ba0 <strnlen_P+0x2>
    2baa:	80 95       	com	r24
    2bac:	90 95       	com	r25
    2bae:	8e 0f       	add	r24, r30
    2bb0:	9f 1f       	adc	r25, r31
    2bb2:	08 95       	ret

00002bb4 <strnlen>:
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	61 50       	subi	r22, 0x01	; 1
    2bb8:	70 40       	sbci	r23, 0x00	; 0
    2bba:	01 90       	ld	r0, Z+
    2bbc:	01 10       	cpse	r0, r1
    2bbe:	d8 f7       	brcc	.-10     	; 0x2bb6 <strnlen+0x2>
    2bc0:	80 95       	com	r24
    2bc2:	90 95       	com	r25
    2bc4:	8e 0f       	add	r24, r30
    2bc6:	9f 1f       	adc	r25, r31
    2bc8:	08 95       	ret

00002bca <fputc>:
    2bca:	0f 93       	push	r16
    2bcc:	1f 93       	push	r17
    2bce:	cf 93       	push	r28
    2bd0:	df 93       	push	r29
    2bd2:	fb 01       	movw	r30, r22
    2bd4:	23 81       	ldd	r18, Z+3	; 0x03
    2bd6:	21 fd       	sbrc	r18, 1
    2bd8:	03 c0       	rjmp	.+6      	; 0x2be0 <fputc+0x16>
    2bda:	8f ef       	ldi	r24, 0xFF	; 255
    2bdc:	9f ef       	ldi	r25, 0xFF	; 255
    2bde:	2c c0       	rjmp	.+88     	; 0x2c38 <fputc+0x6e>
    2be0:	22 ff       	sbrs	r18, 2
    2be2:	16 c0       	rjmp	.+44     	; 0x2c10 <fputc+0x46>
    2be4:	46 81       	ldd	r20, Z+6	; 0x06
    2be6:	57 81       	ldd	r21, Z+7	; 0x07
    2be8:	24 81       	ldd	r18, Z+4	; 0x04
    2bea:	35 81       	ldd	r19, Z+5	; 0x05
    2bec:	42 17       	cp	r20, r18
    2bee:	53 07       	cpc	r21, r19
    2bf0:	44 f4       	brge	.+16     	; 0x2c02 <fputc+0x38>
    2bf2:	a0 81       	ld	r26, Z
    2bf4:	b1 81       	ldd	r27, Z+1	; 0x01
    2bf6:	9d 01       	movw	r18, r26
    2bf8:	2f 5f       	subi	r18, 0xFF	; 255
    2bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2bfc:	31 83       	std	Z+1, r19	; 0x01
    2bfe:	20 83       	st	Z, r18
    2c00:	8c 93       	st	X, r24
    2c02:	26 81       	ldd	r18, Z+6	; 0x06
    2c04:	37 81       	ldd	r19, Z+7	; 0x07
    2c06:	2f 5f       	subi	r18, 0xFF	; 255
    2c08:	3f 4f       	sbci	r19, 0xFF	; 255
    2c0a:	37 83       	std	Z+7, r19	; 0x07
    2c0c:	26 83       	std	Z+6, r18	; 0x06
    2c0e:	14 c0       	rjmp	.+40     	; 0x2c38 <fputc+0x6e>
    2c10:	8b 01       	movw	r16, r22
    2c12:	ec 01       	movw	r28, r24
    2c14:	fb 01       	movw	r30, r22
    2c16:	00 84       	ldd	r0, Z+8	; 0x08
    2c18:	f1 85       	ldd	r31, Z+9	; 0x09
    2c1a:	e0 2d       	mov	r30, r0
    2c1c:	09 95       	icall
    2c1e:	89 2b       	or	r24, r25
    2c20:	e1 f6       	brne	.-72     	; 0x2bda <fputc+0x10>
    2c22:	d8 01       	movw	r26, r16
    2c24:	16 96       	adiw	r26, 0x06	; 6
    2c26:	8d 91       	ld	r24, X+
    2c28:	9c 91       	ld	r25, X
    2c2a:	17 97       	sbiw	r26, 0x07	; 7
    2c2c:	01 96       	adiw	r24, 0x01	; 1
    2c2e:	17 96       	adiw	r26, 0x07	; 7
    2c30:	9c 93       	st	X, r25
    2c32:	8e 93       	st	-X, r24
    2c34:	16 97       	sbiw	r26, 0x06	; 6
    2c36:	ce 01       	movw	r24, r28
    2c38:	df 91       	pop	r29
    2c3a:	cf 91       	pop	r28
    2c3c:	1f 91       	pop	r17
    2c3e:	0f 91       	pop	r16
    2c40:	08 95       	ret

00002c42 <__ultoa_invert>:
    2c42:	fa 01       	movw	r30, r20
    2c44:	aa 27       	eor	r26, r26
    2c46:	28 30       	cpi	r18, 0x08	; 8
    2c48:	51 f1       	breq	.+84     	; 0x2c9e <__ultoa_invert+0x5c>
    2c4a:	20 31       	cpi	r18, 0x10	; 16
    2c4c:	81 f1       	breq	.+96     	; 0x2cae <__ultoa_invert+0x6c>
    2c4e:	e8 94       	clt
    2c50:	6f 93       	push	r22
    2c52:	6e 7f       	andi	r22, 0xFE	; 254
    2c54:	6e 5f       	subi	r22, 0xFE	; 254
    2c56:	7f 4f       	sbci	r23, 0xFF	; 255
    2c58:	8f 4f       	sbci	r24, 0xFF	; 255
    2c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c5c:	af 4f       	sbci	r26, 0xFF	; 255
    2c5e:	b1 e0       	ldi	r27, 0x01	; 1
    2c60:	3e d0       	rcall	.+124    	; 0x2cde <__ultoa_invert+0x9c>
    2c62:	b4 e0       	ldi	r27, 0x04	; 4
    2c64:	3c d0       	rcall	.+120    	; 0x2cde <__ultoa_invert+0x9c>
    2c66:	67 0f       	add	r22, r23
    2c68:	78 1f       	adc	r23, r24
    2c6a:	89 1f       	adc	r24, r25
    2c6c:	9a 1f       	adc	r25, r26
    2c6e:	a1 1d       	adc	r26, r1
    2c70:	68 0f       	add	r22, r24
    2c72:	79 1f       	adc	r23, r25
    2c74:	8a 1f       	adc	r24, r26
    2c76:	91 1d       	adc	r25, r1
    2c78:	a1 1d       	adc	r26, r1
    2c7a:	6a 0f       	add	r22, r26
    2c7c:	71 1d       	adc	r23, r1
    2c7e:	81 1d       	adc	r24, r1
    2c80:	91 1d       	adc	r25, r1
    2c82:	a1 1d       	adc	r26, r1
    2c84:	20 d0       	rcall	.+64     	; 0x2cc6 <__ultoa_invert+0x84>
    2c86:	09 f4       	brne	.+2      	; 0x2c8a <__ultoa_invert+0x48>
    2c88:	68 94       	set
    2c8a:	3f 91       	pop	r19
    2c8c:	2a e0       	ldi	r18, 0x0A	; 10
    2c8e:	26 9f       	mul	r18, r22
    2c90:	11 24       	eor	r1, r1
    2c92:	30 19       	sub	r19, r0
    2c94:	30 5d       	subi	r19, 0xD0	; 208
    2c96:	31 93       	st	Z+, r19
    2c98:	de f6       	brtc	.-74     	; 0x2c50 <__ultoa_invert+0xe>
    2c9a:	cf 01       	movw	r24, r30
    2c9c:	08 95       	ret
    2c9e:	46 2f       	mov	r20, r22
    2ca0:	47 70       	andi	r20, 0x07	; 7
    2ca2:	40 5d       	subi	r20, 0xD0	; 208
    2ca4:	41 93       	st	Z+, r20
    2ca6:	b3 e0       	ldi	r27, 0x03	; 3
    2ca8:	0f d0       	rcall	.+30     	; 0x2cc8 <__ultoa_invert+0x86>
    2caa:	c9 f7       	brne	.-14     	; 0x2c9e <__ultoa_invert+0x5c>
    2cac:	f6 cf       	rjmp	.-20     	; 0x2c9a <__ultoa_invert+0x58>
    2cae:	46 2f       	mov	r20, r22
    2cb0:	4f 70       	andi	r20, 0x0F	; 15
    2cb2:	40 5d       	subi	r20, 0xD0	; 208
    2cb4:	4a 33       	cpi	r20, 0x3A	; 58
    2cb6:	18 f0       	brcs	.+6      	; 0x2cbe <__ultoa_invert+0x7c>
    2cb8:	49 5d       	subi	r20, 0xD9	; 217
    2cba:	31 fd       	sbrc	r19, 1
    2cbc:	40 52       	subi	r20, 0x20	; 32
    2cbe:	41 93       	st	Z+, r20
    2cc0:	02 d0       	rcall	.+4      	; 0x2cc6 <__ultoa_invert+0x84>
    2cc2:	a9 f7       	brne	.-22     	; 0x2cae <__ultoa_invert+0x6c>
    2cc4:	ea cf       	rjmp	.-44     	; 0x2c9a <__ultoa_invert+0x58>
    2cc6:	b4 e0       	ldi	r27, 0x04	; 4
    2cc8:	a6 95       	lsr	r26
    2cca:	97 95       	ror	r25
    2ccc:	87 95       	ror	r24
    2cce:	77 95       	ror	r23
    2cd0:	67 95       	ror	r22
    2cd2:	ba 95       	dec	r27
    2cd4:	c9 f7       	brne	.-14     	; 0x2cc8 <__ultoa_invert+0x86>
    2cd6:	00 97       	sbiw	r24, 0x00	; 0
    2cd8:	61 05       	cpc	r22, r1
    2cda:	71 05       	cpc	r23, r1
    2cdc:	08 95       	ret
    2cde:	9b 01       	movw	r18, r22
    2ce0:	ac 01       	movw	r20, r24
    2ce2:	0a 2e       	mov	r0, r26
    2ce4:	06 94       	lsr	r0
    2ce6:	57 95       	ror	r21
    2ce8:	47 95       	ror	r20
    2cea:	37 95       	ror	r19
    2cec:	27 95       	ror	r18
    2cee:	ba 95       	dec	r27
    2cf0:	c9 f7       	brne	.-14     	; 0x2ce4 <__ultoa_invert+0xa2>
    2cf2:	62 0f       	add	r22, r18
    2cf4:	73 1f       	adc	r23, r19
    2cf6:	84 1f       	adc	r24, r20
    2cf8:	95 1f       	adc	r25, r21
    2cfa:	a0 1d       	adc	r26, r0
    2cfc:	08 95       	ret

00002cfe <__prologue_saves__>:
    2cfe:	2f 92       	push	r2
    2d00:	3f 92       	push	r3
    2d02:	4f 92       	push	r4
    2d04:	5f 92       	push	r5
    2d06:	6f 92       	push	r6
    2d08:	7f 92       	push	r7
    2d0a:	8f 92       	push	r8
    2d0c:	9f 92       	push	r9
    2d0e:	af 92       	push	r10
    2d10:	bf 92       	push	r11
    2d12:	cf 92       	push	r12
    2d14:	df 92       	push	r13
    2d16:	ef 92       	push	r14
    2d18:	ff 92       	push	r15
    2d1a:	0f 93       	push	r16
    2d1c:	1f 93       	push	r17
    2d1e:	cf 93       	push	r28
    2d20:	df 93       	push	r29
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
    2d26:	ca 1b       	sub	r28, r26
    2d28:	db 0b       	sbc	r29, r27
    2d2a:	0f b6       	in	r0, 0x3f	; 63
    2d2c:	f8 94       	cli
    2d2e:	de bf       	out	0x3e, r29	; 62
    2d30:	0f be       	out	0x3f, r0	; 63
    2d32:	cd bf       	out	0x3d, r28	; 61
    2d34:	09 94       	ijmp

00002d36 <__epilogue_restores__>:
    2d36:	2a 88       	ldd	r2, Y+18	; 0x12
    2d38:	39 88       	ldd	r3, Y+17	; 0x11
    2d3a:	48 88       	ldd	r4, Y+16	; 0x10
    2d3c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d3e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d40:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d42:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d44:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d46:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d48:	b9 84       	ldd	r11, Y+9	; 0x09
    2d4a:	c8 84       	ldd	r12, Y+8	; 0x08
    2d4c:	df 80       	ldd	r13, Y+7	; 0x07
    2d4e:	ee 80       	ldd	r14, Y+6	; 0x06
    2d50:	fd 80       	ldd	r15, Y+5	; 0x05
    2d52:	0c 81       	ldd	r16, Y+4	; 0x04
    2d54:	1b 81       	ldd	r17, Y+3	; 0x03
    2d56:	aa 81       	ldd	r26, Y+2	; 0x02
    2d58:	b9 81       	ldd	r27, Y+1	; 0x01
    2d5a:	ce 0f       	add	r28, r30
    2d5c:	d1 1d       	adc	r29, r1
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	f8 94       	cli
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	cd bf       	out	0x3d, r28	; 61
    2d68:	ed 01       	movw	r28, r26
    2d6a:	08 95       	ret

00002d6c <_exit>:
    2d6c:	f8 94       	cli

00002d6e <__stop_program>:
    2d6e:	ff cf       	rjmp	.-2      	; 0x2d6e <__stop_program>
