
RTOS Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ad4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00002ad4  00002b68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003e1  00800082  00800082  00002b8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002bbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000560  00000000  00000000  00002bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000670c  00000000  00000000  00003158  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001298  00000000  00000000  00009864  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003a1f  00000000  00000000  0000aafc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000123c  00000000  00000000  0000e51c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001faa  00000000  00000000  0000f758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006ef3  00000000  00000000  00011702  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000588  00000000  00000000  000185f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
       4:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__vector_1>
       8:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__vector_2>
       c:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__vector_3>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      1c:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__vector_7>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	d2 11       	cpse	r29, r2
      56:	d2 11       	cpse	r29, r2
      58:	01 12       	cpse	r0, r17
      5a:	06 12       	cpse	r0, r22
      5c:	1c 12       	cpse	r1, r28
      5e:	d2 11       	cpse	r29, r2
      60:	d2 11       	cpse	r29, r2
      62:	01 12       	cpse	r0, r17
      64:	06 12       	cpse	r0, r22

00000066 <__ctors_end>:
      66:	11 24       	eor	r1, r1
      68:	1f be       	out	0x3f, r1	; 63
      6a:	cf e5       	ldi	r28, 0x5F	; 95
      6c:	d8 e0       	ldi	r29, 0x08	; 8
      6e:	de bf       	out	0x3e, r29	; 62
      70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
      72:	10 e0       	ldi	r17, 0x00	; 0
      74:	a0 e6       	ldi	r26, 0x60	; 96
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	e4 ed       	ldi	r30, 0xD4	; 212
      7a:	fa e2       	ldi	r31, 0x2A	; 42
      7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
      7e:	05 90       	lpm	r0, Z+
      80:	0d 92       	st	X+, r0
      82:	a2 38       	cpi	r26, 0x82	; 130
      84:	b1 07       	cpc	r27, r17
      86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
      88:	24 e0       	ldi	r18, 0x04	; 4
      8a:	a2 e8       	ldi	r26, 0x82	; 130
      8c:	b0 e0       	ldi	r27, 0x00	; 0
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	a3 36       	cpi	r26, 0x63	; 99
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 5d 14 	call	0x28ba	; 0x28ba <main>
      9c:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <pinMode>:

}

void Interrupts(void){
	
	sei();
      a4:	88 30       	cpi	r24, 0x08	; 8
      a6:	08 f0       	brcs	.+2      	; 0xaa <pinMode+0x6>
      a8:	5e c0       	rjmp	.+188    	; 0x166 <pinMode+0xc2>
      aa:	69 32       	cpi	r22, 0x29	; 41
      ac:	d1 f4       	brne	.+52     	; 0xe2 <pinMode+0x3e>
      ae:	4a b3       	in	r20, 0x1a	; 26
      b0:	9d ec       	ldi	r25, 0xCD	; 205
      b2:	89 9f       	mul	r24, r25
      b4:	91 2d       	mov	r25, r1
      b6:	11 24       	eor	r1, r1
      b8:	96 95       	lsr	r25
      ba:	96 95       	lsr	r25
      bc:	96 95       	lsr	r25
      be:	99 0f       	add	r25, r25
      c0:	29 2f       	mov	r18, r25
      c2:	22 0f       	add	r18, r18
      c4:	22 0f       	add	r18, r18
      c6:	92 0f       	add	r25, r18
      c8:	89 1b       	sub	r24, r25
      ca:	21 e0       	ldi	r18, 0x01	; 1
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	b9 01       	movw	r22, r18
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <pinMode+0x32>
      d2:	66 0f       	add	r22, r22
      d4:	77 1f       	adc	r23, r23
      d6:	8a 95       	dec	r24
      d8:	e2 f7       	brpl	.-8      	; 0xd2 <pinMode+0x2e>
      da:	cb 01       	movw	r24, r22
      dc:	84 2b       	or	r24, r20
      de:	8a bb       	out	0x1a, r24	; 26
      e0:	08 95       	ret
      e2:	68 32       	cpi	r22, 0x28	; 40
      e4:	d9 f4       	brne	.+54     	; 0x11c <pinMode+0x78>
      e6:	4a b3       	in	r20, 0x1a	; 26
      e8:	9d ec       	ldi	r25, 0xCD	; 205
      ea:	89 9f       	mul	r24, r25
      ec:	91 2d       	mov	r25, r1
      ee:	11 24       	eor	r1, r1
      f0:	96 95       	lsr	r25
      f2:	96 95       	lsr	r25
      f4:	96 95       	lsr	r25
      f6:	99 0f       	add	r25, r25
      f8:	29 2f       	mov	r18, r25
      fa:	22 0f       	add	r18, r18
      fc:	22 0f       	add	r18, r18
      fe:	92 0f       	add	r25, r18
     100:	89 1b       	sub	r24, r25
     102:	21 e0       	ldi	r18, 0x01	; 1
     104:	30 e0       	ldi	r19, 0x00	; 0
     106:	b9 01       	movw	r22, r18
     108:	02 c0       	rjmp	.+4      	; 0x10e <pinMode+0x6a>
     10a:	66 0f       	add	r22, r22
     10c:	77 1f       	adc	r23, r23
     10e:	8a 95       	dec	r24
     110:	e2 f7       	brpl	.-8      	; 0x10a <pinMode+0x66>
     112:	cb 01       	movw	r24, r22
     114:	80 95       	com	r24
     116:	84 23       	and	r24, r20
     118:	8a bb       	out	0x1a, r24	; 26
     11a:	08 95       	ret
     11c:	6a 32       	cpi	r22, 0x2A	; 42
     11e:	09 f0       	breq	.+2      	; 0x122 <pinMode+0x7e>
     120:	49 c1       	rjmp	.+658    	; 0x3b4 <pinMode+0x310>
     122:	4a b3       	in	r20, 0x1a	; 26
     124:	9d ec       	ldi	r25, 0xCD	; 205
     126:	89 9f       	mul	r24, r25
     128:	91 2d       	mov	r25, r1
     12a:	11 24       	eor	r1, r1
     12c:	96 95       	lsr	r25
     12e:	96 95       	lsr	r25
     130:	96 95       	lsr	r25
     132:	99 0f       	add	r25, r25
     134:	29 2f       	mov	r18, r25
     136:	22 0f       	add	r18, r18
     138:	22 0f       	add	r18, r18
     13a:	92 0f       	add	r25, r18
     13c:	89 1b       	sub	r24, r25
     13e:	21 e0       	ldi	r18, 0x01	; 1
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	b9 01       	movw	r22, r18
     144:	02 c0       	rjmp	.+4      	; 0x14a <pinMode+0xa6>
     146:	66 0f       	add	r22, r22
     148:	77 1f       	adc	r23, r23
     14a:	8a 95       	dec	r24
     14c:	e2 f7       	brpl	.-8      	; 0x146 <pinMode+0xa2>
     14e:	cb 01       	movw	r24, r22
     150:	96 2f       	mov	r25, r22
     152:	90 95       	com	r25
     154:	94 23       	and	r25, r20
     156:	9a bb       	out	0x1a, r25	; 26
     158:	90 b7       	in	r25, 0x30	; 48
     15a:	9b 7f       	andi	r25, 0xFB	; 251
     15c:	90 bf       	out	0x30, r25	; 48
     15e:	9b b3       	in	r25, 0x1b	; 27
     160:	89 2b       	or	r24, r25
     162:	8b bb       	out	0x1b, r24	; 27
     164:	08 95       	ret
     166:	96 ef       	ldi	r25, 0xF6	; 246
     168:	98 0f       	add	r25, r24
     16a:	98 30       	cpi	r25, 0x08	; 8
     16c:	08 f0       	brcs	.+2      	; 0x170 <pinMode+0xcc>
     16e:	5e c0       	rjmp	.+188    	; 0x22c <pinMode+0x188>
     170:	69 32       	cpi	r22, 0x29	; 41
     172:	d1 f4       	brne	.+52     	; 0x1a8 <pinMode+0x104>
     174:	47 b3       	in	r20, 0x17	; 23
     176:	9d ec       	ldi	r25, 0xCD	; 205
     178:	89 9f       	mul	r24, r25
     17a:	91 2d       	mov	r25, r1
     17c:	11 24       	eor	r1, r1
     17e:	96 95       	lsr	r25
     180:	96 95       	lsr	r25
     182:	96 95       	lsr	r25
     184:	99 0f       	add	r25, r25
     186:	29 2f       	mov	r18, r25
     188:	22 0f       	add	r18, r18
     18a:	22 0f       	add	r18, r18
     18c:	92 0f       	add	r25, r18
     18e:	89 1b       	sub	r24, r25
     190:	21 e0       	ldi	r18, 0x01	; 1
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	b9 01       	movw	r22, r18
     196:	02 c0       	rjmp	.+4      	; 0x19c <pinMode+0xf8>
     198:	66 0f       	add	r22, r22
     19a:	77 1f       	adc	r23, r23
     19c:	8a 95       	dec	r24
     19e:	e2 f7       	brpl	.-8      	; 0x198 <pinMode+0xf4>
     1a0:	cb 01       	movw	r24, r22
     1a2:	84 2b       	or	r24, r20
     1a4:	87 bb       	out	0x17, r24	; 23
     1a6:	08 95       	ret
     1a8:	68 32       	cpi	r22, 0x28	; 40
     1aa:	d9 f4       	brne	.+54     	; 0x1e2 <pinMode+0x13e>
     1ac:	47 b3       	in	r20, 0x17	; 23
     1ae:	9d ec       	ldi	r25, 0xCD	; 205
     1b0:	89 9f       	mul	r24, r25
     1b2:	91 2d       	mov	r25, r1
     1b4:	11 24       	eor	r1, r1
     1b6:	96 95       	lsr	r25
     1b8:	96 95       	lsr	r25
     1ba:	96 95       	lsr	r25
     1bc:	99 0f       	add	r25, r25
     1be:	29 2f       	mov	r18, r25
     1c0:	22 0f       	add	r18, r18
     1c2:	22 0f       	add	r18, r18
     1c4:	92 0f       	add	r25, r18
     1c6:	89 1b       	sub	r24, r25
     1c8:	21 e0       	ldi	r18, 0x01	; 1
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	b9 01       	movw	r22, r18
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <pinMode+0x130>
     1d0:	66 0f       	add	r22, r22
     1d2:	77 1f       	adc	r23, r23
     1d4:	8a 95       	dec	r24
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <pinMode+0x12c>
     1d8:	cb 01       	movw	r24, r22
     1da:	80 95       	com	r24
     1dc:	84 23       	and	r24, r20
     1de:	87 bb       	out	0x17, r24	; 23
     1e0:	08 95       	ret
     1e2:	6a 32       	cpi	r22, 0x2A	; 42
     1e4:	09 f0       	breq	.+2      	; 0x1e8 <pinMode+0x144>
     1e6:	e6 c0       	rjmp	.+460    	; 0x3b4 <pinMode+0x310>
     1e8:	47 b3       	in	r20, 0x17	; 23
     1ea:	9d ec       	ldi	r25, 0xCD	; 205
     1ec:	89 9f       	mul	r24, r25
     1ee:	91 2d       	mov	r25, r1
     1f0:	11 24       	eor	r1, r1
     1f2:	96 95       	lsr	r25
     1f4:	96 95       	lsr	r25
     1f6:	96 95       	lsr	r25
     1f8:	99 0f       	add	r25, r25
     1fa:	29 2f       	mov	r18, r25
     1fc:	22 0f       	add	r18, r18
     1fe:	22 0f       	add	r18, r18
     200:	92 0f       	add	r25, r18
     202:	89 1b       	sub	r24, r25
     204:	21 e0       	ldi	r18, 0x01	; 1
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	b9 01       	movw	r22, r18
     20a:	02 c0       	rjmp	.+4      	; 0x210 <pinMode+0x16c>
     20c:	66 0f       	add	r22, r22
     20e:	77 1f       	adc	r23, r23
     210:	8a 95       	dec	r24
     212:	e2 f7       	brpl	.-8      	; 0x20c <pinMode+0x168>
     214:	cb 01       	movw	r24, r22
     216:	96 2f       	mov	r25, r22
     218:	90 95       	com	r25
     21a:	94 23       	and	r25, r20
     21c:	97 bb       	out	0x17, r25	; 23
     21e:	90 b7       	in	r25, 0x30	; 48
     220:	9b 7f       	andi	r25, 0xFB	; 251
     222:	90 bf       	out	0x30, r25	; 48
     224:	98 b3       	in	r25, 0x18	; 24
     226:	89 2b       	or	r24, r25
     228:	88 bb       	out	0x18, r24	; 24
     22a:	08 95       	ret
     22c:	9c ee       	ldi	r25, 0xEC	; 236
     22e:	98 0f       	add	r25, r24
     230:	98 30       	cpi	r25, 0x08	; 8
     232:	08 f0       	brcs	.+2      	; 0x236 <pinMode+0x192>
     234:	5e c0       	rjmp	.+188    	; 0x2f2 <pinMode+0x24e>
     236:	69 32       	cpi	r22, 0x29	; 41
     238:	d1 f4       	brne	.+52     	; 0x26e <pinMode+0x1ca>
     23a:	44 b3       	in	r20, 0x14	; 20
     23c:	9d ec       	ldi	r25, 0xCD	; 205
     23e:	89 9f       	mul	r24, r25
     240:	91 2d       	mov	r25, r1
     242:	11 24       	eor	r1, r1
     244:	96 95       	lsr	r25
     246:	96 95       	lsr	r25
     248:	96 95       	lsr	r25
     24a:	99 0f       	add	r25, r25
     24c:	29 2f       	mov	r18, r25
     24e:	22 0f       	add	r18, r18
     250:	22 0f       	add	r18, r18
     252:	92 0f       	add	r25, r18
     254:	89 1b       	sub	r24, r25
     256:	21 e0       	ldi	r18, 0x01	; 1
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	b9 01       	movw	r22, r18
     25c:	02 c0       	rjmp	.+4      	; 0x262 <pinMode+0x1be>
     25e:	66 0f       	add	r22, r22
     260:	77 1f       	adc	r23, r23
     262:	8a 95       	dec	r24
     264:	e2 f7       	brpl	.-8      	; 0x25e <pinMode+0x1ba>
     266:	cb 01       	movw	r24, r22
     268:	84 2b       	or	r24, r20
     26a:	84 bb       	out	0x14, r24	; 20
     26c:	08 95       	ret
     26e:	68 32       	cpi	r22, 0x28	; 40
     270:	d9 f4       	brne	.+54     	; 0x2a8 <pinMode+0x204>
     272:	44 b3       	in	r20, 0x14	; 20
     274:	9d ec       	ldi	r25, 0xCD	; 205
     276:	89 9f       	mul	r24, r25
     278:	91 2d       	mov	r25, r1
     27a:	11 24       	eor	r1, r1
     27c:	96 95       	lsr	r25
     27e:	96 95       	lsr	r25
     280:	96 95       	lsr	r25
     282:	99 0f       	add	r25, r25
     284:	29 2f       	mov	r18, r25
     286:	22 0f       	add	r18, r18
     288:	22 0f       	add	r18, r18
     28a:	92 0f       	add	r25, r18
     28c:	89 1b       	sub	r24, r25
     28e:	21 e0       	ldi	r18, 0x01	; 1
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	b9 01       	movw	r22, r18
     294:	02 c0       	rjmp	.+4      	; 0x29a <pinMode+0x1f6>
     296:	66 0f       	add	r22, r22
     298:	77 1f       	adc	r23, r23
     29a:	8a 95       	dec	r24
     29c:	e2 f7       	brpl	.-8      	; 0x296 <pinMode+0x1f2>
     29e:	cb 01       	movw	r24, r22
     2a0:	80 95       	com	r24
     2a2:	84 23       	and	r24, r20
     2a4:	84 bb       	out	0x14, r24	; 20
     2a6:	08 95       	ret
     2a8:	6a 32       	cpi	r22, 0x2A	; 42
     2aa:	09 f0       	breq	.+2      	; 0x2ae <pinMode+0x20a>
     2ac:	83 c0       	rjmp	.+262    	; 0x3b4 <pinMode+0x310>
     2ae:	44 b3       	in	r20, 0x14	; 20
     2b0:	9d ec       	ldi	r25, 0xCD	; 205
     2b2:	89 9f       	mul	r24, r25
     2b4:	91 2d       	mov	r25, r1
     2b6:	11 24       	eor	r1, r1
     2b8:	96 95       	lsr	r25
     2ba:	96 95       	lsr	r25
     2bc:	96 95       	lsr	r25
     2be:	99 0f       	add	r25, r25
     2c0:	29 2f       	mov	r18, r25
     2c2:	22 0f       	add	r18, r18
     2c4:	22 0f       	add	r18, r18
     2c6:	92 0f       	add	r25, r18
     2c8:	89 1b       	sub	r24, r25
     2ca:	21 e0       	ldi	r18, 0x01	; 1
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	b9 01       	movw	r22, r18
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <pinMode+0x232>
     2d2:	66 0f       	add	r22, r22
     2d4:	77 1f       	adc	r23, r23
     2d6:	8a 95       	dec	r24
     2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <pinMode+0x22e>
     2da:	cb 01       	movw	r24, r22
     2dc:	96 2f       	mov	r25, r22
     2de:	90 95       	com	r25
     2e0:	94 23       	and	r25, r20
     2e2:	94 bb       	out	0x14, r25	; 20
     2e4:	90 b7       	in	r25, 0x30	; 48
     2e6:	9b 7f       	andi	r25, 0xFB	; 251
     2e8:	90 bf       	out	0x30, r25	; 48
     2ea:	95 b3       	in	r25, 0x15	; 21
     2ec:	89 2b       	or	r24, r25
     2ee:	85 bb       	out	0x15, r24	; 21
     2f0:	08 95       	ret
     2f2:	92 ee       	ldi	r25, 0xE2	; 226
     2f4:	98 0f       	add	r25, r24
     2f6:	98 30       	cpi	r25, 0x08	; 8
     2f8:	08 f0       	brcs	.+2      	; 0x2fc <pinMode+0x258>
     2fa:	5c c0       	rjmp	.+184    	; 0x3b4 <pinMode+0x310>
     2fc:	69 32       	cpi	r22, 0x29	; 41
     2fe:	d1 f4       	brne	.+52     	; 0x334 <pinMode+0x290>
     300:	41 b3       	in	r20, 0x11	; 17
     302:	9d ec       	ldi	r25, 0xCD	; 205
     304:	89 9f       	mul	r24, r25
     306:	91 2d       	mov	r25, r1
     308:	11 24       	eor	r1, r1
     30a:	96 95       	lsr	r25
     30c:	96 95       	lsr	r25
     30e:	96 95       	lsr	r25
     310:	99 0f       	add	r25, r25
     312:	29 2f       	mov	r18, r25
     314:	22 0f       	add	r18, r18
     316:	22 0f       	add	r18, r18
     318:	92 0f       	add	r25, r18
     31a:	89 1b       	sub	r24, r25
     31c:	21 e0       	ldi	r18, 0x01	; 1
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	b9 01       	movw	r22, r18
     322:	02 c0       	rjmp	.+4      	; 0x328 <pinMode+0x284>
     324:	66 0f       	add	r22, r22
     326:	77 1f       	adc	r23, r23
     328:	8a 95       	dec	r24
     32a:	e2 f7       	brpl	.-8      	; 0x324 <pinMode+0x280>
     32c:	cb 01       	movw	r24, r22
     32e:	84 2b       	or	r24, r20
     330:	81 bb       	out	0x11, r24	; 17
     332:	08 95       	ret
     334:	68 32       	cpi	r22, 0x28	; 40
     336:	d9 f4       	brne	.+54     	; 0x36e <pinMode+0x2ca>
     338:	41 b3       	in	r20, 0x11	; 17
     33a:	9d ec       	ldi	r25, 0xCD	; 205
     33c:	89 9f       	mul	r24, r25
     33e:	91 2d       	mov	r25, r1
     340:	11 24       	eor	r1, r1
     342:	96 95       	lsr	r25
     344:	96 95       	lsr	r25
     346:	96 95       	lsr	r25
     348:	99 0f       	add	r25, r25
     34a:	29 2f       	mov	r18, r25
     34c:	22 0f       	add	r18, r18
     34e:	22 0f       	add	r18, r18
     350:	92 0f       	add	r25, r18
     352:	89 1b       	sub	r24, r25
     354:	21 e0       	ldi	r18, 0x01	; 1
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	b9 01       	movw	r22, r18
     35a:	02 c0       	rjmp	.+4      	; 0x360 <pinMode+0x2bc>
     35c:	66 0f       	add	r22, r22
     35e:	77 1f       	adc	r23, r23
     360:	8a 95       	dec	r24
     362:	e2 f7       	brpl	.-8      	; 0x35c <pinMode+0x2b8>
     364:	cb 01       	movw	r24, r22
     366:	80 95       	com	r24
     368:	84 23       	and	r24, r20
     36a:	81 bb       	out	0x11, r24	; 17
     36c:	08 95       	ret
     36e:	6a 32       	cpi	r22, 0x2A	; 42
     370:	09 f5       	brne	.+66     	; 0x3b4 <pinMode+0x310>
     372:	41 b3       	in	r20, 0x11	; 17
     374:	9d ec       	ldi	r25, 0xCD	; 205
     376:	89 9f       	mul	r24, r25
     378:	91 2d       	mov	r25, r1
     37a:	11 24       	eor	r1, r1
     37c:	96 95       	lsr	r25
     37e:	96 95       	lsr	r25
     380:	96 95       	lsr	r25
     382:	99 0f       	add	r25, r25
     384:	29 2f       	mov	r18, r25
     386:	22 0f       	add	r18, r18
     388:	22 0f       	add	r18, r18
     38a:	92 0f       	add	r25, r18
     38c:	89 1b       	sub	r24, r25
     38e:	21 e0       	ldi	r18, 0x01	; 1
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	b9 01       	movw	r22, r18
     394:	02 c0       	rjmp	.+4      	; 0x39a <pinMode+0x2f6>
     396:	66 0f       	add	r22, r22
     398:	77 1f       	adc	r23, r23
     39a:	8a 95       	dec	r24
     39c:	e2 f7       	brpl	.-8      	; 0x396 <pinMode+0x2f2>
     39e:	cb 01       	movw	r24, r22
     3a0:	96 2f       	mov	r25, r22
     3a2:	90 95       	com	r25
     3a4:	94 23       	and	r25, r20
     3a6:	91 bb       	out	0x11, r25	; 17
     3a8:	90 b7       	in	r25, 0x30	; 48
     3aa:	9b 7f       	andi	r25, 0xFB	; 251
     3ac:	90 bf       	out	0x30, r25	; 48
     3ae:	92 b3       	in	r25, 0x12	; 18
     3b0:	89 2b       	or	r24, r25
     3b2:	82 bb       	out	0x12, r24	; 18
     3b4:	08 95       	ret

000003b6 <digitalWrite>:
     3b6:	88 30       	cpi	r24, 0x08	; 8
     3b8:	08 f0       	brcs	.+2      	; 0x3bc <digitalWrite+0x6>
     3ba:	46 c0       	rjmp	.+140    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     3bc:	9d ec       	ldi	r25, 0xCD	; 205
     3be:	69 9f       	mul	r22, r25
     3c0:	91 2d       	mov	r25, r1
     3c2:	11 24       	eor	r1, r1
     3c4:	96 95       	lsr	r25
     3c6:	96 95       	lsr	r25
     3c8:	96 95       	lsr	r25
     3ca:	99 0f       	add	r25, r25
     3cc:	29 2f       	mov	r18, r25
     3ce:	22 0f       	add	r18, r18
     3d0:	22 0f       	add	r18, r18
     3d2:	92 0f       	add	r25, r18
     3d4:	69 1b       	sub	r22, r25
     3d6:	61 30       	cpi	r22, 0x01	; 1
     3d8:	d1 f4       	brne	.+52     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     3da:	4b b3       	in	r20, 0x1b	; 27
     3dc:	9d ec       	ldi	r25, 0xCD	; 205
     3de:	89 9f       	mul	r24, r25
     3e0:	91 2d       	mov	r25, r1
     3e2:	11 24       	eor	r1, r1
     3e4:	96 95       	lsr	r25
     3e6:	96 95       	lsr	r25
     3e8:	96 95       	lsr	r25
     3ea:	99 0f       	add	r25, r25
     3ec:	29 2f       	mov	r18, r25
     3ee:	22 0f       	add	r18, r18
     3f0:	22 0f       	add	r18, r18
     3f2:	92 0f       	add	r25, r18
     3f4:	89 1b       	sub	r24, r25
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	b9 01       	movw	r22, r18
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     3fe:	66 0f       	add	r22, r22
     400:	77 1f       	adc	r23, r23
     402:	8a 95       	dec	r24
     404:	e2 f7       	brpl	.-8      	; 0x3fe <digitalWrite+0x48>
     406:	cb 01       	movw	r24, r22
     408:	84 2b       	or	r24, r20
     40a:	8b bb       	out	0x1b, r24	; 27
     40c:	08 95       	ret
     40e:	61 11       	cpse	r22, r1
     410:	fb c0       	rjmp	.+502    	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
     412:	4b b3       	in	r20, 0x1b	; 27
     414:	9d ec       	ldi	r25, 0xCD	; 205
     416:	89 9f       	mul	r24, r25
     418:	91 2d       	mov	r25, r1
     41a:	11 24       	eor	r1, r1
     41c:	96 95       	lsr	r25
     41e:	96 95       	lsr	r25
     420:	96 95       	lsr	r25
     422:	99 0f       	add	r25, r25
     424:	29 2f       	mov	r18, r25
     426:	22 0f       	add	r18, r18
     428:	22 0f       	add	r18, r18
     42a:	92 0f       	add	r25, r18
     42c:	89 1b       	sub	r24, r25
     42e:	21 e0       	ldi	r18, 0x01	; 1
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	b9 01       	movw	r22, r18
     434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     436:	66 0f       	add	r22, r22
     438:	77 1f       	adc	r23, r23
     43a:	8a 95       	dec	r24
     43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     43e:	cb 01       	movw	r24, r22
     440:	80 95       	com	r24
     442:	84 23       	and	r24, r20
     444:	8b bb       	out	0x1b, r24	; 27
     446:	08 95       	ret
     448:	96 ef       	ldi	r25, 0xF6	; 246
     44a:	98 0f       	add	r25, r24
     44c:	98 30       	cpi	r25, 0x08	; 8
     44e:	08 f0       	brcs	.+2      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     450:	46 c0       	rjmp	.+140    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
     452:	9d ec       	ldi	r25, 0xCD	; 205
     454:	69 9f       	mul	r22, r25
     456:	91 2d       	mov	r25, r1
     458:	11 24       	eor	r1, r1
     45a:	96 95       	lsr	r25
     45c:	96 95       	lsr	r25
     45e:	96 95       	lsr	r25
     460:	99 0f       	add	r25, r25
     462:	29 2f       	mov	r18, r25
     464:	22 0f       	add	r18, r18
     466:	22 0f       	add	r18, r18
     468:	92 0f       	add	r25, r18
     46a:	69 1b       	sub	r22, r25
     46c:	61 30       	cpi	r22, 0x01	; 1
     46e:	d1 f4       	brne	.+52     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     470:	48 b3       	in	r20, 0x18	; 24
     472:	9d ec       	ldi	r25, 0xCD	; 205
     474:	89 9f       	mul	r24, r25
     476:	91 2d       	mov	r25, r1
     478:	11 24       	eor	r1, r1
     47a:	96 95       	lsr	r25
     47c:	96 95       	lsr	r25
     47e:	96 95       	lsr	r25
     480:	99 0f       	add	r25, r25
     482:	29 2f       	mov	r18, r25
     484:	22 0f       	add	r18, r18
     486:	22 0f       	add	r18, r18
     488:	92 0f       	add	r25, r18
     48a:	89 1b       	sub	r24, r25
     48c:	21 e0       	ldi	r18, 0x01	; 1
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	b9 01       	movw	r22, r18
     492:	02 c0       	rjmp	.+4      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     494:	66 0f       	add	r22, r22
     496:	77 1f       	adc	r23, r23
     498:	8a 95       	dec	r24
     49a:	e2 f7       	brpl	.-8      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
     49c:	cb 01       	movw	r24, r22
     49e:	84 2b       	or	r24, r20
     4a0:	88 bb       	out	0x18, r24	; 24
     4a2:	08 95       	ret
     4a4:	61 11       	cpse	r22, r1
     4a6:	b0 c0       	rjmp	.+352    	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
     4a8:	48 b3       	in	r20, 0x18	; 24
     4aa:	9d ec       	ldi	r25, 0xCD	; 205
     4ac:	89 9f       	mul	r24, r25
     4ae:	91 2d       	mov	r25, r1
     4b0:	11 24       	eor	r1, r1
     4b2:	96 95       	lsr	r25
     4b4:	96 95       	lsr	r25
     4b6:	96 95       	lsr	r25
     4b8:	99 0f       	add	r25, r25
     4ba:	29 2f       	mov	r18, r25
     4bc:	22 0f       	add	r18, r18
     4be:	22 0f       	add	r18, r18
     4c0:	92 0f       	add	r25, r18
     4c2:	89 1b       	sub	r24, r25
     4c4:	21 e0       	ldi	r18, 0x01	; 1
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	b9 01       	movw	r22, r18
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
     4cc:	66 0f       	add	r22, r22
     4ce:	77 1f       	adc	r23, r23
     4d0:	8a 95       	dec	r24
     4d2:	e2 f7       	brpl	.-8      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
     4d4:	cb 01       	movw	r24, r22
     4d6:	80 95       	com	r24
     4d8:	84 23       	and	r24, r20
     4da:	88 bb       	out	0x18, r24	; 24
     4dc:	08 95       	ret
     4de:	9c ee       	ldi	r25, 0xEC	; 236
     4e0:	98 0f       	add	r25, r24
     4e2:	98 30       	cpi	r25, 0x08	; 8
     4e4:	08 f0       	brcs	.+2      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
     4e6:	46 c0       	rjmp	.+140    	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
     4e8:	9d ec       	ldi	r25, 0xCD	; 205
     4ea:	69 9f       	mul	r22, r25
     4ec:	91 2d       	mov	r25, r1
     4ee:	11 24       	eor	r1, r1
     4f0:	96 95       	lsr	r25
     4f2:	96 95       	lsr	r25
     4f4:	96 95       	lsr	r25
     4f6:	99 0f       	add	r25, r25
     4f8:	29 2f       	mov	r18, r25
     4fa:	22 0f       	add	r18, r18
     4fc:	22 0f       	add	r18, r18
     4fe:	92 0f       	add	r25, r18
     500:	69 1b       	sub	r22, r25
     502:	61 30       	cpi	r22, 0x01	; 1
     504:	d1 f4       	brne	.+52     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
     506:	45 b3       	in	r20, 0x15	; 21
     508:	9d ec       	ldi	r25, 0xCD	; 205
     50a:	89 9f       	mul	r24, r25
     50c:	91 2d       	mov	r25, r1
     50e:	11 24       	eor	r1, r1
     510:	96 95       	lsr	r25
     512:	96 95       	lsr	r25
     514:	96 95       	lsr	r25
     516:	99 0f       	add	r25, r25
     518:	29 2f       	mov	r18, r25
     51a:	22 0f       	add	r18, r18
     51c:	22 0f       	add	r18, r18
     51e:	92 0f       	add	r25, r18
     520:	89 1b       	sub	r24, r25
     522:	21 e0       	ldi	r18, 0x01	; 1
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	b9 01       	movw	r22, r18
     528:	02 c0       	rjmp	.+4      	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
     52a:	66 0f       	add	r22, r22
     52c:	77 1f       	adc	r23, r23
     52e:	8a 95       	dec	r24
     530:	e2 f7       	brpl	.-8      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
     532:	cb 01       	movw	r24, r22
     534:	84 2b       	or	r24, r20
     536:	85 bb       	out	0x15, r24	; 21
     538:	08 95       	ret
     53a:	61 11       	cpse	r22, r1
     53c:	65 c0       	rjmp	.+202    	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
     53e:	45 b3       	in	r20, 0x15	; 21
     540:	9d ec       	ldi	r25, 0xCD	; 205
     542:	89 9f       	mul	r24, r25
     544:	91 2d       	mov	r25, r1
     546:	11 24       	eor	r1, r1
     548:	96 95       	lsr	r25
     54a:	96 95       	lsr	r25
     54c:	96 95       	lsr	r25
     54e:	99 0f       	add	r25, r25
     550:	29 2f       	mov	r18, r25
     552:	22 0f       	add	r18, r18
     554:	22 0f       	add	r18, r18
     556:	92 0f       	add	r25, r18
     558:	89 1b       	sub	r24, r25
     55a:	21 e0       	ldi	r18, 0x01	; 1
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	b9 01       	movw	r22, r18
     560:	02 c0       	rjmp	.+4      	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
     562:	66 0f       	add	r22, r22
     564:	77 1f       	adc	r23, r23
     566:	8a 95       	dec	r24
     568:	e2 f7       	brpl	.-8      	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
     56a:	cb 01       	movw	r24, r22
     56c:	80 95       	com	r24
     56e:	84 23       	and	r24, r20
     570:	85 bb       	out	0x15, r24	; 21
     572:	08 95       	ret
     574:	92 ee       	ldi	r25, 0xE2	; 226
     576:	98 0f       	add	r25, r24
     578:	98 30       	cpi	r25, 0x08	; 8
     57a:	08 f0       	brcs	.+2      	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
     57c:	45 c0       	rjmp	.+138    	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
     57e:	9d ec       	ldi	r25, 0xCD	; 205
     580:	69 9f       	mul	r22, r25
     582:	91 2d       	mov	r25, r1
     584:	11 24       	eor	r1, r1
     586:	96 95       	lsr	r25
     588:	96 95       	lsr	r25
     58a:	96 95       	lsr	r25
     58c:	99 0f       	add	r25, r25
     58e:	29 2f       	mov	r18, r25
     590:	22 0f       	add	r18, r18
     592:	22 0f       	add	r18, r18
     594:	92 0f       	add	r25, r18
     596:	69 1b       	sub	r22, r25
     598:	61 30       	cpi	r22, 0x01	; 1
     59a:	d1 f4       	brne	.+52     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
     59c:	42 b3       	in	r20, 0x12	; 18
     59e:	9d ec       	ldi	r25, 0xCD	; 205
     5a0:	89 9f       	mul	r24, r25
     5a2:	91 2d       	mov	r25, r1
     5a4:	11 24       	eor	r1, r1
     5a6:	96 95       	lsr	r25
     5a8:	96 95       	lsr	r25
     5aa:	96 95       	lsr	r25
     5ac:	99 0f       	add	r25, r25
     5ae:	29 2f       	mov	r18, r25
     5b0:	22 0f       	add	r18, r18
     5b2:	22 0f       	add	r18, r18
     5b4:	92 0f       	add	r25, r18
     5b6:	89 1b       	sub	r24, r25
     5b8:	21 e0       	ldi	r18, 0x01	; 1
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	b9 01       	movw	r22, r18
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
     5c0:	66 0f       	add	r22, r22
     5c2:	77 1f       	adc	r23, r23
     5c4:	8a 95       	dec	r24
     5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
     5c8:	cb 01       	movw	r24, r22
     5ca:	84 2b       	or	r24, r20
     5cc:	82 bb       	out	0x12, r24	; 18
     5ce:	08 95       	ret
     5d0:	61 11       	cpse	r22, r1
     5d2:	1a c0       	rjmp	.+52     	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
     5d4:	42 b3       	in	r20, 0x12	; 18
     5d6:	9d ec       	ldi	r25, 0xCD	; 205
     5d8:	89 9f       	mul	r24, r25
     5da:	91 2d       	mov	r25, r1
     5dc:	11 24       	eor	r1, r1
     5de:	96 95       	lsr	r25
     5e0:	96 95       	lsr	r25
     5e2:	96 95       	lsr	r25
     5e4:	99 0f       	add	r25, r25
     5e6:	29 2f       	mov	r18, r25
     5e8:	22 0f       	add	r18, r18
     5ea:	22 0f       	add	r18, r18
     5ec:	92 0f       	add	r25, r18
     5ee:	89 1b       	sub	r24, r25
     5f0:	21 e0       	ldi	r18, 0x01	; 1
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	b9 01       	movw	r22, r18
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <__EEPROM_REGION_LENGTH__+0x1fc>
     5f8:	66 0f       	add	r22, r22
     5fa:	77 1f       	adc	r23, r23
     5fc:	8a 95       	dec	r24
     5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
     600:	cb 01       	movw	r24, r22
     602:	80 95       	com	r24
     604:	84 23       	and	r24, r20
     606:	82 bb       	out	0x12, r24	; 18
     608:	08 95       	ret

0000060a <digitalRead>:
     60a:	88 30       	cpi	r24, 0x08	; 8
     60c:	c8 f4       	brcc	.+50     	; 0x640 <digitalRead+0x36>
     60e:	29 b3       	in	r18, 0x19	; 25
     610:	9d ec       	ldi	r25, 0xCD	; 205
     612:	89 9f       	mul	r24, r25
     614:	91 2d       	mov	r25, r1
     616:	11 24       	eor	r1, r1
     618:	96 95       	lsr	r25
     61a:	96 95       	lsr	r25
     61c:	96 95       	lsr	r25
     61e:	99 0f       	add	r25, r25
     620:	39 2f       	mov	r19, r25
     622:	33 0f       	add	r19, r19
     624:	33 0f       	add	r19, r19
     626:	93 0f       	add	r25, r19
     628:	89 1b       	sub	r24, r25
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	02 c0       	rjmp	.+4      	; 0x632 <digitalRead+0x28>
     62e:	35 95       	asr	r19
     630:	27 95       	ror	r18
     632:	8a 95       	dec	r24
     634:	e2 f7       	brpl	.-8      	; 0x62e <digitalRead+0x24>
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	20 fd       	sbrc	r18, 0
     63a:	59 c0       	rjmp	.+178    	; 0x6ee <digitalRead+0xe4>
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	08 95       	ret
     640:	96 ef       	ldi	r25, 0xF6	; 246
     642:	98 0f       	add	r25, r24
     644:	98 30       	cpi	r25, 0x08	; 8
     646:	c8 f4       	brcc	.+50     	; 0x67a <digitalRead+0x70>
     648:	26 b3       	in	r18, 0x16	; 22
     64a:	9d ec       	ldi	r25, 0xCD	; 205
     64c:	89 9f       	mul	r24, r25
     64e:	91 2d       	mov	r25, r1
     650:	11 24       	eor	r1, r1
     652:	96 95       	lsr	r25
     654:	96 95       	lsr	r25
     656:	96 95       	lsr	r25
     658:	99 0f       	add	r25, r25
     65a:	39 2f       	mov	r19, r25
     65c:	33 0f       	add	r19, r19
     65e:	33 0f       	add	r19, r19
     660:	93 0f       	add	r25, r19
     662:	89 1b       	sub	r24, r25
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	02 c0       	rjmp	.+4      	; 0x66c <digitalRead+0x62>
     668:	35 95       	asr	r19
     66a:	27 95       	ror	r18
     66c:	8a 95       	dec	r24
     66e:	e2 f7       	brpl	.-8      	; 0x668 <digitalRead+0x5e>
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	20 fd       	sbrc	r18, 0
     674:	3c c0       	rjmp	.+120    	; 0x6ee <digitalRead+0xe4>
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	08 95       	ret
     67a:	9c ee       	ldi	r25, 0xEC	; 236
     67c:	98 0f       	add	r25, r24
     67e:	98 30       	cpi	r25, 0x08	; 8
     680:	c8 f4       	brcc	.+50     	; 0x6b4 <digitalRead+0xaa>
     682:	23 b3       	in	r18, 0x13	; 19
     684:	9d ec       	ldi	r25, 0xCD	; 205
     686:	89 9f       	mul	r24, r25
     688:	91 2d       	mov	r25, r1
     68a:	11 24       	eor	r1, r1
     68c:	96 95       	lsr	r25
     68e:	96 95       	lsr	r25
     690:	96 95       	lsr	r25
     692:	99 0f       	add	r25, r25
     694:	39 2f       	mov	r19, r25
     696:	33 0f       	add	r19, r19
     698:	33 0f       	add	r19, r19
     69a:	93 0f       	add	r25, r19
     69c:	89 1b       	sub	r24, r25
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <digitalRead+0x9c>
     6a2:	35 95       	asr	r19
     6a4:	27 95       	ror	r18
     6a6:	8a 95       	dec	r24
     6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <digitalRead+0x98>
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	20 fd       	sbrc	r18, 0
     6ae:	1f c0       	rjmp	.+62     	; 0x6ee <digitalRead+0xe4>
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	08 95       	ret
     6b4:	92 ee       	ldi	r25, 0xE2	; 226
     6b6:	98 0f       	add	r25, r24
     6b8:	98 30       	cpi	r25, 0x08	; 8
     6ba:	c8 f4       	brcc	.+50     	; 0x6ee <digitalRead+0xe4>
     6bc:	20 b3       	in	r18, 0x10	; 16
     6be:	9d ec       	ldi	r25, 0xCD	; 205
     6c0:	89 9f       	mul	r24, r25
     6c2:	91 2d       	mov	r25, r1
     6c4:	11 24       	eor	r1, r1
     6c6:	96 95       	lsr	r25
     6c8:	96 95       	lsr	r25
     6ca:	96 95       	lsr	r25
     6cc:	99 0f       	add	r25, r25
     6ce:	39 2f       	mov	r19, r25
     6d0:	33 0f       	add	r19, r19
     6d2:	33 0f       	add	r19, r19
     6d4:	93 0f       	add	r25, r19
     6d6:	89 1b       	sub	r24, r25
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <digitalRead+0xd6>
     6dc:	35 95       	asr	r19
     6de:	27 95       	ror	r18
     6e0:	8a 95       	dec	r24
     6e2:	e2 f7       	brpl	.-8      	; 0x6dc <digitalRead+0xd2>
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	20 fd       	sbrc	r18, 0
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <digitalRead+0xe4>
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	08 95       	ret
     6ee:	08 95       	ret

000006f0 <__vector_1>:
}


ISR(INT0_vect)
{
     6f0:	1f 92       	push	r1
     6f2:	0f 92       	push	r0
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	0f 92       	push	r0
     6f8:	11 24       	eor	r1, r1
     6fa:	2f 93       	push	r18
     6fc:	3f 93       	push	r19
     6fe:	4f 93       	push	r20
     700:	5f 93       	push	r21
     702:	6f 93       	push	r22
     704:	7f 93       	push	r23
     706:	8f 93       	push	r24
     708:	9f 93       	push	r25
     70a:	af 93       	push	r26
     70c:	bf 93       	push	r27
     70e:	ef 93       	push	r30
     710:	ff 93       	push	r31
	ISR0();
     712:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <ISR0>
     716:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <ISR0+0x1>
     71a:	09 95       	icall
}
     71c:	ff 91       	pop	r31
     71e:	ef 91       	pop	r30
     720:	bf 91       	pop	r27
     722:	af 91       	pop	r26
     724:	9f 91       	pop	r25
     726:	8f 91       	pop	r24
     728:	7f 91       	pop	r23
     72a:	6f 91       	pop	r22
     72c:	5f 91       	pop	r21
     72e:	4f 91       	pop	r20
     730:	3f 91       	pop	r19
     732:	2f 91       	pop	r18
     734:	0f 90       	pop	r0
     736:	0f be       	out	0x3f, r0	; 63
     738:	0f 90       	pop	r0
     73a:	1f 90       	pop	r1
     73c:	18 95       	reti

0000073e <__vector_2>:

ISR(INT1_vect)
{
     73e:	1f 92       	push	r1
     740:	0f 92       	push	r0
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	0f 92       	push	r0
     746:	11 24       	eor	r1, r1
     748:	2f 93       	push	r18
     74a:	3f 93       	push	r19
     74c:	4f 93       	push	r20
     74e:	5f 93       	push	r21
     750:	6f 93       	push	r22
     752:	7f 93       	push	r23
     754:	8f 93       	push	r24
     756:	9f 93       	push	r25
     758:	af 93       	push	r26
     75a:	bf 93       	push	r27
     75c:	ef 93       	push	r30
     75e:	ff 93       	push	r31
	ISR1();
     760:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <ISR1>
     764:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <ISR1+0x1>
     768:	09 95       	icall
}
     76a:	ff 91       	pop	r31
     76c:	ef 91       	pop	r30
     76e:	bf 91       	pop	r27
     770:	af 91       	pop	r26
     772:	9f 91       	pop	r25
     774:	8f 91       	pop	r24
     776:	7f 91       	pop	r23
     778:	6f 91       	pop	r22
     77a:	5f 91       	pop	r21
     77c:	4f 91       	pop	r20
     77e:	3f 91       	pop	r19
     780:	2f 91       	pop	r18
     782:	0f 90       	pop	r0
     784:	0f be       	out	0x3f, r0	; 63
     786:	0f 90       	pop	r0
     788:	1f 90       	pop	r1
     78a:	18 95       	reti

0000078c <__vector_3>:

ISR(INT2_vect)
{
     78c:	1f 92       	push	r1
     78e:	0f 92       	push	r0
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	0f 92       	push	r0
     794:	11 24       	eor	r1, r1
     796:	2f 93       	push	r18
     798:	3f 93       	push	r19
     79a:	4f 93       	push	r20
     79c:	5f 93       	push	r21
     79e:	6f 93       	push	r22
     7a0:	7f 93       	push	r23
     7a2:	8f 93       	push	r24
     7a4:	9f 93       	push	r25
     7a6:	af 93       	push	r26
     7a8:	bf 93       	push	r27
     7aa:	ef 93       	push	r30
     7ac:	ff 93       	push	r31
	ISR2();
     7ae:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <__data_end>
     7b2:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <__data_end+0x1>
     7b6:	09 95       	icall
}
     7b8:	ff 91       	pop	r31
     7ba:	ef 91       	pop	r30
     7bc:	bf 91       	pop	r27
     7be:	af 91       	pop	r26
     7c0:	9f 91       	pop	r25
     7c2:	8f 91       	pop	r24
     7c4:	7f 91       	pop	r23
     7c6:	6f 91       	pop	r22
     7c8:	5f 91       	pop	r21
     7ca:	4f 91       	pop	r20
     7cc:	3f 91       	pop	r19
     7ce:	2f 91       	pop	r18
     7d0:	0f 90       	pop	r0
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	0f 90       	pop	r0
     7d6:	1f 90       	pop	r1
     7d8:	18 95       	reti

000007da <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     7da:	ad e8       	ldi	r26, 0x8D	; 141
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e1 e9       	ldi	r30, 0x91	; 145
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	11 96       	adiw	r26, 0x01	; 1
     7e4:	fc 93       	st	X, r31
     7e6:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
     7e8:	13 96       	adiw	r26, 0x03	; 3
     7ea:	1c 92       	st	X, r1
     7ec:	1e 92       	st	-X, r1
     7ee:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     7f0:	a9 e8       	ldi	r26, 0x89	; 137
     7f2:	b0 e0       	ldi	r27, 0x00	; 0
     7f4:	8f e1       	ldi	r24, 0x1F	; 31
     7f6:	93 e0       	ldi	r25, 0x03	; 3
     7f8:	13 96       	adiw	r26, 0x03	; 3
     7fa:	9c 93       	st	X, r25
     7fc:	8e 93       	st	-X, r24
     7fe:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
     800:	11 96       	adiw	r26, 0x01	; 1
     802:	1c 92       	st	X, r1
     804:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     806:	93 83       	std	Z+3, r25	; 0x03
     808:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     80a:	b1 83       	std	Z+1, r27	; 0x01
     80c:	a0 83       	st	Z, r26
     80e:	08 95       	ret

00000810 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     810:	ef 92       	push	r14
     812:	ff 92       	push	r15
     814:	0f 93       	push	r16
     816:	1f 93       	push	r17
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     81e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     822:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <xHeapHasBeenInitialised.2121>
     826:	81 11       	cpse	r24, r1
     828:	05 c0       	rjmp	.+10     	; 0x834 <pvPortMalloc+0x24>
        {
            prvHeapInit();
     82a:	0e 94 ed 03 	call	0x7da	; 0x7da <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <xHeapHasBeenInitialised.2121>
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     834:	20 97       	sbiw	r28, 0x00	; 0
     836:	71 f0       	breq	.+28     	; 0x854 <pvPortMalloc+0x44>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
     838:	ce 01       	movw	r24, r28
     83a:	04 96       	adiw	r24, 0x04	; 4
            xHeapHasBeenInitialised = pdTRUE;
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     83c:	c8 17       	cp	r28, r24
     83e:	d9 07       	cpc	r29, r25
     840:	38 f4       	brcc	.+14     	; 0x850 <pvPortMalloc+0x40>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
        {
            xWantedSize += heapSTRUCT_SIZE;

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
     842:	25 96       	adiw	r28, 0x05	; 5
     844:	8c 17       	cp	r24, r28
     846:	9d 07       	cpc	r25, r29
     848:	28 f0       	brcs	.+10     	; 0x854 <pvPortMalloc+0x44>
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
            }
            else
            {
                xWantedSize = 0;
     84a:	c0 e0       	ldi	r28, 0x00	; 0
     84c:	d0 e0       	ldi	r29, 0x00	; 0
     84e:	02 c0       	rjmp	.+4      	; 0x854 <pvPortMalloc+0x44>
            }
        }
        else
        {
            xWantedSize = 0;
     850:	c0 e0       	ldi	r28, 0x00	; 0
     852:	d0 e0       	ldi	r29, 0x00	; 0
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     854:	20 97       	sbiw	r28, 0x00	; 0
     856:	09 f4       	brne	.+2      	; 0x85a <pvPortMalloc+0x4a>
     858:	5e c0       	rjmp	.+188    	; 0x916 <__stack+0xb7>
     85a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     85e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     862:	2c 17       	cp	r18, r28
     864:	3d 07       	cpc	r19, r29
     866:	08 f4       	brcc	.+2      	; 0x86a <__stack+0xb>
     868:	59 c0       	rjmp	.+178    	; 0x91c <__stack+0xbd>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;
     86a:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <xStart>
     86e:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <xStart+0x1>

        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
     872:	ad e8       	ldi	r26, 0x8D	; 141
     874:	b0 e0       	ldi	r27, 0x00	; 0
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
            {
                pxPreviousBlock = pxBlock;
     878:	df 01       	movw	r26, r30
                pxBlock = pxBlock->pxNextFreeBlock;
     87a:	fc 01       	movw	r30, r24
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     87c:	82 81       	ldd	r24, Z+2	; 0x02
     87e:	93 81       	ldd	r25, Z+3	; 0x03
     880:	8c 17       	cp	r24, r28
     882:	9d 07       	cpc	r25, r29
     884:	20 f4       	brcc	.+8      	; 0x88e <__stack+0x2f>
     886:	80 81       	ld	r24, Z
     888:	91 81       	ldd	r25, Z+1	; 0x01
     88a:	00 97       	sbiw	r24, 0x00	; 0
     88c:	a9 f7       	brne	.-22     	; 0x878 <__stack+0x19>
                pxPreviousBlock = pxBlock;
                pxBlock = pxBlock->pxNextFreeBlock;
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	e9 38       	cpi	r30, 0x89	; 137
     892:	f8 07       	cpc	r31, r24
     894:	09 f4       	brne	.+2      	; 0x898 <__stack+0x39>
     896:	45 c0       	rjmp	.+138    	; 0x922 <__stack+0xc3>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     898:	0d 91       	ld	r16, X+
     89a:	1c 91       	ld	r17, X
     89c:	11 97       	sbiw	r26, 0x01	; 1
     89e:	0c 5f       	subi	r16, 0xFC	; 252
     8a0:	1f 4f       	sbci	r17, 0xFF	; 255

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     8a2:	80 81       	ld	r24, Z
     8a4:	91 81       	ldd	r25, Z+1	; 0x01
     8a6:	8d 93       	st	X+, r24
     8a8:	9c 93       	st	X, r25

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     8aa:	82 81       	ldd	r24, Z+2	; 0x02
     8ac:	93 81       	ldd	r25, Z+3	; 0x03
     8ae:	8c 1b       	sub	r24, r28
     8b0:	9d 0b       	sbc	r25, r29
     8b2:	89 30       	cpi	r24, 0x09	; 9
     8b4:	91 05       	cpc	r25, r1
     8b6:	30 f1       	brcs	.+76     	; 0x904 <__stack+0xa5>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     8b8:	bf 01       	movw	r22, r30
     8ba:	6c 0f       	add	r22, r28
     8bc:	7d 1f       	adc	r23, r29

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     8be:	db 01       	movw	r26, r22
     8c0:	13 96       	adiw	r26, 0x03	; 3
     8c2:	9c 93       	st	X, r25
     8c4:	8e 93       	st	-X, r24
     8c6:	12 97       	sbiw	r26, 0x02	; 2
                    pxBlock->xBlockSize = xWantedSize;
     8c8:	d3 83       	std	Z+3, r29	; 0x03
     8ca:	c2 83       	std	Z+2, r28	; 0x02

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     8cc:	12 96       	adiw	r26, 0x02	; 2
     8ce:	4d 91       	ld	r20, X+
     8d0:	5c 91       	ld	r21, X
     8d2:	13 97       	sbiw	r26, 0x03	; 3
     8d4:	0f 2e       	mov	r0, r31
     8d6:	fd e8       	ldi	r31, 0x8D	; 141
     8d8:	ef 2e       	mov	r14, r31
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	ff 2e       	mov	r15, r31
     8de:	f0 2d       	mov	r31, r0
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <__stack+0x85>
     8e2:	7d 01       	movw	r14, r26
     8e4:	e7 01       	movw	r28, r14
     8e6:	a8 81       	ld	r26, Y
     8e8:	b9 81       	ldd	r27, Y+1	; 0x01
     8ea:	12 96       	adiw	r26, 0x02	; 2
     8ec:	8d 91       	ld	r24, X+
     8ee:	9c 91       	ld	r25, X
     8f0:	13 97       	sbiw	r26, 0x03	; 3
     8f2:	84 17       	cp	r24, r20
     8f4:	95 07       	cpc	r25, r21
     8f6:	a8 f3       	brcs	.-22     	; 0x8e2 <__stack+0x83>
     8f8:	eb 01       	movw	r28, r22
     8fa:	b9 83       	std	Y+1, r27	; 0x01
     8fc:	a8 83       	st	Y, r26
     8fe:	d7 01       	movw	r26, r14
     900:	6d 93       	st	X+, r22
     902:	7c 93       	st	X, r23
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
     904:	82 81       	ldd	r24, Z+2	; 0x02
     906:	93 81       	ldd	r25, Z+3	; 0x03
     908:	28 1b       	sub	r18, r24
     90a:	39 0b       	sbc	r19, r25
     90c:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     910:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
     914:	08 c0       	rjmp	.+16     	; 0x926 <__stack+0xc7>

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     916:	00 e0       	ldi	r16, 0x00	; 0
     918:	10 e0       	ldi	r17, 0x00	; 0
     91a:	05 c0       	rjmp	.+10     	; 0x926 <__stack+0xc7>
     91c:	00 e0       	ldi	r16, 0x00	; 0
     91e:	10 e0       	ldi	r17, 0x00	; 0
     920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0xc7>
     922:	00 e0       	ldi	r16, 0x00	; 0
     924:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     926:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     92a:	c8 01       	movw	r24, r16
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	08 95       	ret

0000093a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     942:	00 97       	sbiw	r24, 0x00	; 0
     944:	41 f1       	breq	.+80     	; 0x996 <vPortFree+0x5c>
     946:	ec 01       	movw	r28, r24
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     948:	8c 01       	movw	r16, r24
     94a:	04 50       	subi	r16, 0x04	; 4
     94c:	11 09       	sbc	r17, r1

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;

        vTaskSuspendAll();
     94e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     952:	f8 01       	movw	r30, r16
     954:	42 81       	ldd	r20, Z+2	; 0x02
     956:	53 81       	ldd	r21, Z+3	; 0x03
     958:	ad e8       	ldi	r26, 0x8D	; 141
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	01 c0       	rjmp	.+2      	; 0x960 <vPortFree+0x26>
     95e:	df 01       	movw	r26, r30
     960:	ed 91       	ld	r30, X+
     962:	fc 91       	ld	r31, X
     964:	11 97       	sbiw	r26, 0x01	; 1
     966:	22 81       	ldd	r18, Z+2	; 0x02
     968:	33 81       	ldd	r19, Z+3	; 0x03
     96a:	24 17       	cp	r18, r20
     96c:	35 07       	cpc	r19, r21
     96e:	b8 f3       	brcs	.-18     	; 0x95e <vPortFree+0x24>
     970:	24 97       	sbiw	r28, 0x04	; 4
     972:	f9 83       	std	Y+1, r31	; 0x01
     974:	e8 83       	st	Y, r30
     976:	0d 93       	st	X+, r16
     978:	1c 93       	st	X, r17
            xFreeBytesRemaining += pxLink->xBlockSize;
     97a:	8a 81       	ldd	r24, Y+2	; 0x02
     97c:	9b 81       	ldd	r25, Y+3	; 0x03
     97e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     982:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     986:	82 0f       	add	r24, r18
     988:	93 1f       	adc	r25, r19
     98a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     98e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
     992:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <xTaskResumeAll>
    }
}
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	08 95       	ret

000009a0 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     9a0:	fc 01       	movw	r30, r24
     9a2:	03 96       	adiw	r24, 0x03	; 3
     9a4:	92 83       	std	Z+2, r25	; 0x02
     9a6:	81 83       	std	Z+1, r24	; 0x01
     9a8:	2f ef       	ldi	r18, 0xFF	; 255
     9aa:	3f ef       	ldi	r19, 0xFF	; 255
     9ac:	34 83       	std	Z+4, r19	; 0x04
     9ae:	23 83       	std	Z+3, r18	; 0x03
     9b0:	96 83       	std	Z+6, r25	; 0x06
     9b2:	85 83       	std	Z+5, r24	; 0x05
     9b4:	90 87       	std	Z+8, r25	; 0x08
     9b6:	87 83       	std	Z+7, r24	; 0x07
     9b8:	10 82       	st	Z, r1
     9ba:	08 95       	ret

000009bc <vListInitialiseItem>:
     9bc:	fc 01       	movw	r30, r24
     9be:	11 86       	std	Z+9, r1	; 0x09
     9c0:	10 86       	std	Z+8, r1	; 0x08
     9c2:	08 95       	ret

000009c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9ca:	48 81       	ld	r20, Y
     9cc:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     9ce:	4f 3f       	cpi	r20, 0xFF	; 255
     9d0:	2f ef       	ldi	r18, 0xFF	; 255
     9d2:	52 07       	cpc	r21, r18
     9d4:	21 f4       	brne	.+8      	; 0x9de <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     9d6:	fc 01       	movw	r30, r24
     9d8:	a7 81       	ldd	r26, Z+7	; 0x07
     9da:	b0 85       	ldd	r27, Z+8	; 0x08
     9dc:	0d c0       	rjmp	.+26     	; 0x9f8 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     9de:	dc 01       	movw	r26, r24
     9e0:	13 96       	adiw	r26, 0x03	; 3
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <vListInsert+0x22>
     9e4:	df 01       	movw	r26, r30
     9e6:	12 96       	adiw	r26, 0x02	; 2
     9e8:	ed 91       	ld	r30, X+
     9ea:	fc 91       	ld	r31, X
     9ec:	13 97       	sbiw	r26, 0x03	; 3
     9ee:	20 81       	ld	r18, Z
     9f0:	31 81       	ldd	r19, Z+1	; 0x01
     9f2:	42 17       	cp	r20, r18
     9f4:	53 07       	cpc	r21, r19
     9f6:	b0 f7       	brcc	.-20     	; 0x9e4 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     9f8:	12 96       	adiw	r26, 0x02	; 2
     9fa:	ed 91       	ld	r30, X+
     9fc:	fc 91       	ld	r31, X
     9fe:	13 97       	sbiw	r26, 0x03	; 3
     a00:	fb 83       	std	Y+3, r31	; 0x03
     a02:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a04:	d5 83       	std	Z+5, r29	; 0x05
     a06:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     a08:	bd 83       	std	Y+5, r27	; 0x05
     a0a:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	dc 93       	st	X, r29
     a10:	ce 93       	st	-X, r28
     a12:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     a14:	99 87       	std	Y+9, r25	; 0x09
     a16:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     a18:	fc 01       	movw	r30, r24
     a1a:	20 81       	ld	r18, Z
     a1c:	2f 5f       	subi	r18, 0xFF	; 255
     a1e:	20 83       	st	Z, r18
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     a2c:	a0 85       	ldd	r26, Z+8	; 0x08
     a2e:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a30:	c2 81       	ldd	r28, Z+2	; 0x02
     a32:	d3 81       	ldd	r29, Z+3	; 0x03
     a34:	84 81       	ldd	r24, Z+4	; 0x04
     a36:	95 81       	ldd	r25, Z+5	; 0x05
     a38:	9d 83       	std	Y+5, r25	; 0x05
     a3a:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a3c:	c4 81       	ldd	r28, Z+4	; 0x04
     a3e:	d5 81       	ldd	r29, Z+5	; 0x05
     a40:	82 81       	ldd	r24, Z+2	; 0x02
     a42:	93 81       	ldd	r25, Z+3	; 0x03
     a44:	9b 83       	std	Y+3, r25	; 0x03
     a46:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     a48:	11 96       	adiw	r26, 0x01	; 1
     a4a:	8d 91       	ld	r24, X+
     a4c:	9c 91       	ld	r25, X
     a4e:	12 97       	sbiw	r26, 0x02	; 2
     a50:	e8 17       	cp	r30, r24
     a52:	f9 07       	cpc	r31, r25
     a54:	31 f4       	brne	.+12     	; 0xa62 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     a56:	84 81       	ldd	r24, Z+4	; 0x04
     a58:	95 81       	ldd	r25, Z+5	; 0x05
     a5a:	12 96       	adiw	r26, 0x02	; 2
     a5c:	9c 93       	st	X, r25
     a5e:	8e 93       	st	-X, r24
     a60:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     a62:	11 86       	std	Z+9, r1	; 0x09
     a64:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     a66:	8c 91       	ld	r24, X
     a68:	81 50       	subi	r24, 0x01	; 1
     a6a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     a6c:	8c 91       	ld	r24, X
}
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     a74:	1b bc       	out	0x2b, r1	; 43
     a76:	8c e7       	ldi	r24, 0x7C	; 124
     a78:	8a bd       	out	0x2a, r24	; 42
     a7a:	8b e0       	ldi	r24, 0x0B	; 11
     a7c:	8e bd       	out	0x2e, r24	; 46
     a7e:	89 b7       	in	r24, 0x39	; 57
     a80:	80 61       	ori	r24, 0x10	; 16
     a82:	89 bf       	out	0x39, r24	; 57
     a84:	08 95       	ret

00000a86 <pxPortInitialiseStack>:
     a86:	31 e1       	ldi	r19, 0x11	; 17
     a88:	fc 01       	movw	r30, r24
     a8a:	30 83       	st	Z, r19
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	22 e2       	ldi	r18, 0x22	; 34
     a90:	20 83       	st	Z, r18
     a92:	31 97       	sbiw	r30, 0x01	; 1
     a94:	a3 e3       	ldi	r26, 0x33	; 51
     a96:	a0 83       	st	Z, r26
     a98:	31 97       	sbiw	r30, 0x01	; 1
     a9a:	60 83       	st	Z, r22
     a9c:	31 97       	sbiw	r30, 0x01	; 1
     a9e:	70 83       	st	Z, r23
     aa0:	31 97       	sbiw	r30, 0x01	; 1
     aa2:	10 82       	st	Z, r1
     aa4:	31 97       	sbiw	r30, 0x01	; 1
     aa6:	60 e8       	ldi	r22, 0x80	; 128
     aa8:	60 83       	st	Z, r22
     aaa:	31 97       	sbiw	r30, 0x01	; 1
     aac:	10 82       	st	Z, r1
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	62 e0       	ldi	r22, 0x02	; 2
     ab2:	60 83       	st	Z, r22
     ab4:	31 97       	sbiw	r30, 0x01	; 1
     ab6:	63 e0       	ldi	r22, 0x03	; 3
     ab8:	60 83       	st	Z, r22
     aba:	31 97       	sbiw	r30, 0x01	; 1
     abc:	64 e0       	ldi	r22, 0x04	; 4
     abe:	60 83       	st	Z, r22
     ac0:	31 97       	sbiw	r30, 0x01	; 1
     ac2:	65 e0       	ldi	r22, 0x05	; 5
     ac4:	60 83       	st	Z, r22
     ac6:	31 97       	sbiw	r30, 0x01	; 1
     ac8:	66 e0       	ldi	r22, 0x06	; 6
     aca:	60 83       	st	Z, r22
     acc:	31 97       	sbiw	r30, 0x01	; 1
     ace:	67 e0       	ldi	r22, 0x07	; 7
     ad0:	60 83       	st	Z, r22
     ad2:	31 97       	sbiw	r30, 0x01	; 1
     ad4:	68 e0       	ldi	r22, 0x08	; 8
     ad6:	60 83       	st	Z, r22
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	69 e0       	ldi	r22, 0x09	; 9
     adc:	60 83       	st	Z, r22
     ade:	31 97       	sbiw	r30, 0x01	; 1
     ae0:	60 e1       	ldi	r22, 0x10	; 16
     ae2:	60 83       	st	Z, r22
     ae4:	31 97       	sbiw	r30, 0x01	; 1
     ae6:	30 83       	st	Z, r19
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	32 e1       	ldi	r19, 0x12	; 18
     aec:	30 83       	st	Z, r19
     aee:	31 97       	sbiw	r30, 0x01	; 1
     af0:	33 e1       	ldi	r19, 0x13	; 19
     af2:	30 83       	st	Z, r19
     af4:	31 97       	sbiw	r30, 0x01	; 1
     af6:	34 e1       	ldi	r19, 0x14	; 20
     af8:	30 83       	st	Z, r19
     afa:	31 97       	sbiw	r30, 0x01	; 1
     afc:	35 e1       	ldi	r19, 0x15	; 21
     afe:	30 83       	st	Z, r19
     b00:	31 97       	sbiw	r30, 0x01	; 1
     b02:	36 e1       	ldi	r19, 0x16	; 22
     b04:	30 83       	st	Z, r19
     b06:	31 97       	sbiw	r30, 0x01	; 1
     b08:	37 e1       	ldi	r19, 0x17	; 23
     b0a:	30 83       	st	Z, r19
     b0c:	31 97       	sbiw	r30, 0x01	; 1
     b0e:	38 e1       	ldi	r19, 0x18	; 24
     b10:	30 83       	st	Z, r19
     b12:	31 97       	sbiw	r30, 0x01	; 1
     b14:	39 e1       	ldi	r19, 0x19	; 25
     b16:	30 83       	st	Z, r19
     b18:	31 97       	sbiw	r30, 0x01	; 1
     b1a:	30 e2       	ldi	r19, 0x20	; 32
     b1c:	30 83       	st	Z, r19
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	31 e2       	ldi	r19, 0x21	; 33
     b22:	30 83       	st	Z, r19
     b24:	31 97       	sbiw	r30, 0x01	; 1
     b26:	20 83       	st	Z, r18
     b28:	31 97       	sbiw	r30, 0x01	; 1
     b2a:	23 e2       	ldi	r18, 0x23	; 35
     b2c:	20 83       	st	Z, r18
     b2e:	31 97       	sbiw	r30, 0x01	; 1
     b30:	40 83       	st	Z, r20
     b32:	31 97       	sbiw	r30, 0x01	; 1
     b34:	50 83       	st	Z, r21
     b36:	31 97       	sbiw	r30, 0x01	; 1
     b38:	26 e2       	ldi	r18, 0x26	; 38
     b3a:	20 83       	st	Z, r18
     b3c:	31 97       	sbiw	r30, 0x01	; 1
     b3e:	27 e2       	ldi	r18, 0x27	; 39
     b40:	20 83       	st	Z, r18
     b42:	31 97       	sbiw	r30, 0x01	; 1
     b44:	28 e2       	ldi	r18, 0x28	; 40
     b46:	20 83       	st	Z, r18
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	29 e2       	ldi	r18, 0x29	; 41
     b4c:	20 83       	st	Z, r18
     b4e:	31 97       	sbiw	r30, 0x01	; 1
     b50:	20 e3       	ldi	r18, 0x30	; 48
     b52:	20 83       	st	Z, r18
     b54:	31 97       	sbiw	r30, 0x01	; 1
     b56:	21 e3       	ldi	r18, 0x31	; 49
     b58:	20 83       	st	Z, r18
     b5a:	86 97       	sbiw	r24, 0x26	; 38
     b5c:	08 95       	ret

00000b5e <xPortStartScheduler>:
     b5e:	0e 94 3a 05 	call	0xa74	; 0xa74 <prvSetupTimerInterrupt>
     b62:	a0 91 1f 04 	lds	r26, 0x041F	; 0x80041f <pxCurrentTCB>
     b66:	b0 91 20 04 	lds	r27, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
     b6a:	cd 91       	ld	r28, X+
     b6c:	cd bf       	out	0x3d, r28	; 61
     b6e:	dd 91       	ld	r29, X+
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	ff 91       	pop	r31
     b74:	ef 91       	pop	r30
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	bf 91       	pop	r27
     b7c:	af 91       	pop	r26
     b7e:	9f 91       	pop	r25
     b80:	8f 91       	pop	r24
     b82:	7f 91       	pop	r23
     b84:	6f 91       	pop	r22
     b86:	5f 91       	pop	r21
     b88:	4f 91       	pop	r20
     b8a:	3f 91       	pop	r19
     b8c:	2f 91       	pop	r18
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	df 90       	pop	r13
     b98:	cf 90       	pop	r12
     b9a:	bf 90       	pop	r11
     b9c:	af 90       	pop	r10
     b9e:	9f 90       	pop	r9
     ba0:	8f 90       	pop	r8
     ba2:	7f 90       	pop	r7
     ba4:	6f 90       	pop	r6
     ba6:	5f 90       	pop	r5
     ba8:	4f 90       	pop	r4
     baa:	3f 90       	pop	r3
     bac:	2f 90       	pop	r2
     bae:	1f 90       	pop	r1
     bb0:	0f 90       	pop	r0
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	0f 90       	pop	r0
     bb6:	08 95       	ret
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	08 95       	ret

00000bbc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     bbc:	0f 92       	push	r0
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	0f 92       	push	r0
     bc4:	1f 92       	push	r1
     bc6:	11 24       	eor	r1, r1
     bc8:	2f 92       	push	r2
     bca:	3f 92       	push	r3
     bcc:	4f 92       	push	r4
     bce:	5f 92       	push	r5
     bd0:	6f 92       	push	r6
     bd2:	7f 92       	push	r7
     bd4:	8f 92       	push	r8
     bd6:	9f 92       	push	r9
     bd8:	af 92       	push	r10
     bda:	bf 92       	push	r11
     bdc:	cf 92       	push	r12
     bde:	df 92       	push	r13
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	2f 93       	push	r18
     bea:	3f 93       	push	r19
     bec:	4f 93       	push	r20
     bee:	5f 93       	push	r21
     bf0:	6f 93       	push	r22
     bf2:	7f 93       	push	r23
     bf4:	8f 93       	push	r24
     bf6:	9f 93       	push	r25
     bf8:	af 93       	push	r26
     bfa:	bf 93       	push	r27
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	ef 93       	push	r30
     c02:	ff 93       	push	r31
     c04:	a0 91 1f 04 	lds	r26, 0x041F	; 0x80041f <pxCurrentTCB>
     c08:	b0 91 20 04 	lds	r27, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
     c0c:	0d b6       	in	r0, 0x3d	; 61
     c0e:	0d 92       	st	X+, r0
     c10:	0e b6       	in	r0, 0x3e	; 62
     c12:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     c14:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     c18:	a0 91 1f 04 	lds	r26, 0x041F	; 0x80041f <pxCurrentTCB>
     c1c:	b0 91 20 04 	lds	r27, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
     c20:	cd 91       	ld	r28, X+
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	dd 91       	ld	r29, X+
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	ff 91       	pop	r31
     c2a:	ef 91       	pop	r30
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	bf 91       	pop	r27
     c32:	af 91       	pop	r26
     c34:	9f 91       	pop	r25
     c36:	8f 91       	pop	r24
     c38:	7f 91       	pop	r23
     c3a:	6f 91       	pop	r22
     c3c:	5f 91       	pop	r21
     c3e:	4f 91       	pop	r20
     c40:	3f 91       	pop	r19
     c42:	2f 91       	pop	r18
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	cf 90       	pop	r12
     c50:	bf 90       	pop	r11
     c52:	af 90       	pop	r10
     c54:	9f 90       	pop	r9
     c56:	8f 90       	pop	r8
     c58:	7f 90       	pop	r7
     c5a:	6f 90       	pop	r6
     c5c:	5f 90       	pop	r5
     c5e:	4f 90       	pop	r4
     c60:	3f 90       	pop	r3
     c62:	2f 90       	pop	r2
     c64:	1f 90       	pop	r1
     c66:	0f 90       	pop	r0
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	0f 90       	pop	r0

	asm volatile ( "ret" );
     c6c:	08 95       	ret

00000c6e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     c6e:	0f 92       	push	r0
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	0f 92       	push	r0
     c76:	1f 92       	push	r1
     c78:	11 24       	eor	r1, r1
     c7a:	2f 92       	push	r2
     c7c:	3f 92       	push	r3
     c7e:	4f 92       	push	r4
     c80:	5f 92       	push	r5
     c82:	6f 92       	push	r6
     c84:	7f 92       	push	r7
     c86:	8f 92       	push	r8
     c88:	9f 92       	push	r9
     c8a:	af 92       	push	r10
     c8c:	bf 92       	push	r11
     c8e:	cf 92       	push	r12
     c90:	df 92       	push	r13
     c92:	ef 92       	push	r14
     c94:	ff 92       	push	r15
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	2f 93       	push	r18
     c9c:	3f 93       	push	r19
     c9e:	4f 93       	push	r20
     ca0:	5f 93       	push	r21
     ca2:	6f 93       	push	r22
     ca4:	7f 93       	push	r23
     ca6:	8f 93       	push	r24
     ca8:	9f 93       	push	r25
     caa:	af 93       	push	r26
     cac:	bf 93       	push	r27
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	ef 93       	push	r30
     cb4:	ff 93       	push	r31
     cb6:	a0 91 1f 04 	lds	r26, 0x041F	; 0x80041f <pxCurrentTCB>
     cba:	b0 91 20 04 	lds	r27, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
     cbe:	0d b6       	in	r0, 0x3d	; 61
     cc0:	0d 92       	st	X+, r0
     cc2:	0e b6       	in	r0, 0x3e	; 62
     cc4:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     cc6:	0e 94 82 0c 	call	0x1904	; 0x1904 <xTaskIncrementTick>
     cca:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     ccc:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     cd0:	a0 91 1f 04 	lds	r26, 0x041F	; 0x80041f <pxCurrentTCB>
     cd4:	b0 91 20 04 	lds	r27, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
     cd8:	cd 91       	ld	r28, X+
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	dd 91       	ld	r29, X+
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	ff 91       	pop	r31
     ce2:	ef 91       	pop	r30
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	bf 91       	pop	r27
     cea:	af 91       	pop	r26
     cec:	9f 91       	pop	r25
     cee:	8f 91       	pop	r24
     cf0:	7f 91       	pop	r23
     cf2:	6f 91       	pop	r22
     cf4:	5f 91       	pop	r21
     cf6:	4f 91       	pop	r20
     cf8:	3f 91       	pop	r19
     cfa:	2f 91       	pop	r18
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	cf 90       	pop	r12
     d08:	bf 90       	pop	r11
     d0a:	af 90       	pop	r10
     d0c:	9f 90       	pop	r9
     d0e:	8f 90       	pop	r8
     d10:	7f 90       	pop	r7
     d12:	6f 90       	pop	r6
     d14:	5f 90       	pop	r5
     d16:	4f 90       	pop	r4
     d18:	3f 90       	pop	r3
     d1a:	2f 90       	pop	r2
     d1c:	1f 90       	pop	r1
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0

	asm volatile ( "ret" );
     d24:	08 95       	ret

00000d26 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     d26:	0e 94 37 06 	call	0xc6e	; 0xc6e <vPortYieldFromTick>
		asm volatile ( "reti" );
     d2a:	18 95       	reti

00000d2c <prvIsQueueEmpty>:
            /* The queue must have been statically allocated, so is not going to be
             * deleted.  Avoid compiler warnings about the unused parameter. */
            ( void ) pxQueue;
        }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	0f 92       	push	r0
     d32:	fc 01       	movw	r30, r24
     d34:	82 8d       	ldd	r24, Z+26	; 0x1a
     d36:	81 11       	cpse	r24, r1
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <prvIsQueueEmpty+0x12>
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <prvIsQueueEmpty+0x14>
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	0f 90       	pop	r0
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	08 95       	ret

00000d46 <prvIsQueueFull>:
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	0f 92       	push	r0
     d4c:	fc 01       	movw	r30, r24
     d4e:	22 8d       	ldd	r18, Z+26	; 0x1a
     d50:	83 8d       	ldd	r24, Z+27	; 0x1b
     d52:	28 13       	cpse	r18, r24
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <prvIsQueueFull+0x14>
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	01 c0       	rjmp	.+2      	; 0xd5c <prvIsQueueFull+0x16>
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	0f 90       	pop	r0
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	08 95       	ret

00000d62 <prvCopyDataToQueue>:
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	ec 01       	movw	r28, r24
     d6c:	04 2f       	mov	r16, r20
     d6e:	1a 8d       	ldd	r17, Y+26	; 0x1a
     d70:	4c 8d       	ldd	r20, Y+28	; 0x1c
     d72:	41 11       	cpse	r20, r1
     d74:	0c c0       	rjmp	.+24     	; 0xd8e <prvCopyDataToQueue+0x2c>
     d76:	88 81       	ld	r24, Y
     d78:	99 81       	ldd	r25, Y+1	; 0x01
     d7a:	89 2b       	or	r24, r25
     d7c:	09 f0       	breq	.+2      	; 0xd80 <prvCopyDataToQueue+0x1e>
     d7e:	42 c0       	rjmp	.+132    	; 0xe04 <prvCopyDataToQueue+0xa2>
     d80:	8c 81       	ldd	r24, Y+4	; 0x04
     d82:	9d 81       	ldd	r25, Y+5	; 0x05
     d84:	0e 94 23 10 	call	0x2046	; 0x2046 <xTaskPriorityDisinherit>
     d88:	1d 82       	std	Y+5, r1	; 0x05
     d8a:	1c 82       	std	Y+4, r1	; 0x04
     d8c:	42 c0       	rjmp	.+132    	; 0xe12 <prvCopyDataToQueue+0xb0>
     d8e:	01 11       	cpse	r16, r1
     d90:	17 c0       	rjmp	.+46     	; 0xdc0 <prvCopyDataToQueue+0x5e>
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	9b 81       	ldd	r25, Y+3	; 0x03
     d98:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <memcpy>
     d9c:	2c 8d       	ldd	r18, Y+28	; 0x1c
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	9b 81       	ldd	r25, Y+3	; 0x03
     da2:	82 0f       	add	r24, r18
     da4:	91 1d       	adc	r25, r1
     da6:	9b 83       	std	Y+3, r25	; 0x03
     da8:	8a 83       	std	Y+2, r24	; 0x02
     daa:	2c 81       	ldd	r18, Y+4	; 0x04
     dac:	3d 81       	ldd	r19, Y+5	; 0x05
     dae:	82 17       	cp	r24, r18
     db0:	93 07       	cpc	r25, r19
     db2:	50 f1       	brcs	.+84     	; 0xe08 <prvCopyDataToQueue+0xa6>
     db4:	88 81       	ld	r24, Y
     db6:	99 81       	ldd	r25, Y+1	; 0x01
     db8:	9b 83       	std	Y+3, r25	; 0x03
     dba:	8a 83       	std	Y+2, r24	; 0x02
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	29 c0       	rjmp	.+82     	; 0xe12 <prvCopyDataToQueue+0xb0>
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	8e 81       	ldd	r24, Y+6	; 0x06
     dc4:	9f 81       	ldd	r25, Y+7	; 0x07
     dc6:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <memcpy>
     dca:	8c 8d       	ldd	r24, Y+28	; 0x1c
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	91 95       	neg	r25
     dd0:	81 95       	neg	r24
     dd2:	91 09       	sbc	r25, r1
     dd4:	2e 81       	ldd	r18, Y+6	; 0x06
     dd6:	3f 81       	ldd	r19, Y+7	; 0x07
     dd8:	28 0f       	add	r18, r24
     dda:	39 1f       	adc	r19, r25
     ddc:	3f 83       	std	Y+7, r19	; 0x07
     dde:	2e 83       	std	Y+6, r18	; 0x06
     de0:	48 81       	ld	r20, Y
     de2:	59 81       	ldd	r21, Y+1	; 0x01
     de4:	24 17       	cp	r18, r20
     de6:	35 07       	cpc	r19, r21
     de8:	30 f4       	brcc	.+12     	; 0xdf6 <prvCopyDataToQueue+0x94>
     dea:	2c 81       	ldd	r18, Y+4	; 0x04
     dec:	3d 81       	ldd	r19, Y+5	; 0x05
     dee:	82 0f       	add	r24, r18
     df0:	93 1f       	adc	r25, r19
     df2:	9f 83       	std	Y+7, r25	; 0x07
     df4:	8e 83       	std	Y+6, r24	; 0x06
     df6:	02 30       	cpi	r16, 0x02	; 2
     df8:	49 f4       	brne	.+18     	; 0xe0c <prvCopyDataToQueue+0xaa>
     dfa:	11 23       	and	r17, r17
     dfc:	49 f0       	breq	.+18     	; 0xe10 <prvCopyDataToQueue+0xae>
     dfe:	11 50       	subi	r17, 0x01	; 1
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	07 c0       	rjmp	.+14     	; 0xe12 <prvCopyDataToQueue+0xb0>
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	05 c0       	rjmp	.+10     	; 0xe12 <prvCopyDataToQueue+0xb0>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	03 c0       	rjmp	.+6      	; 0xe12 <prvCopyDataToQueue+0xb0>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <prvCopyDataToQueue+0xb0>
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	1f 5f       	subi	r17, 0xFF	; 255
     e14:	1a 8f       	std	Y+26, r17	; 0x1a
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	08 95       	ret

00000e20 <prvCopyDataFromQueue>:
     e20:	fc 01       	movw	r30, r24
     e22:	44 8d       	ldd	r20, Z+28	; 0x1c
     e24:	44 23       	and	r20, r20
     e26:	a9 f0       	breq	.+42     	; 0xe52 <prvCopyDataFromQueue+0x32>
     e28:	50 e0       	ldi	r21, 0x00	; 0
     e2a:	26 81       	ldd	r18, Z+6	; 0x06
     e2c:	37 81       	ldd	r19, Z+7	; 0x07
     e2e:	24 0f       	add	r18, r20
     e30:	35 1f       	adc	r19, r21
     e32:	37 83       	std	Z+7, r19	; 0x07
     e34:	26 83       	std	Z+6, r18	; 0x06
     e36:	84 81       	ldd	r24, Z+4	; 0x04
     e38:	95 81       	ldd	r25, Z+5	; 0x05
     e3a:	28 17       	cp	r18, r24
     e3c:	39 07       	cpc	r19, r25
     e3e:	20 f0       	brcs	.+8      	; 0xe48 <prvCopyDataFromQueue+0x28>
     e40:	80 81       	ld	r24, Z
     e42:	91 81       	ldd	r25, Z+1	; 0x01
     e44:	97 83       	std	Z+7, r25	; 0x07
     e46:	86 83       	std	Z+6, r24	; 0x06
     e48:	cb 01       	movw	r24, r22
     e4a:	66 81       	ldd	r22, Z+6	; 0x06
     e4c:	77 81       	ldd	r23, Z+7	; 0x07
     e4e:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <memcpy>
     e52:	08 95       	ret

00000e54 <prvUnlockQueue>:
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	ec 01       	movw	r28, r24
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	0f 92       	push	r0
     e62:	1e 8d       	ldd	r17, Y+30	; 0x1e
     e64:	0b c0       	rjmp	.+22     	; 0xe7c <prvUnlockQueue+0x28>
     e66:	89 89       	ldd	r24, Y+17	; 0x11
     e68:	88 23       	and	r24, r24
     e6a:	51 f0       	breq	.+20     	; 0xe80 <prvUnlockQueue+0x2c>
     e6c:	ce 01       	movw	r24, r28
     e6e:	41 96       	adiw	r24, 0x11	; 17
     e70:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <xTaskRemoveFromEventList>
     e74:	81 11       	cpse	r24, r1
     e76:	0e 94 11 10 	call	0x2022	; 0x2022 <vTaskMissedYield>
     e7a:	11 50       	subi	r17, 0x01	; 1
     e7c:	11 16       	cp	r1, r17
     e7e:	9c f3       	brlt	.-26     	; 0xe66 <prvUnlockQueue+0x12>
     e80:	8f ef       	ldi	r24, 0xFF	; 255
     e82:	8e 8f       	std	Y+30, r24	; 0x1e
     e84:	0f 90       	pop	r0
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	0f 92       	push	r0
     e8e:	1d 8d       	ldd	r17, Y+29	; 0x1d
     e90:	0b c0       	rjmp	.+22     	; 0xea8 <prvUnlockQueue+0x54>
     e92:	88 85       	ldd	r24, Y+8	; 0x08
     e94:	88 23       	and	r24, r24
     e96:	51 f0       	breq	.+20     	; 0xeac <prvUnlockQueue+0x58>
     e98:	ce 01       	movw	r24, r28
     e9a:	08 96       	adiw	r24, 0x08	; 8
     e9c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <xTaskRemoveFromEventList>
     ea0:	81 11       	cpse	r24, r1
     ea2:	0e 94 11 10 	call	0x2022	; 0x2022 <vTaskMissedYield>
     ea6:	11 50       	subi	r17, 0x01	; 1
     ea8:	11 16       	cp	r1, r17
     eaa:	9c f3       	brlt	.-26     	; 0xe92 <prvUnlockQueue+0x3e>
     eac:	8f ef       	ldi	r24, 0xFF	; 255
     eae:	8d 8f       	std	Y+29, r24	; 0x1d
     eb0:	0f 90       	pop	r0
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	08 95       	ret

00000ebc <xQueueGenericReset>:
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	fc 01       	movw	r30, r24
     ec6:	36 2f       	mov	r19, r22
     ec8:	89 2b       	or	r24, r25
     eca:	09 f4       	brne	.+2      	; 0xece <xQueueGenericReset+0x12>
     ecc:	4d c0       	rjmp	.+154    	; 0xf68 <xQueueGenericReset+0xac>
     ece:	23 8d       	ldd	r18, Z+27	; 0x1b
     ed0:	22 23       	and	r18, r18
     ed2:	09 f4       	brne	.+2      	; 0xed6 <xQueueGenericReset+0x1a>
     ed4:	4b c0       	rjmp	.+150    	; 0xf6c <xQueueGenericReset+0xb0>
     ed6:	02 2f       	mov	r16, r18
     ed8:	10 e0       	ldi	r17, 0x00	; 0
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	9f ef       	ldi	r25, 0xFF	; 255
     ede:	b8 01       	movw	r22, r16
     ee0:	0e 94 b4 14 	call	0x2968	; 0x2968 <__udivmodhi4>
     ee4:	44 8d       	ldd	r20, Z+28	; 0x1c
     ee6:	84 2f       	mov	r24, r20
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	68 17       	cp	r22, r24
     eec:	79 07       	cpc	r23, r25
     eee:	08 f4       	brcc	.+2      	; 0xef2 <xQueueGenericReset+0x36>
     ef0:	3f c0       	rjmp	.+126    	; 0xf70 <xQueueGenericReset+0xb4>
     ef2:	ef 01       	movw	r28, r30
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	0f 92       	push	r0
     efa:	60 81       	ld	r22, Z
     efc:	71 81       	ldd	r23, Z+1	; 0x01
     efe:	fb 01       	movw	r30, r22
     f00:	24 9f       	mul	r18, r20
     f02:	e0 0d       	add	r30, r0
     f04:	f1 1d       	adc	r31, r1
     f06:	11 24       	eor	r1, r1
     f08:	fd 83       	std	Y+5, r31	; 0x05
     f0a:	ec 83       	std	Y+4, r30	; 0x04
     f0c:	1a 8e       	std	Y+26, r1	; 0x1a
     f0e:	7b 83       	std	Y+3, r23	; 0x03
     f10:	6a 83       	std	Y+2, r22	; 0x02
     f12:	01 50       	subi	r16, 0x01	; 1
     f14:	11 09       	sbc	r17, r1
     f16:	80 9f       	mul	r24, r16
     f18:	a0 01       	movw	r20, r0
     f1a:	81 9f       	mul	r24, r17
     f1c:	50 0d       	add	r21, r0
     f1e:	90 9f       	mul	r25, r16
     f20:	50 0d       	add	r21, r0
     f22:	11 24       	eor	r1, r1
     f24:	cb 01       	movw	r24, r22
     f26:	84 0f       	add	r24, r20
     f28:	95 1f       	adc	r25, r21
     f2a:	9f 83       	std	Y+7, r25	; 0x07
     f2c:	8e 83       	std	Y+6, r24	; 0x06
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	8d 8f       	std	Y+29, r24	; 0x1d
     f32:	8e 8f       	std	Y+30, r24	; 0x1e
     f34:	31 11       	cpse	r19, r1
     f36:	0c c0       	rjmp	.+24     	; 0xf50 <xQueueGenericReset+0x94>
     f38:	88 85       	ldd	r24, Y+8	; 0x08
     f3a:	88 23       	and	r24, r24
     f3c:	89 f0       	breq	.+34     	; 0xf60 <xQueueGenericReset+0xa4>
     f3e:	ce 01       	movw	r24, r28
     f40:	08 96       	adiw	r24, 0x08	; 8
     f42:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <xTaskRemoveFromEventList>
     f46:	88 23       	and	r24, r24
     f48:	59 f0       	breq	.+22     	; 0xf60 <xQueueGenericReset+0xa4>
     f4a:	0e 94 de 05 	call	0xbbc	; 0xbbc <vPortYield>
     f4e:	08 c0       	rjmp	.+16     	; 0xf60 <xQueueGenericReset+0xa4>
     f50:	ce 01       	movw	r24, r28
     f52:	08 96       	adiw	r24, 0x08	; 8
     f54:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <vListInitialise>
     f58:	ce 01       	movw	r24, r28
     f5a:	41 96       	adiw	r24, 0x11	; 17
     f5c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <vListInitialise>
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	05 c0       	rjmp	.+10     	; 0xf72 <xQueueGenericReset+0xb6>
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	03 c0       	rjmp	.+6      	; 0xf72 <xQueueGenericReset+0xb6>
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	01 c0       	rjmp	.+2      	; 0xf72 <xQueueGenericReset+0xb6>
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	08 95       	ret

00000f7c <prvInitialiseNewQueue>:
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	f2 2e       	mov	r15, r18
     f88:	e8 01       	movw	r28, r16
     f8a:	61 11       	cpse	r22, r1
     f8c:	03 c0       	rjmp	.+6      	; 0xf94 <prvInitialiseNewQueue+0x18>
     f8e:	19 83       	std	Y+1, r17	; 0x01
     f90:	08 83       	st	Y, r16
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <prvInitialiseNewQueue+0x1c>
     f94:	59 83       	std	Y+1, r21	; 0x01
     f96:	48 83       	st	Y, r20
     f98:	8b 8f       	std	Y+27, r24	; 0x1b
     f9a:	6c 8f       	std	Y+28, r22	; 0x1c
     f9c:	61 e0       	ldi	r22, 0x01	; 1
     f9e:	ce 01       	movw	r24, r28
     fa0:	0e 94 5e 07 	call	0xebc	; 0xebc <xQueueGenericReset>
     fa4:	f9 a2       	std	Y+33, r15	; 0x21
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	08 95       	ret

00000fb2 <xQueueGenericCreate>:
     fb2:	df 92       	push	r13
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	38 2f       	mov	r19, r24
     fc2:	e6 2f       	mov	r30, r22
     fc4:	88 23       	and	r24, r24
     fc6:	39 f1       	breq	.+78     	; 0x1016 <xQueueGenericCreate+0x64>
     fc8:	68 2f       	mov	r22, r24
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	8f ef       	ldi	r24, 0xFF	; 255
     fce:	9f ef       	ldi	r25, 0xFF	; 255
     fd0:	0e 94 b4 14 	call	0x2968	; 0x2968 <__udivmodhi4>
     fd4:	8e 2f       	mov	r24, r30
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	68 17       	cp	r22, r24
     fda:	79 07       	cpc	r23, r25
     fdc:	f8 f0       	brcs	.+62     	; 0x101c <xQueueGenericCreate+0x6a>
     fde:	3e 9f       	mul	r19, r30
     fe0:	c0 01       	movw	r24, r0
     fe2:	11 24       	eor	r1, r1
     fe4:	8e 3d       	cpi	r24, 0xDE	; 222
     fe6:	2f ef       	ldi	r18, 0xFF	; 255
     fe8:	92 07       	cpc	r25, r18
     fea:	d8 f4       	brcc	.+54     	; 0x1022 <xQueueGenericCreate+0x70>
     fec:	d4 2e       	mov	r13, r20
     fee:	de 2f       	mov	r29, r30
     ff0:	c3 2f       	mov	r28, r19
     ff2:	82 96       	adiw	r24, 0x22	; 34
     ff4:	0e 94 08 04 	call	0x810	; 0x810 <pvPortMalloc>
     ff8:	7c 01       	movw	r14, r24
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	a1 f0       	breq	.+40     	; 0x1026 <xQueueGenericCreate+0x74>
     ffe:	fc 01       	movw	r30, r24
    1000:	17 8e       	std	Z+31, r1	; 0x1f
    1002:	8c 01       	movw	r16, r24
    1004:	2d 2d       	mov	r18, r13
    1006:	ac 01       	movw	r20, r24
    1008:	4e 5d       	subi	r20, 0xDE	; 222
    100a:	5f 4f       	sbci	r21, 0xFF	; 255
    100c:	6d 2f       	mov	r22, r29
    100e:	8c 2f       	mov	r24, r28
    1010:	0e 94 be 07 	call	0xf7c	; 0xf7c <prvInitialiseNewQueue>
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <xQueueGenericCreate+0x74>
    1016:	e1 2c       	mov	r14, r1
    1018:	f1 2c       	mov	r15, r1
    101a:	05 c0       	rjmp	.+10     	; 0x1026 <xQueueGenericCreate+0x74>
    101c:	e1 2c       	mov	r14, r1
    101e:	f1 2c       	mov	r15, r1
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <xQueueGenericCreate+0x74>
    1022:	e1 2c       	mov	r14, r1
    1024:	f1 2c       	mov	r15, r1
    1026:	c7 01       	movw	r24, r14
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	ff 90       	pop	r15
    1032:	ef 90       	pop	r14
    1034:	df 90       	pop	r13
    1036:	08 95       	ret

00001038 <xQueueGenericSend>:
    1038:	cf 92       	push	r12
    103a:	df 92       	push	r13
    103c:	ef 92       	push	r14
    103e:	ff 92       	push	r15
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	00 d0       	rcall	.+0      	; 0x104a <xQueueGenericSend+0x12>
    104a:	00 d0       	rcall	.+0      	; 0x104c <xQueueGenericSend+0x14>
    104c:	1f 92       	push	r1
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	8c 01       	movw	r16, r24
    1054:	7b 01       	movw	r14, r22
    1056:	5d 83       	std	Y+5, r21	; 0x05
    1058:	4c 83       	std	Y+4, r20	; 0x04
    105a:	c2 2e       	mov	r12, r18
    105c:	d1 2c       	mov	r13, r1
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	0f 92       	push	r0
    1064:	f8 01       	movw	r30, r16
    1066:	92 8d       	ldd	r25, Z+26	; 0x1a
    1068:	83 8d       	ldd	r24, Z+27	; 0x1b
    106a:	98 17       	cp	r25, r24
    106c:	18 f0       	brcs	.+6      	; 0x1074 <xQueueGenericSend+0x3c>
    106e:	f2 e0       	ldi	r31, 0x02	; 2
    1070:	cf 12       	cpse	r12, r31
    1072:	19 c0       	rjmp	.+50     	; 0x10a6 <xQueueGenericSend+0x6e>
    1074:	4c 2d       	mov	r20, r12
    1076:	b7 01       	movw	r22, r14
    1078:	c8 01       	movw	r24, r16
    107a:	0e 94 b1 06 	call	0xd62	; 0xd62 <prvCopyDataToQueue>
    107e:	f8 01       	movw	r30, r16
    1080:	91 89       	ldd	r25, Z+17	; 0x11
    1082:	99 23       	and	r25, r25
    1084:	49 f0       	breq	.+18     	; 0x1098 <xQueueGenericSend+0x60>
    1086:	c8 01       	movw	r24, r16
    1088:	41 96       	adiw	r24, 0x11	; 17
    108a:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <xTaskRemoveFromEventList>
    108e:	88 23       	and	r24, r24
    1090:	31 f0       	breq	.+12     	; 0x109e <xQueueGenericSend+0x66>
    1092:	0e 94 de 05 	call	0xbbc	; 0xbbc <vPortYield>
    1096:	03 c0       	rjmp	.+6      	; 0x109e <xQueueGenericSend+0x66>
    1098:	81 11       	cpse	r24, r1
    109a:	0e 94 de 05 	call	0xbbc	; 0xbbc <vPortYield>
    109e:	0f 90       	pop	r0
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	4d c0       	rjmp	.+154    	; 0x1140 <xQueueGenericSend+0x108>
    10a6:	8c 81       	ldd	r24, Y+4	; 0x04
    10a8:	9d 81       	ldd	r25, Y+5	; 0x05
    10aa:	89 2b       	or	r24, r25
    10ac:	21 f4       	brne	.+8      	; 0x10b6 <xQueueGenericSend+0x7e>
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	45 c0       	rjmp	.+138    	; 0x1140 <xQueueGenericSend+0x108>
    10b6:	d1 10       	cpse	r13, r1
    10b8:	06 c0       	rjmp	.+12     	; 0x10c6 <xQueueGenericSend+0x8e>
    10ba:	ce 01       	movw	r24, r28
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <vTaskInternalSetTimeOutState>
    10c2:	dd 24       	eor	r13, r13
    10c4:	d3 94       	inc	r13
    10c6:	0f 90       	pop	r0
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <vTaskSuspendAll>
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	0f 92       	push	r0
    10d4:	f8 01       	movw	r30, r16
    10d6:	85 8d       	ldd	r24, Z+29	; 0x1d
    10d8:	8f 3f       	cpi	r24, 0xFF	; 255
    10da:	09 f4       	brne	.+2      	; 0x10de <xQueueGenericSend+0xa6>
    10dc:	15 8e       	std	Z+29, r1	; 0x1d
    10de:	f8 01       	movw	r30, r16
    10e0:	86 8d       	ldd	r24, Z+30	; 0x1e
    10e2:	8f 3f       	cpi	r24, 0xFF	; 255
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <xQueueGenericSend+0xb0>
    10e6:	16 8e       	std	Z+30, r1	; 0x1e
    10e8:	0f 90       	pop	r0
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	be 01       	movw	r22, r28
    10ee:	6c 5f       	subi	r22, 0xFC	; 252
    10f0:	7f 4f       	sbci	r23, 0xFF	; 255
    10f2:	ce 01       	movw	r24, r28
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <xTaskCheckForTimeOut>
    10fa:	81 11       	cpse	r24, r1
    10fc:	1b c0       	rjmp	.+54     	; 0x1134 <xQueueGenericSend+0xfc>
    10fe:	c8 01       	movw	r24, r16
    1100:	0e 94 a3 06 	call	0xd46	; 0xd46 <prvIsQueueFull>
    1104:	88 23       	and	r24, r24
    1106:	81 f0       	breq	.+32     	; 0x1128 <xQueueGenericSend+0xf0>
    1108:	6c 81       	ldd	r22, Y+4	; 0x04
    110a:	7d 81       	ldd	r23, Y+5	; 0x05
    110c:	c8 01       	movw	r24, r16
    110e:	08 96       	adiw	r24, 0x08	; 8
    1110:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <vTaskPlaceOnEventList>
    1114:	c8 01       	movw	r24, r16
    1116:	0e 94 2a 07 	call	0xe54	; 0xe54 <prvUnlockQueue>
    111a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <xTaskResumeAll>
    111e:	81 11       	cpse	r24, r1
    1120:	9e cf       	rjmp	.-196    	; 0x105e <xQueueGenericSend+0x26>
    1122:	0e 94 de 05 	call	0xbbc	; 0xbbc <vPortYield>
    1126:	9b cf       	rjmp	.-202    	; 0x105e <xQueueGenericSend+0x26>
    1128:	c8 01       	movw	r24, r16
    112a:	0e 94 2a 07 	call	0xe54	; 0xe54 <prvUnlockQueue>
    112e:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <xTaskResumeAll>
    1132:	95 cf       	rjmp	.-214    	; 0x105e <xQueueGenericSend+0x26>
    1134:	c8 01       	movw	r24, r16
    1136:	0e 94 2a 07 	call	0xe54	; 0xe54 <prvUnlockQueue>
    113a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <xTaskResumeAll>
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	ff 90       	pop	r15
    1154:	ef 90       	pop	r14
    1156:	df 90       	pop	r13
    1158:	cf 90       	pop	r12
    115a:	08 95       	ret

0000115c <xQueueGenericSendFromISR>:
    115c:	ef 92       	push	r14
    115e:	ff 92       	push	r15
    1160:	0f 93       	push	r16
    1162:	1f 93       	push	r17
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	8a 01       	movw	r16, r20
    116a:	fc 01       	movw	r30, r24
    116c:	52 8d       	ldd	r21, Z+26	; 0x1a
    116e:	33 8d       	ldd	r19, Z+27	; 0x1b
    1170:	53 17       	cp	r21, r19
    1172:	10 f0       	brcs	.+4      	; 0x1178 <xQueueGenericSendFromISR+0x1c>
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	01 f5       	brne	.+64     	; 0x11b8 <xQueueGenericSendFromISR+0x5c>
    1178:	42 2f       	mov	r20, r18
    117a:	78 01       	movw	r14, r16
    117c:	ec 01       	movw	r28, r24
    117e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1180:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1182:	ce 01       	movw	r24, r28
    1184:	0e 94 b1 06 	call	0xd62	; 0xd62 <prvCopyDataToQueue>
    1188:	1f 3f       	cpi	r17, 0xFF	; 255
    118a:	81 f4       	brne	.+32     	; 0x11ac <xQueueGenericSendFromISR+0x50>
    118c:	89 89       	ldd	r24, Y+17	; 0x11
    118e:	88 23       	and	r24, r24
    1190:	a9 f0       	breq	.+42     	; 0x11bc <xQueueGenericSendFromISR+0x60>
    1192:	ce 01       	movw	r24, r28
    1194:	41 96       	adiw	r24, 0x11	; 17
    1196:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <xTaskRemoveFromEventList>
    119a:	88 23       	and	r24, r24
    119c:	89 f0       	breq	.+34     	; 0x11c0 <xQueueGenericSendFromISR+0x64>
    119e:	e1 14       	cp	r14, r1
    11a0:	f1 04       	cpc	r15, r1
    11a2:	81 f0       	breq	.+32     	; 0x11c4 <xQueueGenericSendFromISR+0x68>
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	f7 01       	movw	r30, r14
    11a8:	80 83       	st	Z, r24
    11aa:	0d c0       	rjmp	.+26     	; 0x11c6 <xQueueGenericSendFromISR+0x6a>
    11ac:	ff 24       	eor	r15, r15
    11ae:	f3 94       	inc	r15
    11b0:	f1 0e       	add	r15, r17
    11b2:	fe 8e       	std	Y+30, r15	; 0x1e
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	07 c0       	rjmp	.+14     	; 0x11c6 <xQueueGenericSendFromISR+0x6a>
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	05 c0       	rjmp	.+10     	; 0x11c6 <xQueueGenericSendFromISR+0x6a>
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	03 c0       	rjmp	.+6      	; 0x11c6 <xQueueGenericSendFromISR+0x6a>
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <xQueueGenericSendFromISR+0x6a>
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	1f 91       	pop	r17
    11cc:	0f 91       	pop	r16
    11ce:	ff 90       	pop	r15
    11d0:	ef 90       	pop	r14
    11d2:	08 95       	ret

000011d4 <xQueueReceive>:
    11d4:	cf 92       	push	r12
    11d6:	df 92       	push	r13
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <xQueueReceive+0x12>
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <xQueueReceive+0x14>
    11e8:	1f 92       	push	r1
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	8c 01       	movw	r16, r24
    11f0:	6b 01       	movw	r12, r22
    11f2:	5d 83       	std	Y+5, r21	; 0x05
    11f4:	4c 83       	std	Y+4, r20	; 0x04
    11f6:	e1 2c       	mov	r14, r1
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	0f 92       	push	r0
    11fe:	f8 01       	movw	r30, r16
    1200:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1202:	ff 20       	and	r15, r15
    1204:	a9 f0       	breq	.+42     	; 0x1230 <xQueueReceive+0x5c>
    1206:	b6 01       	movw	r22, r12
    1208:	c8 01       	movw	r24, r16
    120a:	0e 94 10 07 	call	0xe20	; 0xe20 <prvCopyDataFromQueue>
    120e:	fa 94       	dec	r15
    1210:	f8 01       	movw	r30, r16
    1212:	f2 8e       	std	Z+26, r15	; 0x1a
    1214:	80 85       	ldd	r24, Z+8	; 0x08
    1216:	88 23       	and	r24, r24
    1218:	39 f0       	breq	.+14     	; 0x1228 <xQueueReceive+0x54>
    121a:	c8 01       	movw	r24, r16
    121c:	08 96       	adiw	r24, 0x08	; 8
    121e:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <xTaskRemoveFromEventList>
    1222:	81 11       	cpse	r24, r1
    1224:	0e 94 de 05 	call	0xbbc	; 0xbbc <vPortYield>
    1228:	0f 90       	pop	r0
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	53 c0       	rjmp	.+166    	; 0x12d6 <xQueueReceive+0x102>
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	9d 81       	ldd	r25, Y+5	; 0x05
    1234:	89 2b       	or	r24, r25
    1236:	21 f4       	brne	.+8      	; 0x1240 <xQueueReceive+0x6c>
    1238:	0f 90       	pop	r0
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	4b c0       	rjmp	.+150    	; 0x12d6 <xQueueReceive+0x102>
    1240:	e1 10       	cpse	r14, r1
    1242:	06 c0       	rjmp	.+12     	; 0x1250 <xQueueReceive+0x7c>
    1244:	ce 01       	movw	r24, r28
    1246:	01 96       	adiw	r24, 0x01	; 1
    1248:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <vTaskInternalSetTimeOutState>
    124c:	ee 24       	eor	r14, r14
    124e:	e3 94       	inc	r14
    1250:	0f 90       	pop	r0
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <vTaskSuspendAll>
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	0f 92       	push	r0
    125e:	f8 01       	movw	r30, r16
    1260:	85 8d       	ldd	r24, Z+29	; 0x1d
    1262:	8f 3f       	cpi	r24, 0xFF	; 255
    1264:	09 f4       	brne	.+2      	; 0x1268 <xQueueReceive+0x94>
    1266:	15 8e       	std	Z+29, r1	; 0x1d
    1268:	f8 01       	movw	r30, r16
    126a:	86 8d       	ldd	r24, Z+30	; 0x1e
    126c:	8f 3f       	cpi	r24, 0xFF	; 255
    126e:	09 f4       	brne	.+2      	; 0x1272 <xQueueReceive+0x9e>
    1270:	16 8e       	std	Z+30, r1	; 0x1e
    1272:	0f 90       	pop	r0
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	be 01       	movw	r22, r28
    1278:	6c 5f       	subi	r22, 0xFC	; 252
    127a:	7f 4f       	sbci	r23, 0xFF	; 255
    127c:	ce 01       	movw	r24, r28
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <xTaskCheckForTimeOut>
    1284:	81 11       	cpse	r24, r1
    1286:	1b c0       	rjmp	.+54     	; 0x12be <xQueueReceive+0xea>
    1288:	c8 01       	movw	r24, r16
    128a:	0e 94 96 06 	call	0xd2c	; 0xd2c <prvIsQueueEmpty>
    128e:	88 23       	and	r24, r24
    1290:	81 f0       	breq	.+32     	; 0x12b2 <xQueueReceive+0xde>
    1292:	6c 81       	ldd	r22, Y+4	; 0x04
    1294:	7d 81       	ldd	r23, Y+5	; 0x05
    1296:	c8 01       	movw	r24, r16
    1298:	41 96       	adiw	r24, 0x11	; 17
    129a:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <vTaskPlaceOnEventList>
    129e:	c8 01       	movw	r24, r16
    12a0:	0e 94 2a 07 	call	0xe54	; 0xe54 <prvUnlockQueue>
    12a4:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <xTaskResumeAll>
    12a8:	81 11       	cpse	r24, r1
    12aa:	a6 cf       	rjmp	.-180    	; 0x11f8 <xQueueReceive+0x24>
    12ac:	0e 94 de 05 	call	0xbbc	; 0xbbc <vPortYield>
    12b0:	a3 cf       	rjmp	.-186    	; 0x11f8 <xQueueReceive+0x24>
    12b2:	c8 01       	movw	r24, r16
    12b4:	0e 94 2a 07 	call	0xe54	; 0xe54 <prvUnlockQueue>
    12b8:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <xTaskResumeAll>
    12bc:	9d cf       	rjmp	.-198    	; 0x11f8 <xQueueReceive+0x24>
    12be:	c8 01       	movw	r24, r16
    12c0:	0e 94 2a 07 	call	0xe54	; 0xe54 <prvUnlockQueue>
    12c4:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <xTaskResumeAll>
    12c8:	c8 01       	movw	r24, r16
    12ca:	0e 94 96 06 	call	0xd2c	; 0xd2c <prvIsQueueEmpty>
    12ce:	88 23       	and	r24, r24
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <xQueueReceive+0x100>
    12d2:	92 cf       	rjmp	.-220    	; 0x11f8 <xQueueReceive+0x24>
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	ff 90       	pop	r15
    12ea:	ef 90       	pop	r14
    12ec:	df 90       	pop	r13
    12ee:	cf 90       	pop	r12
    12f0:	08 95       	ret

000012f2 <vQueueAddToRegistry>:
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	ec 01       	movw	r28, r24
    12f8:	61 15       	cp	r22, r1
    12fa:	71 05       	cpc	r23, r1
    12fc:	19 f5       	brne	.+70     	; 0x1344 <vQueueAddToRegistry+0x52>
    12fe:	a0 e0       	ldi	r26, 0x00	; 0
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	25 c0       	rjmp	.+74     	; 0x134e <vQueueAddToRegistry+0x5c>
    1304:	29 2f       	mov	r18, r25
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	f9 01       	movw	r30, r18
    130a:	ee 0f       	add	r30, r30
    130c:	ff 1f       	adc	r31, r31
    130e:	ee 0f       	add	r30, r30
    1310:	ff 1f       	adc	r31, r31
    1312:	e1 5c       	subi	r30, 0xC1	; 193
    1314:	fb 4f       	sbci	r31, 0xFB	; 251
    1316:	42 81       	ldd	r20, Z+2	; 0x02
    1318:	53 81       	ldd	r21, Z+3	; 0x03
    131a:	4c 17       	cp	r20, r28
    131c:	5d 07       	cpc	r21, r29
    131e:	11 f4       	brne	.+4      	; 0x1324 <vQueueAddToRegistry+0x32>
    1320:	df 01       	movw	r26, r30
    1322:	15 c0       	rjmp	.+42     	; 0x134e <vQueueAddToRegistry+0x5c>
    1324:	10 97       	sbiw	r26, 0x00	; 0
    1326:	61 f4       	brne	.+24     	; 0x1340 <vQueueAddToRegistry+0x4e>
    1328:	f9 01       	movw	r30, r18
    132a:	ee 0f       	add	r30, r30
    132c:	ff 1f       	adc	r31, r31
    132e:	ee 0f       	add	r30, r30
    1330:	ff 1f       	adc	r31, r31
    1332:	e1 5c       	subi	r30, 0xC1	; 193
    1334:	fb 4f       	sbci	r31, 0xFB	; 251
    1336:	40 81       	ld	r20, Z
    1338:	51 81       	ldd	r21, Z+1	; 0x01
    133a:	45 2b       	or	r20, r21
    133c:	09 f4       	brne	.+2      	; 0x1340 <vQueueAddToRegistry+0x4e>
    133e:	df 01       	movw	r26, r30
    1340:	9f 5f       	subi	r25, 0xFF	; 255
    1342:	03 c0       	rjmp	.+6      	; 0x134a <vQueueAddToRegistry+0x58>
    1344:	a0 e0       	ldi	r26, 0x00	; 0
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	98 30       	cpi	r25, 0x08	; 8
    134c:	d8 f2       	brcs	.-74     	; 0x1304 <vQueueAddToRegistry+0x12>
    134e:	10 97       	sbiw	r26, 0x00	; 0
    1350:	39 f0       	breq	.+14     	; 0x1360 <vQueueAddToRegistry+0x6e>
    1352:	11 96       	adiw	r26, 0x01	; 1
    1354:	7c 93       	st	X, r23
    1356:	6e 93       	st	-X, r22
    1358:	13 96       	adiw	r26, 0x03	; 3
    135a:	dc 93       	st	X, r29
    135c:	ce 93       	st	-X, r28
    135e:	12 97       	sbiw	r26, 0x02	; 2
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	08 95       	ret

00001366 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	0f 92       	push	r0
    1372:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1374:	8f 3f       	cpi	r24, 0xFF	; 255
    1376:	09 f4       	brne	.+2      	; 0x137a <vQueueWaitForMessageRestricted+0x14>
    1378:	1d 8e       	std	Y+29, r1	; 0x1d
    137a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    137c:	8f 3f       	cpi	r24, 0xFF	; 255
    137e:	09 f4       	brne	.+2      	; 0x1382 <vQueueWaitForMessageRestricted+0x1c>
    1380:	1e 8e       	std	Y+30, r1	; 0x1e
    1382:	0f 90       	pop	r0
    1384:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1386:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1388:	81 11       	cpse	r24, r1
    138a:	04 c0       	rjmp	.+8      	; 0x1394 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    138c:	ce 01       	movw	r24, r28
    138e:	41 96       	adiw	r24, 0x11	; 17
    1390:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1394:	ce 01       	movw	r24, r28
    1396:	0e 94 2a 07 	call	0xe54	; 0xe54 <prvUnlockQueue>
    }
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	08 95       	ret

000013a0 <prvResetNextTaskUnblockTime>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    13a0:	e0 91 de 03 	lds	r30, 0x03DE	; 0x8003de <pxDelayedTaskList>
    13a4:	f0 91 df 03 	lds	r31, 0x03DF	; 0x8003df <pxDelayedTaskList+0x1>
    13a8:	80 81       	ld	r24, Z
    13aa:	81 11       	cpse	r24, r1
    13ac:	07 c0       	rjmp	.+14     	; 0x13bc <prvResetNextTaskUnblockTime+0x1c>
    13ae:	8f ef       	ldi	r24, 0xFF	; 255
    13b0:	9f ef       	ldi	r25, 0xFF	; 255
    13b2:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <xNextTaskUnblockTime+0x1>
    13b6:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <xNextTaskUnblockTime>
    13ba:	08 95       	ret
    13bc:	e0 91 de 03 	lds	r30, 0x03DE	; 0x8003de <pxDelayedTaskList>
    13c0:	f0 91 df 03 	lds	r31, 0x03DF	; 0x8003df <pxDelayedTaskList+0x1>
    13c4:	05 80       	ldd	r0, Z+5	; 0x05
    13c6:	f6 81       	ldd	r31, Z+6	; 0x06
    13c8:	e0 2d       	mov	r30, r0
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <xNextTaskUnblockTime+0x1>
    13d2:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <xNextTaskUnblockTime>
    13d6:	08 95       	ret

000013d8 <prvDeleteTCB>:
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	ec 01       	movw	r28, r24
    13de:	8f 89       	ldd	r24, Y+23	; 0x17
    13e0:	98 8d       	ldd	r25, Y+24	; 0x18
    13e2:	0e 94 9d 04 	call	0x93a	; 0x93a <vPortFree>
    13e6:	ce 01       	movw	r24, r28
    13e8:	0e 94 9d 04 	call	0x93a	; 0x93a <vPortFree>
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	08 95       	ret

000013f2 <prvInitialiseNewTask>:
    13f2:	2f 92       	push	r2
    13f4:	3f 92       	push	r3
    13f6:	4f 92       	push	r4
    13f8:	5f 92       	push	r5
    13fa:	6f 92       	push	r6
    13fc:	7f 92       	push	r7
    13fe:	8f 92       	push	r8
    1400:	9f 92       	push	r9
    1402:	af 92       	push	r10
    1404:	bf 92       	push	r11
    1406:	cf 92       	push	r12
    1408:	df 92       	push	r13
    140a:	ef 92       	push	r14
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	1c 01       	movw	r2, r24
    141a:	4b 01       	movw	r8, r22
    141c:	29 01       	movw	r4, r18
    141e:	3a 01       	movw	r6, r20
    1420:	a9 01       	movw	r20, r18
    1422:	65 ea       	ldi	r22, 0xA5	; 165
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	d5 01       	movw	r26, r10
    1428:	57 96       	adiw	r26, 0x17	; 23
    142a:	8d 91       	ld	r24, X+
    142c:	9c 91       	ld	r25, X
    142e:	58 97       	sbiw	r26, 0x18	; 24
    1430:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <memset>
    1434:	f5 01       	movw	r30, r10
    1436:	87 89       	ldd	r24, Z+23	; 0x17
    1438:	90 8d       	ldd	r25, Z+24	; 0x18
    143a:	f1 e0       	ldi	r31, 0x01	; 1
    143c:	4f 1a       	sub	r4, r31
    143e:	51 08       	sbc	r5, r1
    1440:	48 0e       	add	r4, r24
    1442:	59 1e       	adc	r5, r25
    1444:	81 14       	cp	r8, r1
    1446:	91 04       	cpc	r9, r1
    1448:	89 f4       	brne	.+34     	; 0x146c <prvInitialiseNewTask+0x7a>
    144a:	17 c0       	rjmp	.+46     	; 0x147a <prvInitialiseNewTask+0x88>
    144c:	82 2f       	mov	r24, r18
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	f4 01       	movw	r30, r8
    1452:	e8 0f       	add	r30, r24
    1454:	f9 1f       	adc	r31, r25
    1456:	30 81       	ld	r19, Z
    1458:	d5 01       	movw	r26, r10
    145a:	a8 0f       	add	r26, r24
    145c:	b9 1f       	adc	r27, r25
    145e:	59 96       	adiw	r26, 0x19	; 25
    1460:	3c 93       	st	X, r19
    1462:	80 81       	ld	r24, Z
    1464:	88 23       	and	r24, r24
    1466:	29 f0       	breq	.+10     	; 0x1472 <prvInitialiseNewTask+0x80>
    1468:	2f 5f       	subi	r18, 0xFF	; 255
    146a:	01 c0       	rjmp	.+2      	; 0x146e <prvInitialiseNewTask+0x7c>
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	2a 30       	cpi	r18, 0x0A	; 10
    1470:	68 f3       	brcs	.-38     	; 0x144c <prvInitialiseNewTask+0x5a>
    1472:	d5 01       	movw	r26, r10
    1474:	92 96       	adiw	r26, 0x22	; 34
    1476:	1c 92       	st	X, r1
    1478:	02 c0       	rjmp	.+4      	; 0x147e <prvInitialiseNewTask+0x8c>
    147a:	f5 01       	movw	r30, r10
    147c:	11 8e       	std	Z+25, r1	; 0x19
    147e:	f4 e0       	ldi	r31, 0x04	; 4
    1480:	fe 15       	cp	r31, r14
    1482:	18 f4       	brcc	.+6      	; 0x148a <prvInitialiseNewTask+0x98>
    1484:	68 94       	set
    1486:	ee 24       	eor	r14, r14
    1488:	e2 f8       	bld	r14, 2
    148a:	d5 01       	movw	r26, r10
    148c:	56 96       	adiw	r26, 0x16	; 22
    148e:	ec 92       	st	X, r14
    1490:	56 97       	sbiw	r26, 0x16	; 22
    1492:	95 96       	adiw	r26, 0x25	; 37
    1494:	ec 92       	st	X, r14
    1496:	95 97       	sbiw	r26, 0x25	; 37
    1498:	96 96       	adiw	r26, 0x26	; 38
    149a:	1c 92       	st	X, r1
    149c:	c5 01       	movw	r24, r10
    149e:	02 96       	adiw	r24, 0x02	; 2
    14a0:	0e 94 de 04 	call	0x9bc	; 0x9bc <vListInitialiseItem>
    14a4:	c5 01       	movw	r24, r10
    14a6:	0c 96       	adiw	r24, 0x0c	; 12
    14a8:	0e 94 de 04 	call	0x9bc	; 0x9bc <vListInitialiseItem>
    14ac:	f5 01       	movw	r30, r10
    14ae:	b1 86       	std	Z+9, r11	; 0x09
    14b0:	a0 86       	std	Z+8, r10	; 0x08
    14b2:	85 e0       	ldi	r24, 0x05	; 5
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	8e 19       	sub	r24, r14
    14b8:	91 09       	sbc	r25, r1
    14ba:	95 87       	std	Z+13, r25	; 0x0d
    14bc:	84 87       	std	Z+12, r24	; 0x0c
    14be:	b3 8a       	std	Z+19, r11	; 0x13
    14c0:	a2 8a       	std	Z+18, r10	; 0x12
    14c2:	84 e0       	ldi	r24, 0x04	; 4
    14c4:	b7 96       	adiw	r30, 0x27	; 39
    14c6:	df 01       	movw	r26, r30
    14c8:	1d 92       	st	X+, r1
    14ca:	8a 95       	dec	r24
    14cc:	e9 f7       	brne	.-6      	; 0x14c8 <prvInitialiseNewTask+0xd6>
    14ce:	f5 01       	movw	r30, r10
    14d0:	13 a6       	std	Z+43, r1	; 0x2b
    14d2:	a8 01       	movw	r20, r16
    14d4:	b1 01       	movw	r22, r2
    14d6:	c2 01       	movw	r24, r4
    14d8:	0e 94 43 05 	call	0xa86	; 0xa86 <pxPortInitialiseStack>
    14dc:	d5 01       	movw	r26, r10
    14de:	8d 93       	st	X+, r24
    14e0:	9c 93       	st	X, r25
    14e2:	c1 14       	cp	r12, r1
    14e4:	d1 04       	cpc	r13, r1
    14e6:	19 f0       	breq	.+6      	; 0x14ee <prvInitialiseNewTask+0xfc>
    14e8:	f6 01       	movw	r30, r12
    14ea:	b1 82       	std	Z+1, r11	; 0x01
    14ec:	a0 82       	st	Z, r10
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ef 90       	pop	r14
    14f8:	df 90       	pop	r13
    14fa:	cf 90       	pop	r12
    14fc:	bf 90       	pop	r11
    14fe:	af 90       	pop	r10
    1500:	9f 90       	pop	r9
    1502:	8f 90       	pop	r8
    1504:	7f 90       	pop	r7
    1506:	6f 90       	pop	r6
    1508:	5f 90       	pop	r5
    150a:	4f 90       	pop	r4
    150c:	3f 90       	pop	r3
    150e:	2f 90       	pop	r2
    1510:	08 95       	ret

00001512 <prvInitialiseTaskLists>:
    1512:	cf 93       	push	r28
    1514:	c0 e0       	ldi	r28, 0x00	; 0
    1516:	10 c0       	rjmp	.+32     	; 0x1538 <prvInitialiseTaskLists+0x26>
    1518:	8c 2f       	mov	r24, r28
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	9c 01       	movw	r18, r24
    151e:	22 0f       	add	r18, r18
    1520:	33 1f       	adc	r19, r19
    1522:	22 0f       	add	r18, r18
    1524:	33 1f       	adc	r19, r19
    1526:	22 0f       	add	r18, r18
    1528:	33 1f       	adc	r19, r19
    152a:	82 0f       	add	r24, r18
    152c:	93 1f       	adc	r25, r19
    152e:	8e 50       	subi	r24, 0x0E	; 14
    1530:	9c 4f       	sbci	r25, 0xFC	; 252
    1532:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <vListInitialise>
    1536:	cf 5f       	subi	r28, 0xFF	; 255
    1538:	c5 30       	cpi	r28, 0x05	; 5
    153a:	70 f3       	brcs	.-36     	; 0x1518 <prvInitialiseTaskLists+0x6>
    153c:	89 ee       	ldi	r24, 0xE9	; 233
    153e:	93 e0       	ldi	r25, 0x03	; 3
    1540:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <vListInitialise>
    1544:	80 ee       	ldi	r24, 0xE0	; 224
    1546:	93 e0       	ldi	r25, 0x03	; 3
    1548:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <vListInitialise>
    154c:	83 ed       	ldi	r24, 0xD3	; 211
    154e:	93 e0       	ldi	r25, 0x03	; 3
    1550:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <vListInitialise>
    1554:	8a ec       	ldi	r24, 0xCA	; 202
    1556:	93 e0       	ldi	r25, 0x03	; 3
    1558:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <vListInitialise>
    155c:	80 ec       	ldi	r24, 0xC0	; 192
    155e:	93 e0       	ldi	r25, 0x03	; 3
    1560:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <vListInitialise>
    1564:	89 ee       	ldi	r24, 0xE9	; 233
    1566:	93 e0       	ldi	r25, 0x03	; 3
    1568:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <pxDelayedTaskList+0x1>
    156c:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <pxDelayedTaskList>
    1570:	80 ee       	ldi	r24, 0xE0	; 224
    1572:	93 e0       	ldi	r25, 0x03	; 3
    1574:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <pxOverflowDelayedTaskList+0x1>
    1578:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <pxOverflowDelayedTaskList>
    157c:	cf 91       	pop	r28
    157e:	08 95       	ret

00001580 <prvAddNewTaskToReadyList>:
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	ec 01       	movw	r28, r24
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	0f 92       	push	r0
    158c:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <uxCurrentNumberOfTasks>
    1590:	8f 5f       	subi	r24, 0xFF	; 255
    1592:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <uxCurrentNumberOfTasks>
    1596:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <pxCurrentTCB>
    159a:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    159e:	89 2b       	or	r24, r25
    15a0:	59 f4       	brne	.+22     	; 0x15b8 <prvAddNewTaskToReadyList+0x38>
    15a2:	d0 93 20 04 	sts	0x0420, r29	; 0x800420 <pxCurrentTCB+0x1>
    15a6:	c0 93 1f 04 	sts	0x041F, r28	; 0x80041f <pxCurrentTCB>
    15aa:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <uxCurrentNumberOfTasks>
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	99 f4       	brne	.+38     	; 0x15d8 <prvAddNewTaskToReadyList+0x58>
    15b2:	0e 94 89 0a 	call	0x1512	; 0x1512 <prvInitialiseTaskLists>
    15b6:	10 c0       	rjmp	.+32     	; 0x15d8 <prvAddNewTaskToReadyList+0x58>
    15b8:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <xSchedulerRunning>
    15bc:	81 11       	cpse	r24, r1
    15be:	0c c0       	rjmp	.+24     	; 0x15d8 <prvAddNewTaskToReadyList+0x58>
    15c0:	e0 91 1f 04 	lds	r30, 0x041F	; 0x80041f <pxCurrentTCB>
    15c4:	f0 91 20 04 	lds	r31, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    15c8:	96 89       	ldd	r25, Z+22	; 0x16
    15ca:	8e 89       	ldd	r24, Y+22	; 0x16
    15cc:	89 17       	cp	r24, r25
    15ce:	20 f0       	brcs	.+8      	; 0x15d8 <prvAddNewTaskToReadyList+0x58>
    15d0:	d0 93 20 04 	sts	0x0420, r29	; 0x800420 <pxCurrentTCB+0x1>
    15d4:	c0 93 1f 04 	sts	0x041F, r28	; 0x80041f <pxCurrentTCB>
    15d8:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <uxTaskNumber>
    15dc:	8f 5f       	subi	r24, 0xFF	; 255
    15de:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <uxTaskNumber>
    15e2:	8b a3       	std	Y+35, r24	; 0x23
    15e4:	8e 89       	ldd	r24, Y+22	; 0x16
    15e6:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <uxTopReadyPriority>
    15ea:	98 17       	cp	r25, r24
    15ec:	10 f4       	brcc	.+4      	; 0x15f2 <prvAddNewTaskToReadyList+0x72>
    15ee:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <uxTopReadyPriority>
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	fc 01       	movw	r30, r24
    15f6:	ee 0f       	add	r30, r30
    15f8:	ff 1f       	adc	r31, r31
    15fa:	ee 0f       	add	r30, r30
    15fc:	ff 1f       	adc	r31, r31
    15fe:	ee 0f       	add	r30, r30
    1600:	ff 1f       	adc	r31, r31
    1602:	8e 0f       	add	r24, r30
    1604:	9f 1f       	adc	r25, r31
    1606:	fc 01       	movw	r30, r24
    1608:	ee 50       	subi	r30, 0x0E	; 14
    160a:	fc 4f       	sbci	r31, 0xFC	; 252
    160c:	01 80       	ldd	r0, Z+1	; 0x01
    160e:	f2 81       	ldd	r31, Z+2	; 0x02
    1610:	e0 2d       	mov	r30, r0
    1612:	fd 83       	std	Y+5, r31	; 0x05
    1614:	ec 83       	std	Y+4, r30	; 0x04
    1616:	84 81       	ldd	r24, Z+4	; 0x04
    1618:	95 81       	ldd	r25, Z+5	; 0x05
    161a:	9f 83       	std	Y+7, r25	; 0x07
    161c:	8e 83       	std	Y+6, r24	; 0x06
    161e:	a4 81       	ldd	r26, Z+4	; 0x04
    1620:	b5 81       	ldd	r27, Z+5	; 0x05
    1622:	ce 01       	movw	r24, r28
    1624:	02 96       	adiw	r24, 0x02	; 2
    1626:	13 96       	adiw	r26, 0x03	; 3
    1628:	9c 93       	st	X, r25
    162a:	8e 93       	st	-X, r24
    162c:	12 97       	sbiw	r26, 0x02	; 2
    162e:	95 83       	std	Z+5, r25	; 0x05
    1630:	84 83       	std	Z+4, r24	; 0x04
    1632:	ee 89       	ldd	r30, Y+22	; 0x16
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	cf 01       	movw	r24, r30
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	e8 0f       	add	r30, r24
    1646:	f9 1f       	adc	r31, r25
    1648:	ee 50       	subi	r30, 0x0E	; 14
    164a:	fc 4f       	sbci	r31, 0xFC	; 252
    164c:	fb 87       	std	Y+11, r31	; 0x0b
    164e:	ea 87       	std	Y+10, r30	; 0x0a
    1650:	80 81       	ld	r24, Z
    1652:	8f 5f       	subi	r24, 0xFF	; 255
    1654:	80 83       	st	Z, r24
    1656:	0f 90       	pop	r0
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <xSchedulerRunning>
    165e:	88 23       	and	r24, r24
    1660:	51 f0       	breq	.+20     	; 0x1676 <prvAddNewTaskToReadyList+0xf6>
    1662:	e0 91 1f 04 	lds	r30, 0x041F	; 0x80041f <pxCurrentTCB>
    1666:	f0 91 20 04 	lds	r31, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    166a:	96 89       	ldd	r25, Z+22	; 0x16
    166c:	8e 89       	ldd	r24, Y+22	; 0x16
    166e:	98 17       	cp	r25, r24
    1670:	10 f4       	brcc	.+4      	; 0x1676 <prvAddNewTaskToReadyList+0xf6>
    1672:	0e 94 de 05 	call	0xbbc	; 0xbbc <vPortYield>
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	08 95       	ret

0000167c <prvCheckTasksWaitingTermination>:
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	1c c0       	rjmp	.+56     	; 0x16ba <prvCheckTasksWaitingTermination+0x3e>
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	0f 92       	push	r0
    1688:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <xTasksWaitingTermination+0x5>
    168c:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <xTasksWaitingTermination+0x6>
    1690:	c6 81       	ldd	r28, Z+6	; 0x06
    1692:	d7 81       	ldd	r29, Z+7	; 0x07
    1694:	ce 01       	movw	r24, r28
    1696:	02 96       	adiw	r24, 0x02	; 2
    1698:	0e 94 13 05 	call	0xa26	; 0xa26 <uxListRemove>
    169c:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <uxCurrentNumberOfTasks>
    16a0:	81 50       	subi	r24, 0x01	; 1
    16a2:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <uxCurrentNumberOfTasks>
    16a6:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <uxDeletedTasksWaitingCleanUp>
    16aa:	81 50       	subi	r24, 0x01	; 1
    16ac:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <uxDeletedTasksWaitingCleanUp>
    16b0:	0f 90       	pop	r0
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	ce 01       	movw	r24, r28
    16b6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <prvDeleteTCB>
    16ba:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <uxDeletedTasksWaitingCleanUp>
    16be:	81 11       	cpse	r24, r1
    16c0:	e0 cf       	rjmp	.-64     	; 0x1682 <prvCheckTasksWaitingTermination+0x6>
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	08 95       	ret

000016c8 <prvIdleTask>:
    16c8:	0e 94 3e 0b 	call	0x167c	; 0x167c <prvCheckTasksWaitingTermination>
    16cc:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <pxReadyTasksLists>
    16d0:	82 30       	cpi	r24, 0x02	; 2
    16d2:	d0 f3       	brcs	.-12     	; 0x16c8 <prvIdleTask>
    16d4:	0e 94 de 05 	call	0xbbc	; 0xbbc <vPortYield>
    16d8:	f7 cf       	rjmp	.-18     	; 0x16c8 <prvIdleTask>

000016da <prvAddCurrentTaskToDelayedList>:
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	ec 01       	movw	r28, r24
    16e6:	f6 2e       	mov	r15, r22
    16e8:	00 91 bd 03 	lds	r16, 0x03BD	; 0x8003bd <xTickCount>
    16ec:	10 91 be 03 	lds	r17, 0x03BE	; 0x8003be <xTickCount+0x1>
    16f0:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <pxCurrentTCB>
    16f4:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    16f8:	02 96       	adiw	r24, 0x02	; 2
    16fa:	0e 94 13 05 	call	0xa26	; 0xa26 <uxListRemove>
    16fe:	cf 3f       	cpi	r28, 0xFF	; 255
    1700:	8f ef       	ldi	r24, 0xFF	; 255
    1702:	d8 07       	cpc	r29, r24
    1704:	b1 f5       	brne	.+108    	; 0x1772 <prvAddCurrentTaskToDelayedList+0x98>
    1706:	ff 20       	and	r15, r15
    1708:	a1 f1       	breq	.+104    	; 0x1772 <prvAddCurrentTaskToDelayedList+0x98>
    170a:	e0 ec       	ldi	r30, 0xC0	; 192
    170c:	f3 e0       	ldi	r31, 0x03	; 3
    170e:	a1 81       	ldd	r26, Z+1	; 0x01
    1710:	b2 81       	ldd	r27, Z+2	; 0x02
    1712:	c0 91 1f 04 	lds	r28, 0x041F	; 0x80041f <pxCurrentTCB>
    1716:	d0 91 20 04 	lds	r29, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    171a:	bd 83       	std	Y+5, r27	; 0x05
    171c:	ac 83       	std	Y+4, r26	; 0x04
    171e:	c0 91 1f 04 	lds	r28, 0x041F	; 0x80041f <pxCurrentTCB>
    1722:	d0 91 20 04 	lds	r29, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    1726:	14 96       	adiw	r26, 0x04	; 4
    1728:	8d 91       	ld	r24, X+
    172a:	9c 91       	ld	r25, X
    172c:	15 97       	sbiw	r26, 0x05	; 5
    172e:	9f 83       	std	Y+7, r25	; 0x07
    1730:	8e 83       	std	Y+6, r24	; 0x06
    1732:	14 96       	adiw	r26, 0x04	; 4
    1734:	cd 91       	ld	r28, X+
    1736:	dc 91       	ld	r29, X
    1738:	15 97       	sbiw	r26, 0x05	; 5
    173a:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <pxCurrentTCB>
    173e:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    1742:	02 96       	adiw	r24, 0x02	; 2
    1744:	9b 83       	std	Y+3, r25	; 0x03
    1746:	8a 83       	std	Y+2, r24	; 0x02
    1748:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <pxCurrentTCB>
    174c:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    1750:	02 96       	adiw	r24, 0x02	; 2
    1752:	15 96       	adiw	r26, 0x05	; 5
    1754:	9c 93       	st	X, r25
    1756:	8e 93       	st	-X, r24
    1758:	14 97       	sbiw	r26, 0x04	; 4
    175a:	a0 91 1f 04 	lds	r26, 0x041F	; 0x80041f <pxCurrentTCB>
    175e:	b0 91 20 04 	lds	r27, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    1762:	1b 96       	adiw	r26, 0x0b	; 11
    1764:	fc 93       	st	X, r31
    1766:	ee 93       	st	-X, r30
    1768:	1a 97       	sbiw	r26, 0x0a	; 10
    176a:	80 81       	ld	r24, Z
    176c:	8f 5f       	subi	r24, 0xFF	; 255
    176e:	80 83       	st	Z, r24
    1770:	2f c0       	rjmp	.+94     	; 0x17d0 <prvAddCurrentTaskToDelayedList+0xf6>
    1772:	c0 0f       	add	r28, r16
    1774:	d1 1f       	adc	r29, r17
    1776:	e0 91 1f 04 	lds	r30, 0x041F	; 0x80041f <pxCurrentTCB>
    177a:	f0 91 20 04 	lds	r31, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    177e:	d3 83       	std	Z+3, r29	; 0x03
    1780:	c2 83       	std	Z+2, r28	; 0x02
    1782:	c0 17       	cp	r28, r16
    1784:	d1 07       	cpc	r29, r17
    1786:	68 f4       	brcc	.+26     	; 0x17a2 <prvAddCurrentTaskToDelayedList+0xc8>
    1788:	60 91 1f 04 	lds	r22, 0x041F	; 0x80041f <pxCurrentTCB>
    178c:	70 91 20 04 	lds	r23, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    1790:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <pxOverflowDelayedTaskList>
    1794:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <pxOverflowDelayedTaskList+0x1>
    1798:	6e 5f       	subi	r22, 0xFE	; 254
    179a:	7f 4f       	sbci	r23, 0xFF	; 255
    179c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vListInsert>
    17a0:	17 c0       	rjmp	.+46     	; 0x17d0 <prvAddCurrentTaskToDelayedList+0xf6>
    17a2:	60 91 1f 04 	lds	r22, 0x041F	; 0x80041f <pxCurrentTCB>
    17a6:	70 91 20 04 	lds	r23, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    17aa:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <pxDelayedTaskList>
    17ae:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <pxDelayedTaskList+0x1>
    17b2:	6e 5f       	subi	r22, 0xFE	; 254
    17b4:	7f 4f       	sbci	r23, 0xFF	; 255
    17b6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vListInsert>
    17ba:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <xNextTaskUnblockTime>
    17be:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <xNextTaskUnblockTime+0x1>
    17c2:	c8 17       	cp	r28, r24
    17c4:	d9 07       	cpc	r29, r25
    17c6:	20 f4       	brcc	.+8      	; 0x17d0 <prvAddCurrentTaskToDelayedList+0xf6>
    17c8:	d0 93 b5 03 	sts	0x03B5, r29	; 0x8003b5 <xNextTaskUnblockTime+0x1>
    17cc:	c0 93 b4 03 	sts	0x03B4, r28	; 0x8003b4 <xNextTaskUnblockTime>
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	ff 90       	pop	r15
    17da:	08 95       	ret

000017dc <xTaskCreate>:
    17dc:	2f 92       	push	r2
    17de:	3f 92       	push	r3
    17e0:	4f 92       	push	r4
    17e2:	5f 92       	push	r5
    17e4:	6f 92       	push	r6
    17e6:	7f 92       	push	r7
    17e8:	8f 92       	push	r8
    17ea:	9f 92       	push	r9
    17ec:	af 92       	push	r10
    17ee:	bf 92       	push	r11
    17f0:	cf 92       	push	r12
    17f2:	df 92       	push	r13
    17f4:	ef 92       	push	r14
    17f6:	ff 92       	push	r15
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	3c 01       	movw	r6, r24
    1802:	1b 01       	movw	r2, r22
    1804:	5a 01       	movw	r10, r20
    1806:	29 01       	movw	r4, r18
    1808:	ca 01       	movw	r24, r20
    180a:	0e 94 08 04 	call	0x810	; 0x810 <pvPortMalloc>
    180e:	6c 01       	movw	r12, r24
    1810:	89 2b       	or	r24, r25
    1812:	71 f0       	breq	.+28     	; 0x1830 <xTaskCreate+0x54>
    1814:	8c e2       	ldi	r24, 0x2C	; 44
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	0e 94 08 04 	call	0x810	; 0x810 <pvPortMalloc>
    181c:	ec 01       	movw	r28, r24
    181e:	89 2b       	or	r24, r25
    1820:	19 f0       	breq	.+6      	; 0x1828 <xTaskCreate+0x4c>
    1822:	d8 8e       	std	Y+24, r13	; 0x18
    1824:	cf 8a       	std	Y+23, r12	; 0x17
    1826:	06 c0       	rjmp	.+12     	; 0x1834 <xTaskCreate+0x58>
    1828:	c6 01       	movw	r24, r12
    182a:	0e 94 9d 04 	call	0x93a	; 0x93a <vPortFree>
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <xTaskCreate+0x58>
    1830:	c0 e0       	ldi	r28, 0x00	; 0
    1832:	d0 e0       	ldi	r29, 0x00	; 0
    1834:	20 97       	sbiw	r28, 0x00	; 0
    1836:	91 f0       	breq	.+36     	; 0x185c <xTaskCreate+0x80>
    1838:	95 01       	movw	r18, r10
    183a:	40 e0       	ldi	r20, 0x00	; 0
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	81 2c       	mov	r8, r1
    1840:	91 2c       	mov	r9, r1
    1842:	5e 01       	movw	r10, r28
    1844:	67 01       	movw	r12, r14
    1846:	e0 2e       	mov	r14, r16
    1848:	82 01       	movw	r16, r4
    184a:	b1 01       	movw	r22, r2
    184c:	c3 01       	movw	r24, r6
    184e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <prvInitialiseNewTask>
    1852:	ce 01       	movw	r24, r28
    1854:	0e 94 c0 0a 	call	0x1580	; 0x1580 <prvAddNewTaskToReadyList>
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	01 c0       	rjmp	.+2      	; 0x185e <xTaskCreate+0x82>
    185c:	8f ef       	ldi	r24, 0xFF	; 255
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	0f 91       	pop	r16
    1866:	ff 90       	pop	r15
    1868:	ef 90       	pop	r14
    186a:	df 90       	pop	r13
    186c:	cf 90       	pop	r12
    186e:	bf 90       	pop	r11
    1870:	af 90       	pop	r10
    1872:	9f 90       	pop	r9
    1874:	8f 90       	pop	r8
    1876:	7f 90       	pop	r7
    1878:	6f 90       	pop	r6
    187a:	5f 90       	pop	r5
    187c:	4f 90       	pop	r4
    187e:	3f 90       	pop	r3
    1880:	2f 90       	pop	r2
    1882:	08 95       	ret

00001884 <vTaskStartScheduler>:
    1884:	ef 92       	push	r14
    1886:	ff 92       	push	r15
    1888:	0f 93       	push	r16
    188a:	0f 2e       	mov	r0, r31
    188c:	f2 eb       	ldi	r31, 0xB2	; 178
    188e:	ef 2e       	mov	r14, r31
    1890:	f3 e0       	ldi	r31, 0x03	; 3
    1892:	ff 2e       	mov	r15, r31
    1894:	f0 2d       	mov	r31, r0
    1896:	00 e0       	ldi	r16, 0x00	; 0
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	48 ec       	ldi	r20, 0xC8	; 200
    189e:	50 e0       	ldi	r21, 0x00	; 0
    18a0:	65 e6       	ldi	r22, 0x65	; 101
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	84 e6       	ldi	r24, 0x64	; 100
    18a6:	9b e0       	ldi	r25, 0x0B	; 11
    18a8:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <xTaskCreate>
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	11 f4       	brne	.+4      	; 0x18b4 <vTaskStartScheduler+0x30>
    18b0:	0e 94 b1 12 	call	0x2562	; 0x2562 <xTimerCreateTimerTask>
    18b4:	81 30       	cpi	r24, 0x01	; 1
    18b6:	81 f4       	brne	.+32     	; 0x18d8 <vTaskStartScheduler+0x54>
    18b8:	f8 94       	cli
    18ba:	8f ef       	ldi	r24, 0xFF	; 255
    18bc:	9f ef       	ldi	r25, 0xFF	; 255
    18be:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <xNextTaskUnblockTime+0x1>
    18c2:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <xNextTaskUnblockTime>
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <xSchedulerRunning>
    18cc:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <xTickCount+0x1>
    18d0:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <xTickCount>
    18d4:	0e 94 af 05 	call	0xb5e	; 0xb5e <xPortStartScheduler>
    18d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <uxTopUsedPriority>
    18dc:	0f 91       	pop	r16
    18de:	ff 90       	pop	r15
    18e0:	ef 90       	pop	r14
    18e2:	08 95       	ret

000018e4 <vTaskSuspendAll>:
    18e4:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <uxSchedulerSuspended>
    18e8:	8f 5f       	subi	r24, 0xFF	; 255
    18ea:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <uxSchedulerSuspended>
    18ee:	08 95       	ret

000018f0 <xTaskGetTickCount>:
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	0f 92       	push	r0
    18f6:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <xTickCount>
    18fa:	90 91 be 03 	lds	r25, 0x03BE	; 0x8003be <xTickCount+0x1>
    18fe:	0f 90       	pop	r0
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	08 95       	ret

00001904 <xTaskIncrementTick>:
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <uxSchedulerSuspended>
    1910:	81 11       	cpse	r24, r1
    1912:	eb c0       	rjmp	.+470    	; 0x1aea <xTaskIncrementTick+0x1e6>
    1914:	c0 91 bd 03 	lds	r28, 0x03BD	; 0x8003bd <xTickCount>
    1918:	d0 91 be 03 	lds	r29, 0x03BE	; 0x8003be <xTickCount+0x1>
    191c:	8e 01       	movw	r16, r28
    191e:	0f 5f       	subi	r16, 0xFF	; 255
    1920:	1f 4f       	sbci	r17, 0xFF	; 255
    1922:	10 93 be 03 	sts	0x03BE, r17	; 0x8003be <xTickCount+0x1>
    1926:	00 93 bd 03 	sts	0x03BD, r16	; 0x8003bd <xTickCount>
    192a:	01 15       	cp	r16, r1
    192c:	11 05       	cpc	r17, r1
    192e:	b9 f4       	brne	.+46     	; 0x195e <xTaskIncrementTick+0x5a>
    1930:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <pxDelayedTaskList>
    1934:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <pxDelayedTaskList+0x1>
    1938:	20 91 dc 03 	lds	r18, 0x03DC	; 0x8003dc <pxOverflowDelayedTaskList>
    193c:	30 91 dd 03 	lds	r19, 0x03DD	; 0x8003dd <pxOverflowDelayedTaskList+0x1>
    1940:	30 93 df 03 	sts	0x03DF, r19	; 0x8003df <pxDelayedTaskList+0x1>
    1944:	20 93 de 03 	sts	0x03DE, r18	; 0x8003de <pxDelayedTaskList>
    1948:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <pxOverflowDelayedTaskList+0x1>
    194c:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <pxOverflowDelayedTaskList>
    1950:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <xNumOfOverflows>
    1954:	8f 5f       	subi	r24, 0xFF	; 255
    1956:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <xNumOfOverflows>
    195a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <prvResetNextTaskUnblockTime>
    195e:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <xNextTaskUnblockTime>
    1962:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <xNextTaskUnblockTime+0x1>
    1966:	08 17       	cp	r16, r24
    1968:	19 07       	cpc	r17, r25
    196a:	20 f4       	brcc	.+8      	; 0x1974 <xTaskIncrementTick+0x70>
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	b8 c0       	rjmp	.+368    	; 0x1ae0 <xTaskIncrementTick+0x1dc>
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	01 c0       	rjmp	.+2      	; 0x1976 <xTaskIncrementTick+0x72>
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	e0 91 de 03 	lds	r30, 0x03DE	; 0x8003de <pxDelayedTaskList>
    197a:	f0 91 df 03 	lds	r31, 0x03DF	; 0x8003df <pxDelayedTaskList+0x1>
    197e:	90 81       	ld	r25, Z
    1980:	91 11       	cpse	r25, r1
    1982:	07 c0       	rjmp	.+14     	; 0x1992 <xTaskIncrementTick+0x8e>
    1984:	2f ef       	ldi	r18, 0xFF	; 255
    1986:	3f ef       	ldi	r19, 0xFF	; 255
    1988:	30 93 b5 03 	sts	0x03B5, r19	; 0x8003b5 <xNextTaskUnblockTime+0x1>
    198c:	20 93 b4 03 	sts	0x03B4, r18	; 0x8003b4 <xNextTaskUnblockTime>
    1990:	a7 c0       	rjmp	.+334    	; 0x1ae0 <xTaskIncrementTick+0x1dc>
    1992:	e0 91 de 03 	lds	r30, 0x03DE	; 0x8003de <pxDelayedTaskList>
    1996:	f0 91 df 03 	lds	r31, 0x03DF	; 0x8003df <pxDelayedTaskList+0x1>
    199a:	05 80       	ldd	r0, Z+5	; 0x05
    199c:	f6 81       	ldd	r31, Z+6	; 0x06
    199e:	e0 2d       	mov	r30, r0
    19a0:	06 80       	ldd	r0, Z+6	; 0x06
    19a2:	f7 81       	ldd	r31, Z+7	; 0x07
    19a4:	e0 2d       	mov	r30, r0
    19a6:	22 81       	ldd	r18, Z+2	; 0x02
    19a8:	33 81       	ldd	r19, Z+3	; 0x03
    19aa:	02 17       	cp	r16, r18
    19ac:	13 07       	cpc	r17, r19
    19ae:	28 f4       	brcc	.+10     	; 0x19ba <xTaskIncrementTick+0xb6>
    19b0:	30 93 b5 03 	sts	0x03B5, r19	; 0x8003b5 <xNextTaskUnblockTime+0x1>
    19b4:	20 93 b4 03 	sts	0x03B4, r18	; 0x8003b4 <xNextTaskUnblockTime>
    19b8:	93 c0       	rjmp	.+294    	; 0x1ae0 <xTaskIncrementTick+0x1dc>
    19ba:	a2 85       	ldd	r26, Z+10	; 0x0a
    19bc:	b3 85       	ldd	r27, Z+11	; 0x0b
    19be:	24 81       	ldd	r18, Z+4	; 0x04
    19c0:	35 81       	ldd	r19, Z+5	; 0x05
    19c2:	46 81       	ldd	r20, Z+6	; 0x06
    19c4:	57 81       	ldd	r21, Z+7	; 0x07
    19c6:	e9 01       	movw	r28, r18
    19c8:	5d 83       	std	Y+5, r21	; 0x05
    19ca:	4c 83       	std	Y+4, r20	; 0x04
    19cc:	26 81       	ldd	r18, Z+6	; 0x06
    19ce:	37 81       	ldd	r19, Z+7	; 0x07
    19d0:	44 81       	ldd	r20, Z+4	; 0x04
    19d2:	55 81       	ldd	r21, Z+5	; 0x05
    19d4:	e9 01       	movw	r28, r18
    19d6:	5b 83       	std	Y+3, r21	; 0x03
    19d8:	4a 83       	std	Y+2, r20	; 0x02
    19da:	11 96       	adiw	r26, 0x01	; 1
    19dc:	2d 91       	ld	r18, X+
    19de:	3c 91       	ld	r19, X
    19e0:	12 97       	sbiw	r26, 0x02	; 2
    19e2:	af 01       	movw	r20, r30
    19e4:	4e 5f       	subi	r20, 0xFE	; 254
    19e6:	5f 4f       	sbci	r21, 0xFF	; 255
    19e8:	24 17       	cp	r18, r20
    19ea:	35 07       	cpc	r19, r21
    19ec:	31 f4       	brne	.+12     	; 0x19fa <xTaskIncrementTick+0xf6>
    19ee:	26 81       	ldd	r18, Z+6	; 0x06
    19f0:	37 81       	ldd	r19, Z+7	; 0x07
    19f2:	12 96       	adiw	r26, 0x02	; 2
    19f4:	3c 93       	st	X, r19
    19f6:	2e 93       	st	-X, r18
    19f8:	11 97       	sbiw	r26, 0x01	; 1
    19fa:	13 86       	std	Z+11, r1	; 0x0b
    19fc:	12 86       	std	Z+10, r1	; 0x0a
    19fe:	9c 91       	ld	r25, X
    1a00:	91 50       	subi	r25, 0x01	; 1
    1a02:	9c 93       	st	X, r25
    1a04:	a4 89       	ldd	r26, Z+20	; 0x14
    1a06:	b5 89       	ldd	r27, Z+21	; 0x15
    1a08:	10 97       	sbiw	r26, 0x00	; 0
    1a0a:	19 f1       	breq	.+70     	; 0x1a52 <xTaskIncrementTick+0x14e>
    1a0c:	26 85       	ldd	r18, Z+14	; 0x0e
    1a0e:	37 85       	ldd	r19, Z+15	; 0x0f
    1a10:	60 89       	ldd	r22, Z+16	; 0x10
    1a12:	71 89       	ldd	r23, Z+17	; 0x11
    1a14:	e9 01       	movw	r28, r18
    1a16:	7d 83       	std	Y+5, r23	; 0x05
    1a18:	6c 83       	std	Y+4, r22	; 0x04
    1a1a:	20 89       	ldd	r18, Z+16	; 0x10
    1a1c:	31 89       	ldd	r19, Z+17	; 0x11
    1a1e:	66 85       	ldd	r22, Z+14	; 0x0e
    1a20:	77 85       	ldd	r23, Z+15	; 0x0f
    1a22:	e9 01       	movw	r28, r18
    1a24:	7b 83       	std	Y+3, r23	; 0x03
    1a26:	6a 83       	std	Y+2, r22	; 0x02
    1a28:	11 96       	adiw	r26, 0x01	; 1
    1a2a:	6d 91       	ld	r22, X+
    1a2c:	7c 91       	ld	r23, X
    1a2e:	12 97       	sbiw	r26, 0x02	; 2
    1a30:	9f 01       	movw	r18, r30
    1a32:	24 5f       	subi	r18, 0xF4	; 244
    1a34:	3f 4f       	sbci	r19, 0xFF	; 255
    1a36:	62 17       	cp	r22, r18
    1a38:	73 07       	cpc	r23, r19
    1a3a:	31 f4       	brne	.+12     	; 0x1a48 <xTaskIncrementTick+0x144>
    1a3c:	20 89       	ldd	r18, Z+16	; 0x10
    1a3e:	31 89       	ldd	r19, Z+17	; 0x11
    1a40:	12 96       	adiw	r26, 0x02	; 2
    1a42:	3c 93       	st	X, r19
    1a44:	2e 93       	st	-X, r18
    1a46:	11 97       	sbiw	r26, 0x01	; 1
    1a48:	15 8a       	std	Z+21, r1	; 0x15
    1a4a:	14 8a       	std	Z+20, r1	; 0x14
    1a4c:	9c 91       	ld	r25, X
    1a4e:	91 50       	subi	r25, 0x01	; 1
    1a50:	9c 93       	st	X, r25
    1a52:	26 89       	ldd	r18, Z+22	; 0x16
    1a54:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <uxTopReadyPriority>
    1a58:	92 17       	cp	r25, r18
    1a5a:	10 f4       	brcc	.+4      	; 0x1a60 <xTaskIncrementTick+0x15c>
    1a5c:	20 93 bc 03 	sts	0x03BC, r18	; 0x8003bc <uxTopReadyPriority>
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	d9 01       	movw	r26, r18
    1a64:	aa 0f       	add	r26, r26
    1a66:	bb 1f       	adc	r27, r27
    1a68:	aa 0f       	add	r26, r26
    1a6a:	bb 1f       	adc	r27, r27
    1a6c:	aa 0f       	add	r26, r26
    1a6e:	bb 1f       	adc	r27, r27
    1a70:	2a 0f       	add	r18, r26
    1a72:	3b 1f       	adc	r19, r27
    1a74:	d9 01       	movw	r26, r18
    1a76:	ae 50       	subi	r26, 0x0E	; 14
    1a78:	bc 4f       	sbci	r27, 0xFC	; 252
    1a7a:	11 96       	adiw	r26, 0x01	; 1
    1a7c:	0d 90       	ld	r0, X+
    1a7e:	bc 91       	ld	r27, X
    1a80:	a0 2d       	mov	r26, r0
    1a82:	b5 83       	std	Z+5, r27	; 0x05
    1a84:	a4 83       	std	Z+4, r26	; 0x04
    1a86:	14 96       	adiw	r26, 0x04	; 4
    1a88:	2d 91       	ld	r18, X+
    1a8a:	3c 91       	ld	r19, X
    1a8c:	15 97       	sbiw	r26, 0x05	; 5
    1a8e:	37 83       	std	Z+7, r19	; 0x07
    1a90:	26 83       	std	Z+6, r18	; 0x06
    1a92:	14 96       	adiw	r26, 0x04	; 4
    1a94:	2d 91       	ld	r18, X+
    1a96:	3c 91       	ld	r19, X
    1a98:	15 97       	sbiw	r26, 0x05	; 5
    1a9a:	e9 01       	movw	r28, r18
    1a9c:	5b 83       	std	Y+3, r21	; 0x03
    1a9e:	4a 83       	std	Y+2, r20	; 0x02
    1aa0:	15 96       	adiw	r26, 0x05	; 5
    1aa2:	5c 93       	st	X, r21
    1aa4:	4e 93       	st	-X, r20
    1aa6:	14 97       	sbiw	r26, 0x04	; 4
    1aa8:	a6 89       	ldd	r26, Z+22	; 0x16
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	9d 01       	movw	r18, r26
    1aae:	22 0f       	add	r18, r18
    1ab0:	33 1f       	adc	r19, r19
    1ab2:	22 0f       	add	r18, r18
    1ab4:	33 1f       	adc	r19, r19
    1ab6:	22 0f       	add	r18, r18
    1ab8:	33 1f       	adc	r19, r19
    1aba:	a2 0f       	add	r26, r18
    1abc:	b3 1f       	adc	r27, r19
    1abe:	ae 50       	subi	r26, 0x0E	; 14
    1ac0:	bc 4f       	sbci	r27, 0xFC	; 252
    1ac2:	b3 87       	std	Z+11, r27	; 0x0b
    1ac4:	a2 87       	std	Z+10, r26	; 0x0a
    1ac6:	9c 91       	ld	r25, X
    1ac8:	9f 5f       	subi	r25, 0xFF	; 255
    1aca:	9c 93       	st	X, r25
    1acc:	26 89       	ldd	r18, Z+22	; 0x16
    1ace:	e0 91 1f 04 	lds	r30, 0x041F	; 0x80041f <pxCurrentTCB>
    1ad2:	f0 91 20 04 	lds	r31, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    1ad6:	96 89       	ldd	r25, Z+22	; 0x16
    1ad8:	29 17       	cp	r18, r25
    1ada:	08 f0       	brcs	.+2      	; 0x1ade <xTaskIncrementTick+0x1da>
    1adc:	49 cf       	rjmp	.-366    	; 0x1970 <xTaskIncrementTick+0x6c>
    1ade:	4b cf       	rjmp	.-362    	; 0x1976 <xTaskIncrementTick+0x72>
    1ae0:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <xYieldPending>
    1ae4:	91 11       	cpse	r25, r1
    1ae6:	0c c0       	rjmp	.+24     	; 0x1b00 <xTaskIncrementTick+0x1fc>
    1ae8:	0c c0       	rjmp	.+24     	; 0x1b02 <xTaskIncrementTick+0x1fe>
    1aea:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <xPendedTicks>
    1aee:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <xPendedTicks+0x1>
    1af2:	01 96       	adiw	r24, 0x01	; 1
    1af4:	90 93 ba 03 	sts	0x03BA, r25	; 0x8003ba <xPendedTicks+0x1>
    1af8:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <xPendedTicks>
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	01 c0       	rjmp	.+2      	; 0x1b02 <xTaskIncrementTick+0x1fe>
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	df 91       	pop	r29
    1b04:	cf 91       	pop	r28
    1b06:	1f 91       	pop	r17
    1b08:	0f 91       	pop	r16
    1b0a:	08 95       	ret

00001b0c <xTaskResumeAll>:
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	0f 92       	push	r0
    1b16:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <uxSchedulerSuspended>
    1b1a:	81 50       	subi	r24, 0x01	; 1
    1b1c:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <uxSchedulerSuspended>
    1b20:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <uxSchedulerSuspended>
    1b24:	81 11       	cpse	r24, r1
    1b26:	bf c0       	rjmp	.+382    	; 0x1ca6 <xTaskResumeAll+0x19a>
    1b28:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <uxCurrentNumberOfTasks>
    1b2c:	81 11       	cpse	r24, r1
    1b2e:	96 c0       	rjmp	.+300    	; 0x1c5c <xTaskResumeAll+0x150>
    1b30:	bd c0       	rjmp	.+378    	; 0x1cac <xTaskResumeAll+0x1a0>
    1b32:	e0 91 d8 03 	lds	r30, 0x03D8	; 0x8003d8 <xPendingReadyList+0x5>
    1b36:	f0 91 d9 03 	lds	r31, 0x03D9	; 0x8003d9 <xPendingReadyList+0x6>
    1b3a:	06 80       	ldd	r0, Z+6	; 0x06
    1b3c:	f7 81       	ldd	r31, Z+7	; 0x07
    1b3e:	e0 2d       	mov	r30, r0
    1b40:	a4 89       	ldd	r26, Z+20	; 0x14
    1b42:	b5 89       	ldd	r27, Z+21	; 0x15
    1b44:	c6 85       	ldd	r28, Z+14	; 0x0e
    1b46:	d7 85       	ldd	r29, Z+15	; 0x0f
    1b48:	80 89       	ldd	r24, Z+16	; 0x10
    1b4a:	91 89       	ldd	r25, Z+17	; 0x11
    1b4c:	9d 83       	std	Y+5, r25	; 0x05
    1b4e:	8c 83       	std	Y+4, r24	; 0x04
    1b50:	c0 89       	ldd	r28, Z+16	; 0x10
    1b52:	d1 89       	ldd	r29, Z+17	; 0x11
    1b54:	86 85       	ldd	r24, Z+14	; 0x0e
    1b56:	97 85       	ldd	r25, Z+15	; 0x0f
    1b58:	9b 83       	std	Y+3, r25	; 0x03
    1b5a:	8a 83       	std	Y+2, r24	; 0x02
    1b5c:	11 96       	adiw	r26, 0x01	; 1
    1b5e:	2d 91       	ld	r18, X+
    1b60:	3c 91       	ld	r19, X
    1b62:	12 97       	sbiw	r26, 0x02	; 2
    1b64:	cf 01       	movw	r24, r30
    1b66:	0c 96       	adiw	r24, 0x0c	; 12
    1b68:	28 17       	cp	r18, r24
    1b6a:	39 07       	cpc	r19, r25
    1b6c:	31 f4       	brne	.+12     	; 0x1b7a <xTaskResumeAll+0x6e>
    1b6e:	80 89       	ldd	r24, Z+16	; 0x10
    1b70:	91 89       	ldd	r25, Z+17	; 0x11
    1b72:	12 96       	adiw	r26, 0x02	; 2
    1b74:	9c 93       	st	X, r25
    1b76:	8e 93       	st	-X, r24
    1b78:	11 97       	sbiw	r26, 0x01	; 1
    1b7a:	15 8a       	std	Z+21, r1	; 0x15
    1b7c:	14 8a       	std	Z+20, r1	; 0x14
    1b7e:	8c 91       	ld	r24, X
    1b80:	81 50       	subi	r24, 0x01	; 1
    1b82:	8c 93       	st	X, r24
    1b84:	a2 85       	ldd	r26, Z+10	; 0x0a
    1b86:	b3 85       	ldd	r27, Z+11	; 0x0b
    1b88:	c4 81       	ldd	r28, Z+4	; 0x04
    1b8a:	d5 81       	ldd	r29, Z+5	; 0x05
    1b8c:	86 81       	ldd	r24, Z+6	; 0x06
    1b8e:	97 81       	ldd	r25, Z+7	; 0x07
    1b90:	9d 83       	std	Y+5, r25	; 0x05
    1b92:	8c 83       	std	Y+4, r24	; 0x04
    1b94:	c6 81       	ldd	r28, Z+6	; 0x06
    1b96:	d7 81       	ldd	r29, Z+7	; 0x07
    1b98:	84 81       	ldd	r24, Z+4	; 0x04
    1b9a:	95 81       	ldd	r25, Z+5	; 0x05
    1b9c:	9b 83       	std	Y+3, r25	; 0x03
    1b9e:	8a 83       	std	Y+2, r24	; 0x02
    1ba0:	11 96       	adiw	r26, 0x01	; 1
    1ba2:	8d 91       	ld	r24, X+
    1ba4:	9c 91       	ld	r25, X
    1ba6:	12 97       	sbiw	r26, 0x02	; 2
    1ba8:	9f 01       	movw	r18, r30
    1baa:	2e 5f       	subi	r18, 0xFE	; 254
    1bac:	3f 4f       	sbci	r19, 0xFF	; 255
    1bae:	82 17       	cp	r24, r18
    1bb0:	93 07       	cpc	r25, r19
    1bb2:	31 f4       	brne	.+12     	; 0x1bc0 <xTaskResumeAll+0xb4>
    1bb4:	86 81       	ldd	r24, Z+6	; 0x06
    1bb6:	97 81       	ldd	r25, Z+7	; 0x07
    1bb8:	12 96       	adiw	r26, 0x02	; 2
    1bba:	9c 93       	st	X, r25
    1bbc:	8e 93       	st	-X, r24
    1bbe:	11 97       	sbiw	r26, 0x01	; 1
    1bc0:	13 86       	std	Z+11, r1	; 0x0b
    1bc2:	12 86       	std	Z+10, r1	; 0x0a
    1bc4:	8c 91       	ld	r24, X
    1bc6:	81 50       	subi	r24, 0x01	; 1
    1bc8:	8c 93       	st	X, r24
    1bca:	86 89       	ldd	r24, Z+22	; 0x16
    1bcc:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <uxTopReadyPriority>
    1bd0:	98 17       	cp	r25, r24
    1bd2:	10 f4       	brcc	.+4      	; 0x1bd8 <xTaskResumeAll+0xcc>
    1bd4:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <uxTopReadyPriority>
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	dc 01       	movw	r26, r24
    1bdc:	aa 0f       	add	r26, r26
    1bde:	bb 1f       	adc	r27, r27
    1be0:	aa 0f       	add	r26, r26
    1be2:	bb 1f       	adc	r27, r27
    1be4:	aa 0f       	add	r26, r26
    1be6:	bb 1f       	adc	r27, r27
    1be8:	8a 0f       	add	r24, r26
    1bea:	9b 1f       	adc	r25, r27
    1bec:	dc 01       	movw	r26, r24
    1bee:	ae 50       	subi	r26, 0x0E	; 14
    1bf0:	bc 4f       	sbci	r27, 0xFC	; 252
    1bf2:	11 96       	adiw	r26, 0x01	; 1
    1bf4:	0d 90       	ld	r0, X+
    1bf6:	bc 91       	ld	r27, X
    1bf8:	a0 2d       	mov	r26, r0
    1bfa:	b5 83       	std	Z+5, r27	; 0x05
    1bfc:	a4 83       	std	Z+4, r26	; 0x04
    1bfe:	14 96       	adiw	r26, 0x04	; 4
    1c00:	8d 91       	ld	r24, X+
    1c02:	9c 91       	ld	r25, X
    1c04:	15 97       	sbiw	r26, 0x05	; 5
    1c06:	97 83       	std	Z+7, r25	; 0x07
    1c08:	86 83       	std	Z+6, r24	; 0x06
    1c0a:	14 96       	adiw	r26, 0x04	; 4
    1c0c:	cd 91       	ld	r28, X+
    1c0e:	dc 91       	ld	r29, X
    1c10:	15 97       	sbiw	r26, 0x05	; 5
    1c12:	3b 83       	std	Y+3, r19	; 0x03
    1c14:	2a 83       	std	Y+2, r18	; 0x02
    1c16:	15 96       	adiw	r26, 0x05	; 5
    1c18:	3c 93       	st	X, r19
    1c1a:	2e 93       	st	-X, r18
    1c1c:	14 97       	sbiw	r26, 0x04	; 4
    1c1e:	a6 89       	ldd	r26, Z+22	; 0x16
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	cd 01       	movw	r24, r26
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	a8 0f       	add	r26, r24
    1c32:	b9 1f       	adc	r27, r25
    1c34:	ae 50       	subi	r26, 0x0E	; 14
    1c36:	bc 4f       	sbci	r27, 0xFC	; 252
    1c38:	b3 87       	std	Z+11, r27	; 0x0b
    1c3a:	a2 87       	std	Z+10, r26	; 0x0a
    1c3c:	8c 91       	ld	r24, X
    1c3e:	8f 5f       	subi	r24, 0xFF	; 255
    1c40:	8c 93       	st	X, r24
    1c42:	96 89       	ldd	r25, Z+22	; 0x16
    1c44:	a0 91 1f 04 	lds	r26, 0x041F	; 0x80041f <pxCurrentTCB>
    1c48:	b0 91 20 04 	lds	r27, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    1c4c:	56 96       	adiw	r26, 0x16	; 22
    1c4e:	8c 91       	ld	r24, X
    1c50:	98 17       	cp	r25, r24
    1c52:	30 f0       	brcs	.+12     	; 0x1c60 <xTaskResumeAll+0x154>
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <xYieldPending>
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <xTaskResumeAll+0x154>
    1c5c:	e0 e0       	ldi	r30, 0x00	; 0
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <xPendingReadyList>
    1c64:	81 11       	cpse	r24, r1
    1c66:	65 cf       	rjmp	.-310    	; 0x1b32 <xTaskResumeAll+0x26>
    1c68:	ef 2b       	or	r30, r31
    1c6a:	11 f0       	breq	.+4      	; 0x1c70 <xTaskResumeAll+0x164>
    1c6c:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <prvResetNextTaskUnblockTime>
    1c70:	c0 91 b9 03 	lds	r28, 0x03B9	; 0x8003b9 <xPendedTicks>
    1c74:	d0 91 ba 03 	lds	r29, 0x03BA	; 0x8003ba <xPendedTicks+0x1>
    1c78:	20 97       	sbiw	r28, 0x00	; 0
    1c7a:	69 f0       	breq	.+26     	; 0x1c96 <xTaskResumeAll+0x18a>
    1c7c:	0e 94 82 0c 	call	0x1904	; 0x1904 <xTaskIncrementTick>
    1c80:	88 23       	and	r24, r24
    1c82:	19 f0       	breq	.+6      	; 0x1c8a <xTaskResumeAll+0x17e>
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <xYieldPending>
    1c8a:	21 97       	sbiw	r28, 0x01	; 1
    1c8c:	b9 f7       	brne	.-18     	; 0x1c7c <xTaskResumeAll+0x170>
    1c8e:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <xPendedTicks+0x1>
    1c92:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <xPendedTicks>
    1c96:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <xYieldPending>
    1c9a:	88 23       	and	r24, r24
    1c9c:	31 f0       	breq	.+12     	; 0x1caa <xTaskResumeAll+0x19e>
    1c9e:	0e 94 de 05 	call	0xbbc	; 0xbbc <vPortYield>
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	03 c0       	rjmp	.+6      	; 0x1cac <xTaskResumeAll+0x1a0>
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	01 c0       	rjmp	.+2      	; 0x1cac <xTaskResumeAll+0x1a0>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	0f 90       	pop	r0
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	08 95       	ret

00001cb6 <vTaskSwitchContext>:
    1cb6:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <uxSchedulerSuspended>
    1cba:	88 23       	and	r24, r24
    1cbc:	21 f0       	breq	.+8      	; 0x1cc6 <vTaskSwitchContext+0x10>
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <xYieldPending>
    1cc4:	08 95       	ret
    1cc6:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <xYieldPending>
    1cca:	20 91 bc 03 	lds	r18, 0x03BC	; 0x8003bc <uxTopReadyPriority>
    1cce:	01 c0       	rjmp	.+2      	; 0x1cd2 <vTaskSwitchContext+0x1c>
    1cd0:	21 50       	subi	r18, 0x01	; 1
    1cd2:	82 2f       	mov	r24, r18
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	ee 0f       	add	r30, r30
    1cda:	ff 1f       	adc	r31, r31
    1cdc:	ee 0f       	add	r30, r30
    1cde:	ff 1f       	adc	r31, r31
    1ce0:	ee 0f       	add	r30, r30
    1ce2:	ff 1f       	adc	r31, r31
    1ce4:	e8 0f       	add	r30, r24
    1ce6:	f9 1f       	adc	r31, r25
    1ce8:	ee 50       	subi	r30, 0x0E	; 14
    1cea:	fc 4f       	sbci	r31, 0xFC	; 252
    1cec:	30 81       	ld	r19, Z
    1cee:	33 23       	and	r19, r19
    1cf0:	79 f3       	breq	.-34     	; 0x1cd0 <vTaskSwitchContext+0x1a>
    1cf2:	ac 01       	movw	r20, r24
    1cf4:	44 0f       	add	r20, r20
    1cf6:	55 1f       	adc	r21, r21
    1cf8:	44 0f       	add	r20, r20
    1cfa:	55 1f       	adc	r21, r21
    1cfc:	44 0f       	add	r20, r20
    1cfe:	55 1f       	adc	r21, r21
    1d00:	48 0f       	add	r20, r24
    1d02:	59 1f       	adc	r21, r25
    1d04:	df 01       	movw	r26, r30
    1d06:	01 80       	ldd	r0, Z+1	; 0x01
    1d08:	f2 81       	ldd	r31, Z+2	; 0x02
    1d0a:	e0 2d       	mov	r30, r0
    1d0c:	02 80       	ldd	r0, Z+2	; 0x02
    1d0e:	f3 81       	ldd	r31, Z+3	; 0x03
    1d10:	e0 2d       	mov	r30, r0
    1d12:	12 96       	adiw	r26, 0x02	; 2
    1d14:	fc 93       	st	X, r31
    1d16:	ee 93       	st	-X, r30
    1d18:	11 97       	sbiw	r26, 0x01	; 1
    1d1a:	4b 50       	subi	r20, 0x0B	; 11
    1d1c:	5c 4f       	sbci	r21, 0xFC	; 252
    1d1e:	e4 17       	cp	r30, r20
    1d20:	f5 07       	cpc	r31, r21
    1d22:	29 f4       	brne	.+10     	; 0x1d2e <vTaskSwitchContext+0x78>
    1d24:	42 81       	ldd	r20, Z+2	; 0x02
    1d26:	53 81       	ldd	r21, Z+3	; 0x03
    1d28:	fd 01       	movw	r30, r26
    1d2a:	52 83       	std	Z+2, r21	; 0x02
    1d2c:	41 83       	std	Z+1, r20	; 0x01
    1d2e:	fc 01       	movw	r30, r24
    1d30:	ee 0f       	add	r30, r30
    1d32:	ff 1f       	adc	r31, r31
    1d34:	ee 0f       	add	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	ee 0f       	add	r30, r30
    1d3a:	ff 1f       	adc	r31, r31
    1d3c:	8e 0f       	add	r24, r30
    1d3e:	9f 1f       	adc	r25, r31
    1d40:	fc 01       	movw	r30, r24
    1d42:	ee 50       	subi	r30, 0x0E	; 14
    1d44:	fc 4f       	sbci	r31, 0xFC	; 252
    1d46:	01 80       	ldd	r0, Z+1	; 0x01
    1d48:	f2 81       	ldd	r31, Z+2	; 0x02
    1d4a:	e0 2d       	mov	r30, r0
    1d4c:	86 81       	ldd	r24, Z+6	; 0x06
    1d4e:	97 81       	ldd	r25, Z+7	; 0x07
    1d50:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <pxCurrentTCB+0x1>
    1d54:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <pxCurrentTCB>
    1d58:	20 93 bc 03 	sts	0x03BC, r18	; 0x8003bc <uxTopReadyPriority>
    1d5c:	08 95       	ret

00001d5e <vTaskPlaceOnEventList>:
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	eb 01       	movw	r28, r22
    1d64:	60 91 1f 04 	lds	r22, 0x041F	; 0x80041f <pxCurrentTCB>
    1d68:	70 91 20 04 	lds	r23, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    1d6c:	64 5f       	subi	r22, 0xF4	; 244
    1d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d70:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vListInsert>
    1d74:	61 e0       	ldi	r22, 0x01	; 1
    1d76:	ce 01       	movw	r24, r28
    1d78:	0e 94 6d 0b 	call	0x16da	; 0x16da <prvAddCurrentTaskToDelayedList>
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	08 95       	ret

00001d82 <vTaskPlaceOnEventListRestricted>:
    1d82:	0f 93       	push	r16
    1d84:	1f 93       	push	r17
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	8b 01       	movw	r16, r22
    1d8e:	a1 81       	ldd	r26, Z+1	; 0x01
    1d90:	b2 81       	ldd	r27, Z+2	; 0x02
    1d92:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <pxCurrentTCB>
    1d96:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    1d9a:	ec 01       	movw	r28, r24
    1d9c:	bf 87       	std	Y+15, r27	; 0x0f
    1d9e:	ae 87       	std	Y+14, r26	; 0x0e
    1da0:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <pxCurrentTCB>
    1da4:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    1da8:	14 96       	adiw	r26, 0x04	; 4
    1daa:	2d 91       	ld	r18, X+
    1dac:	3c 91       	ld	r19, X
    1dae:	15 97       	sbiw	r26, 0x05	; 5
    1db0:	ec 01       	movw	r28, r24
    1db2:	39 8b       	std	Y+17, r19	; 0x11
    1db4:	28 8b       	std	Y+16, r18	; 0x10
    1db6:	14 96       	adiw	r26, 0x04	; 4
    1db8:	8d 91       	ld	r24, X+
    1dba:	9c 91       	ld	r25, X
    1dbc:	15 97       	sbiw	r26, 0x05	; 5
    1dbe:	20 91 1f 04 	lds	r18, 0x041F	; 0x80041f <pxCurrentTCB>
    1dc2:	30 91 20 04 	lds	r19, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    1dc6:	24 5f       	subi	r18, 0xF4	; 244
    1dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dca:	ec 01       	movw	r28, r24
    1dcc:	3b 83       	std	Y+3, r19	; 0x03
    1dce:	2a 83       	std	Y+2, r18	; 0x02
    1dd0:	20 91 1f 04 	lds	r18, 0x041F	; 0x80041f <pxCurrentTCB>
    1dd4:	30 91 20 04 	lds	r19, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    1dd8:	24 5f       	subi	r18, 0xF4	; 244
    1dda:	3f 4f       	sbci	r19, 0xFF	; 255
    1ddc:	15 96       	adiw	r26, 0x05	; 5
    1dde:	3c 93       	st	X, r19
    1de0:	2e 93       	st	-X, r18
    1de2:	14 97       	sbiw	r26, 0x04	; 4
    1de4:	a0 91 1f 04 	lds	r26, 0x041F	; 0x80041f <pxCurrentTCB>
    1de8:	b0 91 20 04 	lds	r27, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    1dec:	55 96       	adiw	r26, 0x15	; 21
    1dee:	fc 93       	st	X, r31
    1df0:	ee 93       	st	-X, r30
    1df2:	54 97       	sbiw	r26, 0x14	; 20
    1df4:	90 81       	ld	r25, Z
    1df6:	9f 5f       	subi	r25, 0xFF	; 255
    1df8:	90 83       	st	Z, r25
    1dfa:	44 23       	and	r20, r20
    1dfc:	11 f0       	breq	.+4      	; 0x1e02 <vTaskPlaceOnEventListRestricted+0x80>
    1dfe:	0f ef       	ldi	r16, 0xFF	; 255
    1e00:	1f ef       	ldi	r17, 0xFF	; 255
    1e02:	64 2f       	mov	r22, r20
    1e04:	c8 01       	movw	r24, r16
    1e06:	0e 94 6d 0b 	call	0x16da	; 0x16da <prvAddCurrentTaskToDelayedList>
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	1f 91       	pop	r17
    1e10:	0f 91       	pop	r16
    1e12:	08 95       	ret

00001e14 <xTaskRemoveFromEventList>:
    1e14:	cf 93       	push	r28
    1e16:	df 93       	push	r29
    1e18:	dc 01       	movw	r26, r24
    1e1a:	15 96       	adiw	r26, 0x05	; 5
    1e1c:	ed 91       	ld	r30, X+
    1e1e:	fc 91       	ld	r31, X
    1e20:	16 97       	sbiw	r26, 0x06	; 6
    1e22:	06 80       	ldd	r0, Z+6	; 0x06
    1e24:	f7 81       	ldd	r31, Z+7	; 0x07
    1e26:	e0 2d       	mov	r30, r0
    1e28:	a4 89       	ldd	r26, Z+20	; 0x14
    1e2a:	b5 89       	ldd	r27, Z+21	; 0x15
    1e2c:	c6 85       	ldd	r28, Z+14	; 0x0e
    1e2e:	d7 85       	ldd	r29, Z+15	; 0x0f
    1e30:	80 89       	ldd	r24, Z+16	; 0x10
    1e32:	91 89       	ldd	r25, Z+17	; 0x11
    1e34:	9d 83       	std	Y+5, r25	; 0x05
    1e36:	8c 83       	std	Y+4, r24	; 0x04
    1e38:	c0 89       	ldd	r28, Z+16	; 0x10
    1e3a:	d1 89       	ldd	r29, Z+17	; 0x11
    1e3c:	86 85       	ldd	r24, Z+14	; 0x0e
    1e3e:	97 85       	ldd	r25, Z+15	; 0x0f
    1e40:	9b 83       	std	Y+3, r25	; 0x03
    1e42:	8a 83       	std	Y+2, r24	; 0x02
    1e44:	11 96       	adiw	r26, 0x01	; 1
    1e46:	8d 91       	ld	r24, X+
    1e48:	9c 91       	ld	r25, X
    1e4a:	12 97       	sbiw	r26, 0x02	; 2
    1e4c:	9f 01       	movw	r18, r30
    1e4e:	24 5f       	subi	r18, 0xF4	; 244
    1e50:	3f 4f       	sbci	r19, 0xFF	; 255
    1e52:	82 17       	cp	r24, r18
    1e54:	93 07       	cpc	r25, r19
    1e56:	31 f4       	brne	.+12     	; 0x1e64 <xTaskRemoveFromEventList+0x50>
    1e58:	80 89       	ldd	r24, Z+16	; 0x10
    1e5a:	91 89       	ldd	r25, Z+17	; 0x11
    1e5c:	12 96       	adiw	r26, 0x02	; 2
    1e5e:	9c 93       	st	X, r25
    1e60:	8e 93       	st	-X, r24
    1e62:	11 97       	sbiw	r26, 0x01	; 1
    1e64:	15 8a       	std	Z+21, r1	; 0x15
    1e66:	14 8a       	std	Z+20, r1	; 0x14
    1e68:	8c 91       	ld	r24, X
    1e6a:	81 50       	subi	r24, 0x01	; 1
    1e6c:	8c 93       	st	X, r24
    1e6e:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <uxSchedulerSuspended>
    1e72:	81 11       	cpse	r24, r1
    1e74:	60 c0       	rjmp	.+192    	; 0x1f36 <xTaskRemoveFromEventList+0x122>
    1e76:	a2 85       	ldd	r26, Z+10	; 0x0a
    1e78:	b3 85       	ldd	r27, Z+11	; 0x0b
    1e7a:	c4 81       	ldd	r28, Z+4	; 0x04
    1e7c:	d5 81       	ldd	r29, Z+5	; 0x05
    1e7e:	86 81       	ldd	r24, Z+6	; 0x06
    1e80:	97 81       	ldd	r25, Z+7	; 0x07
    1e82:	9d 83       	std	Y+5, r25	; 0x05
    1e84:	8c 83       	std	Y+4, r24	; 0x04
    1e86:	c6 81       	ldd	r28, Z+6	; 0x06
    1e88:	d7 81       	ldd	r29, Z+7	; 0x07
    1e8a:	84 81       	ldd	r24, Z+4	; 0x04
    1e8c:	95 81       	ldd	r25, Z+5	; 0x05
    1e8e:	9b 83       	std	Y+3, r25	; 0x03
    1e90:	8a 83       	std	Y+2, r24	; 0x02
    1e92:	11 96       	adiw	r26, 0x01	; 1
    1e94:	8d 91       	ld	r24, X+
    1e96:	9c 91       	ld	r25, X
    1e98:	12 97       	sbiw	r26, 0x02	; 2
    1e9a:	9f 01       	movw	r18, r30
    1e9c:	2e 5f       	subi	r18, 0xFE	; 254
    1e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea0:	82 17       	cp	r24, r18
    1ea2:	93 07       	cpc	r25, r19
    1ea4:	31 f4       	brne	.+12     	; 0x1eb2 <xTaskRemoveFromEventList+0x9e>
    1ea6:	86 81       	ldd	r24, Z+6	; 0x06
    1ea8:	97 81       	ldd	r25, Z+7	; 0x07
    1eaa:	12 96       	adiw	r26, 0x02	; 2
    1eac:	9c 93       	st	X, r25
    1eae:	8e 93       	st	-X, r24
    1eb0:	11 97       	sbiw	r26, 0x01	; 1
    1eb2:	13 86       	std	Z+11, r1	; 0x0b
    1eb4:	12 86       	std	Z+10, r1	; 0x0a
    1eb6:	8c 91       	ld	r24, X
    1eb8:	81 50       	subi	r24, 0x01	; 1
    1eba:	8c 93       	st	X, r24
    1ebc:	86 89       	ldd	r24, Z+22	; 0x16
    1ebe:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <uxTopReadyPriority>
    1ec2:	98 17       	cp	r25, r24
    1ec4:	10 f4       	brcc	.+4      	; 0x1eca <xTaskRemoveFromEventList+0xb6>
    1ec6:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <uxTopReadyPriority>
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	dc 01       	movw	r26, r24
    1ece:	aa 0f       	add	r26, r26
    1ed0:	bb 1f       	adc	r27, r27
    1ed2:	aa 0f       	add	r26, r26
    1ed4:	bb 1f       	adc	r27, r27
    1ed6:	aa 0f       	add	r26, r26
    1ed8:	bb 1f       	adc	r27, r27
    1eda:	8a 0f       	add	r24, r26
    1edc:	9b 1f       	adc	r25, r27
    1ede:	dc 01       	movw	r26, r24
    1ee0:	ae 50       	subi	r26, 0x0E	; 14
    1ee2:	bc 4f       	sbci	r27, 0xFC	; 252
    1ee4:	11 96       	adiw	r26, 0x01	; 1
    1ee6:	0d 90       	ld	r0, X+
    1ee8:	bc 91       	ld	r27, X
    1eea:	a0 2d       	mov	r26, r0
    1eec:	b5 83       	std	Z+5, r27	; 0x05
    1eee:	a4 83       	std	Z+4, r26	; 0x04
    1ef0:	14 96       	adiw	r26, 0x04	; 4
    1ef2:	8d 91       	ld	r24, X+
    1ef4:	9c 91       	ld	r25, X
    1ef6:	15 97       	sbiw	r26, 0x05	; 5
    1ef8:	97 83       	std	Z+7, r25	; 0x07
    1efa:	86 83       	std	Z+6, r24	; 0x06
    1efc:	14 96       	adiw	r26, 0x04	; 4
    1efe:	cd 91       	ld	r28, X+
    1f00:	dc 91       	ld	r29, X
    1f02:	15 97       	sbiw	r26, 0x05	; 5
    1f04:	3b 83       	std	Y+3, r19	; 0x03
    1f06:	2a 83       	std	Y+2, r18	; 0x02
    1f08:	15 96       	adiw	r26, 0x05	; 5
    1f0a:	3c 93       	st	X, r19
    1f0c:	2e 93       	st	-X, r18
    1f0e:	14 97       	sbiw	r26, 0x04	; 4
    1f10:	a6 89       	ldd	r26, Z+22	; 0x16
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	cd 01       	movw	r24, r26
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	a8 0f       	add	r26, r24
    1f24:	b9 1f       	adc	r27, r25
    1f26:	ae 50       	subi	r26, 0x0E	; 14
    1f28:	bc 4f       	sbci	r27, 0xFC	; 252
    1f2a:	b3 87       	std	Z+11, r27	; 0x0b
    1f2c:	a2 87       	std	Z+10, r26	; 0x0a
    1f2e:	8c 91       	ld	r24, X
    1f30:	8f 5f       	subi	r24, 0xFF	; 255
    1f32:	8c 93       	st	X, r24
    1f34:	1c c0       	rjmp	.+56     	; 0x1f6e <xTaskRemoveFromEventList+0x15a>
    1f36:	43 ed       	ldi	r20, 0xD3	; 211
    1f38:	53 e0       	ldi	r21, 0x03	; 3
    1f3a:	da 01       	movw	r26, r20
    1f3c:	11 96       	adiw	r26, 0x01	; 1
    1f3e:	cd 91       	ld	r28, X+
    1f40:	dc 91       	ld	r29, X
    1f42:	12 97       	sbiw	r26, 0x02	; 2
    1f44:	d7 87       	std	Z+15, r29	; 0x0f
    1f46:	c6 87       	std	Z+14, r28	; 0x0e
    1f48:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4c:	91 8b       	std	Z+17, r25	; 0x11
    1f4e:	80 8b       	std	Z+16, r24	; 0x10
    1f50:	8c 81       	ldd	r24, Y+4	; 0x04
    1f52:	9d 81       	ldd	r25, Y+5	; 0x05
    1f54:	dc 01       	movw	r26, r24
    1f56:	13 96       	adiw	r26, 0x03	; 3
    1f58:	3c 93       	st	X, r19
    1f5a:	2e 93       	st	-X, r18
    1f5c:	12 97       	sbiw	r26, 0x02	; 2
    1f5e:	3d 83       	std	Y+5, r19	; 0x05
    1f60:	2c 83       	std	Y+4, r18	; 0x04
    1f62:	55 8b       	std	Z+21, r21	; 0x15
    1f64:	44 8b       	std	Z+20, r20	; 0x14
    1f66:	da 01       	movw	r26, r20
    1f68:	8c 91       	ld	r24, X
    1f6a:	8f 5f       	subi	r24, 0xFF	; 255
    1f6c:	8c 93       	st	X, r24
    1f6e:	96 89       	ldd	r25, Z+22	; 0x16
    1f70:	e0 91 1f 04 	lds	r30, 0x041F	; 0x80041f <pxCurrentTCB>
    1f74:	f0 91 20 04 	lds	r31, 0x0420	; 0x800420 <pxCurrentTCB+0x1>
    1f78:	86 89       	ldd	r24, Z+22	; 0x16
    1f7a:	89 17       	cp	r24, r25
    1f7c:	20 f4       	brcc	.+8      	; 0x1f86 <xTaskRemoveFromEventList+0x172>
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <xYieldPending>
    1f84:	01 c0       	rjmp	.+2      	; 0x1f88 <xTaskRemoveFromEventList+0x174>
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	08 95       	ret

00001f8e <vTaskInternalSetTimeOutState>:
    1f8e:	20 91 b7 03 	lds	r18, 0x03B7	; 0x8003b7 <xNumOfOverflows>
    1f92:	fc 01       	movw	r30, r24
    1f94:	20 83       	st	Z, r18
    1f96:	20 91 bd 03 	lds	r18, 0x03BD	; 0x8003bd <xTickCount>
    1f9a:	30 91 be 03 	lds	r19, 0x03BE	; 0x8003be <xTickCount+0x1>
    1f9e:	32 83       	std	Z+2, r19	; 0x02
    1fa0:	21 83       	std	Z+1, r18	; 0x01
    1fa2:	08 95       	ret

00001fa4 <xTaskCheckForTimeOut>:
    1fa4:	1f 93       	push	r17
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	0f 92       	push	r0
    1fb0:	e0 91 bd 03 	lds	r30, 0x03BD	; 0x8003bd <xTickCount>
    1fb4:	f0 91 be 03 	lds	r31, 0x03BE	; 0x8003be <xTickCount+0x1>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	11 96       	adiw	r26, 0x01	; 1
    1fbc:	4d 91       	ld	r20, X+
    1fbe:	5c 91       	ld	r21, X
    1fc0:	12 97       	sbiw	r26, 0x02	; 2
    1fc2:	df 01       	movw	r26, r30
    1fc4:	a4 1b       	sub	r26, r20
    1fc6:	b5 0b       	sbc	r27, r21
    1fc8:	eb 01       	movw	r28, r22
    1fca:	28 81       	ld	r18, Y
    1fcc:	39 81       	ldd	r19, Y+1	; 0x01
    1fce:	2f 3f       	cpi	r18, 0xFF	; 255
    1fd0:	df ef       	ldi	r29, 0xFF	; 255
    1fd2:	3d 07       	cpc	r19, r29
    1fd4:	f9 f0       	breq	.+62     	; 0x2014 <xTaskCheckForTimeOut+0x70>
    1fd6:	ec 01       	movw	r28, r24
    1fd8:	18 81       	ld	r17, Y
    1fda:	c0 91 b7 03 	lds	r28, 0x03B7	; 0x8003b7 <xNumOfOverflows>
    1fde:	1c 17       	cp	r17, r28
    1fe0:	41 f0       	breq	.+16     	; 0x1ff2 <xTaskCheckForTimeOut+0x4e>
    1fe2:	e4 17       	cp	r30, r20
    1fe4:	f5 07       	cpc	r31, r21
    1fe6:	28 f0       	brcs	.+10     	; 0x1ff2 <xTaskCheckForTimeOut+0x4e>
    1fe8:	fb 01       	movw	r30, r22
    1fea:	11 82       	std	Z+1, r1	; 0x01
    1fec:	10 82       	st	Z, r1
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	12 c0       	rjmp	.+36     	; 0x2016 <xTaskCheckForTimeOut+0x72>
    1ff2:	a2 17       	cp	r26, r18
    1ff4:	b3 07       	cpc	r27, r19
    1ff6:	48 f4       	brcc	.+18     	; 0x200a <xTaskCheckForTimeOut+0x66>
    1ff8:	fb 01       	movw	r30, r22
    1ffa:	2a 1b       	sub	r18, r26
    1ffc:	3b 0b       	sbc	r19, r27
    1ffe:	31 83       	std	Z+1, r19	; 0x01
    2000:	20 83       	st	Z, r18
    2002:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <vTaskInternalSetTimeOutState>
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	06 c0       	rjmp	.+12     	; 0x2016 <xTaskCheckForTimeOut+0x72>
    200a:	db 01       	movw	r26, r22
    200c:	1d 92       	st	X+, r1
    200e:	1c 92       	st	X, r1
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	01 c0       	rjmp	.+2      	; 0x2016 <xTaskCheckForTimeOut+0x72>
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	0f 90       	pop	r0
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	1f 91       	pop	r17
    2020:	08 95       	ret

00002022 <vTaskMissedYield>:
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <xYieldPending>
    2028:	08 95       	ret

0000202a <xTaskGetSchedulerState>:
    202a:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <xSchedulerRunning>
    202e:	88 23       	and	r24, r24
    2030:	31 f0       	breq	.+12     	; 0x203e <xTaskGetSchedulerState+0x14>
    2032:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <uxSchedulerSuspended>
    2036:	81 11       	cpse	r24, r1
    2038:	04 c0       	rjmp	.+8      	; 0x2042 <xTaskGetSchedulerState+0x18>
    203a:	82 e0       	ldi	r24, 0x02	; 2
    203c:	08 95       	ret
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	08 95       	ret
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	08 95       	ret

00002046 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    2046:	0f 93       	push	r16
    2048:	1f 93       	push	r17
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    2050:	89 2b       	or	r24, r25
    2052:	09 f4       	brne	.+2      	; 0x2056 <xTaskPriorityDisinherit+0x10>
    2054:	51 c0       	rjmp	.+162    	; 0x20f8 <xTaskPriorityDisinherit+0xb2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    2056:	86 a1       	ldd	r24, Z+38	; 0x26
    2058:	81 50       	subi	r24, 0x01	; 1
    205a:	86 a3       	std	Z+38, r24	; 0x26

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    205c:	26 89       	ldd	r18, Z+22	; 0x16
    205e:	95 a1       	ldd	r25, Z+37	; 0x25
    2060:	29 17       	cp	r18, r25
    2062:	09 f4       	brne	.+2      	; 0x2066 <xTaskPriorityDisinherit+0x20>
    2064:	4b c0       	rjmp	.+150    	; 0x20fc <xTaskPriorityDisinherit+0xb6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2066:	81 11       	cpse	r24, r1
    2068:	4b c0       	rjmp	.+150    	; 0x2100 <xTaskPriorityDisinherit+0xba>
    206a:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    206c:	8f 01       	movw	r16, r30
    206e:	0e 5f       	subi	r16, 0xFE	; 254
    2070:	1f 4f       	sbci	r17, 0xFF	; 255
    2072:	c8 01       	movw	r24, r16
    2074:	0e 94 13 05 	call	0xa26	; 0xa26 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    2078:	8d a1       	ldd	r24, Y+37	; 0x25
    207a:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    207c:	25 e0       	ldi	r18, 0x05	; 5
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	28 1b       	sub	r18, r24
    2082:	31 09       	sbc	r19, r1
    2084:	3d 87       	std	Y+13, r19	; 0x0d
    2086:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    2088:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <uxTopReadyPriority>
    208c:	98 17       	cp	r25, r24
    208e:	10 f4       	brcc	.+4      	; 0x2094 <xTaskPriorityDisinherit+0x4e>
    2090:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <uxTopReadyPriority>
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	fc 01       	movw	r30, r24
    2098:	ee 0f       	add	r30, r30
    209a:	ff 1f       	adc	r31, r31
    209c:	ee 0f       	add	r30, r30
    209e:	ff 1f       	adc	r31, r31
    20a0:	ee 0f       	add	r30, r30
    20a2:	ff 1f       	adc	r31, r31
    20a4:	8e 0f       	add	r24, r30
    20a6:	9f 1f       	adc	r25, r31
    20a8:	fc 01       	movw	r30, r24
    20aa:	ee 50       	subi	r30, 0x0E	; 14
    20ac:	fc 4f       	sbci	r31, 0xFC	; 252
    20ae:	01 80       	ldd	r0, Z+1	; 0x01
    20b0:	f2 81       	ldd	r31, Z+2	; 0x02
    20b2:	e0 2d       	mov	r30, r0
    20b4:	fd 83       	std	Y+5, r31	; 0x05
    20b6:	ec 83       	std	Y+4, r30	; 0x04
    20b8:	84 81       	ldd	r24, Z+4	; 0x04
    20ba:	95 81       	ldd	r25, Z+5	; 0x05
    20bc:	9f 83       	std	Y+7, r25	; 0x07
    20be:	8e 83       	std	Y+6, r24	; 0x06
    20c0:	a4 81       	ldd	r26, Z+4	; 0x04
    20c2:	b5 81       	ldd	r27, Z+5	; 0x05
    20c4:	13 96       	adiw	r26, 0x03	; 3
    20c6:	1c 93       	st	X, r17
    20c8:	0e 93       	st	-X, r16
    20ca:	12 97       	sbiw	r26, 0x02	; 2
    20cc:	15 83       	std	Z+5, r17	; 0x05
    20ce:	04 83       	std	Z+4, r16	; 0x04
    20d0:	ee 89       	ldd	r30, Y+22	; 0x16
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	cf 01       	movw	r24, r30
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	e8 0f       	add	r30, r24
    20e4:	f9 1f       	adc	r31, r25
    20e6:	ee 50       	subi	r30, 0x0E	; 14
    20e8:	fc 4f       	sbci	r31, 0xFC	; 252
    20ea:	fb 87       	std	Y+11, r31	; 0x0b
    20ec:	ea 87       	std	Y+10, r30	; 0x0a
    20ee:	80 81       	ld	r24, Z
    20f0:	8f 5f       	subi	r24, 0xFF	; 255
    20f2:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	05 c0       	rjmp	.+10     	; 0x2102 <xTaskPriorityDisinherit+0xbc>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	03 c0       	rjmp	.+6      	; 0x2102 <xTaskPriorityDisinherit+0xbc>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	01 c0       	rjmp	.+2      	; 0x2102 <xTaskPriorityDisinherit+0xbc>
    2100:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	08 95       	ret

0000210c <prvGetNextExpireTime>:
        }
    }
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
    210c:	dc 01       	movw	r26, r24
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    210e:	e0 91 29 04 	lds	r30, 0x0429	; 0x800429 <pxCurrentTimerList>
    2112:	f0 91 2a 04 	lds	r31, 0x042A	; 0x80042a <pxCurrentTimerList+0x1>
    2116:	80 81       	ld	r24, Z
    2118:	91 e0       	ldi	r25, 0x01	; 1
    211a:	81 11       	cpse	r24, r1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	9c 93       	st	X, r25

        if( *pxListWasEmpty == pdFALSE )
    2120:	91 11       	cpse	r25, r1
    2122:	06 c0       	rjmp	.+12     	; 0x2130 <prvGetNextExpireTime+0x24>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2124:	05 80       	ldd	r0, Z+5	; 0x05
    2126:	f6 81       	ldd	r31, Z+6	; 0x06
    2128:	e0 2d       	mov	r30, r0
    212a:	80 81       	ld	r24, Z
    212c:	91 81       	ldd	r25, Z+1	; 0x01
    212e:	08 95       	ret
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	90 e0       	ldi	r25, 0x00	; 0
        }

        return xNextExpireTime;
    }
    2134:	08 95       	ret

00002136 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    2136:	fc 01       	movw	r30, r24
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2138:	73 83       	std	Z+3, r23	; 0x03
    213a:	62 83       	std	Z+2, r22	; 0x02
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    213c:	91 87       	std	Z+9, r25	; 0x09
    213e:	80 87       	std	Z+8, r24	; 0x08

        if( xNextExpiryTime <= xTimeNow )
    2140:	46 17       	cp	r20, r22
    2142:	57 07       	cpc	r21, r23
    2144:	90 f0       	brcs	.+36     	; 0x216a <prvInsertTimerInActiveList+0x34>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2146:	42 1b       	sub	r20, r18
    2148:	53 0b       	sbc	r21, r19
    214a:	84 85       	ldd	r24, Z+12	; 0x0c
    214c:	95 85       	ldd	r25, Z+13	; 0x0d
    214e:	48 17       	cp	r20, r24
    2150:	59 07       	cpc	r21, r25
    2152:	e0 f4       	brcc	.+56     	; 0x218c <prvInsertTimerInActiveList+0x56>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2154:	bf 01       	movw	r22, r30
    2156:	6e 5f       	subi	r22, 0xFE	; 254
    2158:	7f 4f       	sbci	r23, 0xFF	; 255
    215a:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <pxOverflowTimerList>
    215e:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <pxOverflowTimerList+0x1>
    2162:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	08 95       	ret
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    216a:	42 17       	cp	r20, r18
    216c:	53 07       	cpc	r21, r19
    216e:	18 f4       	brcc	.+6      	; 0x2176 <prvInsertTimerInActiveList+0x40>
    2170:	62 17       	cp	r22, r18
    2172:	73 07       	cpc	r23, r19
    2174:	68 f4       	brcc	.+26     	; 0x2190 <prvInsertTimerInActiveList+0x5a>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2176:	bf 01       	movw	r22, r30
    2178:	6e 5f       	subi	r22, 0xFE	; 254
    217a:	7f 4f       	sbci	r23, 0xFF	; 255
    217c:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <pxCurrentTimerList>
    2180:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <pxCurrentTimerList+0x1>
    2184:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	08 95       	ret
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	08 95       	ret
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
    2190:	81 e0       	ldi	r24, 0x01	; 1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
    2192:	08 95       	ret

00002194 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	ec 01       	movw	r28, r24
    21a2:	8b 01       	movw	r16, r22
    21a4:	7a 01       	movw	r14, r20
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    21a6:	08 c0       	rjmp	.+16     	; 0x21b8 <prvReloadTimer+0x24>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
    21a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    21aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    21ac:	08 0f       	add	r16, r24
    21ae:	19 1f       	adc	r17, r25

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    21b0:	e8 89       	ldd	r30, Y+16	; 0x10
    21b2:	f9 89       	ldd	r31, Y+17	; 0x11
    21b4:	ce 01       	movw	r24, r28
    21b6:	09 95       	icall
                                const TickType_t xTimeNow )
    {
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    21b8:	6c 85       	ldd	r22, Y+12	; 0x0c
    21ba:	7d 85       	ldd	r23, Y+13	; 0x0d
    21bc:	60 0f       	add	r22, r16
    21be:	71 1f       	adc	r23, r17
    21c0:	98 01       	movw	r18, r16
    21c2:	a7 01       	movw	r20, r14
    21c4:	ce 01       	movw	r24, r28
    21c6:	0e 94 9b 10 	call	0x2136	; 0x2136 <prvInsertTimerInActiveList>
    21ca:	81 11       	cpse	r24, r1
    21cc:	ed cf       	rjmp	.-38     	; 0x21a8 <prvReloadTimer+0x14>

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
        }
    }
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	ff 90       	pop	r15
    21d8:	ef 90       	pop	r14
    21da:	08 95       	ret

000021dc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    21dc:	ef 92       	push	r14
    21de:	ff 92       	push	r15
    21e0:	0f 93       	push	r16
    21e2:	1f 93       	push	r17
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	8c 01       	movw	r16, r24
    21ea:	7b 01       	movw	r14, r22
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    21ec:	e0 91 29 04 	lds	r30, 0x0429	; 0x800429 <pxCurrentTimerList>
    21f0:	f0 91 2a 04 	lds	r31, 0x042A	; 0x80042a <pxCurrentTimerList+0x1>
    21f4:	05 80       	ldd	r0, Z+5	; 0x05
    21f6:	f6 81       	ldd	r31, Z+6	; 0x06
    21f8:	e0 2d       	mov	r30, r0
    21fa:	c6 81       	ldd	r28, Z+6	; 0x06
    21fc:	d7 81       	ldd	r29, Z+7	; 0x07

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    21fe:	ce 01       	movw	r24, r28
    2200:	02 96       	adiw	r24, 0x02	; 2
    2202:	0e 94 13 05 	call	0xa26	; 0xa26 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2206:	8b 89       	ldd	r24, Y+19	; 0x13
    2208:	82 ff       	sbrs	r24, 2
    220a:	06 c0       	rjmp	.+12     	; 0x2218 <prvProcessExpiredTimer+0x3c>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
    220c:	a7 01       	movw	r20, r14
    220e:	b8 01       	movw	r22, r16
    2210:	ce 01       	movw	r24, r28
    2212:	0e 94 ca 10 	call	0x2194	; 0x2194 <prvReloadTimer>
    2216:	02 c0       	rjmp	.+4      	; 0x221c <prvProcessExpiredTimer+0x40>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    2218:	8e 7f       	andi	r24, 0xFE	; 254
    221a:	8b 8b       	std	Y+19, r24	; 0x13
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    221c:	e8 89       	ldd	r30, Y+16	; 0x10
    221e:	f9 89       	ldd	r31, Y+17	; 0x11
    2220:	ce 01       	movw	r24, r28
    2222:	09 95       	icall
    }
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	ff 90       	pop	r15
    222e:	ef 90       	pop	r14
    2230:	08 95       	ret

00002232 <prvSwitchTimerLists>:

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2232:	09 c0       	rjmp	.+18     	; 0x2246 <prvSwitchTimerLists+0x14>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2234:	05 80       	ldd	r0, Z+5	; 0x05
    2236:	f6 81       	ldd	r31, Z+6	; 0x06
    2238:	e0 2d       	mov	r30, r0

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
    223a:	6f ef       	ldi	r22, 0xFF	; 255
    223c:	7f ef       	ldi	r23, 0xFF	; 255
    223e:	80 81       	ld	r24, Z
    2240:	91 81       	ldd	r25, Z+1	; 0x01
    2242:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvProcessExpiredTimer>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2246:	e0 91 29 04 	lds	r30, 0x0429	; 0x800429 <pxCurrentTimerList>
    224a:	f0 91 2a 04 	lds	r31, 0x042A	; 0x80042a <pxCurrentTimerList+0x1>
    224e:	80 81       	ld	r24, Z
    2250:	81 11       	cpse	r24, r1
    2252:	f0 cf       	rjmp	.-32     	; 0x2234 <prvSwitchTimerLists+0x2>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2254:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <pxOverflowTimerList>
    2258:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <pxOverflowTimerList+0x1>
    225c:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <pxCurrentTimerList+0x1>
    2260:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2264:	f0 93 28 04 	sts	0x0428, r31	; 0x800428 <pxOverflowTimerList+0x1>
    2268:	e0 93 27 04 	sts	0x0427, r30	; 0x800427 <pxOverflowTimerList>
    226c:	08 95       	ret

0000226e <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    226e:	0f 93       	push	r16
    2270:	1f 93       	push	r17
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	8c 01       	movw	r16, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2278:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <xTaskGetTickCount>
    227c:	ec 01       	movw	r28, r24

        if( xTimeNow < xLastTime )
    227e:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <xLastTime.2434>
    2282:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <xLastTime.2434+0x1>
    2286:	c8 17       	cp	r28, r24
    2288:	d9 07       	cpc	r29, r25
    228a:	30 f4       	brcc	.+12     	; 0x2298 <prvSampleTimeNow+0x2a>
        {
            prvSwitchTimerLists();
    228c:	0e 94 19 11 	call	0x2232	; 0x2232 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	f8 01       	movw	r30, r16
    2294:	80 83       	st	Z, r24
    2296:	02 c0       	rjmp	.+4      	; 0x229c <prvSampleTimeNow+0x2e>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2298:	f8 01       	movw	r30, r16
    229a:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    229c:	d0 93 22 04 	sts	0x0422, r29	; 0x800422 <xLastTime.2434+0x1>
    22a0:	c0 93 21 04 	sts	0x0421, r28	; 0x800421 <xLastTime.2434>

        return xTimeNow;
    }
    22a4:	ce 01       	movw	r24, r28
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	1f 91       	pop	r17
    22ac:	0f 91       	pop	r16
    22ae:	08 95       	ret

000022b0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    22b0:	cf 92       	push	r12
    22b2:	df 92       	push	r13
    22b4:	ef 92       	push	r14
    22b6:	ff 92       	push	r15
    22b8:	1f 93       	push	r17
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
    22be:	1f 92       	push	r1
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	7c 01       	movw	r14, r24
    22c6:	16 2f       	mov	r17, r22
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    22c8:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    22cc:	ce 01       	movw	r24, r28
    22ce:	01 96       	adiw	r24, 0x01	; 1
    22d0:	0e 94 37 11 	call	0x226e	; 0x226e <prvSampleTimeNow>
    22d4:	6c 01       	movw	r12, r24

            if( xTimerListsWereSwitched == pdFALSE )
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	81 11       	cpse	r24, r1
    22da:	27 c0       	rjmp	.+78     	; 0x232a <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    22dc:	11 11       	cpse	r17, r1
    22de:	0a c0       	rjmp	.+20     	; 0x22f4 <prvProcessTimerOrBlockTask+0x44>
    22e0:	ce 14       	cp	r12, r14
    22e2:	df 04       	cpc	r13, r15
    22e4:	38 f0       	brcs	.+14     	; 0x22f4 <prvProcessTimerOrBlockTask+0x44>
                {
                    ( void ) xTaskResumeAll();
    22e6:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    22ea:	b6 01       	movw	r22, r12
    22ec:	c7 01       	movw	r24, r14
    22ee:	0e 94 ee 10 	call	0x21dc	; 0x21dc <prvProcessExpiredTimer>
    22f2:	1d c0       	rjmp	.+58     	; 0x232e <prvProcessTimerOrBlockTask+0x7e>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    22f4:	11 23       	and	r17, r17
    22f6:	41 f0       	breq	.+16     	; 0x2308 <prvProcessTimerOrBlockTask+0x58>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    22f8:	e0 91 27 04 	lds	r30, 0x0427	; 0x800427 <pxOverflowTimerList>
    22fc:	f0 91 28 04 	lds	r31, 0x0428	; 0x800428 <pxOverflowTimerList+0x1>
    2300:	80 81       	ld	r24, Z
    2302:	11 e0       	ldi	r17, 0x01	; 1
    2304:	81 11       	cpse	r24, r1
    2306:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2308:	b7 01       	movw	r22, r14
    230a:	6c 19       	sub	r22, r12
    230c:	7d 09       	sbc	r23, r13
    230e:	41 2f       	mov	r20, r17
    2310:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <xTimerQueue>
    2314:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <xTimerQueue+0x1>
    2318:	0e 94 b3 09 	call	0x1366	; 0x1366 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    231c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <xTaskResumeAll>
    2320:	81 11       	cpse	r24, r1
    2322:	05 c0       	rjmp	.+10     	; 0x232e <prvProcessTimerOrBlockTask+0x7e>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2324:	0e 94 de 05 	call	0xbbc	; 0xbbc <vPortYield>
    2328:	02 c0       	rjmp	.+4      	; 0x232e <prvProcessTimerOrBlockTask+0x7e>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    232a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <xTaskResumeAll>
            }
        }
    }
    232e:	0f 90       	pop	r0
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	1f 91       	pop	r17
    2336:	ff 90       	pop	r15
    2338:	ef 90       	pop	r14
    233a:	df 90       	pop	r13
    233c:	cf 90       	pop	r12
    233e:	08 95       	ret

00002340 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2340:	ef 92       	push	r14
    2342:	ff 92       	push	r15
    2344:	0f 93       	push	r16
    2346:	1f 93       	push	r17
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	00 d0       	rcall	.+0      	; 0x234e <prvProcessReceivedCommands+0xe>
    234e:	00 d0       	rcall	.+0      	; 0x2350 <prvProcessReceivedCommands+0x10>
    2350:	00 d0       	rcall	.+0      	; 0x2352 <prvProcessReceivedCommands+0x12>
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2356:	7a c0       	rjmp	.+244    	; 0x244c <prvProcessReceivedCommands+0x10c>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	88 23       	and	r24, r24
    235c:	0c f4       	brge	.+2      	; 0x2360 <prvProcessReceivedCommands+0x20>
    235e:	76 c0       	rjmp	.+236    	; 0x244c <prvProcessReceivedCommands+0x10c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2360:	0c 81       	ldd	r16, Y+4	; 0x04
    2362:	1d 81       	ldd	r17, Y+5	; 0x05

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2364:	d8 01       	movw	r26, r16
    2366:	1a 96       	adiw	r26, 0x0a	; 10
    2368:	8d 91       	ld	r24, X+
    236a:	9c 91       	ld	r25, X
    236c:	1b 97       	sbiw	r26, 0x0b	; 11
    236e:	89 2b       	or	r24, r25
    2370:	21 f0       	breq	.+8      	; 0x237a <prvProcessReceivedCommands+0x3a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2372:	c8 01       	movw	r24, r16
    2374:	02 96       	adiw	r24, 0x02	; 2
    2376:	0e 94 13 05 	call	0xa26	; 0xa26 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    237a:	ce 01       	movw	r24, r28
    237c:	06 96       	adiw	r24, 0x06	; 6
    237e:	0e 94 37 11 	call	0x226e	; 0x226e <prvSampleTimeNow>
    2382:	7c 01       	movw	r14, r24

                switch( xMessage.xMessageID )
    2384:	e9 81       	ldd	r30, Y+1	; 0x01
    2386:	8e 2f       	mov	r24, r30
    2388:	ee 0f       	add	r30, r30
    238a:	99 0b       	sbc	r25, r25
    238c:	aa 0b       	sbc	r26, r26
    238e:	bb 0b       	sbc	r27, r27
    2390:	fc 01       	movw	r30, r24
    2392:	31 97       	sbiw	r30, 0x01	; 1
    2394:	e9 30       	cpi	r30, 0x09	; 9
    2396:	f1 05       	cpc	r31, r1
    2398:	08 f0       	brcs	.+2      	; 0x239c <prvProcessReceivedCommands+0x5c>
    239a:	58 c0       	rjmp	.+176    	; 0x244c <prvProcessReceivedCommands+0x10c>
    239c:	e6 5d       	subi	r30, 0xD6	; 214
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__tablejump2__>
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    23a4:	f8 01       	movw	r30, r16
    23a6:	83 89       	ldd	r24, Z+19	; 0x13
    23a8:	81 60       	ori	r24, 0x01	; 1
    23aa:	83 8b       	std	Z+19, r24	; 0x13

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    23ac:	2a 81       	ldd	r18, Y+2	; 0x02
    23ae:	3b 81       	ldd	r19, Y+3	; 0x03
    23b0:	64 85       	ldd	r22, Z+12	; 0x0c
    23b2:	75 85       	ldd	r23, Z+13	; 0x0d
    23b4:	62 0f       	add	r22, r18
    23b6:	73 1f       	adc	r23, r19
    23b8:	a7 01       	movw	r20, r14
    23ba:	c8 01       	movw	r24, r16
    23bc:	0e 94 9b 10 	call	0x2136	; 0x2136 <prvInsertTimerInActiveList>
    23c0:	88 23       	and	r24, r24
    23c2:	09 f4       	brne	.+2      	; 0x23c6 <prvProcessReceivedCommands+0x86>
    23c4:	43 c0       	rjmp	.+134    	; 0x244c <prvProcessReceivedCommands+0x10c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    23c6:	d8 01       	movw	r26, r16
    23c8:	53 96       	adiw	r26, 0x13	; 19
    23ca:	8c 91       	ld	r24, X
    23cc:	53 97       	sbiw	r26, 0x13	; 19
    23ce:	82 ff       	sbrs	r24, 2
    23d0:	0d c0       	rjmp	.+26     	; 0x23ec <prvProcessReceivedCommands+0xac>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
    23d2:	6a 81       	ldd	r22, Y+2	; 0x02
    23d4:	7b 81       	ldd	r23, Y+3	; 0x03
    23d6:	1c 96       	adiw	r26, 0x0c	; 12
    23d8:	8d 91       	ld	r24, X+
    23da:	9c 91       	ld	r25, X
    23dc:	1d 97       	sbiw	r26, 0x0d	; 13
    23de:	68 0f       	add	r22, r24
    23e0:	79 1f       	adc	r23, r25
    23e2:	a7 01       	movw	r20, r14
    23e4:	c8 01       	movw	r24, r16
    23e6:	0e 94 ca 10 	call	0x2194	; 0x2194 <prvReloadTimer>
    23ea:	03 c0       	rjmp	.+6      	; 0x23f2 <prvProcessReceivedCommands+0xb2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    23ec:	8e 7f       	andi	r24, 0xFE	; 254
    23ee:	f8 01       	movw	r30, r16
    23f0:	83 8b       	std	Z+19, r24	; 0x13
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    23f2:	d8 01       	movw	r26, r16
    23f4:	50 96       	adiw	r26, 0x10	; 16
    23f6:	ed 91       	ld	r30, X+
    23f8:	fc 91       	ld	r31, X
    23fa:	51 97       	sbiw	r26, 0x11	; 17
    23fc:	c8 01       	movw	r24, r16
    23fe:	09 95       	icall
    2400:	25 c0       	rjmp	.+74     	; 0x244c <prvProcessReceivedCommands+0x10c>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    2402:	f8 01       	movw	r30, r16
    2404:	83 89       	ldd	r24, Z+19	; 0x13
    2406:	8e 7f       	andi	r24, 0xFE	; 254
    2408:	83 8b       	std	Z+19, r24	; 0x13
                        break;
    240a:	20 c0       	rjmp	.+64     	; 0x244c <prvProcessReceivedCommands+0x10c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    240c:	d8 01       	movw	r26, r16
    240e:	53 96       	adiw	r26, 0x13	; 19
    2410:	8c 91       	ld	r24, X
    2412:	53 97       	sbiw	r26, 0x13	; 19
    2414:	81 60       	ori	r24, 0x01	; 1
    2416:	53 96       	adiw	r26, 0x13	; 19
    2418:	8c 93       	st	X, r24
    241a:	53 97       	sbiw	r26, 0x13	; 19
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    241c:	6a 81       	ldd	r22, Y+2	; 0x02
    241e:	7b 81       	ldd	r23, Y+3	; 0x03
    2420:	1d 96       	adiw	r26, 0x0d	; 13
    2422:	7c 93       	st	X, r23
    2424:	6e 93       	st	-X, r22
    2426:	1c 97       	sbiw	r26, 0x0c	; 12
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2428:	6e 0d       	add	r22, r14
    242a:	7f 1d       	adc	r23, r15
    242c:	97 01       	movw	r18, r14
    242e:	a7 01       	movw	r20, r14
    2430:	c8 01       	movw	r24, r16
    2432:	0e 94 9b 10 	call	0x2136	; 0x2136 <prvInsertTimerInActiveList>
                        break;
    2436:	0a c0       	rjmp	.+20     	; 0x244c <prvProcessReceivedCommands+0x10c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2438:	f8 01       	movw	r30, r16
    243a:	83 89       	ldd	r24, Z+19	; 0x13
    243c:	81 fd       	sbrc	r24, 1
    243e:	04 c0       	rjmp	.+8      	; 0x2448 <prvProcessReceivedCommands+0x108>
                                {
                                    vPortFree( pxTimer );
    2440:	c8 01       	movw	r24, r16
    2442:	0e 94 9d 04 	call	0x93a	; 0x93a <vPortFree>
    2446:	02 c0       	rjmp	.+4      	; 0x244c <prvProcessReceivedCommands+0x10c>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    2448:	8e 7f       	andi	r24, 0xFE	; 254
    244a:	83 8b       	std	Z+19, r24	; 0x13
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    244c:	40 e0       	ldi	r20, 0x00	; 0
    244e:	50 e0       	ldi	r21, 0x00	; 0
    2450:	be 01       	movw	r22, r28
    2452:	6f 5f       	subi	r22, 0xFF	; 255
    2454:	7f 4f       	sbci	r23, 0xFF	; 255
    2456:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <xTimerQueue>
    245a:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <xTimerQueue+0x1>
    245e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <xQueueReceive>
    2462:	81 11       	cpse	r24, r1
    2464:	79 cf       	rjmp	.-270    	; 0x2358 <prvProcessReceivedCommands+0x18>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2466:	26 96       	adiw	r28, 0x06	; 6
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	1f 91       	pop	r17
    2478:	0f 91       	pop	r16
    247a:	ff 90       	pop	r15
    247c:	ef 90       	pop	r14
    247e:	08 95       	ret

00002480 <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
    2480:	cf 93       	push	r28
    2482:	df 93       	push	r29
    2484:	1f 92       	push	r1
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    248a:	ce 01       	movw	r24, r28
    248c:	01 96       	adiw	r24, 0x01	; 1
    248e:	0e 94 86 10 	call	0x210c	; 0x210c <prvGetNextExpireTime>

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    2492:	69 81       	ldd	r22, Y+1	; 0x01
    2494:	0e 94 58 11 	call	0x22b0	; 0x22b0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
    2498:	0e 94 a0 11 	call	0x2340	; 0x2340 <prvProcessReceivedCommands>
    249c:	f6 cf       	rjmp	.-20     	; 0x248a <prvTimerTask+0xa>

0000249e <prvCheckForValidListAndQueue>:
    static void prvCheckForValidListAndQueue( void )
    {
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    24a4:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <xTimerQueue>
    24a8:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <xTimerQueue+0x1>
    24ac:	89 2b       	or	r24, r25
    24ae:	19 f5       	brne	.+70     	; 0x24f6 <prvCheckForValidListAndQueue+0x58>
            {
                vListInitialise( &xActiveTimerList1 );
    24b0:	84 e3       	ldi	r24, 0x34	; 52
    24b2:	94 e0       	ldi	r25, 0x04	; 4
    24b4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    24b8:	8b e2       	ldi	r24, 0x2B	; 43
    24ba:	94 e0       	ldi	r25, 0x04	; 4
    24bc:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    24c0:	84 e3       	ldi	r24, 0x34	; 52
    24c2:	94 e0       	ldi	r25, 0x04	; 4
    24c4:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <pxCurrentTimerList+0x1>
    24c8:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    24cc:	8b e2       	ldi	r24, 0x2B	; 43
    24ce:	94 e0       	ldi	r25, 0x04	; 4
    24d0:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <pxOverflowTimerList+0x1>
    24d4:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <pxOverflowTimerList>

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    24d8:	40 e0       	ldi	r20, 0x00	; 0
    24da:	65 e0       	ldi	r22, 0x05	; 5
    24dc:	85 e0       	ldi	r24, 0x05	; 5
    24de:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <xQueueGenericCreate>
    24e2:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <xTimerQueue+0x1>
    24e6:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <xTimerQueue>
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
    24ea:	00 97       	sbiw	r24, 0x00	; 0
    24ec:	21 f0       	breq	.+8      	; 0x24f6 <prvCheckForValidListAndQueue+0x58>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    24ee:	6a e6       	ldi	r22, 0x6A	; 106
    24f0:	70 e0       	ldi	r23, 0x00	; 0
    24f2:	0e 94 79 09 	call	0x12f2	; 0x12f2 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    24f6:	0f 90       	pop	r0
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	08 95       	ret

000024fc <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
    24fc:	7f 92       	push	r7
    24fe:	8f 92       	push	r8
    2500:	9f 92       	push	r9
    2502:	af 92       	push	r10
    2504:	bf 92       	push	r11
    2506:	cf 92       	push	r12
    2508:	df 92       	push	r13
    250a:	ef 92       	push	r14
    250c:	ff 92       	push	r15
    250e:	0f 93       	push	r16
    2510:	1f 93       	push	r17
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	4c 01       	movw	r8, r24
    2518:	5b 01       	movw	r10, r22
    251a:	74 2e       	mov	r7, r20
    251c:	69 01       	movw	r12, r18
    251e:	e7 01       	movw	r28, r14
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
    2520:	0e 94 4f 12 	call	0x249e	; 0x249e <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    2524:	99 82       	std	Y+1, r9	; 0x01
    2526:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    2528:	bd 86       	std	Y+13, r11	; 0x0d
    252a:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    252c:	df 86       	std	Y+15, r13	; 0x0f
    252e:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    2530:	19 8b       	std	Y+17, r17	; 0x11
    2532:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    2534:	c7 01       	movw	r24, r14
    2536:	02 96       	adiw	r24, 0x02	; 2
    2538:	0e 94 de 04 	call	0x9bc	; 0x9bc <vListInitialiseItem>

        if( uxAutoReload != pdFALSE )
    253c:	77 20       	and	r7, r7
    253e:	19 f0       	breq	.+6      	; 0x2546 <prvInitialiseNewTimer+0x4a>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    2540:	8b 89       	ldd	r24, Y+19	; 0x13
    2542:	84 60       	ori	r24, 0x04	; 4
    2544:	8b 8b       	std	Y+19, r24	; 0x13
        }

        traceTIMER_CREATE( pxNewTimer );
    }
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	1f 91       	pop	r17
    254c:	0f 91       	pop	r16
    254e:	ff 90       	pop	r15
    2550:	ef 90       	pop	r14
    2552:	df 90       	pop	r13
    2554:	cf 90       	pop	r12
    2556:	bf 90       	pop	r11
    2558:	af 90       	pop	r10
    255a:	9f 90       	pop	r9
    255c:	8f 90       	pop	r8
    255e:	7f 90       	pop	r7
    2560:	08 95       	ret

00002562 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
    2562:	ef 92       	push	r14
    2564:	ff 92       	push	r15
    2566:	0f 93       	push	r16

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    2568:	0e 94 4f 12 	call	0x249e	; 0x249e <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
    256c:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <xTimerQueue>
    2570:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <xTimerQueue+0x1>
    2574:	89 2b       	or	r24, r25
    2576:	91 f0       	breq	.+36     	; 0x259c <xTimerCreateTimerTask+0x3a>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
    2578:	0f 2e       	mov	r0, r31
    257a:	f3 e2       	ldi	r31, 0x23	; 35
    257c:	ef 2e       	mov	r14, r31
    257e:	f4 e0       	ldi	r31, 0x04	; 4
    2580:	ff 2e       	mov	r15, r31
    2582:	f0 2d       	mov	r31, r0
    2584:	04 e0       	ldi	r16, 0x04	; 4
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	48 ec       	ldi	r20, 0xC8	; 200
    258c:	50 e0       	ldi	r21, 0x00	; 0
    258e:	6f e6       	ldi	r22, 0x6F	; 111
    2590:	70 e0       	ldi	r23, 0x00	; 0
    2592:	80 e4       	ldi	r24, 0x40	; 64
    2594:	92 e1       	ldi	r25, 0x12	; 18
    2596:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <xTaskCreate>
    259a:	01 c0       	rjmp	.+2      	; 0x259e <xTimerCreateTimerTask+0x3c>
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
        BaseType_t xReturn = pdFAIL;
    259c:	80 e0       	ldi	r24, 0x00	; 0
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
    }
    259e:	0f 91       	pop	r16
    25a0:	ff 90       	pop	r15
    25a2:	ef 90       	pop	r14
    25a4:	08 95       	ret

000025a6 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
    25a6:	7f 92       	push	r7
    25a8:	8f 92       	push	r8
    25aa:	9f 92       	push	r9
    25ac:	af 92       	push	r10
    25ae:	bf 92       	push	r11
    25b0:	cf 92       	push	r12
    25b2:	df 92       	push	r13
    25b4:	ef 92       	push	r14
    25b6:	ff 92       	push	r15
    25b8:	0f 93       	push	r16
    25ba:	1f 93       	push	r17
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	6c 01       	movw	r12, r24
    25c2:	5b 01       	movw	r10, r22
    25c4:	74 2e       	mov	r7, r20
    25c6:	49 01       	movw	r8, r18
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
    25c8:	84 e1       	ldi	r24, 0x14	; 20
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	0e 94 08 04 	call	0x810	; 0x810 <pvPortMalloc>
    25d0:	ec 01       	movw	r28, r24

            if( pxNewTimer != NULL )
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	41 f0       	breq	.+16     	; 0x25e6 <xTimerCreate+0x40>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
    25d6:	1b 8a       	std	Y+19, r1	; 0x13
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
    25d8:	7c 01       	movw	r14, r24
    25da:	94 01       	movw	r18, r8
    25dc:	47 2d       	mov	r20, r7
    25de:	b5 01       	movw	r22, r10
    25e0:	c6 01       	movw	r24, r12
    25e2:	0e 94 7e 12 	call	0x24fc	; 0x24fc <prvInitialiseNewTimer>
            }

            return pxNewTimer;
        }
    25e6:	ce 01       	movw	r24, r28
    25e8:	df 91       	pop	r29
    25ea:	cf 91       	pop	r28
    25ec:	1f 91       	pop	r17
    25ee:	0f 91       	pop	r16
    25f0:	ff 90       	pop	r15
    25f2:	ef 90       	pop	r14
    25f4:	df 90       	pop	r13
    25f6:	cf 90       	pop	r12
    25f8:	bf 90       	pop	r11
    25fa:	af 90       	pop	r10
    25fc:	9f 90       	pop	r9
    25fe:	8f 90       	pop	r8
    2600:	7f 90       	pop	r7
    2602:	08 95       	ret

00002604 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2604:	0f 93       	push	r16
    2606:	1f 93       	push	r17
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
    260c:	00 d0       	rcall	.+0      	; 0x260e <xTimerGenericCommand+0xa>
    260e:	00 d0       	rcall	.+0      	; 0x2610 <xTimerGenericCommand+0xc>
    2610:	1f 92       	push	r1
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2616:	e0 91 25 04 	lds	r30, 0x0425	; 0x800425 <xTimerQueue>
    261a:	f0 91 26 04 	lds	r31, 0x0426	; 0x800426 <xTimerQueue+0x1>
    261e:	30 97       	sbiw	r30, 0x00	; 0
    2620:	71 f1       	breq	.+92     	; 0x267e <xTimerGenericCommand+0x7a>
    2622:	d9 01       	movw	r26, r18
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2624:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2626:	5b 83       	std	Y+3, r21	; 0x03
    2628:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    262a:	9d 83       	std	Y+5, r25	; 0x05
    262c:	8c 83       	std	Y+4, r24	; 0x04

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    262e:	66 30       	cpi	r22, 0x06	; 6
    2630:	ec f4       	brge	.+58     	; 0x266c <xTimerGenericCommand+0x68>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2632:	0e 94 15 10 	call	0x202a	; 0x202a <xTaskGetSchedulerState>
    2636:	82 30       	cpi	r24, 0x02	; 2
    2638:	61 f4       	brne	.+24     	; 0x2652 <xTimerGenericCommand+0x4e>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	a8 01       	movw	r20, r16
    263e:	be 01       	movw	r22, r28
    2640:	6f 5f       	subi	r22, 0xFF	; 255
    2642:	7f 4f       	sbci	r23, 0xFF	; 255
    2644:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <xTimerQueue>
    2648:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <xTimerQueue+0x1>
    264c:	0e 94 1c 08 	call	0x1038	; 0x1038 <xQueueGenericSend>
    2650:	17 c0       	rjmp	.+46     	; 0x2680 <xTimerGenericCommand+0x7c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	50 e0       	ldi	r21, 0x00	; 0
    2658:	be 01       	movw	r22, r28
    265a:	6f 5f       	subi	r22, 0xFF	; 255
    265c:	7f 4f       	sbci	r23, 0xFF	; 255
    265e:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <xTimerQueue>
    2662:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <xTimerQueue+0x1>
    2666:	0e 94 1c 08 	call	0x1038	; 0x1038 <xQueueGenericSend>
    266a:	0a c0       	rjmp	.+20     	; 0x2680 <xTimerGenericCommand+0x7c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	ad 01       	movw	r20, r26
    2670:	be 01       	movw	r22, r28
    2672:	6f 5f       	subi	r22, 0xFF	; 255
    2674:	7f 4f       	sbci	r23, 0xFF	; 255
    2676:	cf 01       	movw	r24, r30
    2678:	0e 94 ae 08 	call	0x115c	; 0x115c <xQueueGenericSendFromISR>
    267c:	01 c0       	rjmp	.+2      	; 0x2680 <xTimerGenericCommand+0x7c>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    267e:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	df 91       	pop	r29
    268c:	cf 91       	pop	r28
    268e:	1f 91       	pop	r17
    2690:	0f 91       	pop	r16
    2692:	08 95       	ret

00002694 <led_toggle>:
	}
}

void led_toggle (TimerHandle_t timer)
{
	if(flag1 == 0)
    2694:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <flag1>
    2698:	81 11       	cpse	r24, r1
    269a:	08 c0       	rjmp	.+16     	; 0x26ac <led_toggle+0x18>
	{
		digitalWrite(A4, HIGH);
    269c:	63 e3       	ldi	r22, 0x33	; 51
    269e:	84 e0       	ldi	r24, 0x04	; 4
    26a0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <digitalWrite>
		flag1 = 1;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <flag1>
    26aa:	08 95       	ret
	}
	else if(flag1 == 1)
    26ac:	81 30       	cpi	r24, 0x01	; 1
    26ae:	31 f4       	brne	.+12     	; 0x26bc <led_toggle+0x28>
	{
		digitalWrite(A4, LOW);
    26b0:	62 e3       	ldi	r22, 0x32	; 50
    26b2:	84 e0       	ldi	r24, 0x04	; 4
    26b4:	0e 94 db 01 	call	0x3b6	; 0x3b6 <digitalWrite>
		flag1 = 0;
    26b8:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <flag1>
    26bc:	08 95       	ret

000026be <read_button>:

void read_button (void* ptr)
{
	while(1)
	{
		if(digitalRead(A0) == 0 && flag == 0)
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	0e 94 05 03 	call	0x60a	; 0x60a <digitalRead>
    26c4:	81 11       	cpse	r24, r1
    26c6:	16 c0       	rjmp	.+44     	; 0x26f4 <read_button+0x36>
    26c8:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <flag>
    26cc:	81 11       	cpse	r24, r1
    26ce:	12 c0       	rjmp	.+36     	; 0x26f4 <read_button+0x36>
		{
			xTimerReset(timer1,0);
    26d0:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <xTaskGetTickCount>
    26d4:	00 e0       	ldi	r16, 0x00	; 0
    26d6:	10 e0       	ldi	r17, 0x00	; 0
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	ac 01       	movw	r20, r24
    26de:	62 e0       	ldi	r22, 0x02	; 2
    26e0:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <timer1>
    26e4:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <timer1+0x1>
    26e8:	0e 94 02 13 	call	0x2604	; 0x2604 <xTimerGenericCommand>
			flag = 1;
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <flag>
    26f2:	e5 cf       	rjmp	.-54     	; 0x26be <read_button>
		}
		else if(digitalRead(A1) == 0 && flag == 0)
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	0e 94 05 03 	call	0x60a	; 0x60a <digitalRead>
    26fa:	81 11       	cpse	r24, r1
    26fc:	15 c0       	rjmp	.+42     	; 0x2728 <read_button+0x6a>
    26fe:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <flag>
    2702:	81 11       	cpse	r24, r1
    2704:	11 c0       	rjmp	.+34     	; 0x2728 <read_button+0x6a>
		{
			xTimerStop(timer1,0);
    2706:	00 e0       	ldi	r16, 0x00	; 0
    2708:	10 e0       	ldi	r17, 0x00	; 0
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	40 e0       	ldi	r20, 0x00	; 0
    2710:	50 e0       	ldi	r21, 0x00	; 0
    2712:	63 e0       	ldi	r22, 0x03	; 3
    2714:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <timer1>
    2718:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <timer1+0x1>
    271c:	0e 94 02 13 	call	0x2604	; 0x2604 <xTimerGenericCommand>
			flag = 1;
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <flag>
    2726:	cb cf       	rjmp	.-106    	; 0x26be <read_button>
		}
		else if(digitalRead(A2) == 0 && flag == 0)
    2728:	82 e0       	ldi	r24, 0x02	; 2
    272a:	0e 94 05 03 	call	0x60a	; 0x60a <digitalRead>
    272e:	81 11       	cpse	r24, r1
    2730:	51 c0       	rjmp	.+162    	; 0x27d4 <read_button+0x116>
    2732:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <flag>
    2736:	81 11       	cpse	r24, r1
    2738:	4d c0       	rjmp	.+154    	; 0x27d4 <read_button+0x116>
		{
			period = period*2;
    273a:	20 90 63 00 	lds	r2, 0x0063	; 0x800063 <period>
    273e:	30 90 64 00 	lds	r3, 0x0064	; 0x800064 <period+0x1>
    2742:	22 0c       	add	r2, r2
    2744:	33 1c       	adc	r3, r3
    2746:	30 92 64 00 	sts	0x0064, r3	; 0x800064 <period+0x1>
    274a:	20 92 63 00 	sts	0x0063, r2	; 0x800063 <period>
			xTimerChangePeriod(timer1, pdMS_TO_TICKS(period), 0);
    274e:	22 2d       	mov	r18, r2
    2750:	33 2d       	mov	r19, r3
    2752:	40 e0       	ldi	r20, 0x00	; 0
    2754:	50 e0       	ldi	r21, 0x00	; 0
    2756:	60 e0       	ldi	r22, 0x00	; 0
    2758:	70 e0       	ldi	r23, 0x00	; 0
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	02 e0       	ldi	r16, 0x02	; 2
    275e:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__ashldi3>
    2762:	a2 2e       	mov	r10, r18
    2764:	b3 2e       	mov	r11, r19
    2766:	c4 2e       	mov	r12, r20
    2768:	d5 2e       	mov	r13, r21
    276a:	e6 2e       	mov	r14, r22
    276c:	f7 2e       	mov	r15, r23
    276e:	e8 2f       	mov	r30, r24
    2770:	19 2f       	mov	r17, r25
    2772:	05 e0       	ldi	r16, 0x05	; 5
    2774:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__ashldi3>
    2778:	0e 2f       	mov	r16, r30
    277a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__subdi3>
    277e:	a2 2c       	mov	r10, r2
    2780:	b3 2c       	mov	r11, r3
    2782:	c1 2c       	mov	r12, r1
    2784:	d1 2c       	mov	r13, r1
    2786:	e1 2c       	mov	r14, r1
    2788:	f1 2c       	mov	r15, r1
    278a:	00 e0       	ldi	r16, 0x00	; 0
    278c:	10 e0       	ldi	r17, 0x00	; 0
    278e:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__adddi3>
    2792:	03 e0       	ldi	r16, 0x03	; 3
    2794:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__ashldi3>
    2798:	0f 2e       	mov	r0, r31
    279a:	f8 ee       	ldi	r31, 0xE8	; 232
    279c:	af 2e       	mov	r10, r31
    279e:	f0 2d       	mov	r31, r0
    27a0:	0f 2e       	mov	r0, r31
    27a2:	f3 e0       	ldi	r31, 0x03	; 3
    27a4:	bf 2e       	mov	r11, r31
    27a6:	f0 2d       	mov	r31, r0
    27a8:	00 e0       	ldi	r16, 0x00	; 0
    27aa:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__udivdi3>
    27ae:	92 2f       	mov	r25, r18
    27b0:	83 2f       	mov	r24, r19
    27b2:	00 e0       	ldi	r16, 0x00	; 0
    27b4:	10 e0       	ldi	r17, 0x00	; 0
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	49 2f       	mov	r20, r25
    27bc:	58 2f       	mov	r21, r24
    27be:	64 e0       	ldi	r22, 0x04	; 4
    27c0:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <timer1>
    27c4:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <timer1+0x1>
    27c8:	0e 94 02 13 	call	0x2604	; 0x2604 <xTimerGenericCommand>
			flag = 1;
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <flag>
    27d2:	75 cf       	rjmp	.-278    	; 0x26be <read_button>
		}
		else if(digitalRead(A3) == 0 && flag == 0)
    27d4:	83 e0       	ldi	r24, 0x03	; 3
    27d6:	0e 94 05 03 	call	0x60a	; 0x60a <digitalRead>
    27da:	81 11       	cpse	r24, r1
    27dc:	53 c0       	rjmp	.+166    	; 0x2884 <read_button+0x1c6>
    27de:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <flag>
    27e2:	81 11       	cpse	r24, r1
    27e4:	4f c0       	rjmp	.+158    	; 0x2884 <read_button+0x1c6>
		{
			period = period/2;
    27e6:	20 90 63 00 	lds	r2, 0x0063	; 0x800063 <period>
    27ea:	30 90 64 00 	lds	r3, 0x0064	; 0x800064 <period+0x1>
    27ee:	36 94       	lsr	r3
    27f0:	27 94       	ror	r2
    27f2:	30 92 64 00 	sts	0x0064, r3	; 0x800064 <period+0x1>
    27f6:	20 92 63 00 	sts	0x0063, r2	; 0x800063 <period>
			xTimerChangePeriod(timer1, pdMS_TO_TICKS(period), 0);
    27fa:	22 2d       	mov	r18, r2
    27fc:	33 2d       	mov	r19, r3
    27fe:	40 e0       	ldi	r20, 0x00	; 0
    2800:	50 e0       	ldi	r21, 0x00	; 0
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	70 e0       	ldi	r23, 0x00	; 0
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	02 e0       	ldi	r16, 0x02	; 2
    280a:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__ashldi3>
    280e:	a2 2e       	mov	r10, r18
    2810:	b3 2e       	mov	r11, r19
    2812:	c4 2e       	mov	r12, r20
    2814:	d5 2e       	mov	r13, r21
    2816:	e6 2e       	mov	r14, r22
    2818:	f7 2e       	mov	r15, r23
    281a:	e8 2f       	mov	r30, r24
    281c:	19 2f       	mov	r17, r25
    281e:	05 e0       	ldi	r16, 0x05	; 5
    2820:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__ashldi3>
    2824:	0e 2f       	mov	r16, r30
    2826:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__subdi3>
    282a:	a2 2c       	mov	r10, r2
    282c:	b3 2c       	mov	r11, r3
    282e:	c1 2c       	mov	r12, r1
    2830:	d1 2c       	mov	r13, r1
    2832:	e1 2c       	mov	r14, r1
    2834:	f1 2c       	mov	r15, r1
    2836:	00 e0       	ldi	r16, 0x00	; 0
    2838:	10 e0       	ldi	r17, 0x00	; 0
    283a:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__adddi3>
    283e:	03 e0       	ldi	r16, 0x03	; 3
    2840:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__ashldi3>
    2844:	0f 2e       	mov	r0, r31
    2846:	f8 ee       	ldi	r31, 0xE8	; 232
    2848:	af 2e       	mov	r10, r31
    284a:	f0 2d       	mov	r31, r0
    284c:	0f 2e       	mov	r0, r31
    284e:	f3 e0       	ldi	r31, 0x03	; 3
    2850:	bf 2e       	mov	r11, r31
    2852:	f0 2d       	mov	r31, r0
    2854:	f1 2c       	mov	r15, r1
    2856:	00 e0       	ldi	r16, 0x00	; 0
    2858:	10 e0       	ldi	r17, 0x00	; 0
    285a:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__udivdi3>
    285e:	92 2f       	mov	r25, r18
    2860:	83 2f       	mov	r24, r19
    2862:	00 e0       	ldi	r16, 0x00	; 0
    2864:	10 e0       	ldi	r17, 0x00	; 0
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	49 2f       	mov	r20, r25
    286c:	58 2f       	mov	r21, r24
    286e:	64 e0       	ldi	r22, 0x04	; 4
    2870:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <timer1>
    2874:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <timer1+0x1>
    2878:	0e 94 02 13 	call	0x2604	; 0x2604 <xTimerGenericCommand>
			flag = 1;
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <flag>
    2882:	1d cf       	rjmp	.-454    	; 0x26be <read_button>
		}
		else if(digitalRead(A0) == 1 && digitalRead(A1) == 1 && digitalRead(A2) == 1 && digitalRead(A3) == 1)
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	0e 94 05 03 	call	0x60a	; 0x60a <digitalRead>
    288a:	88 23       	and	r24, r24
    288c:	09 f4       	brne	.+2      	; 0x2890 <read_button+0x1d2>
    288e:	17 cf       	rjmp	.-466    	; 0x26be <read_button>
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	0e 94 05 03 	call	0x60a	; 0x60a <digitalRead>
    2896:	88 23       	and	r24, r24
    2898:	09 f4       	brne	.+2      	; 0x289c <read_button+0x1de>
    289a:	11 cf       	rjmp	.-478    	; 0x26be <read_button>
    289c:	82 e0       	ldi	r24, 0x02	; 2
    289e:	0e 94 05 03 	call	0x60a	; 0x60a <digitalRead>
    28a2:	88 23       	and	r24, r24
    28a4:	09 f4       	brne	.+2      	; 0x28a8 <read_button+0x1ea>
    28a6:	0b cf       	rjmp	.-490    	; 0x26be <read_button>
    28a8:	83 e0       	ldi	r24, 0x03	; 3
    28aa:	0e 94 05 03 	call	0x60a	; 0x60a <digitalRead>
    28ae:	88 23       	and	r24, r24
    28b0:	09 f4       	brne	.+2      	; 0x28b4 <read_button+0x1f6>
    28b2:	05 cf       	rjmp	.-502    	; 0x26be <read_button>
		{
			flag = 0;
    28b4:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <flag>
    28b8:	02 cf       	rjmp	.-508    	; 0x26be <read_button>

000028ba <main>:
uint16_t period = 1000;
uint8_t flag = 0;
uint8_t flag1 = 0;

int main(void)
{
    28ba:	ef 92       	push	r14
    28bc:	ff 92       	push	r15
    28be:	0f 93       	push	r16
    28c0:	1f 93       	push	r17
    pinMode(A0, INPUT_PULLUP);
    28c2:	6a e2       	ldi	r22, 0x2A	; 42
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	0e 94 52 00 	call	0xa4	; 0xa4 <pinMode>
	pinMode(A1, INPUT_PULLUP);
    28ca:	6a e2       	ldi	r22, 0x2A	; 42
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	0e 94 52 00 	call	0xa4	; 0xa4 <pinMode>
	pinMode(A2, INPUT_PULLUP);
    28d2:	6a e2       	ldi	r22, 0x2A	; 42
    28d4:	82 e0       	ldi	r24, 0x02	; 2
    28d6:	0e 94 52 00 	call	0xa4	; 0xa4 <pinMode>
	pinMode(A3, INPUT_PULLUP);
    28da:	6a e2       	ldi	r22, 0x2A	; 42
    28dc:	83 e0       	ldi	r24, 0x03	; 3
    28de:	0e 94 52 00 	call	0xa4	; 0xa4 <pinMode>
	pinMode(A4, OUTPUT);
    28e2:	69 e2       	ldi	r22, 0x29	; 41
    28e4:	84 e0       	ldi	r24, 0x04	; 4
    28e6:	0e 94 52 00 	call	0xa4	; 0xa4 <pinMode>
	pinMode(A5, OUTPUT);
    28ea:	69 e2       	ldi	r22, 0x29	; 41
    28ec:	85 e0       	ldi	r24, 0x05	; 5
    28ee:	0e 94 52 00 	call	0xa4	; 0xa4 <pinMode>
	
	timer1 = xTimerCreate("tarek",pdMS_TO_TICKS(1000), pdTRUE,(void*) 0, led_toggle);
    28f2:	0a e4       	ldi	r16, 0x4A	; 74
    28f4:	13 e1       	ldi	r17, 0x13	; 19
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	41 e0       	ldi	r20, 0x01	; 1
    28fc:	68 ee       	ldi	r22, 0xE8	; 232
    28fe:	73 e0       	ldi	r23, 0x03	; 3
    2900:	87 e7       	ldi	r24, 0x77	; 119
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <xTimerCreate>
    2908:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <timer1+0x1>
    290c:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <timer1>
	
 	
	if (xTaskCreate(read_button, "omar", 100, NULL,0, taskomar) != pdTRUE)
    2910:	e0 90 5f 04 	lds	r14, 0x045F	; 0x80045f <taskomar>
    2914:	f0 90 60 04 	lds	r15, 0x0460	; 0x800460 <taskomar+0x1>
    2918:	00 e0       	ldi	r16, 0x00	; 0
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	44 e6       	ldi	r20, 0x64	; 100
    2920:	50 e0       	ldi	r21, 0x00	; 0
    2922:	6d e7       	ldi	r22, 0x7D	; 125
    2924:	70 e0       	ldi	r23, 0x00	; 0
    2926:	8f e5       	ldi	r24, 0x5F	; 95
    2928:	93 e1       	ldi	r25, 0x13	; 19
    292a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <xTaskCreate>
    292e:	81 30       	cpi	r24, 0x01	; 1
    2930:	21 f0       	breq	.+8      	; 0x293a <main+0x80>
	{
		digitalWrite(A5,HIGH);
    2932:	63 e3       	ldi	r22, 0x33	; 51
    2934:	85 e0       	ldi	r24, 0x05	; 5
    2936:	0e 94 db 01 	call	0x3b6	; 0x3b6 <digitalWrite>
	}
	
		xTimerStart(timer1, 0);
    293a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <xTaskGetTickCount>
    293e:	00 e0       	ldi	r16, 0x00	; 0
    2940:	10 e0       	ldi	r17, 0x00	; 0
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	ac 01       	movw	r20, r24
    2948:	61 e0       	ldi	r22, 0x01	; 1
    294a:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <timer1>
    294e:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <timer1+0x1>
    2952:	0e 94 02 13 	call	0x2604	; 0x2604 <xTimerGenericCommand>

	vTaskStartScheduler();
    2956:	0e 94 42 0c 	call	0x1884	; 0x1884 <vTaskStartScheduler>
	
}
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	1f 91       	pop	r17
    2960:	0f 91       	pop	r16
    2962:	ff 90       	pop	r15
    2964:	ef 90       	pop	r14
    2966:	08 95       	ret

00002968 <__udivmodhi4>:
    2968:	aa 1b       	sub	r26, r26
    296a:	bb 1b       	sub	r27, r27
    296c:	51 e1       	ldi	r21, 0x11	; 17
    296e:	07 c0       	rjmp	.+14     	; 0x297e <__udivmodhi4_ep>

00002970 <__udivmodhi4_loop>:
    2970:	aa 1f       	adc	r26, r26
    2972:	bb 1f       	adc	r27, r27
    2974:	a6 17       	cp	r26, r22
    2976:	b7 07       	cpc	r27, r23
    2978:	10 f0       	brcs	.+4      	; 0x297e <__udivmodhi4_ep>
    297a:	a6 1b       	sub	r26, r22
    297c:	b7 0b       	sbc	r27, r23

0000297e <__udivmodhi4_ep>:
    297e:	88 1f       	adc	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	5a 95       	dec	r21
    2984:	a9 f7       	brne	.-22     	; 0x2970 <__udivmodhi4_loop>
    2986:	80 95       	com	r24
    2988:	90 95       	com	r25
    298a:	bc 01       	movw	r22, r24
    298c:	cd 01       	movw	r24, r26
    298e:	08 95       	ret

00002990 <__tablejump2__>:
    2990:	ee 0f       	add	r30, r30
    2992:	ff 1f       	adc	r31, r31
    2994:	05 90       	lpm	r0, Z+
    2996:	f4 91       	lpm	r31, Z
    2998:	e0 2d       	mov	r30, r0
    299a:	09 94       	ijmp

0000299c <__umoddi3>:
    299c:	68 94       	set
    299e:	01 c0       	rjmp	.+2      	; 0x29a2 <__udivdi3_umoddi3>

000029a0 <__udivdi3>:
    29a0:	e8 94       	clt

000029a2 <__udivdi3_umoddi3>:
    29a2:	8f 92       	push	r8
    29a4:	9f 92       	push	r9
    29a6:	cf 93       	push	r28
    29a8:	df 93       	push	r29
    29aa:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__udivmod64>
    29ae:	df 91       	pop	r29
    29b0:	cf 91       	pop	r28
    29b2:	9f 90       	pop	r9
    29b4:	8f 90       	pop	r8
    29b6:	08 95       	ret

000029b8 <__udivmod64>:
    29b8:	88 24       	eor	r8, r8
    29ba:	99 24       	eor	r9, r9
    29bc:	f4 01       	movw	r30, r8
    29be:	e4 01       	movw	r28, r8
    29c0:	b0 e4       	ldi	r27, 0x40	; 64
    29c2:	9f 93       	push	r25
    29c4:	aa 27       	eor	r26, r26
    29c6:	9a 15       	cp	r25, r10
    29c8:	8b 04       	cpc	r8, r11
    29ca:	9c 04       	cpc	r9, r12
    29cc:	ed 05       	cpc	r30, r13
    29ce:	fe 05       	cpc	r31, r14
    29d0:	cf 05       	cpc	r28, r15
    29d2:	d0 07       	cpc	r29, r16
    29d4:	a1 07       	cpc	r26, r17
    29d6:	98 f4       	brcc	.+38     	; 0x29fe <__udivmod64+0x46>
    29d8:	ad 2f       	mov	r26, r29
    29da:	dc 2f       	mov	r29, r28
    29dc:	cf 2f       	mov	r28, r31
    29de:	fe 2f       	mov	r31, r30
    29e0:	e9 2d       	mov	r30, r9
    29e2:	98 2c       	mov	r9, r8
    29e4:	89 2e       	mov	r8, r25
    29e6:	98 2f       	mov	r25, r24
    29e8:	87 2f       	mov	r24, r23
    29ea:	76 2f       	mov	r23, r22
    29ec:	65 2f       	mov	r22, r21
    29ee:	54 2f       	mov	r21, r20
    29f0:	43 2f       	mov	r20, r19
    29f2:	32 2f       	mov	r19, r18
    29f4:	22 27       	eor	r18, r18
    29f6:	b8 50       	subi	r27, 0x08	; 8
    29f8:	31 f7       	brne	.-52     	; 0x29c6 <__udivmod64+0xe>
    29fa:	bf 91       	pop	r27
    29fc:	27 c0       	rjmp	.+78     	; 0x2a4c <__udivmod64+0x94>
    29fe:	1b 2e       	mov	r1, r27
    2a00:	bf 91       	pop	r27
    2a02:	bb 27       	eor	r27, r27
    2a04:	22 0f       	add	r18, r18
    2a06:	33 1f       	adc	r19, r19
    2a08:	44 1f       	adc	r20, r20
    2a0a:	55 1f       	adc	r21, r21
    2a0c:	66 1f       	adc	r22, r22
    2a0e:	77 1f       	adc	r23, r23
    2a10:	88 1f       	adc	r24, r24
    2a12:	99 1f       	adc	r25, r25
    2a14:	88 1c       	adc	r8, r8
    2a16:	99 1c       	adc	r9, r9
    2a18:	ee 1f       	adc	r30, r30
    2a1a:	ff 1f       	adc	r31, r31
    2a1c:	cc 1f       	adc	r28, r28
    2a1e:	dd 1f       	adc	r29, r29
    2a20:	aa 1f       	adc	r26, r26
    2a22:	bb 1f       	adc	r27, r27
    2a24:	8a 14       	cp	r8, r10
    2a26:	9b 04       	cpc	r9, r11
    2a28:	ec 05       	cpc	r30, r12
    2a2a:	fd 05       	cpc	r31, r13
    2a2c:	ce 05       	cpc	r28, r14
    2a2e:	df 05       	cpc	r29, r15
    2a30:	a0 07       	cpc	r26, r16
    2a32:	b1 07       	cpc	r27, r17
    2a34:	48 f0       	brcs	.+18     	; 0x2a48 <__udivmod64+0x90>
    2a36:	8a 18       	sub	r8, r10
    2a38:	9b 08       	sbc	r9, r11
    2a3a:	ec 09       	sbc	r30, r12
    2a3c:	fd 09       	sbc	r31, r13
    2a3e:	ce 09       	sbc	r28, r14
    2a40:	df 09       	sbc	r29, r15
    2a42:	a0 0b       	sbc	r26, r16
    2a44:	b1 0b       	sbc	r27, r17
    2a46:	21 60       	ori	r18, 0x01	; 1
    2a48:	1a 94       	dec	r1
    2a4a:	e1 f6       	brne	.-72     	; 0x2a04 <__udivmod64+0x4c>
    2a4c:	2e f4       	brtc	.+10     	; 0x2a58 <__udivmod64+0xa0>
    2a4e:	94 01       	movw	r18, r8
    2a50:	af 01       	movw	r20, r30
    2a52:	be 01       	movw	r22, r28
    2a54:	cd 01       	movw	r24, r26
    2a56:	00 0c       	add	r0, r0
    2a58:	08 95       	ret

00002a5a <__ashldi3>:
    2a5a:	0f 93       	push	r16
    2a5c:	08 30       	cpi	r16, 0x08	; 8
    2a5e:	90 f0       	brcs	.+36     	; 0x2a84 <__ashldi3+0x2a>
    2a60:	98 2f       	mov	r25, r24
    2a62:	87 2f       	mov	r24, r23
    2a64:	76 2f       	mov	r23, r22
    2a66:	65 2f       	mov	r22, r21
    2a68:	54 2f       	mov	r21, r20
    2a6a:	43 2f       	mov	r20, r19
    2a6c:	32 2f       	mov	r19, r18
    2a6e:	22 27       	eor	r18, r18
    2a70:	08 50       	subi	r16, 0x08	; 8
    2a72:	f4 cf       	rjmp	.-24     	; 0x2a5c <__ashldi3+0x2>
    2a74:	22 0f       	add	r18, r18
    2a76:	33 1f       	adc	r19, r19
    2a78:	44 1f       	adc	r20, r20
    2a7a:	55 1f       	adc	r21, r21
    2a7c:	66 1f       	adc	r22, r22
    2a7e:	77 1f       	adc	r23, r23
    2a80:	88 1f       	adc	r24, r24
    2a82:	99 1f       	adc	r25, r25
    2a84:	0a 95       	dec	r16
    2a86:	b2 f7       	brpl	.-20     	; 0x2a74 <__ashldi3+0x1a>
    2a88:	0f 91       	pop	r16
    2a8a:	08 95       	ret

00002a8c <__adddi3>:
    2a8c:	2a 0d       	add	r18, r10
    2a8e:	3b 1d       	adc	r19, r11
    2a90:	4c 1d       	adc	r20, r12
    2a92:	5d 1d       	adc	r21, r13
    2a94:	6e 1d       	adc	r22, r14
    2a96:	7f 1d       	adc	r23, r15
    2a98:	80 1f       	adc	r24, r16
    2a9a:	91 1f       	adc	r25, r17
    2a9c:	08 95       	ret

00002a9e <__subdi3>:
    2a9e:	2a 19       	sub	r18, r10
    2aa0:	3b 09       	sbc	r19, r11
    2aa2:	4c 09       	sbc	r20, r12
    2aa4:	5d 09       	sbc	r21, r13
    2aa6:	6e 09       	sbc	r22, r14
    2aa8:	7f 09       	sbc	r23, r15
    2aaa:	80 0b       	sbc	r24, r16
    2aac:	91 0b       	sbc	r25, r17
    2aae:	08 95       	ret

00002ab0 <memcpy>:
    2ab0:	fb 01       	movw	r30, r22
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	02 c0       	rjmp	.+4      	; 0x2aba <memcpy+0xa>
    2ab6:	01 90       	ld	r0, Z+
    2ab8:	0d 92       	st	X+, r0
    2aba:	41 50       	subi	r20, 0x01	; 1
    2abc:	50 40       	sbci	r21, 0x00	; 0
    2abe:	d8 f7       	brcc	.-10     	; 0x2ab6 <memcpy+0x6>
    2ac0:	08 95       	ret

00002ac2 <memset>:
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	01 c0       	rjmp	.+2      	; 0x2ac8 <memset+0x6>
    2ac6:	6d 93       	st	X+, r22
    2ac8:	41 50       	subi	r20, 0x01	; 1
    2aca:	50 40       	sbci	r21, 0x00	; 0
    2acc:	e0 f7       	brcc	.-8      	; 0x2ac6 <memset+0x4>
    2ace:	08 95       	ret

00002ad0 <_exit>:
    2ad0:	f8 94       	cli

00002ad2 <__stop_program>:
    2ad2:	ff cf       	rjmp	.-2      	; 0x2ad2 <__stop_program>
