
RTOS test 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00001dba  00001e4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003ad  008000b0  008000b0  00001e9e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001efc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c0  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b6a  00000000  00000000  000022f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000edd  00000000  00000000  00005e62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000282b  00000000  00000000  00006d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cdc  00000000  00000000  0000956c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001579  00000000  00000000  0000a248  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000045b7  00000000  00000000  0000b7c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  0000fd78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
       8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_2>
       c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_13>
      38:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	24 e0       	ldi	r18, 0x04	; 4
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 35       	cpi	r26, 0x5D	; 93
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 52 02 	call	0x4a4	; 0x4a4 <main>
      8a:	0c 94 db 0e 	jmp	0x1db6	; 0x1db6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
	sei();
}


ISR(INT0_vect)
{
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	2f 93       	push	r18
      9e:	3f 93       	push	r19
      a0:	4f 93       	push	r20
      a2:	5f 93       	push	r21
      a4:	6f 93       	push	r22
      a6:	7f 93       	push	r23
      a8:	8f 93       	push	r24
      aa:	9f 93       	push	r25
      ac:	af 93       	push	r26
      ae:	bf 93       	push	r27
      b0:	ef 93       	push	r30
      b2:	ff 93       	push	r31
	ISR0();
      b4:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <ISR0>
      b8:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <ISR0+0x1>
      bc:	09 95       	icall
}
      be:	ff 91       	pop	r31
      c0:	ef 91       	pop	r30
      c2:	bf 91       	pop	r27
      c4:	af 91       	pop	r26
      c6:	9f 91       	pop	r25
      c8:	8f 91       	pop	r24
      ca:	7f 91       	pop	r23
      cc:	6f 91       	pop	r22
      ce:	5f 91       	pop	r21
      d0:	4f 91       	pop	r20
      d2:	3f 91       	pop	r19
      d4:	2f 91       	pop	r18
      d6:	0f 90       	pop	r0
      d8:	0f be       	out	0x3f, r0	; 63
      da:	0f 90       	pop	r0
      dc:	1f 90       	pop	r1
      de:	18 95       	reti

000000e0 <__vector_2>:

ISR(INT1_vect)
{
      e0:	1f 92       	push	r1
      e2:	0f 92       	push	r0
      e4:	0f b6       	in	r0, 0x3f	; 63
      e6:	0f 92       	push	r0
      e8:	11 24       	eor	r1, r1
      ea:	2f 93       	push	r18
      ec:	3f 93       	push	r19
      ee:	4f 93       	push	r20
      f0:	5f 93       	push	r21
      f2:	6f 93       	push	r22
      f4:	7f 93       	push	r23
      f6:	8f 93       	push	r24
      f8:	9f 93       	push	r25
      fa:	af 93       	push	r26
      fc:	bf 93       	push	r27
      fe:	ef 93       	push	r30
     100:	ff 93       	push	r31
	ISR1();
     102:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <ISR1>
     106:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <ISR1+0x1>
     10a:	09 95       	icall
}
     10c:	ff 91       	pop	r31
     10e:	ef 91       	pop	r30
     110:	bf 91       	pop	r27
     112:	af 91       	pop	r26
     114:	9f 91       	pop	r25
     116:	8f 91       	pop	r24
     118:	7f 91       	pop	r23
     11a:	6f 91       	pop	r22
     11c:	5f 91       	pop	r21
     11e:	4f 91       	pop	r20
     120:	3f 91       	pop	r19
     122:	2f 91       	pop	r18
     124:	0f 90       	pop	r0
     126:	0f be       	out	0x3f, r0	; 63
     128:	0f 90       	pop	r0
     12a:	1f 90       	pop	r1
     12c:	18 95       	reti

0000012e <__vector_3>:

ISR(INT2_vect)
{
     12e:	1f 92       	push	r1
     130:	0f 92       	push	r0
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	0f 92       	push	r0
     136:	11 24       	eor	r1, r1
     138:	2f 93       	push	r18
     13a:	3f 93       	push	r19
     13c:	4f 93       	push	r20
     13e:	5f 93       	push	r21
     140:	6f 93       	push	r22
     142:	7f 93       	push	r23
     144:	8f 93       	push	r24
     146:	9f 93       	push	r25
     148:	af 93       	push	r26
     14a:	bf 93       	push	r27
     14c:	ef 93       	push	r30
     14e:	ff 93       	push	r31
	ISR2();
     150:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__data_end>
     154:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <__data_end+0x1>
     158:	09 95       	icall
}
     15a:	ff 91       	pop	r31
     15c:	ef 91       	pop	r30
     15e:	bf 91       	pop	r27
     160:	af 91       	pop	r26
     162:	9f 91       	pop	r25
     164:	8f 91       	pop	r24
     166:	7f 91       	pop	r23
     168:	6f 91       	pop	r22
     16a:	5f 91       	pop	r21
     16c:	4f 91       	pop	r20
     16e:	3f 91       	pop	r19
     170:	2f 91       	pop	r18
     172:	0f 90       	pop	r0
     174:	0f be       	out	0x3f, r0	; 63
     176:	0f 90       	pop	r0
     178:	1f 90       	pop	r1
     17a:	18 95       	reti

0000017c <Serial_print>:
	
	}
	x[i] = '\0';                           // ensure string is null terminated
	
	
}
     17c:	4f 92       	push	r4
     17e:	5f 92       	push	r5
     180:	6f 92       	push	r6
     182:	7f 92       	push	r7
     184:	8f 92       	push	r8
     186:	9f 92       	push	r9
     188:	af 92       	push	r10
     18a:	bf 92       	push	r11
     18c:	cf 92       	push	r12
     18e:	df 92       	push	r13
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	60 97       	sbiw	r28, 0x10	; 16
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	cd bf       	out	0x3d, r28	; 61
     1a8:	dc 01       	movw	r26, r24
     1aa:	69 32       	cpi	r22, 0x29	; 41
     1ac:	39 f5       	brne	.+78     	; 0x1fc <Serial_print+0x80>
     1ae:	11 96       	adiw	r26, 0x01	; 1
     1b0:	8c 91       	ld	r24, X
     1b2:	11 97       	sbiw	r26, 0x01	; 1
     1b4:	8f 93       	push	r24
     1b6:	8c 91       	ld	r24, X
     1b8:	8f 93       	push	r24
     1ba:	86 e6       	ldi	r24, 0x66	; 102
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	9f 93       	push	r25
     1c0:	8f 93       	push	r24
     1c2:	ce 01       	movw	r24, r28
     1c4:	01 96       	adiw	r24, 0x01	; 1
     1c6:	9f 93       	push	r25
     1c8:	8f 93       	push	r24
     1ca:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <sprintf>
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	0f 90       	pop	r0
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	04 c0       	rjmp	.+8      	; 0x1e8 <Serial_print+0x6c>
     1e0:	5d 9b       	sbis	0x0b, 5	; 11
     1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <Serial_print+0x64>
     1e4:	2c b9       	out	0x0c, r18	; 12
     1e6:	01 96       	adiw	r24, 0x01	; 1
     1e8:	e1 e0       	ldi	r30, 0x01	; 1
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	ec 0f       	add	r30, r28
     1ee:	fd 1f       	adc	r31, r29
     1f0:	e8 0f       	add	r30, r24
     1f2:	f9 1f       	adc	r31, r25
     1f4:	20 81       	ld	r18, Z
     1f6:	21 11       	cpse	r18, r1
     1f8:	f3 cf       	rjmp	.-26     	; 0x1e0 <Serial_print+0x64>
     1fa:	5f c0       	rjmp	.+190    	; 0x2ba <Serial_print+0x13e>
     1fc:	68 32       	cpi	r22, 0x28	; 40
     1fe:	09 f0       	breq	.+2      	; 0x202 <Serial_print+0x86>
     200:	46 c0       	rjmp	.+140    	; 0x28e <Serial_print+0x112>
     202:	cd 90       	ld	r12, X+
     204:	dd 90       	ld	r13, X+
     206:	ed 90       	ld	r14, X+
     208:	fc 90       	ld	r15, X
     20a:	c7 01       	movw	r24, r14
     20c:	b6 01       	movw	r22, r12
     20e:	0e 94 b2 0a 	call	0x1564	; 0x1564 <floor>
     212:	2b 01       	movw	r4, r22
     214:	3c 01       	movw	r6, r24
     216:	9b 01       	movw	r18, r22
     218:	ac 01       	movw	r20, r24
     21a:	c7 01       	movw	r24, r14
     21c:	b6 01       	movw	r22, r12
     21e:	0e 94 0f 0a 	call	0x141e	; 0x141e <__subsf3>
     222:	4b 01       	movw	r8, r22
     224:	5c 01       	movw	r10, r24
     226:	c3 01       	movw	r24, r6
     228:	b2 01       	movw	r22, r4
     22a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__fixsfsi>
     22e:	f6 2e       	mov	r15, r22
     230:	e7 2e       	mov	r14, r23
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	4a e7       	ldi	r20, 0x7A	; 122
     238:	54 e4       	ldi	r21, 0x44	; 68
     23a:	c5 01       	movw	r24, r10
     23c:	b4 01       	movw	r22, r8
     23e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__mulsf3>
     242:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__fixsfsi>
     246:	7f 93       	push	r23
     248:	6f 93       	push	r22
     24a:	ef 92       	push	r14
     24c:	ff 92       	push	r15
     24e:	83 e6       	ldi	r24, 0x63	; 99
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	9f 93       	push	r25
     254:	8f 93       	push	r24
     256:	ce 01       	movw	r24, r28
     258:	01 96       	adiw	r24, 0x01	; 1
     25a:	9f 93       	push	r25
     25c:	8f 93       	push	r24
     25e:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <sprintf>
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	f8 94       	cli
     266:	de bf       	out	0x3e, r29	; 62
     268:	0f be       	out	0x3f, r0	; 63
     26a:	cd bf       	out	0x3d, r28	; 61
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	04 c0       	rjmp	.+8      	; 0x27a <Serial_print+0xfe>
     272:	5d 9b       	sbis	0x0b, 5	; 11
     274:	fe cf       	rjmp	.-4      	; 0x272 <Serial_print+0xf6>
     276:	2c b9       	out	0x0c, r18	; 12
     278:	01 96       	adiw	r24, 0x01	; 1
     27a:	e1 e0       	ldi	r30, 0x01	; 1
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	ec 0f       	add	r30, r28
     280:	fd 1f       	adc	r31, r29
     282:	e8 0f       	add	r30, r24
     284:	f9 1f       	adc	r31, r25
     286:	20 81       	ld	r18, Z
     288:	21 11       	cpse	r18, r1
     28a:	f3 cf       	rjmp	.-26     	; 0x272 <Serial_print+0xf6>
     28c:	16 c0       	rjmp	.+44     	; 0x2ba <Serial_print+0x13e>
     28e:	6a 32       	cpi	r22, 0x2A	; 42
     290:	19 f4       	brne	.+6      	; 0x298 <Serial_print+0x11c>
     292:	8c 91       	ld	r24, X
     294:	8c b9       	out	0x0c, r24	; 12
     296:	11 c0       	rjmp	.+34     	; 0x2ba <Serial_print+0x13e>
     298:	6b 32       	cpi	r22, 0x2B	; 43
     29a:	79 f4       	brne	.+30     	; 0x2ba <Serial_print+0x13e>
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <Serial_print+0x12e>
     29e:	5d 9b       	sbis	0x0b, 5	; 11
     2a0:	fe cf       	rjmp	.-4      	; 0x29e <Serial_print+0x122>
     2a2:	9c b9       	out	0x0c, r25	; 12
     2a4:	2f 5f       	subi	r18, 0xFF	; 255
     2a6:	3f 4f       	sbci	r19, 0xFF	; 255
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <Serial_print+0x132>
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	fd 01       	movw	r30, r26
     2b0:	e2 0f       	add	r30, r18
     2b2:	f3 1f       	adc	r31, r19
     2b4:	90 81       	ld	r25, Z
     2b6:	91 11       	cpse	r25, r1
     2b8:	f2 cf       	rjmp	.-28     	; 0x29e <Serial_print+0x122>
     2ba:	60 96       	adiw	r28, 0x10	; 16
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	f8 94       	cli
     2c0:	de bf       	out	0x3e, r29	; 62
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	cd bf       	out	0x3d, r28	; 61
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	ff 90       	pop	r15
     2cc:	ef 90       	pop	r14
     2ce:	df 90       	pop	r13
     2d0:	cf 90       	pop	r12
     2d2:	bf 90       	pop	r11
     2d4:	af 90       	pop	r10
     2d6:	9f 90       	pop	r9
     2d8:	8f 90       	pop	r8
     2da:	7f 90       	pop	r7
     2dc:	6f 90       	pop	r6
     2de:	5f 90       	pop	r5
     2e0:	4f 90       	pop	r4
     2e2:	08 95       	ret

000002e4 <Serial_begin>:
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
     2ec:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <baud+0x1>
     2f0:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <baud>
     2f4:	09 2e       	mov	r0, r25
     2f6:	00 0c       	add	r0, r0
     2f8:	aa 0b       	sbc	r26, r26
     2fa:	bb 0b       	sbc	r27, r27
     2fc:	88 0f       	add	r24, r24
     2fe:	99 1f       	adc	r25, r25
     300:	aa 1f       	adc	r26, r26
     302:	bb 1f       	adc	r27, r27
     304:	88 0f       	add	r24, r24
     306:	99 1f       	adc	r25, r25
     308:	aa 1f       	adc	r26, r26
     30a:	bb 1f       	adc	r27, r27
     30c:	9c 01       	movw	r18, r24
     30e:	ad 01       	movw	r20, r26
     310:	22 0f       	add	r18, r18
     312:	33 1f       	adc	r19, r19
     314:	44 1f       	adc	r20, r20
     316:	55 1f       	adc	r21, r21
     318:	22 0f       	add	r18, r18
     31a:	33 1f       	adc	r19, r19
     31c:	44 1f       	adc	r20, r20
     31e:	55 1f       	adc	r21, r21
     320:	0f 2e       	mov	r0, r31
     322:	c1 2c       	mov	r12, r1
     324:	f2 e1       	ldi	r31, 0x12	; 18
     326:	df 2e       	mov	r13, r31
     328:	fa e7       	ldi	r31, 0x7A	; 122
     32a:	ef 2e       	mov	r14, r31
     32c:	f1 2c       	mov	r15, r1
     32e:	f0 2d       	mov	r31, r0
     330:	c7 01       	movw	r24, r14
     332:	b6 01       	movw	r22, r12
     334:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__udivmodsi4>
     338:	da 01       	movw	r26, r20
     33a:	c9 01       	movw	r24, r18
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	a1 09       	sbc	r26, r1
     340:	b1 09       	sbc	r27, r1
     342:	89 2f       	mov	r24, r25
     344:	9a 2f       	mov	r25, r26
     346:	ab 2f       	mov	r26, r27
     348:	bb 27       	eor	r27, r27
     34a:	80 bd       	out	0x20, r24	; 32
     34c:	20 91 57 04 	lds	r18, 0x0457	; 0x800457 <baud>
     350:	30 91 58 04 	lds	r19, 0x0458	; 0x800458 <baud+0x1>
     354:	c9 01       	movw	r24, r18
     356:	33 0f       	add	r19, r19
     358:	aa 0b       	sbc	r26, r26
     35a:	bb 0b       	sbc	r27, r27
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	aa 1f       	adc	r26, r26
     362:	bb 1f       	adc	r27, r27
     364:	88 0f       	add	r24, r24
     366:	99 1f       	adc	r25, r25
     368:	aa 1f       	adc	r26, r26
     36a:	bb 1f       	adc	r27, r27
     36c:	9c 01       	movw	r18, r24
     36e:	ad 01       	movw	r20, r26
     370:	22 0f       	add	r18, r18
     372:	33 1f       	adc	r19, r19
     374:	44 1f       	adc	r20, r20
     376:	55 1f       	adc	r21, r21
     378:	22 0f       	add	r18, r18
     37a:	33 1f       	adc	r19, r19
     37c:	44 1f       	adc	r20, r20
     37e:	55 1f       	adc	r21, r21
     380:	c7 01       	movw	r24, r14
     382:	b6 01       	movw	r22, r12
     384:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__udivmodsi4>
     388:	21 50       	subi	r18, 0x01	; 1
     38a:	29 b9       	out	0x09, r18	; 9
     38c:	8a b1       	in	r24, 0x0a	; 10
     38e:	88 61       	ori	r24, 0x18	; 24
     390:	8a b9       	out	0x0a, r24	; 10
     392:	80 b5       	in	r24, 0x20	; 32
     394:	86 68       	ori	r24, 0x86	; 134
     396:	80 bd       	out	0x20, r24	; 32
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	08 95       	ret

000003a2 <__vector_13>:

ISR(USART_RXC_vect){
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	2f 93       	push	r18
     3ae:	3f 93       	push	r19
     3b0:	4f 93       	push	r20
     3b2:	5f 93       	push	r21
     3b4:	6f 93       	push	r22
     3b6:	7f 93       	push	r23
     3b8:	8f 93       	push	r24
     3ba:	9f 93       	push	r25
     3bc:	af 93       	push	r26
     3be:	bf 93       	push	r27
     3c0:	ef 93       	push	r30
     3c2:	ff 93       	push	r31
RXC_ISR();		
     3c4:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <RXC_ISR>
     3c8:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <RXC_ISR+0x1>
     3cc:	09 95       	icall
}
     3ce:	ff 91       	pop	r31
     3d0:	ef 91       	pop	r30
     3d2:	bf 91       	pop	r27
     3d4:	af 91       	pop	r26
     3d6:	9f 91       	pop	r25
     3d8:	8f 91       	pop	r24
     3da:	7f 91       	pop	r23
     3dc:	6f 91       	pop	r22
     3de:	5f 91       	pop	r21
     3e0:	4f 91       	pop	r20
     3e2:	3f 91       	pop	r19
     3e4:	2f 91       	pop	r18
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <__vector_14>:
ISR(USART_UDRE_vect){
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	2f 93       	push	r18
     3fc:	3f 93       	push	r19
     3fe:	4f 93       	push	r20
     400:	5f 93       	push	r21
     402:	6f 93       	push	r22
     404:	7f 93       	push	r23
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
     40a:	af 93       	push	r26
     40c:	bf 93       	push	r27
     40e:	ef 93       	push	r30
     410:	ff 93       	push	r31
TXC_ISR();	
     412:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <TXC_ISR>
     416:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <TXC_ISR+0x1>
     41a:	09 95       	icall
     41c:	ff 91       	pop	r31
     41e:	ef 91       	pop	r30
     420:	bf 91       	pop	r27
     422:	af 91       	pop	r26
     424:	9f 91       	pop	r25
     426:	8f 91       	pop	r24
     428:	7f 91       	pop	r23
     42a:	6f 91       	pop	r22
     42c:	5f 91       	pop	r21
     42e:	4f 91       	pop	r20
     430:	3f 91       	pop	r19
     432:	2f 91       	pop	r18
     434:	0f 90       	pop	r0
     436:	0f be       	out	0x3f, r0	; 63
     438:	0f 90       	pop	r0
     43a:	1f 90       	pop	r1
     43c:	18 95       	reti

0000043e <task_1>:

void task_1 (void *ptr)
{
	while(1)
	{
		taskENTER_CRITICAL();
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	0f 92       	push	r0
		x++;
     444:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <x>
     448:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <x+0x1>
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <x+0x1>
     452:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <x>
		y++;
     456:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <y>
     45a:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <y+0x1>
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <y+0x1>
     464:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <y>
		taskEXIT_CRITICAL();
     468:	0f 90       	pop	r0
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	e8 cf       	rjmp	.-48     	; 0x43e <task_1>

0000046e <task_2>:

void task_2 (void *ptr)
{
	while(1)
	{
		if(x != y)
     46e:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <x>
     472:	30 91 bd 00 	lds	r19, 0x00BD	; 0x8000bd <x+0x1>
     476:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <y>
     47a:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <y+0x1>
     47e:	28 17       	cp	r18, r24
     480:	39 07       	cpc	r19, r25
     482:	31 f0       	breq	.+12     	; 0x490 <task_2+0x22>
		{
			Serial_print("...Shared data problem...",STRING);
     484:	6b e2       	ldi	r22, 0x2B	; 43
     486:	89 e6       	ldi	r24, 0x69	; 105
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 be 00 	call	0x17c	; 0x17c <Serial_print>
     48e:	05 c0       	rjmp	.+10     	; 0x49a <task_2+0x2c>
		}
		else
		{
			Serial_print("...X equal Y...",STRING);	
     490:	6b e2       	ldi	r22, 0x2B	; 43
     492:	83 e8       	ldi	r24, 0x83	; 131
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 be 00 	call	0x17c	; 0x17c <Serial_print>
		}
		
		vTaskDelay(50);
     49a:	82 e3       	ldi	r24, 0x32	; 50
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 a5 09 	call	0x134a	; 0x134a <vTaskDelay>
	}
     4a2:	e5 cf       	rjmp	.-54     	; 0x46e <task_2>

000004a4 <main>:
void task_2 (void *ptr);
TaskHandle_t second_task;


int main(void)
{
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
	Serial_begin(9600);
     4aa:	80 e8       	ldi	r24, 0x80	; 128
     4ac:	95 e2       	ldi	r25, 0x25	; 37
     4ae:	0e 94 72 01 	call	0x2e4	; 0x2e4 <Serial_begin>
	xTaskCreate(task_1, "task_omar", 50, NULL, 1, first_task);
     4b2:	e0 90 59 04 	lds	r14, 0x0459	; 0x800459 <first_task>
     4b6:	f0 90 5a 04 	lds	r15, 0x045A	; 0x80045a <first_task+0x1>
     4ba:	01 e0       	ldi	r16, 0x01	; 1
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	42 e3       	ldi	r20, 0x32	; 50
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	63 e9       	ldi	r22, 0x93	; 147
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	8f e1       	ldi	r24, 0x1F	; 31
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	0e 94 46 07 	call	0xe8c	; 0xe8c <xTaskCreate>
	xTaskCreate(task_2, "task_lasheen", 100, NULL, 2, second_task);
     4d0:	e0 90 5b 04 	lds	r14, 0x045B	; 0x80045b <second_task>
     4d4:	f0 90 5c 04 	lds	r15, 0x045C	; 0x80045c <second_task+0x1>
     4d8:	02 e0       	ldi	r16, 0x02	; 2
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	44 e6       	ldi	r20, 0x64	; 100
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	6d e9       	ldi	r22, 0x9D	; 157
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	87 e3       	ldi	r24, 0x37	; 55
     4e8:	92 e0       	ldi	r25, 0x02	; 2
     4ea:	0e 94 46 07 	call	0xe8c	; 0xe8c <xTaskCreate>
	vTaskStartScheduler();
     4ee:	0e 94 9a 07 	call	0xf34	; 0xf34 <vTaskStartScheduler>
}
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0f 91       	pop	r16
     4f8:	ff 90       	pop	r15
     4fa:	ef 90       	pop	r14
     4fc:	08 95       	ret

000004fe <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     4fe:	a3 ec       	ldi	r26, 0xC3	; 195
     500:	b0 e0       	ldi	r27, 0x00	; 0
     502:	e7 ec       	ldi	r30, 0xC7	; 199
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	11 96       	adiw	r26, 0x01	; 1
     508:	fc 93       	st	X, r31
     50a:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
     50c:	13 96       	adiw	r26, 0x03	; 3
     50e:	1c 92       	st	X, r1
     510:	1e 92       	st	-X, r1
     512:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     514:	af eb       	ldi	r26, 0xBF	; 191
     516:	b0 e0       	ldi	r27, 0x00	; 0
     518:	8f e1       	ldi	r24, 0x1F	; 31
     51a:	93 e0       	ldi	r25, 0x03	; 3
     51c:	13 96       	adiw	r26, 0x03	; 3
     51e:	9c 93       	st	X, r25
     520:	8e 93       	st	-X, r24
     522:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
     524:	11 96       	adiw	r26, 0x01	; 1
     526:	1c 92       	st	X, r1
     528:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     52a:	93 83       	std	Z+3, r25	; 0x03
     52c:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     52e:	b1 83       	std	Z+1, r27	; 0x01
     530:	a0 83       	st	Z, r26
     532:	08 95       	ret

00000534 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     534:	ef 92       	push	r14
     536:	ff 92       	push	r15
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     542:	0e 94 c6 07 	call	0xf8c	; 0xf8c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     546:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <xHeapHasBeenInitialised.2121>
     54a:	81 11       	cpse	r24, r1
     54c:	05 c0       	rjmp	.+10     	; 0x558 <pvPortMalloc+0x24>
        {
            prvHeapInit();
     54e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <xHeapHasBeenInitialised.2121>
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     558:	20 97       	sbiw	r28, 0x00	; 0
     55a:	71 f0       	breq	.+28     	; 0x578 <pvPortMalloc+0x44>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
     55c:	ce 01       	movw	r24, r28
     55e:	04 96       	adiw	r24, 0x04	; 4
            xHeapHasBeenInitialised = pdTRUE;
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     560:	c8 17       	cp	r28, r24
     562:	d9 07       	cpc	r29, r25
     564:	38 f4       	brcc	.+14     	; 0x574 <pvPortMalloc+0x40>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
        {
            xWantedSize += heapSTRUCT_SIZE;

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
     566:	25 96       	adiw	r28, 0x05	; 5
     568:	8c 17       	cp	r24, r28
     56a:	9d 07       	cpc	r25, r29
     56c:	28 f0       	brcs	.+10     	; 0x578 <pvPortMalloc+0x44>
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
            }
            else
            {
                xWantedSize = 0;
     56e:	c0 e0       	ldi	r28, 0x00	; 0
     570:	d0 e0       	ldi	r29, 0x00	; 0
     572:	02 c0       	rjmp	.+4      	; 0x578 <pvPortMalloc+0x44>
            }
        }
        else
        {
            xWantedSize = 0;
     574:	c0 e0       	ldi	r28, 0x00	; 0
     576:	d0 e0       	ldi	r29, 0x00	; 0
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     578:	20 97       	sbiw	r28, 0x00	; 0
     57a:	09 f4       	brne	.+2      	; 0x57e <pvPortMalloc+0x4a>
     57c:	5e c0       	rjmp	.+188    	; 0x63a <pvPortMalloc+0x106>
     57e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     582:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     586:	2c 17       	cp	r18, r28
     588:	3d 07       	cpc	r19, r29
     58a:	08 f4       	brcc	.+2      	; 0x58e <pvPortMalloc+0x5a>
     58c:	59 c0       	rjmp	.+178    	; 0x640 <pvPortMalloc+0x10c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;
     58e:	e0 91 c3 00 	lds	r30, 0x00C3	; 0x8000c3 <xStart>
     592:	f0 91 c4 00 	lds	r31, 0x00C4	; 0x8000c4 <xStart+0x1>

        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
     596:	a3 ec       	ldi	r26, 0xC3	; 195
     598:	b0 e0       	ldi	r27, 0x00	; 0
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <pvPortMalloc+0x6c>
            {
                pxPreviousBlock = pxBlock;
     59c:	df 01       	movw	r26, r30
                pxBlock = pxBlock->pxNextFreeBlock;
     59e:	fc 01       	movw	r30, r24
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     5a0:	82 81       	ldd	r24, Z+2	; 0x02
     5a2:	93 81       	ldd	r25, Z+3	; 0x03
     5a4:	8c 17       	cp	r24, r28
     5a6:	9d 07       	cpc	r25, r29
     5a8:	20 f4       	brcc	.+8      	; 0x5b2 <pvPortMalloc+0x7e>
     5aa:	80 81       	ld	r24, Z
     5ac:	91 81       	ldd	r25, Z+1	; 0x01
     5ae:	00 97       	sbiw	r24, 0x00	; 0
     5b0:	a9 f7       	brne	.-22     	; 0x59c <pvPortMalloc+0x68>
                pxPreviousBlock = pxBlock;
                pxBlock = pxBlock->pxNextFreeBlock;
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	ef 3b       	cpi	r30, 0xBF	; 191
     5b6:	f8 07       	cpc	r31, r24
     5b8:	09 f4       	brne	.+2      	; 0x5bc <pvPortMalloc+0x88>
     5ba:	45 c0       	rjmp	.+138    	; 0x646 <pvPortMalloc+0x112>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     5bc:	0d 91       	ld	r16, X+
     5be:	1c 91       	ld	r17, X
     5c0:	11 97       	sbiw	r26, 0x01	; 1
     5c2:	0c 5f       	subi	r16, 0xFC	; 252
     5c4:	1f 4f       	sbci	r17, 0xFF	; 255

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     5c6:	80 81       	ld	r24, Z
     5c8:	91 81       	ldd	r25, Z+1	; 0x01
     5ca:	8d 93       	st	X+, r24
     5cc:	9c 93       	st	X, r25

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     5ce:	82 81       	ldd	r24, Z+2	; 0x02
     5d0:	93 81       	ldd	r25, Z+3	; 0x03
     5d2:	8c 1b       	sub	r24, r28
     5d4:	9d 0b       	sbc	r25, r29
     5d6:	89 30       	cpi	r24, 0x09	; 9
     5d8:	91 05       	cpc	r25, r1
     5da:	30 f1       	brcs	.+76     	; 0x628 <pvPortMalloc+0xf4>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     5dc:	bf 01       	movw	r22, r30
     5de:	6c 0f       	add	r22, r28
     5e0:	7d 1f       	adc	r23, r29

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     5e2:	db 01       	movw	r26, r22
     5e4:	13 96       	adiw	r26, 0x03	; 3
     5e6:	9c 93       	st	X, r25
     5e8:	8e 93       	st	-X, r24
     5ea:	12 97       	sbiw	r26, 0x02	; 2
                    pxBlock->xBlockSize = xWantedSize;
     5ec:	d3 83       	std	Z+3, r29	; 0x03
     5ee:	c2 83       	std	Z+2, r28	; 0x02

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     5f0:	12 96       	adiw	r26, 0x02	; 2
     5f2:	4d 91       	ld	r20, X+
     5f4:	5c 91       	ld	r21, X
     5f6:	13 97       	sbiw	r26, 0x03	; 3
     5f8:	0f 2e       	mov	r0, r31
     5fa:	f3 ec       	ldi	r31, 0xC3	; 195
     5fc:	ef 2e       	mov	r14, r31
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	ff 2e       	mov	r15, r31
     602:	f0 2d       	mov	r31, r0
     604:	01 c0       	rjmp	.+2      	; 0x608 <pvPortMalloc+0xd4>
     606:	7d 01       	movw	r14, r26
     608:	e7 01       	movw	r28, r14
     60a:	a8 81       	ld	r26, Y
     60c:	b9 81       	ldd	r27, Y+1	; 0x01
     60e:	12 96       	adiw	r26, 0x02	; 2
     610:	8d 91       	ld	r24, X+
     612:	9c 91       	ld	r25, X
     614:	13 97       	sbiw	r26, 0x03	; 3
     616:	84 17       	cp	r24, r20
     618:	95 07       	cpc	r25, r21
     61a:	a8 f3       	brcs	.-22     	; 0x606 <pvPortMalloc+0xd2>
     61c:	eb 01       	movw	r28, r22
     61e:	b9 83       	std	Y+1, r27	; 0x01
     620:	a8 83       	st	Y, r26
     622:	d7 01       	movw	r26, r14
     624:	6d 93       	st	X+, r22
     626:	7c 93       	st	X, r23
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
     628:	82 81       	ldd	r24, Z+2	; 0x02
     62a:	93 81       	ldd	r25, Z+3	; 0x03
     62c:	28 1b       	sub	r18, r24
     62e:	39 0b       	sbc	r19, r25
     630:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     634:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
     638:	08 c0       	rjmp	.+16     	; 0x64a <pvPortMalloc+0x116>

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     63a:	00 e0       	ldi	r16, 0x00	; 0
     63c:	10 e0       	ldi	r17, 0x00	; 0
     63e:	05 c0       	rjmp	.+10     	; 0x64a <pvPortMalloc+0x116>
     640:	00 e0       	ldi	r16, 0x00	; 0
     642:	10 e0       	ldi	r17, 0x00	; 0
     644:	02 c0       	rjmp	.+4      	; 0x64a <pvPortMalloc+0x116>
     646:	00 e0       	ldi	r16, 0x00	; 0
     648:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     64a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     64e:	c8 01       	movw	r24, r16
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	08 95       	ret

0000065e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     666:	00 97       	sbiw	r24, 0x00	; 0
     668:	41 f1       	breq	.+80     	; 0x6ba <vPortFree+0x5c>
     66a:	ec 01       	movw	r28, r24
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     66c:	8c 01       	movw	r16, r24
     66e:	04 50       	subi	r16, 0x04	; 4
     670:	11 09       	sbc	r17, r1

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;

        vTaskSuspendAll();
     672:	0e 94 c6 07 	call	0xf8c	; 0xf8c <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     676:	f8 01       	movw	r30, r16
     678:	42 81       	ldd	r20, Z+2	; 0x02
     67a:	53 81       	ldd	r21, Z+3	; 0x03
     67c:	a3 ec       	ldi	r26, 0xC3	; 195
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	01 c0       	rjmp	.+2      	; 0x684 <vPortFree+0x26>
     682:	df 01       	movw	r26, r30
     684:	ed 91       	ld	r30, X+
     686:	fc 91       	ld	r31, X
     688:	11 97       	sbiw	r26, 0x01	; 1
     68a:	22 81       	ldd	r18, Z+2	; 0x02
     68c:	33 81       	ldd	r19, Z+3	; 0x03
     68e:	24 17       	cp	r18, r20
     690:	35 07       	cpc	r19, r21
     692:	b8 f3       	brcs	.-18     	; 0x682 <vPortFree+0x24>
     694:	24 97       	sbiw	r28, 0x04	; 4
     696:	f9 83       	std	Y+1, r31	; 0x01
     698:	e8 83       	st	Y, r30
     69a:	0d 93       	st	X+, r16
     69c:	1c 93       	st	X, r17
            xFreeBytesRemaining += pxLink->xBlockSize;
     69e:	8a 81       	ldd	r24, Y+2	; 0x02
     6a0:	9b 81       	ldd	r25, Y+3	; 0x03
     6a2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     6a6:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     6aa:	82 0f       	add	r24, r18
     6ac:	93 1f       	adc	r25, r19
     6ae:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     6b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
     6b6:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <xTaskResumeAll>
    }
}
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	08 95       	ret

000006c4 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     6c4:	fc 01       	movw	r30, r24
     6c6:	03 96       	adiw	r24, 0x03	; 3
     6c8:	92 83       	std	Z+2, r25	; 0x02
     6ca:	81 83       	std	Z+1, r24	; 0x01
     6cc:	2f ef       	ldi	r18, 0xFF	; 255
     6ce:	3f ef       	ldi	r19, 0xFF	; 255
     6d0:	34 83       	std	Z+4, r19	; 0x04
     6d2:	23 83       	std	Z+3, r18	; 0x03
     6d4:	96 83       	std	Z+6, r25	; 0x06
     6d6:	85 83       	std	Z+5, r24	; 0x05
     6d8:	90 87       	std	Z+8, r25	; 0x08
     6da:	87 83       	std	Z+7, r24	; 0x07
     6dc:	10 82       	st	Z, r1
     6de:	08 95       	ret

000006e0 <vListInitialiseItem>:
     6e0:	fc 01       	movw	r30, r24
     6e2:	11 86       	std	Z+9, r1	; 0x09
     6e4:	10 86       	std	Z+8, r1	; 0x08
     6e6:	08 95       	ret

000006e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     6ee:	48 81       	ld	r20, Y
     6f0:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     6f2:	4f 3f       	cpi	r20, 0xFF	; 255
     6f4:	2f ef       	ldi	r18, 0xFF	; 255
     6f6:	52 07       	cpc	r21, r18
     6f8:	21 f4       	brne	.+8      	; 0x702 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     6fa:	fc 01       	movw	r30, r24
     6fc:	a7 81       	ldd	r26, Z+7	; 0x07
     6fe:	b0 85       	ldd	r27, Z+8	; 0x08
     700:	0d c0       	rjmp	.+26     	; 0x71c <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     702:	dc 01       	movw	r26, r24
     704:	13 96       	adiw	r26, 0x03	; 3
     706:	01 c0       	rjmp	.+2      	; 0x70a <vListInsert+0x22>
     708:	df 01       	movw	r26, r30
     70a:	12 96       	adiw	r26, 0x02	; 2
     70c:	ed 91       	ld	r30, X+
     70e:	fc 91       	ld	r31, X
     710:	13 97       	sbiw	r26, 0x03	; 3
     712:	20 81       	ld	r18, Z
     714:	31 81       	ldd	r19, Z+1	; 0x01
     716:	42 17       	cp	r20, r18
     718:	53 07       	cpc	r21, r19
     71a:	b0 f7       	brcc	.-20     	; 0x708 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     71c:	12 96       	adiw	r26, 0x02	; 2
     71e:	ed 91       	ld	r30, X+
     720:	fc 91       	ld	r31, X
     722:	13 97       	sbiw	r26, 0x03	; 3
     724:	fb 83       	std	Y+3, r31	; 0x03
     726:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     728:	d5 83       	std	Z+5, r29	; 0x05
     72a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     72c:	bd 83       	std	Y+5, r27	; 0x05
     72e:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     730:	13 96       	adiw	r26, 0x03	; 3
     732:	dc 93       	st	X, r29
     734:	ce 93       	st	-X, r28
     736:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     738:	99 87       	std	Y+9, r25	; 0x09
     73a:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     73c:	fc 01       	movw	r30, r24
     73e:	20 81       	ld	r18, Z
     740:	2f 5f       	subi	r18, 0xFF	; 255
     742:	20 83       	st	Z, r18
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     750:	a0 85       	ldd	r26, Z+8	; 0x08
     752:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     754:	c2 81       	ldd	r28, Z+2	; 0x02
     756:	d3 81       	ldd	r29, Z+3	; 0x03
     758:	84 81       	ldd	r24, Z+4	; 0x04
     75a:	95 81       	ldd	r25, Z+5	; 0x05
     75c:	9d 83       	std	Y+5, r25	; 0x05
     75e:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     760:	c4 81       	ldd	r28, Z+4	; 0x04
     762:	d5 81       	ldd	r29, Z+5	; 0x05
     764:	82 81       	ldd	r24, Z+2	; 0x02
     766:	93 81       	ldd	r25, Z+3	; 0x03
     768:	9b 83       	std	Y+3, r25	; 0x03
     76a:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     76c:	11 96       	adiw	r26, 0x01	; 1
     76e:	8d 91       	ld	r24, X+
     770:	9c 91       	ld	r25, X
     772:	12 97       	sbiw	r26, 0x02	; 2
     774:	e8 17       	cp	r30, r24
     776:	f9 07       	cpc	r31, r25
     778:	31 f4       	brne	.+12     	; 0x786 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     77a:	84 81       	ldd	r24, Z+4	; 0x04
     77c:	95 81       	ldd	r25, Z+5	; 0x05
     77e:	12 96       	adiw	r26, 0x02	; 2
     780:	9c 93       	st	X, r25
     782:	8e 93       	st	-X, r24
     784:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     786:	11 86       	std	Z+9, r1	; 0x09
     788:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     78a:	8c 91       	ld	r24, X
     78c:	81 50       	subi	r24, 0x01	; 1
     78e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     790:	8c 91       	ld	r24, X
}
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	08 95       	ret

00000798 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     798:	1b bc       	out	0x2b, r1	; 43
     79a:	8c e7       	ldi	r24, 0x7C	; 124
     79c:	8a bd       	out	0x2a, r24	; 42
     79e:	8b e0       	ldi	r24, 0x0B	; 11
     7a0:	8e bd       	out	0x2e, r24	; 46
     7a2:	89 b7       	in	r24, 0x39	; 57
     7a4:	80 61       	ori	r24, 0x10	; 16
     7a6:	89 bf       	out	0x39, r24	; 57
     7a8:	08 95       	ret

000007aa <pxPortInitialiseStack>:
     7aa:	31 e1       	ldi	r19, 0x11	; 17
     7ac:	fc 01       	movw	r30, r24
     7ae:	30 83       	st	Z, r19
     7b0:	31 97       	sbiw	r30, 0x01	; 1
     7b2:	22 e2       	ldi	r18, 0x22	; 34
     7b4:	20 83       	st	Z, r18
     7b6:	31 97       	sbiw	r30, 0x01	; 1
     7b8:	a3 e3       	ldi	r26, 0x33	; 51
     7ba:	a0 83       	st	Z, r26
     7bc:	31 97       	sbiw	r30, 0x01	; 1
     7be:	60 83       	st	Z, r22
     7c0:	31 97       	sbiw	r30, 0x01	; 1
     7c2:	70 83       	st	Z, r23
     7c4:	31 97       	sbiw	r30, 0x01	; 1
     7c6:	10 82       	st	Z, r1
     7c8:	31 97       	sbiw	r30, 0x01	; 1
     7ca:	60 e8       	ldi	r22, 0x80	; 128
     7cc:	60 83       	st	Z, r22
     7ce:	31 97       	sbiw	r30, 0x01	; 1
     7d0:	10 82       	st	Z, r1
     7d2:	31 97       	sbiw	r30, 0x01	; 1
     7d4:	62 e0       	ldi	r22, 0x02	; 2
     7d6:	60 83       	st	Z, r22
     7d8:	31 97       	sbiw	r30, 0x01	; 1
     7da:	63 e0       	ldi	r22, 0x03	; 3
     7dc:	60 83       	st	Z, r22
     7de:	31 97       	sbiw	r30, 0x01	; 1
     7e0:	64 e0       	ldi	r22, 0x04	; 4
     7e2:	60 83       	st	Z, r22
     7e4:	31 97       	sbiw	r30, 0x01	; 1
     7e6:	65 e0       	ldi	r22, 0x05	; 5
     7e8:	60 83       	st	Z, r22
     7ea:	31 97       	sbiw	r30, 0x01	; 1
     7ec:	66 e0       	ldi	r22, 0x06	; 6
     7ee:	60 83       	st	Z, r22
     7f0:	31 97       	sbiw	r30, 0x01	; 1
     7f2:	67 e0       	ldi	r22, 0x07	; 7
     7f4:	60 83       	st	Z, r22
     7f6:	31 97       	sbiw	r30, 0x01	; 1
     7f8:	68 e0       	ldi	r22, 0x08	; 8
     7fa:	60 83       	st	Z, r22
     7fc:	31 97       	sbiw	r30, 0x01	; 1
     7fe:	69 e0       	ldi	r22, 0x09	; 9
     800:	60 83       	st	Z, r22
     802:	31 97       	sbiw	r30, 0x01	; 1
     804:	60 e1       	ldi	r22, 0x10	; 16
     806:	60 83       	st	Z, r22
     808:	31 97       	sbiw	r30, 0x01	; 1
     80a:	30 83       	st	Z, r19
     80c:	31 97       	sbiw	r30, 0x01	; 1
     80e:	32 e1       	ldi	r19, 0x12	; 18
     810:	30 83       	st	Z, r19
     812:	31 97       	sbiw	r30, 0x01	; 1
     814:	33 e1       	ldi	r19, 0x13	; 19
     816:	30 83       	st	Z, r19
     818:	31 97       	sbiw	r30, 0x01	; 1
     81a:	34 e1       	ldi	r19, 0x14	; 20
     81c:	30 83       	st	Z, r19
     81e:	31 97       	sbiw	r30, 0x01	; 1
     820:	35 e1       	ldi	r19, 0x15	; 21
     822:	30 83       	st	Z, r19
     824:	31 97       	sbiw	r30, 0x01	; 1
     826:	36 e1       	ldi	r19, 0x16	; 22
     828:	30 83       	st	Z, r19
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	37 e1       	ldi	r19, 0x17	; 23
     82e:	30 83       	st	Z, r19
     830:	31 97       	sbiw	r30, 0x01	; 1
     832:	38 e1       	ldi	r19, 0x18	; 24
     834:	30 83       	st	Z, r19
     836:	31 97       	sbiw	r30, 0x01	; 1
     838:	39 e1       	ldi	r19, 0x19	; 25
     83a:	30 83       	st	Z, r19
     83c:	31 97       	sbiw	r30, 0x01	; 1
     83e:	30 e2       	ldi	r19, 0x20	; 32
     840:	30 83       	st	Z, r19
     842:	31 97       	sbiw	r30, 0x01	; 1
     844:	31 e2       	ldi	r19, 0x21	; 33
     846:	30 83       	st	Z, r19
     848:	31 97       	sbiw	r30, 0x01	; 1
     84a:	20 83       	st	Z, r18
     84c:	31 97       	sbiw	r30, 0x01	; 1
     84e:	23 e2       	ldi	r18, 0x23	; 35
     850:	20 83       	st	Z, r18
     852:	31 97       	sbiw	r30, 0x01	; 1
     854:	40 83       	st	Z, r20
     856:	31 97       	sbiw	r30, 0x01	; 1
     858:	50 83       	st	Z, r21
     85a:	31 97       	sbiw	r30, 0x01	; 1
     85c:	26 e2       	ldi	r18, 0x26	; 38
     85e:	20 83       	st	Z, r18
     860:	31 97       	sbiw	r30, 0x01	; 1
     862:	27 e2       	ldi	r18, 0x27	; 39
     864:	20 83       	st	Z, r18
     866:	31 97       	sbiw	r30, 0x01	; 1
     868:	28 e2       	ldi	r18, 0x28	; 40
     86a:	20 83       	st	Z, r18
     86c:	31 97       	sbiw	r30, 0x01	; 1
     86e:	29 e2       	ldi	r18, 0x29	; 41
     870:	20 83       	st	Z, r18
     872:	31 97       	sbiw	r30, 0x01	; 1
     874:	20 e3       	ldi	r18, 0x30	; 48
     876:	20 83       	st	Z, r18
     878:	31 97       	sbiw	r30, 0x01	; 1
     87a:	21 e3       	ldi	r18, 0x31	; 49
     87c:	20 83       	st	Z, r18
     87e:	86 97       	sbiw	r24, 0x26	; 38
     880:	08 95       	ret

00000882 <xPortStartScheduler>:
     882:	0e 94 cc 03 	call	0x798	; 0x798 <prvSetupTimerInterrupt>
     886:	a0 91 55 04 	lds	r26, 0x0455	; 0x800455 <pxCurrentTCB>
     88a:	b0 91 56 04 	lds	r27, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
     88e:	cd 91       	ld	r28, X+
     890:	cd bf       	out	0x3d, r28	; 61
     892:	dd 91       	ld	r29, X+
     894:	de bf       	out	0x3e, r29	; 62
     896:	ff 91       	pop	r31
     898:	ef 91       	pop	r30
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	bf 91       	pop	r27
     8a0:	af 91       	pop	r26
     8a2:	9f 91       	pop	r25
     8a4:	8f 91       	pop	r24
     8a6:	7f 91       	pop	r23
     8a8:	6f 91       	pop	r22
     8aa:	5f 91       	pop	r21
     8ac:	4f 91       	pop	r20
     8ae:	3f 91       	pop	r19
     8b0:	2f 91       	pop	r18
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	ff 90       	pop	r15
     8b8:	ef 90       	pop	r14
     8ba:	df 90       	pop	r13
     8bc:	cf 90       	pop	r12
     8be:	bf 90       	pop	r11
     8c0:	af 90       	pop	r10
     8c2:	9f 90       	pop	r9
     8c4:	8f 90       	pop	r8
     8c6:	7f 90       	pop	r7
     8c8:	6f 90       	pop	r6
     8ca:	5f 90       	pop	r5
     8cc:	4f 90       	pop	r4
     8ce:	3f 90       	pop	r3
     8d0:	2f 90       	pop	r2
     8d2:	1f 90       	pop	r1
     8d4:	0f 90       	pop	r0
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	0f 90       	pop	r0
     8da:	08 95       	ret
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	08 95       	ret

000008e0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     8e0:	0f 92       	push	r0
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	0f 92       	push	r0
     8e8:	1f 92       	push	r1
     8ea:	11 24       	eor	r1, r1
     8ec:	2f 92       	push	r2
     8ee:	3f 92       	push	r3
     8f0:	4f 92       	push	r4
     8f2:	5f 92       	push	r5
     8f4:	6f 92       	push	r6
     8f6:	7f 92       	push	r7
     8f8:	8f 92       	push	r8
     8fa:	9f 92       	push	r9
     8fc:	af 92       	push	r10
     8fe:	bf 92       	push	r11
     900:	cf 92       	push	r12
     902:	df 92       	push	r13
     904:	ef 92       	push	r14
     906:	ff 92       	push	r15
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	2f 93       	push	r18
     90e:	3f 93       	push	r19
     910:	4f 93       	push	r20
     912:	5f 93       	push	r21
     914:	6f 93       	push	r22
     916:	7f 93       	push	r23
     918:	8f 93       	push	r24
     91a:	9f 93       	push	r25
     91c:	af 93       	push	r26
     91e:	bf 93       	push	r27
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	ef 93       	push	r30
     926:	ff 93       	push	r31
     928:	a0 91 55 04 	lds	r26, 0x0455	; 0x800455 <pxCurrentTCB>
     92c:	b0 91 56 04 	lds	r27, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
     930:	0d b6       	in	r0, 0x3d	; 61
     932:	0d 92       	st	X+, r0
     934:	0e b6       	in	r0, 0x3e	; 62
     936:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     938:	0e 94 bb 09 	call	0x1376	; 0x1376 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     93c:	a0 91 55 04 	lds	r26, 0x0455	; 0x800455 <pxCurrentTCB>
     940:	b0 91 56 04 	lds	r27, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
     944:	cd 91       	ld	r28, X+
     946:	cd bf       	out	0x3d, r28	; 61
     948:	dd 91       	ld	r29, X+
     94a:	de bf       	out	0x3e, r29	; 62
     94c:	ff 91       	pop	r31
     94e:	ef 91       	pop	r30
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	bf 91       	pop	r27
     956:	af 91       	pop	r26
     958:	9f 91       	pop	r25
     95a:	8f 91       	pop	r24
     95c:	7f 91       	pop	r23
     95e:	6f 91       	pop	r22
     960:	5f 91       	pop	r21
     962:	4f 91       	pop	r20
     964:	3f 91       	pop	r19
     966:	2f 91       	pop	r18
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	df 90       	pop	r13
     972:	cf 90       	pop	r12
     974:	bf 90       	pop	r11
     976:	af 90       	pop	r10
     978:	9f 90       	pop	r9
     97a:	8f 90       	pop	r8
     97c:	7f 90       	pop	r7
     97e:	6f 90       	pop	r6
     980:	5f 90       	pop	r5
     982:	4f 90       	pop	r4
     984:	3f 90       	pop	r3
     986:	2f 90       	pop	r2
     988:	1f 90       	pop	r1
     98a:	0f 90       	pop	r0
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	0f 90       	pop	r0

	asm volatile ( "ret" );
     990:	08 95       	ret

00000992 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     992:	0f 92       	push	r0
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	0f 92       	push	r0
     99a:	1f 92       	push	r1
     99c:	11 24       	eor	r1, r1
     99e:	2f 92       	push	r2
     9a0:	3f 92       	push	r3
     9a2:	4f 92       	push	r4
     9a4:	5f 92       	push	r5
     9a6:	6f 92       	push	r6
     9a8:	7f 92       	push	r7
     9aa:	8f 92       	push	r8
     9ac:	9f 92       	push	r9
     9ae:	af 92       	push	r10
     9b0:	bf 92       	push	r11
     9b2:	cf 92       	push	r12
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	2f 93       	push	r18
     9c0:	3f 93       	push	r19
     9c2:	4f 93       	push	r20
     9c4:	5f 93       	push	r21
     9c6:	6f 93       	push	r22
     9c8:	7f 93       	push	r23
     9ca:	8f 93       	push	r24
     9cc:	9f 93       	push	r25
     9ce:	af 93       	push	r26
     9d0:	bf 93       	push	r27
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	ef 93       	push	r30
     9d8:	ff 93       	push	r31
     9da:	a0 91 55 04 	lds	r26, 0x0455	; 0x800455 <pxCurrentTCB>
     9de:	b0 91 56 04 	lds	r27, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
     9e2:	0d b6       	in	r0, 0x3d	; 61
     9e4:	0d 92       	st	X+, r0
     9e6:	0e b6       	in	r0, 0x3e	; 62
     9e8:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     9ea:	0e 94 cc 07 	call	0xf98	; 0xf98 <xTaskIncrementTick>
     9ee:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     9f0:	0e 94 bb 09 	call	0x1376	; 0x1376 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     9f4:	a0 91 55 04 	lds	r26, 0x0455	; 0x800455 <pxCurrentTCB>
     9f8:	b0 91 56 04 	lds	r27, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
     9fc:	cd 91       	ld	r28, X+
     9fe:	cd bf       	out	0x3d, r28	; 61
     a00:	dd 91       	ld	r29, X+
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	ff 91       	pop	r31
     a06:	ef 91       	pop	r30
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	bf 91       	pop	r27
     a0e:	af 91       	pop	r26
     a10:	9f 91       	pop	r25
     a12:	8f 91       	pop	r24
     a14:	7f 91       	pop	r23
     a16:	6f 91       	pop	r22
     a18:	5f 91       	pop	r21
     a1a:	4f 91       	pop	r20
     a1c:	3f 91       	pop	r19
     a1e:	2f 91       	pop	r18
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	df 90       	pop	r13
     a2a:	cf 90       	pop	r12
     a2c:	bf 90       	pop	r11
     a2e:	af 90       	pop	r10
     a30:	9f 90       	pop	r9
     a32:	8f 90       	pop	r8
     a34:	7f 90       	pop	r7
     a36:	6f 90       	pop	r6
     a38:	5f 90       	pop	r5
     a3a:	4f 90       	pop	r4
     a3c:	3f 90       	pop	r3
     a3e:	2f 90       	pop	r2
     a40:	1f 90       	pop	r1
     a42:	0f 90       	pop	r0
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	0f 90       	pop	r0

	asm volatile ( "ret" );
     a48:	08 95       	ret

00000a4a <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     a4a:	0e 94 c9 04 	call	0x992	; 0x992 <vPortYieldFromTick>
		asm volatile ( "reti" );
     a4e:	18 95       	reti

00000a50 <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     a50:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <pxDelayedTaskList>
     a54:	f0 91 15 04 	lds	r31, 0x0415	; 0x800415 <pxDelayedTaskList+0x1>
     a58:	80 81       	ld	r24, Z
     a5a:	81 11       	cpse	r24, r1
     a5c:	07 c0       	rjmp	.+14     	; 0xa6c <prvResetNextTaskUnblockTime+0x1c>
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	9f ef       	ldi	r25, 0xFF	; 255
     a62:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <xNextTaskUnblockTime+0x1>
     a66:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <xNextTaskUnblockTime>
     a6a:	08 95       	ret
     a6c:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <pxDelayedTaskList>
     a70:	f0 91 15 04 	lds	r31, 0x0415	; 0x800415 <pxDelayedTaskList+0x1>
     a74:	05 80       	ldd	r0, Z+5	; 0x05
     a76:	f6 81       	ldd	r31, Z+6	; 0x06
     a78:	e0 2d       	mov	r30, r0
     a7a:	80 81       	ld	r24, Z
     a7c:	91 81       	ldd	r25, Z+1	; 0x01
     a7e:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <xNextTaskUnblockTime+0x1>
     a82:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <xNextTaskUnblockTime>
     a86:	08 95       	ret

00000a88 <prvDeleteTCB>:
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	ec 01       	movw	r28, r24
     a8e:	8f 89       	ldd	r24, Y+23	; 0x17
     a90:	98 8d       	ldd	r25, Y+24	; 0x18
     a92:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortFree>
     a96:	ce 01       	movw	r24, r28
     a98:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortFree>
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <prvInitialiseNewTask>:
     aa2:	2f 92       	push	r2
     aa4:	3f 92       	push	r3
     aa6:	4f 92       	push	r4
     aa8:	5f 92       	push	r5
     aaa:	6f 92       	push	r6
     aac:	7f 92       	push	r7
     aae:	8f 92       	push	r8
     ab0:	9f 92       	push	r9
     ab2:	af 92       	push	r10
     ab4:	bf 92       	push	r11
     ab6:	cf 92       	push	r12
     ab8:	df 92       	push	r13
     aba:	ef 92       	push	r14
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	1c 01       	movw	r2, r24
     aca:	4b 01       	movw	r8, r22
     acc:	29 01       	movw	r4, r18
     ace:	3a 01       	movw	r6, r20
     ad0:	a9 01       	movw	r20, r18
     ad2:	65 ea       	ldi	r22, 0xA5	; 165
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	d5 01       	movw	r26, r10
     ad8:	57 96       	adiw	r26, 0x17	; 23
     ada:	8d 91       	ld	r24, X+
     adc:	9c 91       	ld	r25, X
     ade:	58 97       	sbiw	r26, 0x18	; 24
     ae0:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <memset>
     ae4:	f5 01       	movw	r30, r10
     ae6:	87 89       	ldd	r24, Z+23	; 0x17
     ae8:	90 8d       	ldd	r25, Z+24	; 0x18
     aea:	f1 e0       	ldi	r31, 0x01	; 1
     aec:	4f 1a       	sub	r4, r31
     aee:	51 08       	sbc	r5, r1
     af0:	48 0e       	add	r4, r24
     af2:	59 1e       	adc	r5, r25
     af4:	81 14       	cp	r8, r1
     af6:	91 04       	cpc	r9, r1
     af8:	89 f4       	brne	.+34     	; 0xb1c <prvInitialiseNewTask+0x7a>
     afa:	17 c0       	rjmp	.+46     	; 0xb2a <prvInitialiseNewTask+0x88>
     afc:	82 2f       	mov	r24, r18
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	f4 01       	movw	r30, r8
     b02:	e8 0f       	add	r30, r24
     b04:	f9 1f       	adc	r31, r25
     b06:	30 81       	ld	r19, Z
     b08:	d5 01       	movw	r26, r10
     b0a:	a8 0f       	add	r26, r24
     b0c:	b9 1f       	adc	r27, r25
     b0e:	59 96       	adiw	r26, 0x19	; 25
     b10:	3c 93       	st	X, r19
     b12:	80 81       	ld	r24, Z
     b14:	88 23       	and	r24, r24
     b16:	29 f0       	breq	.+10     	; 0xb22 <prvInitialiseNewTask+0x80>
     b18:	2f 5f       	subi	r18, 0xFF	; 255
     b1a:	01 c0       	rjmp	.+2      	; 0xb1e <prvInitialiseNewTask+0x7c>
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	2a 30       	cpi	r18, 0x0A	; 10
     b20:	68 f3       	brcs	.-38     	; 0xafc <prvInitialiseNewTask+0x5a>
     b22:	d5 01       	movw	r26, r10
     b24:	92 96       	adiw	r26, 0x22	; 34
     b26:	1c 92       	st	X, r1
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <prvInitialiseNewTask+0x8c>
     b2a:	f5 01       	movw	r30, r10
     b2c:	11 8e       	std	Z+25, r1	; 0x19
     b2e:	f4 e0       	ldi	r31, 0x04	; 4
     b30:	fe 15       	cp	r31, r14
     b32:	18 f4       	brcc	.+6      	; 0xb3a <prvInitialiseNewTask+0x98>
     b34:	68 94       	set
     b36:	ee 24       	eor	r14, r14
     b38:	e2 f8       	bld	r14, 2
     b3a:	d5 01       	movw	r26, r10
     b3c:	56 96       	adiw	r26, 0x16	; 22
     b3e:	ec 92       	st	X, r14
     b40:	56 97       	sbiw	r26, 0x16	; 22
     b42:	95 96       	adiw	r26, 0x25	; 37
     b44:	ec 92       	st	X, r14
     b46:	95 97       	sbiw	r26, 0x25	; 37
     b48:	96 96       	adiw	r26, 0x26	; 38
     b4a:	1c 92       	st	X, r1
     b4c:	c5 01       	movw	r24, r10
     b4e:	02 96       	adiw	r24, 0x02	; 2
     b50:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vListInitialiseItem>
     b54:	c5 01       	movw	r24, r10
     b56:	0c 96       	adiw	r24, 0x0c	; 12
     b58:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vListInitialiseItem>
     b5c:	f5 01       	movw	r30, r10
     b5e:	b1 86       	std	Z+9, r11	; 0x09
     b60:	a0 86       	std	Z+8, r10	; 0x08
     b62:	85 e0       	ldi	r24, 0x05	; 5
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	8e 19       	sub	r24, r14
     b68:	91 09       	sbc	r25, r1
     b6a:	95 87       	std	Z+13, r25	; 0x0d
     b6c:	84 87       	std	Z+12, r24	; 0x0c
     b6e:	b3 8a       	std	Z+19, r11	; 0x13
     b70:	a2 8a       	std	Z+18, r10	; 0x12
     b72:	84 e0       	ldi	r24, 0x04	; 4
     b74:	b7 96       	adiw	r30, 0x27	; 39
     b76:	df 01       	movw	r26, r30
     b78:	1d 92       	st	X+, r1
     b7a:	8a 95       	dec	r24
     b7c:	e9 f7       	brne	.-6      	; 0xb78 <prvInitialiseNewTask+0xd6>
     b7e:	f5 01       	movw	r30, r10
     b80:	13 a6       	std	Z+43, r1	; 0x2b
     b82:	a8 01       	movw	r20, r16
     b84:	b1 01       	movw	r22, r2
     b86:	c2 01       	movw	r24, r4
     b88:	0e 94 d5 03 	call	0x7aa	; 0x7aa <pxPortInitialiseStack>
     b8c:	d5 01       	movw	r26, r10
     b8e:	8d 93       	st	X+, r24
     b90:	9c 93       	st	X, r25
     b92:	c1 14       	cp	r12, r1
     b94:	d1 04       	cpc	r13, r1
     b96:	19 f0       	breq	.+6      	; 0xb9e <prvInitialiseNewTask+0xfc>
     b98:	f6 01       	movw	r30, r12
     b9a:	b1 82       	std	Z+1, r11	; 0x01
     b9c:	a0 82       	st	Z, r10
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	ef 90       	pop	r14
     ba8:	df 90       	pop	r13
     baa:	cf 90       	pop	r12
     bac:	bf 90       	pop	r11
     bae:	af 90       	pop	r10
     bb0:	9f 90       	pop	r9
     bb2:	8f 90       	pop	r8
     bb4:	7f 90       	pop	r7
     bb6:	6f 90       	pop	r6
     bb8:	5f 90       	pop	r5
     bba:	4f 90       	pop	r4
     bbc:	3f 90       	pop	r3
     bbe:	2f 90       	pop	r2
     bc0:	08 95       	ret

00000bc2 <prvInitialiseTaskLists>:
     bc2:	cf 93       	push	r28
     bc4:	c0 e0       	ldi	r28, 0x00	; 0
     bc6:	10 c0       	rjmp	.+32     	; 0xbe8 <prvInitialiseTaskLists+0x26>
     bc8:	8c 2f       	mov	r24, r28
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	9c 01       	movw	r18, r24
     bce:	22 0f       	add	r18, r18
     bd0:	33 1f       	adc	r19, r19
     bd2:	22 0f       	add	r18, r18
     bd4:	33 1f       	adc	r19, r19
     bd6:	22 0f       	add	r18, r18
     bd8:	33 1f       	adc	r19, r19
     bda:	82 0f       	add	r24, r18
     bdc:	93 1f       	adc	r25, r19
     bde:	88 5d       	subi	r24, 0xD8	; 216
     be0:	9b 4f       	sbci	r25, 0xFB	; 251
     be2:	0e 94 62 03 	call	0x6c4	; 0x6c4 <vListInitialise>
     be6:	cf 5f       	subi	r28, 0xFF	; 255
     be8:	c5 30       	cpi	r28, 0x05	; 5
     bea:	70 f3       	brcs	.-36     	; 0xbc8 <prvInitialiseTaskLists+0x6>
     bec:	8f e1       	ldi	r24, 0x1F	; 31
     bee:	94 e0       	ldi	r25, 0x04	; 4
     bf0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <vListInitialise>
     bf4:	86 e1       	ldi	r24, 0x16	; 22
     bf6:	94 e0       	ldi	r25, 0x04	; 4
     bf8:	0e 94 62 03 	call	0x6c4	; 0x6c4 <vListInitialise>
     bfc:	89 e0       	ldi	r24, 0x09	; 9
     bfe:	94 e0       	ldi	r25, 0x04	; 4
     c00:	0e 94 62 03 	call	0x6c4	; 0x6c4 <vListInitialise>
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	94 e0       	ldi	r25, 0x04	; 4
     c08:	0e 94 62 03 	call	0x6c4	; 0x6c4 <vListInitialise>
     c0c:	86 ef       	ldi	r24, 0xF6	; 246
     c0e:	93 e0       	ldi	r25, 0x03	; 3
     c10:	0e 94 62 03 	call	0x6c4	; 0x6c4 <vListInitialise>
     c14:	8f e1       	ldi	r24, 0x1F	; 31
     c16:	94 e0       	ldi	r25, 0x04	; 4
     c18:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <pxDelayedTaskList+0x1>
     c1c:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <pxDelayedTaskList>
     c20:	86 e1       	ldi	r24, 0x16	; 22
     c22:	94 e0       	ldi	r25, 0x04	; 4
     c24:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <pxOverflowDelayedTaskList+0x1>
     c28:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <pxOverflowDelayedTaskList>
     c2c:	cf 91       	pop	r28
     c2e:	08 95       	ret

00000c30 <prvAddNewTaskToReadyList>:
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	ec 01       	movw	r28, r24
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	0f 92       	push	r0
     c3c:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <uxCurrentNumberOfTasks>
     c40:	8f 5f       	subi	r24, 0xFF	; 255
     c42:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <uxCurrentNumberOfTasks>
     c46:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <pxCurrentTCB>
     c4a:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
     c4e:	89 2b       	or	r24, r25
     c50:	59 f4       	brne	.+22     	; 0xc68 <prvAddNewTaskToReadyList+0x38>
     c52:	d0 93 56 04 	sts	0x0456, r29	; 0x800456 <pxCurrentTCB+0x1>
     c56:	c0 93 55 04 	sts	0x0455, r28	; 0x800455 <pxCurrentTCB>
     c5a:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <uxCurrentNumberOfTasks>
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	99 f4       	brne	.+38     	; 0xc88 <prvAddNewTaskToReadyList+0x58>
     c62:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <prvInitialiseTaskLists>
     c66:	10 c0       	rjmp	.+32     	; 0xc88 <prvAddNewTaskToReadyList+0x58>
     c68:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <xSchedulerRunning>
     c6c:	81 11       	cpse	r24, r1
     c6e:	0c c0       	rjmp	.+24     	; 0xc88 <prvAddNewTaskToReadyList+0x58>
     c70:	e0 91 55 04 	lds	r30, 0x0455	; 0x800455 <pxCurrentTCB>
     c74:	f0 91 56 04 	lds	r31, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
     c78:	96 89       	ldd	r25, Z+22	; 0x16
     c7a:	8e 89       	ldd	r24, Y+22	; 0x16
     c7c:	89 17       	cp	r24, r25
     c7e:	20 f0       	brcs	.+8      	; 0xc88 <prvAddNewTaskToReadyList+0x58>
     c80:	d0 93 56 04 	sts	0x0456, r29	; 0x800456 <pxCurrentTCB+0x1>
     c84:	c0 93 55 04 	sts	0x0455, r28	; 0x800455 <pxCurrentTCB>
     c88:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <uxTaskNumber>
     c8c:	8f 5f       	subi	r24, 0xFF	; 255
     c8e:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <uxTaskNumber>
     c92:	8b a3       	std	Y+35, r24	; 0x23
     c94:	8e 89       	ldd	r24, Y+22	; 0x16
     c96:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <uxTopReadyPriority>
     c9a:	98 17       	cp	r25, r24
     c9c:	10 f4       	brcc	.+4      	; 0xca2 <prvAddNewTaskToReadyList+0x72>
     c9e:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <uxTopReadyPriority>
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	fc 01       	movw	r30, r24
     ca6:	ee 0f       	add	r30, r30
     ca8:	ff 1f       	adc	r31, r31
     caa:	ee 0f       	add	r30, r30
     cac:	ff 1f       	adc	r31, r31
     cae:	ee 0f       	add	r30, r30
     cb0:	ff 1f       	adc	r31, r31
     cb2:	8e 0f       	add	r24, r30
     cb4:	9f 1f       	adc	r25, r31
     cb6:	fc 01       	movw	r30, r24
     cb8:	e8 5d       	subi	r30, 0xD8	; 216
     cba:	fb 4f       	sbci	r31, 0xFB	; 251
     cbc:	01 80       	ldd	r0, Z+1	; 0x01
     cbe:	f2 81       	ldd	r31, Z+2	; 0x02
     cc0:	e0 2d       	mov	r30, r0
     cc2:	fd 83       	std	Y+5, r31	; 0x05
     cc4:	ec 83       	std	Y+4, r30	; 0x04
     cc6:	84 81       	ldd	r24, Z+4	; 0x04
     cc8:	95 81       	ldd	r25, Z+5	; 0x05
     cca:	9f 83       	std	Y+7, r25	; 0x07
     ccc:	8e 83       	std	Y+6, r24	; 0x06
     cce:	a4 81       	ldd	r26, Z+4	; 0x04
     cd0:	b5 81       	ldd	r27, Z+5	; 0x05
     cd2:	ce 01       	movw	r24, r28
     cd4:	02 96       	adiw	r24, 0x02	; 2
     cd6:	13 96       	adiw	r26, 0x03	; 3
     cd8:	9c 93       	st	X, r25
     cda:	8e 93       	st	-X, r24
     cdc:	12 97       	sbiw	r26, 0x02	; 2
     cde:	95 83       	std	Z+5, r25	; 0x05
     ce0:	84 83       	std	Z+4, r24	; 0x04
     ce2:	ee 89       	ldd	r30, Y+22	; 0x16
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	cf 01       	movw	r24, r30
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	e8 0f       	add	r30, r24
     cf6:	f9 1f       	adc	r31, r25
     cf8:	e8 5d       	subi	r30, 0xD8	; 216
     cfa:	fb 4f       	sbci	r31, 0xFB	; 251
     cfc:	fb 87       	std	Y+11, r31	; 0x0b
     cfe:	ea 87       	std	Y+10, r30	; 0x0a
     d00:	80 81       	ld	r24, Z
     d02:	8f 5f       	subi	r24, 0xFF	; 255
     d04:	80 83       	st	Z, r24
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <xSchedulerRunning>
     d0e:	88 23       	and	r24, r24
     d10:	51 f0       	breq	.+20     	; 0xd26 <prvAddNewTaskToReadyList+0xf6>
     d12:	e0 91 55 04 	lds	r30, 0x0455	; 0x800455 <pxCurrentTCB>
     d16:	f0 91 56 04 	lds	r31, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
     d1a:	96 89       	ldd	r25, Z+22	; 0x16
     d1c:	8e 89       	ldd	r24, Y+22	; 0x16
     d1e:	98 17       	cp	r25, r24
     d20:	10 f4       	brcc	.+4      	; 0xd26 <prvAddNewTaskToReadyList+0xf6>
     d22:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vPortYield>
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	08 95       	ret

00000d2c <prvCheckTasksWaitingTermination>:
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	1c c0       	rjmp	.+56     	; 0xd6a <prvCheckTasksWaitingTermination+0x3e>
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	0f 92       	push	r0
     d38:	e0 91 05 04 	lds	r30, 0x0405	; 0x800405 <xTasksWaitingTermination+0x5>
     d3c:	f0 91 06 04 	lds	r31, 0x0406	; 0x800406 <xTasksWaitingTermination+0x6>
     d40:	c6 81       	ldd	r28, Z+6	; 0x06
     d42:	d7 81       	ldd	r29, Z+7	; 0x07
     d44:	ce 01       	movw	r24, r28
     d46:	02 96       	adiw	r24, 0x02	; 2
     d48:	0e 94 a5 03 	call	0x74a	; 0x74a <uxListRemove>
     d4c:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <uxCurrentNumberOfTasks>
     d50:	81 50       	subi	r24, 0x01	; 1
     d52:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <uxCurrentNumberOfTasks>
     d56:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <uxDeletedTasksWaitingCleanUp>
     d5a:	81 50       	subi	r24, 0x01	; 1
     d5c:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <uxDeletedTasksWaitingCleanUp>
     d60:	0f 90       	pop	r0
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	ce 01       	movw	r24, r28
     d66:	0e 94 44 05 	call	0xa88	; 0xa88 <prvDeleteTCB>
     d6a:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <uxDeletedTasksWaitingCleanUp>
     d6e:	81 11       	cpse	r24, r1
     d70:	e0 cf       	rjmp	.-64     	; 0xd32 <prvCheckTasksWaitingTermination+0x6>
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <prvIdleTask>:
     d78:	0e 94 96 06 	call	0xd2c	; 0xd2c <prvCheckTasksWaitingTermination>
     d7c:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <pxReadyTasksLists>
     d80:	82 30       	cpi	r24, 0x02	; 2
     d82:	d0 f3       	brcs	.-12     	; 0xd78 <prvIdleTask>
     d84:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vPortYield>
     d88:	f7 cf       	rjmp	.-18     	; 0xd78 <prvIdleTask>

00000d8a <prvAddCurrentTaskToDelayedList>:
     d8a:	ff 92       	push	r15
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	ec 01       	movw	r28, r24
     d96:	f6 2e       	mov	r15, r22
     d98:	00 91 f3 03 	lds	r16, 0x03F3	; 0x8003f3 <xTickCount>
     d9c:	10 91 f4 03 	lds	r17, 0x03F4	; 0x8003f4 <xTickCount+0x1>
     da0:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <pxCurrentTCB>
     da4:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
     da8:	02 96       	adiw	r24, 0x02	; 2
     daa:	0e 94 a5 03 	call	0x74a	; 0x74a <uxListRemove>
     dae:	cf 3f       	cpi	r28, 0xFF	; 255
     db0:	8f ef       	ldi	r24, 0xFF	; 255
     db2:	d8 07       	cpc	r29, r24
     db4:	b1 f5       	brne	.+108    	; 0xe22 <prvAddCurrentTaskToDelayedList+0x98>
     db6:	ff 20       	and	r15, r15
     db8:	a1 f1       	breq	.+104    	; 0xe22 <prvAddCurrentTaskToDelayedList+0x98>
     dba:	e6 ef       	ldi	r30, 0xF6	; 246
     dbc:	f3 e0       	ldi	r31, 0x03	; 3
     dbe:	a1 81       	ldd	r26, Z+1	; 0x01
     dc0:	b2 81       	ldd	r27, Z+2	; 0x02
     dc2:	c0 91 55 04 	lds	r28, 0x0455	; 0x800455 <pxCurrentTCB>
     dc6:	d0 91 56 04 	lds	r29, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
     dca:	bd 83       	std	Y+5, r27	; 0x05
     dcc:	ac 83       	std	Y+4, r26	; 0x04
     dce:	c0 91 55 04 	lds	r28, 0x0455	; 0x800455 <pxCurrentTCB>
     dd2:	d0 91 56 04 	lds	r29, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9c 91       	ld	r25, X
     ddc:	15 97       	sbiw	r26, 0x05	; 5
     dde:	9f 83       	std	Y+7, r25	; 0x07
     de0:	8e 83       	std	Y+6, r24	; 0x06
     de2:	14 96       	adiw	r26, 0x04	; 4
     de4:	cd 91       	ld	r28, X+
     de6:	dc 91       	ld	r29, X
     de8:	15 97       	sbiw	r26, 0x05	; 5
     dea:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <pxCurrentTCB>
     dee:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
     df2:	02 96       	adiw	r24, 0x02	; 2
     df4:	9b 83       	std	Y+3, r25	; 0x03
     df6:	8a 83       	std	Y+2, r24	; 0x02
     df8:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <pxCurrentTCB>
     dfc:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
     e00:	02 96       	adiw	r24, 0x02	; 2
     e02:	15 96       	adiw	r26, 0x05	; 5
     e04:	9c 93       	st	X, r25
     e06:	8e 93       	st	-X, r24
     e08:	14 97       	sbiw	r26, 0x04	; 4
     e0a:	a0 91 55 04 	lds	r26, 0x0455	; 0x800455 <pxCurrentTCB>
     e0e:	b0 91 56 04 	lds	r27, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
     e12:	1b 96       	adiw	r26, 0x0b	; 11
     e14:	fc 93       	st	X, r31
     e16:	ee 93       	st	-X, r30
     e18:	1a 97       	sbiw	r26, 0x0a	; 10
     e1a:	80 81       	ld	r24, Z
     e1c:	8f 5f       	subi	r24, 0xFF	; 255
     e1e:	80 83       	st	Z, r24
     e20:	2f c0       	rjmp	.+94     	; 0xe80 <prvAddCurrentTaskToDelayedList+0xf6>
     e22:	c0 0f       	add	r28, r16
     e24:	d1 1f       	adc	r29, r17
     e26:	e0 91 55 04 	lds	r30, 0x0455	; 0x800455 <pxCurrentTCB>
     e2a:	f0 91 56 04 	lds	r31, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
     e2e:	d3 83       	std	Z+3, r29	; 0x03
     e30:	c2 83       	std	Z+2, r28	; 0x02
     e32:	c0 17       	cp	r28, r16
     e34:	d1 07       	cpc	r29, r17
     e36:	68 f4       	brcc	.+26     	; 0xe52 <prvAddCurrentTaskToDelayedList+0xc8>
     e38:	60 91 55 04 	lds	r22, 0x0455	; 0x800455 <pxCurrentTCB>
     e3c:	70 91 56 04 	lds	r23, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
     e40:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <pxOverflowDelayedTaskList>
     e44:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <pxOverflowDelayedTaskList+0x1>
     e48:	6e 5f       	subi	r22, 0xFE	; 254
     e4a:	7f 4f       	sbci	r23, 0xFF	; 255
     e4c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <vListInsert>
     e50:	17 c0       	rjmp	.+46     	; 0xe80 <prvAddCurrentTaskToDelayedList+0xf6>
     e52:	60 91 55 04 	lds	r22, 0x0455	; 0x800455 <pxCurrentTCB>
     e56:	70 91 56 04 	lds	r23, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
     e5a:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <pxDelayedTaskList>
     e5e:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <pxDelayedTaskList+0x1>
     e62:	6e 5f       	subi	r22, 0xFE	; 254
     e64:	7f 4f       	sbci	r23, 0xFF	; 255
     e66:	0e 94 74 03 	call	0x6e8	; 0x6e8 <vListInsert>
     e6a:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <xNextTaskUnblockTime>
     e6e:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <xNextTaskUnblockTime+0x1>
     e72:	c8 17       	cp	r28, r24
     e74:	d9 07       	cpc	r29, r25
     e76:	20 f4       	brcc	.+8      	; 0xe80 <prvAddCurrentTaskToDelayedList+0xf6>
     e78:	d0 93 eb 03 	sts	0x03EB, r29	; 0x8003eb <xNextTaskUnblockTime+0x1>
     e7c:	c0 93 ea 03 	sts	0x03EA, r28	; 0x8003ea <xNextTaskUnblockTime>
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	ff 90       	pop	r15
     e8a:	08 95       	ret

00000e8c <xTaskCreate>:
     e8c:	2f 92       	push	r2
     e8e:	3f 92       	push	r3
     e90:	4f 92       	push	r4
     e92:	5f 92       	push	r5
     e94:	6f 92       	push	r6
     e96:	7f 92       	push	r7
     e98:	8f 92       	push	r8
     e9a:	9f 92       	push	r9
     e9c:	af 92       	push	r10
     e9e:	bf 92       	push	r11
     ea0:	cf 92       	push	r12
     ea2:	df 92       	push	r13
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	3c 01       	movw	r6, r24
     eb2:	1b 01       	movw	r2, r22
     eb4:	5a 01       	movw	r10, r20
     eb6:	29 01       	movw	r4, r18
     eb8:	ca 01       	movw	r24, r20
     eba:	0e 94 9a 02 	call	0x534	; 0x534 <pvPortMalloc>
     ebe:	6c 01       	movw	r12, r24
     ec0:	89 2b       	or	r24, r25
     ec2:	71 f0       	breq	.+28     	; 0xee0 <xTaskCreate+0x54>
     ec4:	8c e2       	ldi	r24, 0x2C	; 44
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 9a 02 	call	0x534	; 0x534 <pvPortMalloc>
     ecc:	ec 01       	movw	r28, r24
     ece:	89 2b       	or	r24, r25
     ed0:	19 f0       	breq	.+6      	; 0xed8 <xTaskCreate+0x4c>
     ed2:	d8 8e       	std	Y+24, r13	; 0x18
     ed4:	cf 8a       	std	Y+23, r12	; 0x17
     ed6:	06 c0       	rjmp	.+12     	; 0xee4 <xTaskCreate+0x58>
     ed8:	c6 01       	movw	r24, r12
     eda:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortFree>
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <xTaskCreate+0x58>
     ee0:	c0 e0       	ldi	r28, 0x00	; 0
     ee2:	d0 e0       	ldi	r29, 0x00	; 0
     ee4:	20 97       	sbiw	r28, 0x00	; 0
     ee6:	91 f0       	breq	.+36     	; 0xf0c <xTaskCreate+0x80>
     ee8:	95 01       	movw	r18, r10
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	81 2c       	mov	r8, r1
     ef0:	91 2c       	mov	r9, r1
     ef2:	5e 01       	movw	r10, r28
     ef4:	67 01       	movw	r12, r14
     ef6:	e0 2e       	mov	r14, r16
     ef8:	82 01       	movw	r16, r4
     efa:	b1 01       	movw	r22, r2
     efc:	c3 01       	movw	r24, r6
     efe:	0e 94 51 05 	call	0xaa2	; 0xaa2 <prvInitialiseNewTask>
     f02:	ce 01       	movw	r24, r28
     f04:	0e 94 18 06 	call	0xc30	; 0xc30 <prvAddNewTaskToReadyList>
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <xTaskCreate+0x82>
     f0c:	8f ef       	ldi	r24, 0xFF	; 255
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	ff 90       	pop	r15
     f18:	ef 90       	pop	r14
     f1a:	df 90       	pop	r13
     f1c:	cf 90       	pop	r12
     f1e:	bf 90       	pop	r11
     f20:	af 90       	pop	r10
     f22:	9f 90       	pop	r9
     f24:	8f 90       	pop	r8
     f26:	7f 90       	pop	r7
     f28:	6f 90       	pop	r6
     f2a:	5f 90       	pop	r5
     f2c:	4f 90       	pop	r4
     f2e:	3f 90       	pop	r3
     f30:	2f 90       	pop	r2
     f32:	08 95       	ret

00000f34 <vTaskStartScheduler>:
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	0f 2e       	mov	r0, r31
     f3c:	f8 ee       	ldi	r31, 0xE8	; 232
     f3e:	ef 2e       	mov	r14, r31
     f40:	f3 e0       	ldi	r31, 0x03	; 3
     f42:	ff 2e       	mov	r15, r31
     f44:	f0 2d       	mov	r31, r0
     f46:	00 e0       	ldi	r16, 0x00	; 0
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	48 ec       	ldi	r20, 0xC8	; 200
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	6a ea       	ldi	r22, 0xAA	; 170
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	8c eb       	ldi	r24, 0xBC	; 188
     f56:	96 e0       	ldi	r25, 0x06	; 6
     f58:	0e 94 46 07 	call	0xe8c	; 0xe8c <xTaskCreate>
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	81 f4       	brne	.+32     	; 0xf80 <vTaskStartScheduler+0x4c>
     f60:	f8 94       	cli
     f62:	8f ef       	ldi	r24, 0xFF	; 255
     f64:	9f ef       	ldi	r25, 0xFF	; 255
     f66:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <xNextTaskUnblockTime+0x1>
     f6a:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <xNextTaskUnblockTime>
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <xSchedulerRunning>
     f74:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <xTickCount+0x1>
     f78:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <xTickCount>
     f7c:	0e 94 41 04 	call	0x882	; 0x882 <xPortStartScheduler>
     f80:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <uxTopUsedPriority>
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	08 95       	ret

00000f8c <vTaskSuspendAll>:
     f8c:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <uxSchedulerSuspended>
     f90:	8f 5f       	subi	r24, 0xFF	; 255
     f92:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <uxSchedulerSuspended>
     f96:	08 95       	ret

00000f98 <xTaskIncrementTick>:
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <uxSchedulerSuspended>
     fa4:	81 11       	cpse	r24, r1
     fa6:	eb c0       	rjmp	.+470    	; 0x117e <xTaskIncrementTick+0x1e6>
     fa8:	c0 91 f3 03 	lds	r28, 0x03F3	; 0x8003f3 <xTickCount>
     fac:	d0 91 f4 03 	lds	r29, 0x03F4	; 0x8003f4 <xTickCount+0x1>
     fb0:	8e 01       	movw	r16, r28
     fb2:	0f 5f       	subi	r16, 0xFF	; 255
     fb4:	1f 4f       	sbci	r17, 0xFF	; 255
     fb6:	10 93 f4 03 	sts	0x03F4, r17	; 0x8003f4 <xTickCount+0x1>
     fba:	00 93 f3 03 	sts	0x03F3, r16	; 0x8003f3 <xTickCount>
     fbe:	01 15       	cp	r16, r1
     fc0:	11 05       	cpc	r17, r1
     fc2:	b9 f4       	brne	.+46     	; 0xff2 <xTaskIncrementTick+0x5a>
     fc4:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <pxDelayedTaskList>
     fc8:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <pxDelayedTaskList+0x1>
     fcc:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <pxOverflowDelayedTaskList>
     fd0:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <pxOverflowDelayedTaskList+0x1>
     fd4:	30 93 15 04 	sts	0x0415, r19	; 0x800415 <pxDelayedTaskList+0x1>
     fd8:	20 93 14 04 	sts	0x0414, r18	; 0x800414 <pxDelayedTaskList>
     fdc:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <pxOverflowDelayedTaskList+0x1>
     fe0:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <pxOverflowDelayedTaskList>
     fe4:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <xNumOfOverflows>
     fe8:	8f 5f       	subi	r24, 0xFF	; 255
     fea:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <xNumOfOverflows>
     fee:	0e 94 28 05 	call	0xa50	; 0xa50 <prvResetNextTaskUnblockTime>
     ff2:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <xNextTaskUnblockTime>
     ff6:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <xNextTaskUnblockTime+0x1>
     ffa:	08 17       	cp	r16, r24
     ffc:	19 07       	cpc	r17, r25
     ffe:	20 f4       	brcc	.+8      	; 0x1008 <xTaskIncrementTick+0x70>
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	b8 c0       	rjmp	.+368    	; 0x1174 <xTaskIncrementTick+0x1dc>
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	01 c0       	rjmp	.+2      	; 0x100a <xTaskIncrementTick+0x72>
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <pxDelayedTaskList>
    100e:	f0 91 15 04 	lds	r31, 0x0415	; 0x800415 <pxDelayedTaskList+0x1>
    1012:	90 81       	ld	r25, Z
    1014:	91 11       	cpse	r25, r1
    1016:	07 c0       	rjmp	.+14     	; 0x1026 <xTaskIncrementTick+0x8e>
    1018:	2f ef       	ldi	r18, 0xFF	; 255
    101a:	3f ef       	ldi	r19, 0xFF	; 255
    101c:	30 93 eb 03 	sts	0x03EB, r19	; 0x8003eb <xNextTaskUnblockTime+0x1>
    1020:	20 93 ea 03 	sts	0x03EA, r18	; 0x8003ea <xNextTaskUnblockTime>
    1024:	a7 c0       	rjmp	.+334    	; 0x1174 <xTaskIncrementTick+0x1dc>
    1026:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <pxDelayedTaskList>
    102a:	f0 91 15 04 	lds	r31, 0x0415	; 0x800415 <pxDelayedTaskList+0x1>
    102e:	05 80       	ldd	r0, Z+5	; 0x05
    1030:	f6 81       	ldd	r31, Z+6	; 0x06
    1032:	e0 2d       	mov	r30, r0
    1034:	06 80       	ldd	r0, Z+6	; 0x06
    1036:	f7 81       	ldd	r31, Z+7	; 0x07
    1038:	e0 2d       	mov	r30, r0
    103a:	22 81       	ldd	r18, Z+2	; 0x02
    103c:	33 81       	ldd	r19, Z+3	; 0x03
    103e:	02 17       	cp	r16, r18
    1040:	13 07       	cpc	r17, r19
    1042:	28 f4       	brcc	.+10     	; 0x104e <xTaskIncrementTick+0xb6>
    1044:	30 93 eb 03 	sts	0x03EB, r19	; 0x8003eb <xNextTaskUnblockTime+0x1>
    1048:	20 93 ea 03 	sts	0x03EA, r18	; 0x8003ea <xNextTaskUnblockTime>
    104c:	93 c0       	rjmp	.+294    	; 0x1174 <xTaskIncrementTick+0x1dc>
    104e:	a2 85       	ldd	r26, Z+10	; 0x0a
    1050:	b3 85       	ldd	r27, Z+11	; 0x0b
    1052:	24 81       	ldd	r18, Z+4	; 0x04
    1054:	35 81       	ldd	r19, Z+5	; 0x05
    1056:	46 81       	ldd	r20, Z+6	; 0x06
    1058:	57 81       	ldd	r21, Z+7	; 0x07
    105a:	e9 01       	movw	r28, r18
    105c:	5d 83       	std	Y+5, r21	; 0x05
    105e:	4c 83       	std	Y+4, r20	; 0x04
    1060:	26 81       	ldd	r18, Z+6	; 0x06
    1062:	37 81       	ldd	r19, Z+7	; 0x07
    1064:	44 81       	ldd	r20, Z+4	; 0x04
    1066:	55 81       	ldd	r21, Z+5	; 0x05
    1068:	e9 01       	movw	r28, r18
    106a:	5b 83       	std	Y+3, r21	; 0x03
    106c:	4a 83       	std	Y+2, r20	; 0x02
    106e:	11 96       	adiw	r26, 0x01	; 1
    1070:	2d 91       	ld	r18, X+
    1072:	3c 91       	ld	r19, X
    1074:	12 97       	sbiw	r26, 0x02	; 2
    1076:	af 01       	movw	r20, r30
    1078:	4e 5f       	subi	r20, 0xFE	; 254
    107a:	5f 4f       	sbci	r21, 0xFF	; 255
    107c:	24 17       	cp	r18, r20
    107e:	35 07       	cpc	r19, r21
    1080:	31 f4       	brne	.+12     	; 0x108e <xTaskIncrementTick+0xf6>
    1082:	26 81       	ldd	r18, Z+6	; 0x06
    1084:	37 81       	ldd	r19, Z+7	; 0x07
    1086:	12 96       	adiw	r26, 0x02	; 2
    1088:	3c 93       	st	X, r19
    108a:	2e 93       	st	-X, r18
    108c:	11 97       	sbiw	r26, 0x01	; 1
    108e:	13 86       	std	Z+11, r1	; 0x0b
    1090:	12 86       	std	Z+10, r1	; 0x0a
    1092:	9c 91       	ld	r25, X
    1094:	91 50       	subi	r25, 0x01	; 1
    1096:	9c 93       	st	X, r25
    1098:	a4 89       	ldd	r26, Z+20	; 0x14
    109a:	b5 89       	ldd	r27, Z+21	; 0x15
    109c:	10 97       	sbiw	r26, 0x00	; 0
    109e:	19 f1       	breq	.+70     	; 0x10e6 <xTaskIncrementTick+0x14e>
    10a0:	26 85       	ldd	r18, Z+14	; 0x0e
    10a2:	37 85       	ldd	r19, Z+15	; 0x0f
    10a4:	60 89       	ldd	r22, Z+16	; 0x10
    10a6:	71 89       	ldd	r23, Z+17	; 0x11
    10a8:	e9 01       	movw	r28, r18
    10aa:	7d 83       	std	Y+5, r23	; 0x05
    10ac:	6c 83       	std	Y+4, r22	; 0x04
    10ae:	20 89       	ldd	r18, Z+16	; 0x10
    10b0:	31 89       	ldd	r19, Z+17	; 0x11
    10b2:	66 85       	ldd	r22, Z+14	; 0x0e
    10b4:	77 85       	ldd	r23, Z+15	; 0x0f
    10b6:	e9 01       	movw	r28, r18
    10b8:	7b 83       	std	Y+3, r23	; 0x03
    10ba:	6a 83       	std	Y+2, r22	; 0x02
    10bc:	11 96       	adiw	r26, 0x01	; 1
    10be:	6d 91       	ld	r22, X+
    10c0:	7c 91       	ld	r23, X
    10c2:	12 97       	sbiw	r26, 0x02	; 2
    10c4:	9f 01       	movw	r18, r30
    10c6:	24 5f       	subi	r18, 0xF4	; 244
    10c8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ca:	62 17       	cp	r22, r18
    10cc:	73 07       	cpc	r23, r19
    10ce:	31 f4       	brne	.+12     	; 0x10dc <xTaskIncrementTick+0x144>
    10d0:	20 89       	ldd	r18, Z+16	; 0x10
    10d2:	31 89       	ldd	r19, Z+17	; 0x11
    10d4:	12 96       	adiw	r26, 0x02	; 2
    10d6:	3c 93       	st	X, r19
    10d8:	2e 93       	st	-X, r18
    10da:	11 97       	sbiw	r26, 0x01	; 1
    10dc:	15 8a       	std	Z+21, r1	; 0x15
    10de:	14 8a       	std	Z+20, r1	; 0x14
    10e0:	9c 91       	ld	r25, X
    10e2:	91 50       	subi	r25, 0x01	; 1
    10e4:	9c 93       	st	X, r25
    10e6:	26 89       	ldd	r18, Z+22	; 0x16
    10e8:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <uxTopReadyPriority>
    10ec:	92 17       	cp	r25, r18
    10ee:	10 f4       	brcc	.+4      	; 0x10f4 <xTaskIncrementTick+0x15c>
    10f0:	20 93 f2 03 	sts	0x03F2, r18	; 0x8003f2 <uxTopReadyPriority>
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	d9 01       	movw	r26, r18
    10f8:	aa 0f       	add	r26, r26
    10fa:	bb 1f       	adc	r27, r27
    10fc:	aa 0f       	add	r26, r26
    10fe:	bb 1f       	adc	r27, r27
    1100:	aa 0f       	add	r26, r26
    1102:	bb 1f       	adc	r27, r27
    1104:	2a 0f       	add	r18, r26
    1106:	3b 1f       	adc	r19, r27
    1108:	d9 01       	movw	r26, r18
    110a:	a8 5d       	subi	r26, 0xD8	; 216
    110c:	bb 4f       	sbci	r27, 0xFB	; 251
    110e:	11 96       	adiw	r26, 0x01	; 1
    1110:	0d 90       	ld	r0, X+
    1112:	bc 91       	ld	r27, X
    1114:	a0 2d       	mov	r26, r0
    1116:	b5 83       	std	Z+5, r27	; 0x05
    1118:	a4 83       	std	Z+4, r26	; 0x04
    111a:	14 96       	adiw	r26, 0x04	; 4
    111c:	2d 91       	ld	r18, X+
    111e:	3c 91       	ld	r19, X
    1120:	15 97       	sbiw	r26, 0x05	; 5
    1122:	37 83       	std	Z+7, r19	; 0x07
    1124:	26 83       	std	Z+6, r18	; 0x06
    1126:	14 96       	adiw	r26, 0x04	; 4
    1128:	2d 91       	ld	r18, X+
    112a:	3c 91       	ld	r19, X
    112c:	15 97       	sbiw	r26, 0x05	; 5
    112e:	e9 01       	movw	r28, r18
    1130:	5b 83       	std	Y+3, r21	; 0x03
    1132:	4a 83       	std	Y+2, r20	; 0x02
    1134:	15 96       	adiw	r26, 0x05	; 5
    1136:	5c 93       	st	X, r21
    1138:	4e 93       	st	-X, r20
    113a:	14 97       	sbiw	r26, 0x04	; 4
    113c:	a6 89       	ldd	r26, Z+22	; 0x16
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	9d 01       	movw	r18, r26
    1142:	22 0f       	add	r18, r18
    1144:	33 1f       	adc	r19, r19
    1146:	22 0f       	add	r18, r18
    1148:	33 1f       	adc	r19, r19
    114a:	22 0f       	add	r18, r18
    114c:	33 1f       	adc	r19, r19
    114e:	a2 0f       	add	r26, r18
    1150:	b3 1f       	adc	r27, r19
    1152:	a8 5d       	subi	r26, 0xD8	; 216
    1154:	bb 4f       	sbci	r27, 0xFB	; 251
    1156:	b3 87       	std	Z+11, r27	; 0x0b
    1158:	a2 87       	std	Z+10, r26	; 0x0a
    115a:	9c 91       	ld	r25, X
    115c:	9f 5f       	subi	r25, 0xFF	; 255
    115e:	9c 93       	st	X, r25
    1160:	26 89       	ldd	r18, Z+22	; 0x16
    1162:	e0 91 55 04 	lds	r30, 0x0455	; 0x800455 <pxCurrentTCB>
    1166:	f0 91 56 04 	lds	r31, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
    116a:	96 89       	ldd	r25, Z+22	; 0x16
    116c:	29 17       	cp	r18, r25
    116e:	08 f0       	brcs	.+2      	; 0x1172 <xTaskIncrementTick+0x1da>
    1170:	49 cf       	rjmp	.-366    	; 0x1004 <xTaskIncrementTick+0x6c>
    1172:	4b cf       	rjmp	.-362    	; 0x100a <xTaskIncrementTick+0x72>
    1174:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <xYieldPending>
    1178:	91 11       	cpse	r25, r1
    117a:	0c c0       	rjmp	.+24     	; 0x1194 <xTaskIncrementTick+0x1fc>
    117c:	0c c0       	rjmp	.+24     	; 0x1196 <xTaskIncrementTick+0x1fe>
    117e:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <xPendedTicks>
    1182:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <xPendedTicks+0x1>
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <xPendedTicks+0x1>
    118c:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <xPendedTicks>
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <xTaskIncrementTick+0x1fe>
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	08 95       	ret

000011a0 <xTaskResumeAll>:
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	0f 92       	push	r0
    11aa:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <uxSchedulerSuspended>
    11ae:	81 50       	subi	r24, 0x01	; 1
    11b0:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <uxSchedulerSuspended>
    11b4:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <uxSchedulerSuspended>
    11b8:	81 11       	cpse	r24, r1
    11ba:	bf c0       	rjmp	.+382    	; 0x133a <xTaskResumeAll+0x19a>
    11bc:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <uxCurrentNumberOfTasks>
    11c0:	81 11       	cpse	r24, r1
    11c2:	96 c0       	rjmp	.+300    	; 0x12f0 <xTaskResumeAll+0x150>
    11c4:	bd c0       	rjmp	.+378    	; 0x1340 <xTaskResumeAll+0x1a0>
    11c6:	e0 91 0e 04 	lds	r30, 0x040E	; 0x80040e <xPendingReadyList+0x5>
    11ca:	f0 91 0f 04 	lds	r31, 0x040F	; 0x80040f <xPendingReadyList+0x6>
    11ce:	06 80       	ldd	r0, Z+6	; 0x06
    11d0:	f7 81       	ldd	r31, Z+7	; 0x07
    11d2:	e0 2d       	mov	r30, r0
    11d4:	a4 89       	ldd	r26, Z+20	; 0x14
    11d6:	b5 89       	ldd	r27, Z+21	; 0x15
    11d8:	c6 85       	ldd	r28, Z+14	; 0x0e
    11da:	d7 85       	ldd	r29, Z+15	; 0x0f
    11dc:	80 89       	ldd	r24, Z+16	; 0x10
    11de:	91 89       	ldd	r25, Z+17	; 0x11
    11e0:	9d 83       	std	Y+5, r25	; 0x05
    11e2:	8c 83       	std	Y+4, r24	; 0x04
    11e4:	c0 89       	ldd	r28, Z+16	; 0x10
    11e6:	d1 89       	ldd	r29, Z+17	; 0x11
    11e8:	86 85       	ldd	r24, Z+14	; 0x0e
    11ea:	97 85       	ldd	r25, Z+15	; 0x0f
    11ec:	9b 83       	std	Y+3, r25	; 0x03
    11ee:	8a 83       	std	Y+2, r24	; 0x02
    11f0:	11 96       	adiw	r26, 0x01	; 1
    11f2:	2d 91       	ld	r18, X+
    11f4:	3c 91       	ld	r19, X
    11f6:	12 97       	sbiw	r26, 0x02	; 2
    11f8:	cf 01       	movw	r24, r30
    11fa:	0c 96       	adiw	r24, 0x0c	; 12
    11fc:	28 17       	cp	r18, r24
    11fe:	39 07       	cpc	r19, r25
    1200:	31 f4       	brne	.+12     	; 0x120e <xTaskResumeAll+0x6e>
    1202:	80 89       	ldd	r24, Z+16	; 0x10
    1204:	91 89       	ldd	r25, Z+17	; 0x11
    1206:	12 96       	adiw	r26, 0x02	; 2
    1208:	9c 93       	st	X, r25
    120a:	8e 93       	st	-X, r24
    120c:	11 97       	sbiw	r26, 0x01	; 1
    120e:	15 8a       	std	Z+21, r1	; 0x15
    1210:	14 8a       	std	Z+20, r1	; 0x14
    1212:	8c 91       	ld	r24, X
    1214:	81 50       	subi	r24, 0x01	; 1
    1216:	8c 93       	st	X, r24
    1218:	a2 85       	ldd	r26, Z+10	; 0x0a
    121a:	b3 85       	ldd	r27, Z+11	; 0x0b
    121c:	c4 81       	ldd	r28, Z+4	; 0x04
    121e:	d5 81       	ldd	r29, Z+5	; 0x05
    1220:	86 81       	ldd	r24, Z+6	; 0x06
    1222:	97 81       	ldd	r25, Z+7	; 0x07
    1224:	9d 83       	std	Y+5, r25	; 0x05
    1226:	8c 83       	std	Y+4, r24	; 0x04
    1228:	c6 81       	ldd	r28, Z+6	; 0x06
    122a:	d7 81       	ldd	r29, Z+7	; 0x07
    122c:	84 81       	ldd	r24, Z+4	; 0x04
    122e:	95 81       	ldd	r25, Z+5	; 0x05
    1230:	9b 83       	std	Y+3, r25	; 0x03
    1232:	8a 83       	std	Y+2, r24	; 0x02
    1234:	11 96       	adiw	r26, 0x01	; 1
    1236:	8d 91       	ld	r24, X+
    1238:	9c 91       	ld	r25, X
    123a:	12 97       	sbiw	r26, 0x02	; 2
    123c:	9f 01       	movw	r18, r30
    123e:	2e 5f       	subi	r18, 0xFE	; 254
    1240:	3f 4f       	sbci	r19, 0xFF	; 255
    1242:	82 17       	cp	r24, r18
    1244:	93 07       	cpc	r25, r19
    1246:	31 f4       	brne	.+12     	; 0x1254 <xTaskResumeAll+0xb4>
    1248:	86 81       	ldd	r24, Z+6	; 0x06
    124a:	97 81       	ldd	r25, Z+7	; 0x07
    124c:	12 96       	adiw	r26, 0x02	; 2
    124e:	9c 93       	st	X, r25
    1250:	8e 93       	st	-X, r24
    1252:	11 97       	sbiw	r26, 0x01	; 1
    1254:	13 86       	std	Z+11, r1	; 0x0b
    1256:	12 86       	std	Z+10, r1	; 0x0a
    1258:	8c 91       	ld	r24, X
    125a:	81 50       	subi	r24, 0x01	; 1
    125c:	8c 93       	st	X, r24
    125e:	86 89       	ldd	r24, Z+22	; 0x16
    1260:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <uxTopReadyPriority>
    1264:	98 17       	cp	r25, r24
    1266:	10 f4       	brcc	.+4      	; 0x126c <xTaskResumeAll+0xcc>
    1268:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <uxTopReadyPriority>
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	dc 01       	movw	r26, r24
    1270:	aa 0f       	add	r26, r26
    1272:	bb 1f       	adc	r27, r27
    1274:	aa 0f       	add	r26, r26
    1276:	bb 1f       	adc	r27, r27
    1278:	aa 0f       	add	r26, r26
    127a:	bb 1f       	adc	r27, r27
    127c:	8a 0f       	add	r24, r26
    127e:	9b 1f       	adc	r25, r27
    1280:	dc 01       	movw	r26, r24
    1282:	a8 5d       	subi	r26, 0xD8	; 216
    1284:	bb 4f       	sbci	r27, 0xFB	; 251
    1286:	11 96       	adiw	r26, 0x01	; 1
    1288:	0d 90       	ld	r0, X+
    128a:	bc 91       	ld	r27, X
    128c:	a0 2d       	mov	r26, r0
    128e:	b5 83       	std	Z+5, r27	; 0x05
    1290:	a4 83       	std	Z+4, r26	; 0x04
    1292:	14 96       	adiw	r26, 0x04	; 4
    1294:	8d 91       	ld	r24, X+
    1296:	9c 91       	ld	r25, X
    1298:	15 97       	sbiw	r26, 0x05	; 5
    129a:	97 83       	std	Z+7, r25	; 0x07
    129c:	86 83       	std	Z+6, r24	; 0x06
    129e:	14 96       	adiw	r26, 0x04	; 4
    12a0:	cd 91       	ld	r28, X+
    12a2:	dc 91       	ld	r29, X
    12a4:	15 97       	sbiw	r26, 0x05	; 5
    12a6:	3b 83       	std	Y+3, r19	; 0x03
    12a8:	2a 83       	std	Y+2, r18	; 0x02
    12aa:	15 96       	adiw	r26, 0x05	; 5
    12ac:	3c 93       	st	X, r19
    12ae:	2e 93       	st	-X, r18
    12b0:	14 97       	sbiw	r26, 0x04	; 4
    12b2:	a6 89       	ldd	r26, Z+22	; 0x16
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	cd 01       	movw	r24, r26
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	a8 0f       	add	r26, r24
    12c6:	b9 1f       	adc	r27, r25
    12c8:	a8 5d       	subi	r26, 0xD8	; 216
    12ca:	bb 4f       	sbci	r27, 0xFB	; 251
    12cc:	b3 87       	std	Z+11, r27	; 0x0b
    12ce:	a2 87       	std	Z+10, r26	; 0x0a
    12d0:	8c 91       	ld	r24, X
    12d2:	8f 5f       	subi	r24, 0xFF	; 255
    12d4:	8c 93       	st	X, r24
    12d6:	96 89       	ldd	r25, Z+22	; 0x16
    12d8:	a0 91 55 04 	lds	r26, 0x0455	; 0x800455 <pxCurrentTCB>
    12dc:	b0 91 56 04 	lds	r27, 0x0456	; 0x800456 <pxCurrentTCB+0x1>
    12e0:	56 96       	adiw	r26, 0x16	; 22
    12e2:	8c 91       	ld	r24, X
    12e4:	98 17       	cp	r25, r24
    12e6:	30 f0       	brcs	.+12     	; 0x12f4 <xTaskResumeAll+0x154>
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <xYieldPending>
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <xTaskResumeAll+0x154>
    12f0:	e0 e0       	ldi	r30, 0x00	; 0
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <xPendingReadyList>
    12f8:	81 11       	cpse	r24, r1
    12fa:	65 cf       	rjmp	.-310    	; 0x11c6 <xTaskResumeAll+0x26>
    12fc:	ef 2b       	or	r30, r31
    12fe:	11 f0       	breq	.+4      	; 0x1304 <xTaskResumeAll+0x164>
    1300:	0e 94 28 05 	call	0xa50	; 0xa50 <prvResetNextTaskUnblockTime>
    1304:	c0 91 ef 03 	lds	r28, 0x03EF	; 0x8003ef <xPendedTicks>
    1308:	d0 91 f0 03 	lds	r29, 0x03F0	; 0x8003f0 <xPendedTicks+0x1>
    130c:	20 97       	sbiw	r28, 0x00	; 0
    130e:	69 f0       	breq	.+26     	; 0x132a <xTaskResumeAll+0x18a>
    1310:	0e 94 cc 07 	call	0xf98	; 0xf98 <xTaskIncrementTick>
    1314:	88 23       	and	r24, r24
    1316:	19 f0       	breq	.+6      	; 0x131e <xTaskResumeAll+0x17e>
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <xYieldPending>
    131e:	21 97       	sbiw	r28, 0x01	; 1
    1320:	b9 f7       	brne	.-18     	; 0x1310 <xTaskResumeAll+0x170>
    1322:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <xPendedTicks+0x1>
    1326:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <xPendedTicks>
    132a:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <xYieldPending>
    132e:	88 23       	and	r24, r24
    1330:	31 f0       	breq	.+12     	; 0x133e <xTaskResumeAll+0x19e>
    1332:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vPortYield>
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <xTaskResumeAll+0x1a0>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	01 c0       	rjmp	.+2      	; 0x1340 <xTaskResumeAll+0x1a0>
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	0f 90       	pop	r0
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	08 95       	ret

0000134a <vTaskDelay>:
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	ec 01       	movw	r28, r24
    1350:	89 2b       	or	r24, r25
    1352:	49 f0       	breq	.+18     	; 0x1366 <vTaskDelay+0x1c>
    1354:	0e 94 c6 07 	call	0xf8c	; 0xf8c <vTaskSuspendAll>
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	ce 01       	movw	r24, r28
    135c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <prvAddCurrentTaskToDelayedList>
    1360:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <xTaskResumeAll>
    1364:	01 c0       	rjmp	.+2      	; 0x1368 <vTaskDelay+0x1e>
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	81 11       	cpse	r24, r1
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <vTaskDelay+0x26>
    136c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vPortYield>
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	08 95       	ret

00001376 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1376:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <uxSchedulerSuspended>
    137a:	88 23       	and	r24, r24
    137c:	21 f0       	breq	.+8      	; 0x1386 <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <xYieldPending>
    1384:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
    1386:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    138a:	20 91 f2 03 	lds	r18, 0x03F2	; 0x8003f2 <uxTopReadyPriority>
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <vTaskSwitchContext+0x1c>
    1390:	21 50       	subi	r18, 0x01	; 1
    1392:	82 2f       	mov	r24, r18
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	fc 01       	movw	r30, r24
    1398:	ee 0f       	add	r30, r30
    139a:	ff 1f       	adc	r31, r31
    139c:	ee 0f       	add	r30, r30
    139e:	ff 1f       	adc	r31, r31
    13a0:	ee 0f       	add	r30, r30
    13a2:	ff 1f       	adc	r31, r31
    13a4:	e8 0f       	add	r30, r24
    13a6:	f9 1f       	adc	r31, r25
    13a8:	e8 5d       	subi	r30, 0xD8	; 216
    13aa:	fb 4f       	sbci	r31, 0xFB	; 251
    13ac:	30 81       	ld	r19, Z
    13ae:	33 23       	and	r19, r19
    13b0:	79 f3       	breq	.-34     	; 0x1390 <vTaskSwitchContext+0x1a>
    13b2:	ac 01       	movw	r20, r24
    13b4:	44 0f       	add	r20, r20
    13b6:	55 1f       	adc	r21, r21
    13b8:	44 0f       	add	r20, r20
    13ba:	55 1f       	adc	r21, r21
    13bc:	44 0f       	add	r20, r20
    13be:	55 1f       	adc	r21, r21
    13c0:	48 0f       	add	r20, r24
    13c2:	59 1f       	adc	r21, r25
    13c4:	df 01       	movw	r26, r30
    13c6:	01 80       	ldd	r0, Z+1	; 0x01
    13c8:	f2 81       	ldd	r31, Z+2	; 0x02
    13ca:	e0 2d       	mov	r30, r0
    13cc:	02 80       	ldd	r0, Z+2	; 0x02
    13ce:	f3 81       	ldd	r31, Z+3	; 0x03
    13d0:	e0 2d       	mov	r30, r0
    13d2:	12 96       	adiw	r26, 0x02	; 2
    13d4:	fc 93       	st	X, r31
    13d6:	ee 93       	st	-X, r30
    13d8:	11 97       	sbiw	r26, 0x01	; 1
    13da:	45 5d       	subi	r20, 0xD5	; 213
    13dc:	5b 4f       	sbci	r21, 0xFB	; 251
    13de:	e4 17       	cp	r30, r20
    13e0:	f5 07       	cpc	r31, r21
    13e2:	29 f4       	brne	.+10     	; 0x13ee <vTaskSwitchContext+0x78>
    13e4:	42 81       	ldd	r20, Z+2	; 0x02
    13e6:	53 81       	ldd	r21, Z+3	; 0x03
    13e8:	fd 01       	movw	r30, r26
    13ea:	52 83       	std	Z+2, r21	; 0x02
    13ec:	41 83       	std	Z+1, r20	; 0x01
    13ee:	fc 01       	movw	r30, r24
    13f0:	ee 0f       	add	r30, r30
    13f2:	ff 1f       	adc	r31, r31
    13f4:	ee 0f       	add	r30, r30
    13f6:	ff 1f       	adc	r31, r31
    13f8:	ee 0f       	add	r30, r30
    13fa:	ff 1f       	adc	r31, r31
    13fc:	8e 0f       	add	r24, r30
    13fe:	9f 1f       	adc	r25, r31
    1400:	fc 01       	movw	r30, r24
    1402:	e8 5d       	subi	r30, 0xD8	; 216
    1404:	fb 4f       	sbci	r31, 0xFB	; 251
    1406:	01 80       	ldd	r0, Z+1	; 0x01
    1408:	f2 81       	ldd	r31, Z+2	; 0x02
    140a:	e0 2d       	mov	r30, r0
    140c:	86 81       	ldd	r24, Z+6	; 0x06
    140e:	97 81       	ldd	r25, Z+7	; 0x07
    1410:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <pxCurrentTCB+0x1>
    1414:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <pxCurrentTCB>
    1418:	20 93 f2 03 	sts	0x03F2, r18	; 0x8003f2 <uxTopReadyPriority>
    141c:	08 95       	ret

0000141e <__subsf3>:
    141e:	50 58       	subi	r21, 0x80	; 128

00001420 <__addsf3>:
    1420:	bb 27       	eor	r27, r27
    1422:	aa 27       	eor	r26, r26
    1424:	0e 94 27 0a 	call	0x144e	; 0x144e <__addsf3x>
    1428:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__fp_round>
    142c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__fp_pscA>
    1430:	38 f0       	brcs	.+14     	; 0x1440 <__addsf3+0x20>
    1432:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fp_pscB>
    1436:	20 f0       	brcs	.+8      	; 0x1440 <__addsf3+0x20>
    1438:	39 f4       	brne	.+14     	; 0x1448 <__addsf3+0x28>
    143a:	9f 3f       	cpi	r25, 0xFF	; 255
    143c:	19 f4       	brne	.+6      	; 0x1444 <__addsf3+0x24>
    143e:	26 f4       	brtc	.+8      	; 0x1448 <__addsf3+0x28>
    1440:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_nan>
    1444:	0e f4       	brtc	.+2      	; 0x1448 <__addsf3+0x28>
    1446:	e0 95       	com	r30
    1448:	e7 fb       	bst	r30, 7
    144a:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__fp_inf>

0000144e <__addsf3x>:
    144e:	e9 2f       	mov	r30, r25
    1450:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fp_split3>
    1454:	58 f3       	brcs	.-42     	; 0x142c <__addsf3+0xc>
    1456:	ba 17       	cp	r27, r26
    1458:	62 07       	cpc	r22, r18
    145a:	73 07       	cpc	r23, r19
    145c:	84 07       	cpc	r24, r20
    145e:	95 07       	cpc	r25, r21
    1460:	20 f0       	brcs	.+8      	; 0x146a <__addsf3x+0x1c>
    1462:	79 f4       	brne	.+30     	; 0x1482 <__addsf3x+0x34>
    1464:	a6 f5       	brtc	.+104    	; 0x14ce <__addsf3x+0x80>
    1466:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__fp_zero>
    146a:	0e f4       	brtc	.+2      	; 0x146e <__addsf3x+0x20>
    146c:	e0 95       	com	r30
    146e:	0b 2e       	mov	r0, r27
    1470:	ba 2f       	mov	r27, r26
    1472:	a0 2d       	mov	r26, r0
    1474:	0b 01       	movw	r0, r22
    1476:	b9 01       	movw	r22, r18
    1478:	90 01       	movw	r18, r0
    147a:	0c 01       	movw	r0, r24
    147c:	ca 01       	movw	r24, r20
    147e:	a0 01       	movw	r20, r0
    1480:	11 24       	eor	r1, r1
    1482:	ff 27       	eor	r31, r31
    1484:	59 1b       	sub	r21, r25
    1486:	99 f0       	breq	.+38     	; 0x14ae <__addsf3x+0x60>
    1488:	59 3f       	cpi	r21, 0xF9	; 249
    148a:	50 f4       	brcc	.+20     	; 0x14a0 <__addsf3x+0x52>
    148c:	50 3e       	cpi	r21, 0xE0	; 224
    148e:	68 f1       	brcs	.+90     	; 0x14ea <__addsf3x+0x9c>
    1490:	1a 16       	cp	r1, r26
    1492:	f0 40       	sbci	r31, 0x00	; 0
    1494:	a2 2f       	mov	r26, r18
    1496:	23 2f       	mov	r18, r19
    1498:	34 2f       	mov	r19, r20
    149a:	44 27       	eor	r20, r20
    149c:	58 5f       	subi	r21, 0xF8	; 248
    149e:	f3 cf       	rjmp	.-26     	; 0x1486 <__addsf3x+0x38>
    14a0:	46 95       	lsr	r20
    14a2:	37 95       	ror	r19
    14a4:	27 95       	ror	r18
    14a6:	a7 95       	ror	r26
    14a8:	f0 40       	sbci	r31, 0x00	; 0
    14aa:	53 95       	inc	r21
    14ac:	c9 f7       	brne	.-14     	; 0x14a0 <__addsf3x+0x52>
    14ae:	7e f4       	brtc	.+30     	; 0x14ce <__addsf3x+0x80>
    14b0:	1f 16       	cp	r1, r31
    14b2:	ba 0b       	sbc	r27, r26
    14b4:	62 0b       	sbc	r22, r18
    14b6:	73 0b       	sbc	r23, r19
    14b8:	84 0b       	sbc	r24, r20
    14ba:	ba f0       	brmi	.+46     	; 0x14ea <__addsf3x+0x9c>
    14bc:	91 50       	subi	r25, 0x01	; 1
    14be:	a1 f0       	breq	.+40     	; 0x14e8 <__addsf3x+0x9a>
    14c0:	ff 0f       	add	r31, r31
    14c2:	bb 1f       	adc	r27, r27
    14c4:	66 1f       	adc	r22, r22
    14c6:	77 1f       	adc	r23, r23
    14c8:	88 1f       	adc	r24, r24
    14ca:	c2 f7       	brpl	.-16     	; 0x14bc <__addsf3x+0x6e>
    14cc:	0e c0       	rjmp	.+28     	; 0x14ea <__addsf3x+0x9c>
    14ce:	ba 0f       	add	r27, r26
    14d0:	62 1f       	adc	r22, r18
    14d2:	73 1f       	adc	r23, r19
    14d4:	84 1f       	adc	r24, r20
    14d6:	48 f4       	brcc	.+18     	; 0x14ea <__addsf3x+0x9c>
    14d8:	87 95       	ror	r24
    14da:	77 95       	ror	r23
    14dc:	67 95       	ror	r22
    14de:	b7 95       	ror	r27
    14e0:	f7 95       	ror	r31
    14e2:	9e 3f       	cpi	r25, 0xFE	; 254
    14e4:	08 f0       	brcs	.+2      	; 0x14e8 <__addsf3x+0x9a>
    14e6:	b0 cf       	rjmp	.-160    	; 0x1448 <__addsf3+0x28>
    14e8:	93 95       	inc	r25
    14ea:	88 0f       	add	r24, r24
    14ec:	08 f0       	brcs	.+2      	; 0x14f0 <__addsf3x+0xa2>
    14ee:	99 27       	eor	r25, r25
    14f0:	ee 0f       	add	r30, r30
    14f2:	97 95       	ror	r25
    14f4:	87 95       	ror	r24
    14f6:	08 95       	ret

000014f8 <__fixsfsi>:
    14f8:	0e 94 83 0a 	call	0x1506	; 0x1506 <__fixunssfsi>
    14fc:	68 94       	set
    14fe:	b1 11       	cpse	r27, r1
    1500:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__fp_szero>
    1504:	08 95       	ret

00001506 <__fixunssfsi>:
    1506:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fp_splitA>
    150a:	88 f0       	brcs	.+34     	; 0x152e <__fixunssfsi+0x28>
    150c:	9f 57       	subi	r25, 0x7F	; 127
    150e:	98 f0       	brcs	.+38     	; 0x1536 <__fixunssfsi+0x30>
    1510:	b9 2f       	mov	r27, r25
    1512:	99 27       	eor	r25, r25
    1514:	b7 51       	subi	r27, 0x17	; 23
    1516:	b0 f0       	brcs	.+44     	; 0x1544 <__fixunssfsi+0x3e>
    1518:	e1 f0       	breq	.+56     	; 0x1552 <__fixunssfsi+0x4c>
    151a:	66 0f       	add	r22, r22
    151c:	77 1f       	adc	r23, r23
    151e:	88 1f       	adc	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	1a f0       	brmi	.+6      	; 0x152a <__fixunssfsi+0x24>
    1524:	ba 95       	dec	r27
    1526:	c9 f7       	brne	.-14     	; 0x151a <__fixunssfsi+0x14>
    1528:	14 c0       	rjmp	.+40     	; 0x1552 <__fixunssfsi+0x4c>
    152a:	b1 30       	cpi	r27, 0x01	; 1
    152c:	91 f0       	breq	.+36     	; 0x1552 <__fixunssfsi+0x4c>
    152e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fp_zero>
    1532:	b1 e0       	ldi	r27, 0x01	; 1
    1534:	08 95       	ret
    1536:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__fp_zero>
    153a:	67 2f       	mov	r22, r23
    153c:	78 2f       	mov	r23, r24
    153e:	88 27       	eor	r24, r24
    1540:	b8 5f       	subi	r27, 0xF8	; 248
    1542:	39 f0       	breq	.+14     	; 0x1552 <__fixunssfsi+0x4c>
    1544:	b9 3f       	cpi	r27, 0xF9	; 249
    1546:	cc f3       	brlt	.-14     	; 0x153a <__fixunssfsi+0x34>
    1548:	86 95       	lsr	r24
    154a:	77 95       	ror	r23
    154c:	67 95       	ror	r22
    154e:	b3 95       	inc	r27
    1550:	d9 f7       	brne	.-10     	; 0x1548 <__fixunssfsi+0x42>
    1552:	3e f4       	brtc	.+14     	; 0x1562 <__fixunssfsi+0x5c>
    1554:	90 95       	com	r25
    1556:	80 95       	com	r24
    1558:	70 95       	com	r23
    155a:	61 95       	neg	r22
    155c:	7f 4f       	sbci	r23, 0xFF	; 255
    155e:	8f 4f       	sbci	r24, 0xFF	; 255
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	08 95       	ret

00001564 <floor>:
    1564:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__fp_trunc>
    1568:	90 f0       	brcs	.+36     	; 0x158e <floor+0x2a>
    156a:	9f 37       	cpi	r25, 0x7F	; 127
    156c:	48 f4       	brcc	.+18     	; 0x1580 <floor+0x1c>
    156e:	91 11       	cpse	r25, r1
    1570:	16 f0       	brts	.+4      	; 0x1576 <floor+0x12>
    1572:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__fp_szero>
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	80 e8       	ldi	r24, 0x80	; 128
    157c:	9f eb       	ldi	r25, 0xBF	; 191
    157e:	08 95       	ret
    1580:	26 f4       	brtc	.+8      	; 0x158a <floor+0x26>
    1582:	1b 16       	cp	r1, r27
    1584:	61 1d       	adc	r22, r1
    1586:	71 1d       	adc	r23, r1
    1588:	81 1d       	adc	r24, r1
    158a:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__fp_mintl>
    158e:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__fp_mpack>

00001592 <__fp_inf>:
    1592:	97 f9       	bld	r25, 7
    1594:	9f 67       	ori	r25, 0x7F	; 127
    1596:	80 e8       	ldi	r24, 0x80	; 128
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	08 95       	ret

0000159e <__fp_mintl>:
    159e:	88 23       	and	r24, r24
    15a0:	71 f4       	brne	.+28     	; 0x15be <__fp_mintl+0x20>
    15a2:	77 23       	and	r23, r23
    15a4:	21 f0       	breq	.+8      	; 0x15ae <__fp_mintl+0x10>
    15a6:	98 50       	subi	r25, 0x08	; 8
    15a8:	87 2b       	or	r24, r23
    15aa:	76 2f       	mov	r23, r22
    15ac:	07 c0       	rjmp	.+14     	; 0x15bc <__fp_mintl+0x1e>
    15ae:	66 23       	and	r22, r22
    15b0:	11 f4       	brne	.+4      	; 0x15b6 <__fp_mintl+0x18>
    15b2:	99 27       	eor	r25, r25
    15b4:	0d c0       	rjmp	.+26     	; 0x15d0 <__fp_mintl+0x32>
    15b6:	90 51       	subi	r25, 0x10	; 16
    15b8:	86 2b       	or	r24, r22
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	2a f0       	brmi	.+10     	; 0x15ca <__fp_mintl+0x2c>
    15c0:	9a 95       	dec	r25
    15c2:	66 0f       	add	r22, r22
    15c4:	77 1f       	adc	r23, r23
    15c6:	88 1f       	adc	r24, r24
    15c8:	da f7       	brpl	.-10     	; 0x15c0 <__fp_mintl+0x22>
    15ca:	88 0f       	add	r24, r24
    15cc:	96 95       	lsr	r25
    15ce:	87 95       	ror	r24
    15d0:	97 f9       	bld	r25, 7
    15d2:	08 95       	ret

000015d4 <__fp_mpack>:
    15d4:	9f 3f       	cpi	r25, 0xFF	; 255
    15d6:	31 f0       	breq	.+12     	; 0x15e4 <__fp_mpack_finite+0xc>

000015d8 <__fp_mpack_finite>:
    15d8:	91 50       	subi	r25, 0x01	; 1
    15da:	20 f4       	brcc	.+8      	; 0x15e4 <__fp_mpack_finite+0xc>
    15dc:	87 95       	ror	r24
    15de:	77 95       	ror	r23
    15e0:	67 95       	ror	r22
    15e2:	b7 95       	ror	r27
    15e4:	88 0f       	add	r24, r24
    15e6:	91 1d       	adc	r25, r1
    15e8:	96 95       	lsr	r25
    15ea:	87 95       	ror	r24
    15ec:	97 f9       	bld	r25, 7
    15ee:	08 95       	ret

000015f0 <__fp_nan>:
    15f0:	9f ef       	ldi	r25, 0xFF	; 255
    15f2:	80 ec       	ldi	r24, 0xC0	; 192
    15f4:	08 95       	ret

000015f6 <__fp_pscA>:
    15f6:	00 24       	eor	r0, r0
    15f8:	0a 94       	dec	r0
    15fa:	16 16       	cp	r1, r22
    15fc:	17 06       	cpc	r1, r23
    15fe:	18 06       	cpc	r1, r24
    1600:	09 06       	cpc	r0, r25
    1602:	08 95       	ret

00001604 <__fp_pscB>:
    1604:	00 24       	eor	r0, r0
    1606:	0a 94       	dec	r0
    1608:	12 16       	cp	r1, r18
    160a:	13 06       	cpc	r1, r19
    160c:	14 06       	cpc	r1, r20
    160e:	05 06       	cpc	r0, r21
    1610:	08 95       	ret

00001612 <__fp_round>:
    1612:	09 2e       	mov	r0, r25
    1614:	03 94       	inc	r0
    1616:	00 0c       	add	r0, r0
    1618:	11 f4       	brne	.+4      	; 0x161e <__fp_round+0xc>
    161a:	88 23       	and	r24, r24
    161c:	52 f0       	brmi	.+20     	; 0x1632 <__fp_round+0x20>
    161e:	bb 0f       	add	r27, r27
    1620:	40 f4       	brcc	.+16     	; 0x1632 <__fp_round+0x20>
    1622:	bf 2b       	or	r27, r31
    1624:	11 f4       	brne	.+4      	; 0x162a <__fp_round+0x18>
    1626:	60 ff       	sbrs	r22, 0
    1628:	04 c0       	rjmp	.+8      	; 0x1632 <__fp_round+0x20>
    162a:	6f 5f       	subi	r22, 0xFF	; 255
    162c:	7f 4f       	sbci	r23, 0xFF	; 255
    162e:	8f 4f       	sbci	r24, 0xFF	; 255
    1630:	9f 4f       	sbci	r25, 0xFF	; 255
    1632:	08 95       	ret

00001634 <__fp_split3>:
    1634:	57 fd       	sbrc	r21, 7
    1636:	90 58       	subi	r25, 0x80	; 128
    1638:	44 0f       	add	r20, r20
    163a:	55 1f       	adc	r21, r21
    163c:	59 f0       	breq	.+22     	; 0x1654 <__fp_splitA+0x10>
    163e:	5f 3f       	cpi	r21, 0xFF	; 255
    1640:	71 f0       	breq	.+28     	; 0x165e <__fp_splitA+0x1a>
    1642:	47 95       	ror	r20

00001644 <__fp_splitA>:
    1644:	88 0f       	add	r24, r24
    1646:	97 fb       	bst	r25, 7
    1648:	99 1f       	adc	r25, r25
    164a:	61 f0       	breq	.+24     	; 0x1664 <__fp_splitA+0x20>
    164c:	9f 3f       	cpi	r25, 0xFF	; 255
    164e:	79 f0       	breq	.+30     	; 0x166e <__fp_splitA+0x2a>
    1650:	87 95       	ror	r24
    1652:	08 95       	ret
    1654:	12 16       	cp	r1, r18
    1656:	13 06       	cpc	r1, r19
    1658:	14 06       	cpc	r1, r20
    165a:	55 1f       	adc	r21, r21
    165c:	f2 cf       	rjmp	.-28     	; 0x1642 <__fp_split3+0xe>
    165e:	46 95       	lsr	r20
    1660:	f1 df       	rcall	.-30     	; 0x1644 <__fp_splitA>
    1662:	08 c0       	rjmp	.+16     	; 0x1674 <__fp_splitA+0x30>
    1664:	16 16       	cp	r1, r22
    1666:	17 06       	cpc	r1, r23
    1668:	18 06       	cpc	r1, r24
    166a:	99 1f       	adc	r25, r25
    166c:	f1 cf       	rjmp	.-30     	; 0x1650 <__fp_splitA+0xc>
    166e:	86 95       	lsr	r24
    1670:	71 05       	cpc	r23, r1
    1672:	61 05       	cpc	r22, r1
    1674:	08 94       	sec
    1676:	08 95       	ret

00001678 <__fp_trunc>:
    1678:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fp_splitA>
    167c:	a0 f0       	brcs	.+40     	; 0x16a6 <__fp_trunc+0x2e>
    167e:	be e7       	ldi	r27, 0x7E	; 126
    1680:	b9 17       	cp	r27, r25
    1682:	88 f4       	brcc	.+34     	; 0x16a6 <__fp_trunc+0x2e>
    1684:	bb 27       	eor	r27, r27
    1686:	9f 38       	cpi	r25, 0x8F	; 143
    1688:	60 f4       	brcc	.+24     	; 0x16a2 <__fp_trunc+0x2a>
    168a:	16 16       	cp	r1, r22
    168c:	b1 1d       	adc	r27, r1
    168e:	67 2f       	mov	r22, r23
    1690:	78 2f       	mov	r23, r24
    1692:	88 27       	eor	r24, r24
    1694:	98 5f       	subi	r25, 0xF8	; 248
    1696:	f7 cf       	rjmp	.-18     	; 0x1686 <__fp_trunc+0xe>
    1698:	86 95       	lsr	r24
    169a:	77 95       	ror	r23
    169c:	67 95       	ror	r22
    169e:	b1 1d       	adc	r27, r1
    16a0:	93 95       	inc	r25
    16a2:	96 39       	cpi	r25, 0x96	; 150
    16a4:	c8 f3       	brcs	.-14     	; 0x1698 <__fp_trunc+0x20>
    16a6:	08 95       	ret

000016a8 <__fp_zero>:
    16a8:	e8 94       	clt

000016aa <__fp_szero>:
    16aa:	bb 27       	eor	r27, r27
    16ac:	66 27       	eor	r22, r22
    16ae:	77 27       	eor	r23, r23
    16b0:	cb 01       	movw	r24, r22
    16b2:	97 f9       	bld	r25, 7
    16b4:	08 95       	ret

000016b6 <__mulsf3>:
    16b6:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__mulsf3x>
    16ba:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__fp_round>
    16be:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__fp_pscA>
    16c2:	38 f0       	brcs	.+14     	; 0x16d2 <__mulsf3+0x1c>
    16c4:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fp_pscB>
    16c8:	20 f0       	brcs	.+8      	; 0x16d2 <__mulsf3+0x1c>
    16ca:	95 23       	and	r25, r21
    16cc:	11 f0       	breq	.+4      	; 0x16d2 <__mulsf3+0x1c>
    16ce:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__fp_inf>
    16d2:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_nan>
    16d6:	11 24       	eor	r1, r1
    16d8:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__fp_szero>

000016dc <__mulsf3x>:
    16dc:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fp_split3>
    16e0:	70 f3       	brcs	.-36     	; 0x16be <__mulsf3+0x8>

000016e2 <__mulsf3_pse>:
    16e2:	95 9f       	mul	r25, r21
    16e4:	c1 f3       	breq	.-16     	; 0x16d6 <__mulsf3+0x20>
    16e6:	95 0f       	add	r25, r21
    16e8:	50 e0       	ldi	r21, 0x00	; 0
    16ea:	55 1f       	adc	r21, r21
    16ec:	62 9f       	mul	r22, r18
    16ee:	f0 01       	movw	r30, r0
    16f0:	72 9f       	mul	r23, r18
    16f2:	bb 27       	eor	r27, r27
    16f4:	f0 0d       	add	r31, r0
    16f6:	b1 1d       	adc	r27, r1
    16f8:	63 9f       	mul	r22, r19
    16fa:	aa 27       	eor	r26, r26
    16fc:	f0 0d       	add	r31, r0
    16fe:	b1 1d       	adc	r27, r1
    1700:	aa 1f       	adc	r26, r26
    1702:	64 9f       	mul	r22, r20
    1704:	66 27       	eor	r22, r22
    1706:	b0 0d       	add	r27, r0
    1708:	a1 1d       	adc	r26, r1
    170a:	66 1f       	adc	r22, r22
    170c:	82 9f       	mul	r24, r18
    170e:	22 27       	eor	r18, r18
    1710:	b0 0d       	add	r27, r0
    1712:	a1 1d       	adc	r26, r1
    1714:	62 1f       	adc	r22, r18
    1716:	73 9f       	mul	r23, r19
    1718:	b0 0d       	add	r27, r0
    171a:	a1 1d       	adc	r26, r1
    171c:	62 1f       	adc	r22, r18
    171e:	83 9f       	mul	r24, r19
    1720:	a0 0d       	add	r26, r0
    1722:	61 1d       	adc	r22, r1
    1724:	22 1f       	adc	r18, r18
    1726:	74 9f       	mul	r23, r20
    1728:	33 27       	eor	r19, r19
    172a:	a0 0d       	add	r26, r0
    172c:	61 1d       	adc	r22, r1
    172e:	23 1f       	adc	r18, r19
    1730:	84 9f       	mul	r24, r20
    1732:	60 0d       	add	r22, r0
    1734:	21 1d       	adc	r18, r1
    1736:	82 2f       	mov	r24, r18
    1738:	76 2f       	mov	r23, r22
    173a:	6a 2f       	mov	r22, r26
    173c:	11 24       	eor	r1, r1
    173e:	9f 57       	subi	r25, 0x7F	; 127
    1740:	50 40       	sbci	r21, 0x00	; 0
    1742:	9a f0       	brmi	.+38     	; 0x176a <__mulsf3_pse+0x88>
    1744:	f1 f0       	breq	.+60     	; 0x1782 <__mulsf3_pse+0xa0>
    1746:	88 23       	and	r24, r24
    1748:	4a f0       	brmi	.+18     	; 0x175c <__mulsf3_pse+0x7a>
    174a:	ee 0f       	add	r30, r30
    174c:	ff 1f       	adc	r31, r31
    174e:	bb 1f       	adc	r27, r27
    1750:	66 1f       	adc	r22, r22
    1752:	77 1f       	adc	r23, r23
    1754:	88 1f       	adc	r24, r24
    1756:	91 50       	subi	r25, 0x01	; 1
    1758:	50 40       	sbci	r21, 0x00	; 0
    175a:	a9 f7       	brne	.-22     	; 0x1746 <__mulsf3_pse+0x64>
    175c:	9e 3f       	cpi	r25, 0xFE	; 254
    175e:	51 05       	cpc	r21, r1
    1760:	80 f0       	brcs	.+32     	; 0x1782 <__mulsf3_pse+0xa0>
    1762:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__fp_inf>
    1766:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__fp_szero>
    176a:	5f 3f       	cpi	r21, 0xFF	; 255
    176c:	e4 f3       	brlt	.-8      	; 0x1766 <__mulsf3_pse+0x84>
    176e:	98 3e       	cpi	r25, 0xE8	; 232
    1770:	d4 f3       	brlt	.-12     	; 0x1766 <__mulsf3_pse+0x84>
    1772:	86 95       	lsr	r24
    1774:	77 95       	ror	r23
    1776:	67 95       	ror	r22
    1778:	b7 95       	ror	r27
    177a:	f7 95       	ror	r31
    177c:	e7 95       	ror	r30
    177e:	9f 5f       	subi	r25, 0xFF	; 255
    1780:	c1 f7       	brne	.-16     	; 0x1772 <__mulsf3_pse+0x90>
    1782:	fe 2b       	or	r31, r30
    1784:	88 0f       	add	r24, r24
    1786:	91 1d       	adc	r25, r1
    1788:	96 95       	lsr	r25
    178a:	87 95       	ror	r24
    178c:	97 f9       	bld	r25, 7
    178e:	08 95       	ret

00001790 <__udivmodsi4>:
    1790:	a1 e2       	ldi	r26, 0x21	; 33
    1792:	1a 2e       	mov	r1, r26
    1794:	aa 1b       	sub	r26, r26
    1796:	bb 1b       	sub	r27, r27
    1798:	fd 01       	movw	r30, r26
    179a:	0d c0       	rjmp	.+26     	; 0x17b6 <__udivmodsi4_ep>

0000179c <__udivmodsi4_loop>:
    179c:	aa 1f       	adc	r26, r26
    179e:	bb 1f       	adc	r27, r27
    17a0:	ee 1f       	adc	r30, r30
    17a2:	ff 1f       	adc	r31, r31
    17a4:	a2 17       	cp	r26, r18
    17a6:	b3 07       	cpc	r27, r19
    17a8:	e4 07       	cpc	r30, r20
    17aa:	f5 07       	cpc	r31, r21
    17ac:	20 f0       	brcs	.+8      	; 0x17b6 <__udivmodsi4_ep>
    17ae:	a2 1b       	sub	r26, r18
    17b0:	b3 0b       	sbc	r27, r19
    17b2:	e4 0b       	sbc	r30, r20
    17b4:	f5 0b       	sbc	r31, r21

000017b6 <__udivmodsi4_ep>:
    17b6:	66 1f       	adc	r22, r22
    17b8:	77 1f       	adc	r23, r23
    17ba:	88 1f       	adc	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	1a 94       	dec	r1
    17c0:	69 f7       	brne	.-38     	; 0x179c <__udivmodsi4_loop>
    17c2:	60 95       	com	r22
    17c4:	70 95       	com	r23
    17c6:	80 95       	com	r24
    17c8:	90 95       	com	r25
    17ca:	9b 01       	movw	r18, r22
    17cc:	ac 01       	movw	r20, r24
    17ce:	bd 01       	movw	r22, r26
    17d0:	cf 01       	movw	r24, r30
    17d2:	08 95       	ret

000017d4 <memset>:
    17d4:	dc 01       	movw	r26, r24
    17d6:	01 c0       	rjmp	.+2      	; 0x17da <memset+0x6>
    17d8:	6d 93       	st	X+, r22
    17da:	41 50       	subi	r20, 0x01	; 1
    17dc:	50 40       	sbci	r21, 0x00	; 0
    17de:	e0 f7       	brcc	.-8      	; 0x17d8 <memset+0x4>
    17e0:	08 95       	ret

000017e2 <sprintf>:
    17e2:	ae e0       	ldi	r26, 0x0E	; 14
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e7 ef       	ldi	r30, 0xF7	; 247
    17e8:	fb e0       	ldi	r31, 0x0B	; 11
    17ea:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__prologue_saves__+0x1c>
    17ee:	0d 89       	ldd	r16, Y+21	; 0x15
    17f0:	1e 89       	ldd	r17, Y+22	; 0x16
    17f2:	86 e0       	ldi	r24, 0x06	; 6
    17f4:	8c 83       	std	Y+4, r24	; 0x04
    17f6:	1a 83       	std	Y+2, r17	; 0x02
    17f8:	09 83       	std	Y+1, r16	; 0x01
    17fa:	8f ef       	ldi	r24, 0xFF	; 255
    17fc:	9f e7       	ldi	r25, 0x7F	; 127
    17fe:	9e 83       	std	Y+6, r25	; 0x06
    1800:	8d 83       	std	Y+5, r24	; 0x05
    1802:	ae 01       	movw	r20, r28
    1804:	47 5e       	subi	r20, 0xE7	; 231
    1806:	5f 4f       	sbci	r21, 0xFF	; 255
    1808:	6f 89       	ldd	r22, Y+23	; 0x17
    180a:	78 8d       	ldd	r23, Y+24	; 0x18
    180c:	ce 01       	movw	r24, r28
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	0e 94 13 0c 	call	0x1826	; 0x1826 <vfprintf>
    1814:	ef 81       	ldd	r30, Y+7	; 0x07
    1816:	f8 85       	ldd	r31, Y+8	; 0x08
    1818:	e0 0f       	add	r30, r16
    181a:	f1 1f       	adc	r31, r17
    181c:	10 82       	st	Z, r1
    181e:	2e 96       	adiw	r28, 0x0e	; 14
    1820:	e4 e0       	ldi	r30, 0x04	; 4
    1822:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__epilogue_restores__+0x1c>

00001826 <vfprintf>:
    1826:	ab e0       	ldi	r26, 0x0B	; 11
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e9 e1       	ldi	r30, 0x19	; 25
    182c:	fc e0       	ldi	r31, 0x0C	; 12
    182e:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__prologue_saves__>
    1832:	6c 01       	movw	r12, r24
    1834:	7b 01       	movw	r14, r22
    1836:	8a 01       	movw	r16, r20
    1838:	fc 01       	movw	r30, r24
    183a:	17 82       	std	Z+7, r1	; 0x07
    183c:	16 82       	std	Z+6, r1	; 0x06
    183e:	83 81       	ldd	r24, Z+3	; 0x03
    1840:	81 ff       	sbrs	r24, 1
    1842:	cc c1       	rjmp	.+920    	; 0x1bdc <vfprintf+0x3b6>
    1844:	ce 01       	movw	r24, r28
    1846:	01 96       	adiw	r24, 0x01	; 1
    1848:	3c 01       	movw	r6, r24
    184a:	f6 01       	movw	r30, r12
    184c:	93 81       	ldd	r25, Z+3	; 0x03
    184e:	f7 01       	movw	r30, r14
    1850:	93 fd       	sbrc	r25, 3
    1852:	85 91       	lpm	r24, Z+
    1854:	93 ff       	sbrs	r25, 3
    1856:	81 91       	ld	r24, Z+
    1858:	7f 01       	movw	r14, r30
    185a:	88 23       	and	r24, r24
    185c:	09 f4       	brne	.+2      	; 0x1860 <vfprintf+0x3a>
    185e:	ba c1       	rjmp	.+884    	; 0x1bd4 <vfprintf+0x3ae>
    1860:	85 32       	cpi	r24, 0x25	; 37
    1862:	39 f4       	brne	.+14     	; 0x1872 <vfprintf+0x4c>
    1864:	93 fd       	sbrc	r25, 3
    1866:	85 91       	lpm	r24, Z+
    1868:	93 ff       	sbrs	r25, 3
    186a:	81 91       	ld	r24, Z+
    186c:	7f 01       	movw	r14, r30
    186e:	85 32       	cpi	r24, 0x25	; 37
    1870:	29 f4       	brne	.+10     	; 0x187c <vfprintf+0x56>
    1872:	b6 01       	movw	r22, r12
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <fputc>
    187a:	e7 cf       	rjmp	.-50     	; 0x184a <vfprintf+0x24>
    187c:	91 2c       	mov	r9, r1
    187e:	21 2c       	mov	r2, r1
    1880:	31 2c       	mov	r3, r1
    1882:	ff e1       	ldi	r31, 0x1F	; 31
    1884:	f3 15       	cp	r31, r3
    1886:	d8 f0       	brcs	.+54     	; 0x18be <vfprintf+0x98>
    1888:	8b 32       	cpi	r24, 0x2B	; 43
    188a:	79 f0       	breq	.+30     	; 0x18aa <vfprintf+0x84>
    188c:	38 f4       	brcc	.+14     	; 0x189c <vfprintf+0x76>
    188e:	80 32       	cpi	r24, 0x20	; 32
    1890:	79 f0       	breq	.+30     	; 0x18b0 <vfprintf+0x8a>
    1892:	83 32       	cpi	r24, 0x23	; 35
    1894:	a1 f4       	brne	.+40     	; 0x18be <vfprintf+0x98>
    1896:	23 2d       	mov	r18, r3
    1898:	20 61       	ori	r18, 0x10	; 16
    189a:	1d c0       	rjmp	.+58     	; 0x18d6 <vfprintf+0xb0>
    189c:	8d 32       	cpi	r24, 0x2D	; 45
    189e:	61 f0       	breq	.+24     	; 0x18b8 <vfprintf+0x92>
    18a0:	80 33       	cpi	r24, 0x30	; 48
    18a2:	69 f4       	brne	.+26     	; 0x18be <vfprintf+0x98>
    18a4:	23 2d       	mov	r18, r3
    18a6:	21 60       	ori	r18, 0x01	; 1
    18a8:	16 c0       	rjmp	.+44     	; 0x18d6 <vfprintf+0xb0>
    18aa:	83 2d       	mov	r24, r3
    18ac:	82 60       	ori	r24, 0x02	; 2
    18ae:	38 2e       	mov	r3, r24
    18b0:	e3 2d       	mov	r30, r3
    18b2:	e4 60       	ori	r30, 0x04	; 4
    18b4:	3e 2e       	mov	r3, r30
    18b6:	2a c0       	rjmp	.+84     	; 0x190c <vfprintf+0xe6>
    18b8:	f3 2d       	mov	r31, r3
    18ba:	f8 60       	ori	r31, 0x08	; 8
    18bc:	1d c0       	rjmp	.+58     	; 0x18f8 <vfprintf+0xd2>
    18be:	37 fc       	sbrc	r3, 7
    18c0:	2d c0       	rjmp	.+90     	; 0x191c <vfprintf+0xf6>
    18c2:	20 ed       	ldi	r18, 0xD0	; 208
    18c4:	28 0f       	add	r18, r24
    18c6:	2a 30       	cpi	r18, 0x0A	; 10
    18c8:	40 f0       	brcs	.+16     	; 0x18da <vfprintf+0xb4>
    18ca:	8e 32       	cpi	r24, 0x2E	; 46
    18cc:	b9 f4       	brne	.+46     	; 0x18fc <vfprintf+0xd6>
    18ce:	36 fc       	sbrc	r3, 6
    18d0:	81 c1       	rjmp	.+770    	; 0x1bd4 <vfprintf+0x3ae>
    18d2:	23 2d       	mov	r18, r3
    18d4:	20 64       	ori	r18, 0x40	; 64
    18d6:	32 2e       	mov	r3, r18
    18d8:	19 c0       	rjmp	.+50     	; 0x190c <vfprintf+0xe6>
    18da:	36 fe       	sbrs	r3, 6
    18dc:	06 c0       	rjmp	.+12     	; 0x18ea <vfprintf+0xc4>
    18de:	8a e0       	ldi	r24, 0x0A	; 10
    18e0:	98 9e       	mul	r9, r24
    18e2:	20 0d       	add	r18, r0
    18e4:	11 24       	eor	r1, r1
    18e6:	92 2e       	mov	r9, r18
    18e8:	11 c0       	rjmp	.+34     	; 0x190c <vfprintf+0xe6>
    18ea:	ea e0       	ldi	r30, 0x0A	; 10
    18ec:	2e 9e       	mul	r2, r30
    18ee:	20 0d       	add	r18, r0
    18f0:	11 24       	eor	r1, r1
    18f2:	22 2e       	mov	r2, r18
    18f4:	f3 2d       	mov	r31, r3
    18f6:	f0 62       	ori	r31, 0x20	; 32
    18f8:	3f 2e       	mov	r3, r31
    18fa:	08 c0       	rjmp	.+16     	; 0x190c <vfprintf+0xe6>
    18fc:	8c 36       	cpi	r24, 0x6C	; 108
    18fe:	21 f4       	brne	.+8      	; 0x1908 <vfprintf+0xe2>
    1900:	83 2d       	mov	r24, r3
    1902:	80 68       	ori	r24, 0x80	; 128
    1904:	38 2e       	mov	r3, r24
    1906:	02 c0       	rjmp	.+4      	; 0x190c <vfprintf+0xe6>
    1908:	88 36       	cpi	r24, 0x68	; 104
    190a:	41 f4       	brne	.+16     	; 0x191c <vfprintf+0xf6>
    190c:	f7 01       	movw	r30, r14
    190e:	93 fd       	sbrc	r25, 3
    1910:	85 91       	lpm	r24, Z+
    1912:	93 ff       	sbrs	r25, 3
    1914:	81 91       	ld	r24, Z+
    1916:	7f 01       	movw	r14, r30
    1918:	81 11       	cpse	r24, r1
    191a:	b3 cf       	rjmp	.-154    	; 0x1882 <vfprintf+0x5c>
    191c:	98 2f       	mov	r25, r24
    191e:	9f 7d       	andi	r25, 0xDF	; 223
    1920:	95 54       	subi	r25, 0x45	; 69
    1922:	93 30       	cpi	r25, 0x03	; 3
    1924:	28 f4       	brcc	.+10     	; 0x1930 <vfprintf+0x10a>
    1926:	0c 5f       	subi	r16, 0xFC	; 252
    1928:	1f 4f       	sbci	r17, 0xFF	; 255
    192a:	9f e3       	ldi	r25, 0x3F	; 63
    192c:	99 83       	std	Y+1, r25	; 0x01
    192e:	0d c0       	rjmp	.+26     	; 0x194a <vfprintf+0x124>
    1930:	83 36       	cpi	r24, 0x63	; 99
    1932:	31 f0       	breq	.+12     	; 0x1940 <vfprintf+0x11a>
    1934:	83 37       	cpi	r24, 0x73	; 115
    1936:	71 f0       	breq	.+28     	; 0x1954 <vfprintf+0x12e>
    1938:	83 35       	cpi	r24, 0x53	; 83
    193a:	09 f0       	breq	.+2      	; 0x193e <vfprintf+0x118>
    193c:	59 c0       	rjmp	.+178    	; 0x19f0 <vfprintf+0x1ca>
    193e:	21 c0       	rjmp	.+66     	; 0x1982 <vfprintf+0x15c>
    1940:	f8 01       	movw	r30, r16
    1942:	80 81       	ld	r24, Z
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	0e 5f       	subi	r16, 0xFE	; 254
    1948:	1f 4f       	sbci	r17, 0xFF	; 255
    194a:	88 24       	eor	r8, r8
    194c:	83 94       	inc	r8
    194e:	91 2c       	mov	r9, r1
    1950:	53 01       	movw	r10, r6
    1952:	13 c0       	rjmp	.+38     	; 0x197a <vfprintf+0x154>
    1954:	28 01       	movw	r4, r16
    1956:	f2 e0       	ldi	r31, 0x02	; 2
    1958:	4f 0e       	add	r4, r31
    195a:	51 1c       	adc	r5, r1
    195c:	f8 01       	movw	r30, r16
    195e:	a0 80       	ld	r10, Z
    1960:	b1 80       	ldd	r11, Z+1	; 0x01
    1962:	36 fe       	sbrs	r3, 6
    1964:	03 c0       	rjmp	.+6      	; 0x196c <vfprintf+0x146>
    1966:	69 2d       	mov	r22, r9
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <vfprintf+0x14a>
    196c:	6f ef       	ldi	r22, 0xFF	; 255
    196e:	7f ef       	ldi	r23, 0xFF	; 255
    1970:	c5 01       	movw	r24, r10
    1972:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <strnlen>
    1976:	4c 01       	movw	r8, r24
    1978:	82 01       	movw	r16, r4
    197a:	f3 2d       	mov	r31, r3
    197c:	ff 77       	andi	r31, 0x7F	; 127
    197e:	3f 2e       	mov	r3, r31
    1980:	16 c0       	rjmp	.+44     	; 0x19ae <vfprintf+0x188>
    1982:	28 01       	movw	r4, r16
    1984:	22 e0       	ldi	r18, 0x02	; 2
    1986:	42 0e       	add	r4, r18
    1988:	51 1c       	adc	r5, r1
    198a:	f8 01       	movw	r30, r16
    198c:	a0 80       	ld	r10, Z
    198e:	b1 80       	ldd	r11, Z+1	; 0x01
    1990:	36 fe       	sbrs	r3, 6
    1992:	03 c0       	rjmp	.+6      	; 0x199a <vfprintf+0x174>
    1994:	69 2d       	mov	r22, r9
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	02 c0       	rjmp	.+4      	; 0x199e <vfprintf+0x178>
    199a:	6f ef       	ldi	r22, 0xFF	; 255
    199c:	7f ef       	ldi	r23, 0xFF	; 255
    199e:	c5 01       	movw	r24, r10
    19a0:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <strnlen_P>
    19a4:	4c 01       	movw	r8, r24
    19a6:	f3 2d       	mov	r31, r3
    19a8:	f0 68       	ori	r31, 0x80	; 128
    19aa:	3f 2e       	mov	r3, r31
    19ac:	82 01       	movw	r16, r4
    19ae:	33 fc       	sbrc	r3, 3
    19b0:	1b c0       	rjmp	.+54     	; 0x19e8 <vfprintf+0x1c2>
    19b2:	82 2d       	mov	r24, r2
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	88 16       	cp	r8, r24
    19b8:	99 06       	cpc	r9, r25
    19ba:	b0 f4       	brcc	.+44     	; 0x19e8 <vfprintf+0x1c2>
    19bc:	b6 01       	movw	r22, r12
    19be:	80 e2       	ldi	r24, 0x20	; 32
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <fputc>
    19c6:	2a 94       	dec	r2
    19c8:	f4 cf       	rjmp	.-24     	; 0x19b2 <vfprintf+0x18c>
    19ca:	f5 01       	movw	r30, r10
    19cc:	37 fc       	sbrc	r3, 7
    19ce:	85 91       	lpm	r24, Z+
    19d0:	37 fe       	sbrs	r3, 7
    19d2:	81 91       	ld	r24, Z+
    19d4:	5f 01       	movw	r10, r30
    19d6:	b6 01       	movw	r22, r12
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <fputc>
    19de:	21 10       	cpse	r2, r1
    19e0:	2a 94       	dec	r2
    19e2:	21 e0       	ldi	r18, 0x01	; 1
    19e4:	82 1a       	sub	r8, r18
    19e6:	91 08       	sbc	r9, r1
    19e8:	81 14       	cp	r8, r1
    19ea:	91 04       	cpc	r9, r1
    19ec:	71 f7       	brne	.-36     	; 0x19ca <vfprintf+0x1a4>
    19ee:	e8 c0       	rjmp	.+464    	; 0x1bc0 <vfprintf+0x39a>
    19f0:	84 36       	cpi	r24, 0x64	; 100
    19f2:	11 f0       	breq	.+4      	; 0x19f8 <vfprintf+0x1d2>
    19f4:	89 36       	cpi	r24, 0x69	; 105
    19f6:	41 f5       	brne	.+80     	; 0x1a48 <vfprintf+0x222>
    19f8:	f8 01       	movw	r30, r16
    19fa:	37 fe       	sbrs	r3, 7
    19fc:	07 c0       	rjmp	.+14     	; 0x1a0c <vfprintf+0x1e6>
    19fe:	60 81       	ld	r22, Z
    1a00:	71 81       	ldd	r23, Z+1	; 0x01
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	0c 5f       	subi	r16, 0xFC	; 252
    1a08:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0a:	08 c0       	rjmp	.+16     	; 0x1a1c <vfprintf+0x1f6>
    1a0c:	60 81       	ld	r22, Z
    1a0e:	71 81       	ldd	r23, Z+1	; 0x01
    1a10:	07 2e       	mov	r0, r23
    1a12:	00 0c       	add	r0, r0
    1a14:	88 0b       	sbc	r24, r24
    1a16:	99 0b       	sbc	r25, r25
    1a18:	0e 5f       	subi	r16, 0xFE	; 254
    1a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1c:	f3 2d       	mov	r31, r3
    1a1e:	ff 76       	andi	r31, 0x6F	; 111
    1a20:	3f 2e       	mov	r3, r31
    1a22:	97 ff       	sbrs	r25, 7
    1a24:	09 c0       	rjmp	.+18     	; 0x1a38 <vfprintf+0x212>
    1a26:	90 95       	com	r25
    1a28:	80 95       	com	r24
    1a2a:	70 95       	com	r23
    1a2c:	61 95       	neg	r22
    1a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a30:	8f 4f       	sbci	r24, 0xFF	; 255
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	f0 68       	ori	r31, 0x80	; 128
    1a36:	3f 2e       	mov	r3, r31
    1a38:	2a e0       	ldi	r18, 0x0A	; 10
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	a3 01       	movw	r20, r6
    1a3e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__ultoa_invert>
    1a42:	88 2e       	mov	r8, r24
    1a44:	86 18       	sub	r8, r6
    1a46:	45 c0       	rjmp	.+138    	; 0x1ad2 <vfprintf+0x2ac>
    1a48:	85 37       	cpi	r24, 0x75	; 117
    1a4a:	31 f4       	brne	.+12     	; 0x1a58 <vfprintf+0x232>
    1a4c:	23 2d       	mov	r18, r3
    1a4e:	2f 7e       	andi	r18, 0xEF	; 239
    1a50:	b2 2e       	mov	r11, r18
    1a52:	2a e0       	ldi	r18, 0x0A	; 10
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	25 c0       	rjmp	.+74     	; 0x1aa2 <vfprintf+0x27c>
    1a58:	93 2d       	mov	r25, r3
    1a5a:	99 7f       	andi	r25, 0xF9	; 249
    1a5c:	b9 2e       	mov	r11, r25
    1a5e:	8f 36       	cpi	r24, 0x6F	; 111
    1a60:	c1 f0       	breq	.+48     	; 0x1a92 <vfprintf+0x26c>
    1a62:	18 f4       	brcc	.+6      	; 0x1a6a <vfprintf+0x244>
    1a64:	88 35       	cpi	r24, 0x58	; 88
    1a66:	79 f0       	breq	.+30     	; 0x1a86 <vfprintf+0x260>
    1a68:	b5 c0       	rjmp	.+362    	; 0x1bd4 <vfprintf+0x3ae>
    1a6a:	80 37       	cpi	r24, 0x70	; 112
    1a6c:	19 f0       	breq	.+6      	; 0x1a74 <vfprintf+0x24e>
    1a6e:	88 37       	cpi	r24, 0x78	; 120
    1a70:	21 f0       	breq	.+8      	; 0x1a7a <vfprintf+0x254>
    1a72:	b0 c0       	rjmp	.+352    	; 0x1bd4 <vfprintf+0x3ae>
    1a74:	e9 2f       	mov	r30, r25
    1a76:	e0 61       	ori	r30, 0x10	; 16
    1a78:	be 2e       	mov	r11, r30
    1a7a:	b4 fe       	sbrs	r11, 4
    1a7c:	0d c0       	rjmp	.+26     	; 0x1a98 <vfprintf+0x272>
    1a7e:	fb 2d       	mov	r31, r11
    1a80:	f4 60       	ori	r31, 0x04	; 4
    1a82:	bf 2e       	mov	r11, r31
    1a84:	09 c0       	rjmp	.+18     	; 0x1a98 <vfprintf+0x272>
    1a86:	34 fe       	sbrs	r3, 4
    1a88:	0a c0       	rjmp	.+20     	; 0x1a9e <vfprintf+0x278>
    1a8a:	29 2f       	mov	r18, r25
    1a8c:	26 60       	ori	r18, 0x06	; 6
    1a8e:	b2 2e       	mov	r11, r18
    1a90:	06 c0       	rjmp	.+12     	; 0x1a9e <vfprintf+0x278>
    1a92:	28 e0       	ldi	r18, 0x08	; 8
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	05 c0       	rjmp	.+10     	; 0x1aa2 <vfprintf+0x27c>
    1a98:	20 e1       	ldi	r18, 0x10	; 16
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <vfprintf+0x27c>
    1a9e:	20 e1       	ldi	r18, 0x10	; 16
    1aa0:	32 e0       	ldi	r19, 0x02	; 2
    1aa2:	f8 01       	movw	r30, r16
    1aa4:	b7 fe       	sbrs	r11, 7
    1aa6:	07 c0       	rjmp	.+14     	; 0x1ab6 <vfprintf+0x290>
    1aa8:	60 81       	ld	r22, Z
    1aaa:	71 81       	ldd	r23, Z+1	; 0x01
    1aac:	82 81       	ldd	r24, Z+2	; 0x02
    1aae:	93 81       	ldd	r25, Z+3	; 0x03
    1ab0:	0c 5f       	subi	r16, 0xFC	; 252
    1ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab4:	06 c0       	rjmp	.+12     	; 0x1ac2 <vfprintf+0x29c>
    1ab6:	60 81       	ld	r22, Z
    1ab8:	71 81       	ldd	r23, Z+1	; 0x01
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	0e 5f       	subi	r16, 0xFE	; 254
    1ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac2:	a3 01       	movw	r20, r6
    1ac4:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__ultoa_invert>
    1ac8:	88 2e       	mov	r8, r24
    1aca:	86 18       	sub	r8, r6
    1acc:	fb 2d       	mov	r31, r11
    1ace:	ff 77       	andi	r31, 0x7F	; 127
    1ad0:	3f 2e       	mov	r3, r31
    1ad2:	36 fe       	sbrs	r3, 6
    1ad4:	0d c0       	rjmp	.+26     	; 0x1af0 <vfprintf+0x2ca>
    1ad6:	23 2d       	mov	r18, r3
    1ad8:	2e 7f       	andi	r18, 0xFE	; 254
    1ada:	a2 2e       	mov	r10, r18
    1adc:	89 14       	cp	r8, r9
    1ade:	58 f4       	brcc	.+22     	; 0x1af6 <vfprintf+0x2d0>
    1ae0:	34 fe       	sbrs	r3, 4
    1ae2:	0b c0       	rjmp	.+22     	; 0x1afa <vfprintf+0x2d4>
    1ae4:	32 fc       	sbrc	r3, 2
    1ae6:	09 c0       	rjmp	.+18     	; 0x1afa <vfprintf+0x2d4>
    1ae8:	83 2d       	mov	r24, r3
    1aea:	8e 7e       	andi	r24, 0xEE	; 238
    1aec:	a8 2e       	mov	r10, r24
    1aee:	05 c0       	rjmp	.+10     	; 0x1afa <vfprintf+0x2d4>
    1af0:	b8 2c       	mov	r11, r8
    1af2:	a3 2c       	mov	r10, r3
    1af4:	03 c0       	rjmp	.+6      	; 0x1afc <vfprintf+0x2d6>
    1af6:	b8 2c       	mov	r11, r8
    1af8:	01 c0       	rjmp	.+2      	; 0x1afc <vfprintf+0x2d6>
    1afa:	b9 2c       	mov	r11, r9
    1afc:	a4 fe       	sbrs	r10, 4
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <vfprintf+0x2f8>
    1b00:	fe 01       	movw	r30, r28
    1b02:	e8 0d       	add	r30, r8
    1b04:	f1 1d       	adc	r31, r1
    1b06:	80 81       	ld	r24, Z
    1b08:	80 33       	cpi	r24, 0x30	; 48
    1b0a:	21 f4       	brne	.+8      	; 0x1b14 <vfprintf+0x2ee>
    1b0c:	9a 2d       	mov	r25, r10
    1b0e:	99 7e       	andi	r25, 0xE9	; 233
    1b10:	a9 2e       	mov	r10, r25
    1b12:	09 c0       	rjmp	.+18     	; 0x1b26 <vfprintf+0x300>
    1b14:	a2 fe       	sbrs	r10, 2
    1b16:	06 c0       	rjmp	.+12     	; 0x1b24 <vfprintf+0x2fe>
    1b18:	b3 94       	inc	r11
    1b1a:	b3 94       	inc	r11
    1b1c:	04 c0       	rjmp	.+8      	; 0x1b26 <vfprintf+0x300>
    1b1e:	8a 2d       	mov	r24, r10
    1b20:	86 78       	andi	r24, 0x86	; 134
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <vfprintf+0x300>
    1b24:	b3 94       	inc	r11
    1b26:	a3 fc       	sbrc	r10, 3
    1b28:	11 c0       	rjmp	.+34     	; 0x1b4c <vfprintf+0x326>
    1b2a:	a0 fe       	sbrs	r10, 0
    1b2c:	06 c0       	rjmp	.+12     	; 0x1b3a <vfprintf+0x314>
    1b2e:	b2 14       	cp	r11, r2
    1b30:	88 f4       	brcc	.+34     	; 0x1b54 <vfprintf+0x32e>
    1b32:	28 0c       	add	r2, r8
    1b34:	92 2c       	mov	r9, r2
    1b36:	9b 18       	sub	r9, r11
    1b38:	0e c0       	rjmp	.+28     	; 0x1b56 <vfprintf+0x330>
    1b3a:	b2 14       	cp	r11, r2
    1b3c:	60 f4       	brcc	.+24     	; 0x1b56 <vfprintf+0x330>
    1b3e:	b6 01       	movw	r22, r12
    1b40:	80 e2       	ldi	r24, 0x20	; 32
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <fputc>
    1b48:	b3 94       	inc	r11
    1b4a:	f7 cf       	rjmp	.-18     	; 0x1b3a <vfprintf+0x314>
    1b4c:	b2 14       	cp	r11, r2
    1b4e:	18 f4       	brcc	.+6      	; 0x1b56 <vfprintf+0x330>
    1b50:	2b 18       	sub	r2, r11
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <vfprintf+0x332>
    1b54:	98 2c       	mov	r9, r8
    1b56:	21 2c       	mov	r2, r1
    1b58:	a4 fe       	sbrs	r10, 4
    1b5a:	10 c0       	rjmp	.+32     	; 0x1b7c <vfprintf+0x356>
    1b5c:	b6 01       	movw	r22, r12
    1b5e:	80 e3       	ldi	r24, 0x30	; 48
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <fputc>
    1b66:	a2 fe       	sbrs	r10, 2
    1b68:	17 c0       	rjmp	.+46     	; 0x1b98 <vfprintf+0x372>
    1b6a:	a1 fc       	sbrc	r10, 1
    1b6c:	03 c0       	rjmp	.+6      	; 0x1b74 <vfprintf+0x34e>
    1b6e:	88 e7       	ldi	r24, 0x78	; 120
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <vfprintf+0x352>
    1b74:	88 e5       	ldi	r24, 0x58	; 88
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	b6 01       	movw	r22, r12
    1b7a:	0c c0       	rjmp	.+24     	; 0x1b94 <vfprintf+0x36e>
    1b7c:	8a 2d       	mov	r24, r10
    1b7e:	86 78       	andi	r24, 0x86	; 134
    1b80:	59 f0       	breq	.+22     	; 0x1b98 <vfprintf+0x372>
    1b82:	a1 fe       	sbrs	r10, 1
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <vfprintf+0x364>
    1b86:	8b e2       	ldi	r24, 0x2B	; 43
    1b88:	01 c0       	rjmp	.+2      	; 0x1b8c <vfprintf+0x366>
    1b8a:	80 e2       	ldi	r24, 0x20	; 32
    1b8c:	a7 fc       	sbrc	r10, 7
    1b8e:	8d e2       	ldi	r24, 0x2D	; 45
    1b90:	b6 01       	movw	r22, r12
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <fputc>
    1b98:	89 14       	cp	r8, r9
    1b9a:	38 f4       	brcc	.+14     	; 0x1baa <vfprintf+0x384>
    1b9c:	b6 01       	movw	r22, r12
    1b9e:	80 e3       	ldi	r24, 0x30	; 48
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <fputc>
    1ba6:	9a 94       	dec	r9
    1ba8:	f7 cf       	rjmp	.-18     	; 0x1b98 <vfprintf+0x372>
    1baa:	8a 94       	dec	r8
    1bac:	f3 01       	movw	r30, r6
    1bae:	e8 0d       	add	r30, r8
    1bb0:	f1 1d       	adc	r31, r1
    1bb2:	80 81       	ld	r24, Z
    1bb4:	b6 01       	movw	r22, r12
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <fputc>
    1bbc:	81 10       	cpse	r8, r1
    1bbe:	f5 cf       	rjmp	.-22     	; 0x1baa <vfprintf+0x384>
    1bc0:	22 20       	and	r2, r2
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <vfprintf+0x3a0>
    1bc4:	42 ce       	rjmp	.-892    	; 0x184a <vfprintf+0x24>
    1bc6:	b6 01       	movw	r22, r12
    1bc8:	80 e2       	ldi	r24, 0x20	; 32
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <fputc>
    1bd0:	2a 94       	dec	r2
    1bd2:	f6 cf       	rjmp	.-20     	; 0x1bc0 <vfprintf+0x39a>
    1bd4:	f6 01       	movw	r30, r12
    1bd6:	86 81       	ldd	r24, Z+6	; 0x06
    1bd8:	97 81       	ldd	r25, Z+7	; 0x07
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <vfprintf+0x3ba>
    1bdc:	8f ef       	ldi	r24, 0xFF	; 255
    1bde:	9f ef       	ldi	r25, 0xFF	; 255
    1be0:	2b 96       	adiw	r28, 0x0b	; 11
    1be2:	e2 e1       	ldi	r30, 0x12	; 18
    1be4:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <__epilogue_restores__>

00001be8 <strnlen_P>:
    1be8:	fc 01       	movw	r30, r24
    1bea:	05 90       	lpm	r0, Z+
    1bec:	61 50       	subi	r22, 0x01	; 1
    1bee:	70 40       	sbci	r23, 0x00	; 0
    1bf0:	01 10       	cpse	r0, r1
    1bf2:	d8 f7       	brcc	.-10     	; 0x1bea <strnlen_P+0x2>
    1bf4:	80 95       	com	r24
    1bf6:	90 95       	com	r25
    1bf8:	8e 0f       	add	r24, r30
    1bfa:	9f 1f       	adc	r25, r31
    1bfc:	08 95       	ret

00001bfe <strnlen>:
    1bfe:	fc 01       	movw	r30, r24
    1c00:	61 50       	subi	r22, 0x01	; 1
    1c02:	70 40       	sbci	r23, 0x00	; 0
    1c04:	01 90       	ld	r0, Z+
    1c06:	01 10       	cpse	r0, r1
    1c08:	d8 f7       	brcc	.-10     	; 0x1c00 <strnlen+0x2>
    1c0a:	80 95       	com	r24
    1c0c:	90 95       	com	r25
    1c0e:	8e 0f       	add	r24, r30
    1c10:	9f 1f       	adc	r25, r31
    1c12:	08 95       	ret

00001c14 <fputc>:
    1c14:	0f 93       	push	r16
    1c16:	1f 93       	push	r17
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
    1c1c:	fb 01       	movw	r30, r22
    1c1e:	23 81       	ldd	r18, Z+3	; 0x03
    1c20:	21 fd       	sbrc	r18, 1
    1c22:	03 c0       	rjmp	.+6      	; 0x1c2a <fputc+0x16>
    1c24:	8f ef       	ldi	r24, 0xFF	; 255
    1c26:	9f ef       	ldi	r25, 0xFF	; 255
    1c28:	2c c0       	rjmp	.+88     	; 0x1c82 <fputc+0x6e>
    1c2a:	22 ff       	sbrs	r18, 2
    1c2c:	16 c0       	rjmp	.+44     	; 0x1c5a <fputc+0x46>
    1c2e:	46 81       	ldd	r20, Z+6	; 0x06
    1c30:	57 81       	ldd	r21, Z+7	; 0x07
    1c32:	24 81       	ldd	r18, Z+4	; 0x04
    1c34:	35 81       	ldd	r19, Z+5	; 0x05
    1c36:	42 17       	cp	r20, r18
    1c38:	53 07       	cpc	r21, r19
    1c3a:	44 f4       	brge	.+16     	; 0x1c4c <fputc+0x38>
    1c3c:	a0 81       	ld	r26, Z
    1c3e:	b1 81       	ldd	r27, Z+1	; 0x01
    1c40:	9d 01       	movw	r18, r26
    1c42:	2f 5f       	subi	r18, 0xFF	; 255
    1c44:	3f 4f       	sbci	r19, 0xFF	; 255
    1c46:	31 83       	std	Z+1, r19	; 0x01
    1c48:	20 83       	st	Z, r18
    1c4a:	8c 93       	st	X, r24
    1c4c:	26 81       	ldd	r18, Z+6	; 0x06
    1c4e:	37 81       	ldd	r19, Z+7	; 0x07
    1c50:	2f 5f       	subi	r18, 0xFF	; 255
    1c52:	3f 4f       	sbci	r19, 0xFF	; 255
    1c54:	37 83       	std	Z+7, r19	; 0x07
    1c56:	26 83       	std	Z+6, r18	; 0x06
    1c58:	14 c0       	rjmp	.+40     	; 0x1c82 <fputc+0x6e>
    1c5a:	8b 01       	movw	r16, r22
    1c5c:	ec 01       	movw	r28, r24
    1c5e:	fb 01       	movw	r30, r22
    1c60:	00 84       	ldd	r0, Z+8	; 0x08
    1c62:	f1 85       	ldd	r31, Z+9	; 0x09
    1c64:	e0 2d       	mov	r30, r0
    1c66:	09 95       	icall
    1c68:	89 2b       	or	r24, r25
    1c6a:	e1 f6       	brne	.-72     	; 0x1c24 <fputc+0x10>
    1c6c:	d8 01       	movw	r26, r16
    1c6e:	16 96       	adiw	r26, 0x06	; 6
    1c70:	8d 91       	ld	r24, X+
    1c72:	9c 91       	ld	r25, X
    1c74:	17 97       	sbiw	r26, 0x07	; 7
    1c76:	01 96       	adiw	r24, 0x01	; 1
    1c78:	17 96       	adiw	r26, 0x07	; 7
    1c7a:	9c 93       	st	X, r25
    1c7c:	8e 93       	st	-X, r24
    1c7e:	16 97       	sbiw	r26, 0x06	; 6
    1c80:	ce 01       	movw	r24, r28
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	08 95       	ret

00001c8c <__ultoa_invert>:
    1c8c:	fa 01       	movw	r30, r20
    1c8e:	aa 27       	eor	r26, r26
    1c90:	28 30       	cpi	r18, 0x08	; 8
    1c92:	51 f1       	breq	.+84     	; 0x1ce8 <__ultoa_invert+0x5c>
    1c94:	20 31       	cpi	r18, 0x10	; 16
    1c96:	81 f1       	breq	.+96     	; 0x1cf8 <__ultoa_invert+0x6c>
    1c98:	e8 94       	clt
    1c9a:	6f 93       	push	r22
    1c9c:	6e 7f       	andi	r22, 0xFE	; 254
    1c9e:	6e 5f       	subi	r22, 0xFE	; 254
    1ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca6:	af 4f       	sbci	r26, 0xFF	; 255
    1ca8:	b1 e0       	ldi	r27, 0x01	; 1
    1caa:	3e d0       	rcall	.+124    	; 0x1d28 <__ultoa_invert+0x9c>
    1cac:	b4 e0       	ldi	r27, 0x04	; 4
    1cae:	3c d0       	rcall	.+120    	; 0x1d28 <__ultoa_invert+0x9c>
    1cb0:	67 0f       	add	r22, r23
    1cb2:	78 1f       	adc	r23, r24
    1cb4:	89 1f       	adc	r24, r25
    1cb6:	9a 1f       	adc	r25, r26
    1cb8:	a1 1d       	adc	r26, r1
    1cba:	68 0f       	add	r22, r24
    1cbc:	79 1f       	adc	r23, r25
    1cbe:	8a 1f       	adc	r24, r26
    1cc0:	91 1d       	adc	r25, r1
    1cc2:	a1 1d       	adc	r26, r1
    1cc4:	6a 0f       	add	r22, r26
    1cc6:	71 1d       	adc	r23, r1
    1cc8:	81 1d       	adc	r24, r1
    1cca:	91 1d       	adc	r25, r1
    1ccc:	a1 1d       	adc	r26, r1
    1cce:	20 d0       	rcall	.+64     	; 0x1d10 <__ultoa_invert+0x84>
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <__ultoa_invert+0x48>
    1cd2:	68 94       	set
    1cd4:	3f 91       	pop	r19
    1cd6:	2a e0       	ldi	r18, 0x0A	; 10
    1cd8:	26 9f       	mul	r18, r22
    1cda:	11 24       	eor	r1, r1
    1cdc:	30 19       	sub	r19, r0
    1cde:	30 5d       	subi	r19, 0xD0	; 208
    1ce0:	31 93       	st	Z+, r19
    1ce2:	de f6       	brtc	.-74     	; 0x1c9a <__ultoa_invert+0xe>
    1ce4:	cf 01       	movw	r24, r30
    1ce6:	08 95       	ret
    1ce8:	46 2f       	mov	r20, r22
    1cea:	47 70       	andi	r20, 0x07	; 7
    1cec:	40 5d       	subi	r20, 0xD0	; 208
    1cee:	41 93       	st	Z+, r20
    1cf0:	b3 e0       	ldi	r27, 0x03	; 3
    1cf2:	0f d0       	rcall	.+30     	; 0x1d12 <__ultoa_invert+0x86>
    1cf4:	c9 f7       	brne	.-14     	; 0x1ce8 <__ultoa_invert+0x5c>
    1cf6:	f6 cf       	rjmp	.-20     	; 0x1ce4 <__ultoa_invert+0x58>
    1cf8:	46 2f       	mov	r20, r22
    1cfa:	4f 70       	andi	r20, 0x0F	; 15
    1cfc:	40 5d       	subi	r20, 0xD0	; 208
    1cfe:	4a 33       	cpi	r20, 0x3A	; 58
    1d00:	18 f0       	brcs	.+6      	; 0x1d08 <__ultoa_invert+0x7c>
    1d02:	49 5d       	subi	r20, 0xD9	; 217
    1d04:	31 fd       	sbrc	r19, 1
    1d06:	40 52       	subi	r20, 0x20	; 32
    1d08:	41 93       	st	Z+, r20
    1d0a:	02 d0       	rcall	.+4      	; 0x1d10 <__ultoa_invert+0x84>
    1d0c:	a9 f7       	brne	.-22     	; 0x1cf8 <__ultoa_invert+0x6c>
    1d0e:	ea cf       	rjmp	.-44     	; 0x1ce4 <__ultoa_invert+0x58>
    1d10:	b4 e0       	ldi	r27, 0x04	; 4
    1d12:	a6 95       	lsr	r26
    1d14:	97 95       	ror	r25
    1d16:	87 95       	ror	r24
    1d18:	77 95       	ror	r23
    1d1a:	67 95       	ror	r22
    1d1c:	ba 95       	dec	r27
    1d1e:	c9 f7       	brne	.-14     	; 0x1d12 <__ultoa_invert+0x86>
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	61 05       	cpc	r22, r1
    1d24:	71 05       	cpc	r23, r1
    1d26:	08 95       	ret
    1d28:	9b 01       	movw	r18, r22
    1d2a:	ac 01       	movw	r20, r24
    1d2c:	0a 2e       	mov	r0, r26
    1d2e:	06 94       	lsr	r0
    1d30:	57 95       	ror	r21
    1d32:	47 95       	ror	r20
    1d34:	37 95       	ror	r19
    1d36:	27 95       	ror	r18
    1d38:	ba 95       	dec	r27
    1d3a:	c9 f7       	brne	.-14     	; 0x1d2e <__ultoa_invert+0xa2>
    1d3c:	62 0f       	add	r22, r18
    1d3e:	73 1f       	adc	r23, r19
    1d40:	84 1f       	adc	r24, r20
    1d42:	95 1f       	adc	r25, r21
    1d44:	a0 1d       	adc	r26, r0
    1d46:	08 95       	ret

00001d48 <__prologue_saves__>:
    1d48:	2f 92       	push	r2
    1d4a:	3f 92       	push	r3
    1d4c:	4f 92       	push	r4
    1d4e:	5f 92       	push	r5
    1d50:	6f 92       	push	r6
    1d52:	7f 92       	push	r7
    1d54:	8f 92       	push	r8
    1d56:	9f 92       	push	r9
    1d58:	af 92       	push	r10
    1d5a:	bf 92       	push	r11
    1d5c:	cf 92       	push	r12
    1d5e:	df 92       	push	r13
    1d60:	ef 92       	push	r14
    1d62:	ff 92       	push	r15
    1d64:	0f 93       	push	r16
    1d66:	1f 93       	push	r17
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	ca 1b       	sub	r28, r26
    1d72:	db 0b       	sbc	r29, r27
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	09 94       	ijmp

00001d80 <__epilogue_restores__>:
    1d80:	2a 88       	ldd	r2, Y+18	; 0x12
    1d82:	39 88       	ldd	r3, Y+17	; 0x11
    1d84:	48 88       	ldd	r4, Y+16	; 0x10
    1d86:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d88:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d90:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d92:	b9 84       	ldd	r11, Y+9	; 0x09
    1d94:	c8 84       	ldd	r12, Y+8	; 0x08
    1d96:	df 80       	ldd	r13, Y+7	; 0x07
    1d98:	ee 80       	ldd	r14, Y+6	; 0x06
    1d9a:	fd 80       	ldd	r15, Y+5	; 0x05
    1d9c:	0c 81       	ldd	r16, Y+4	; 0x04
    1d9e:	1b 81       	ldd	r17, Y+3	; 0x03
    1da0:	aa 81       	ldd	r26, Y+2	; 0x02
    1da2:	b9 81       	ldd	r27, Y+1	; 0x01
    1da4:	ce 0f       	add	r28, r30
    1da6:	d1 1d       	adc	r29, r1
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	ed 01       	movw	r28, r26
    1db4:	08 95       	ret

00001db6 <_exit>:
    1db6:	f8 94       	cli

00001db8 <__stop_program>:
    1db8:	ff cf       	rjmp	.-2      	; 0x1db8 <__stop_program>
