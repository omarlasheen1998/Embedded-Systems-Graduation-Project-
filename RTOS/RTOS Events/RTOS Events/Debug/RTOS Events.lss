
RTOS Events.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001be4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00001be4  00001c78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003a5  00800074  00800074  00001c8c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001cbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c0  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000041f7  00000000  00000000  000020b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f16  00000000  00000000  000062af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002983  00000000  00000000  000071c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c60  00000000  00000000  00009b48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016ef  00000000  00000000  0000a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004b0a  00000000  00000000  0000be97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  000109a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__vector_1>
       8:	0c 94 96 03 	jmp	0x72c	; 0x72c <__vector_2>
       c:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	24 e0       	ldi	r18, 0x04	; 4
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 31       	cpi	r26, 0x19	; 25
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <main>
      8a:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pinMode>:

}

void Interrupts(void){
	
	sei();
      92:	88 30       	cpi	r24, 0x08	; 8
      94:	08 f0       	brcs	.+2      	; 0x98 <pinMode+0x6>
      96:	5e c0       	rjmp	.+188    	; 0x154 <pinMode+0xc2>
      98:	69 32       	cpi	r22, 0x29	; 41
      9a:	d1 f4       	brne	.+52     	; 0xd0 <pinMode+0x3e>
      9c:	4a b3       	in	r20, 0x1a	; 26
      9e:	9d ec       	ldi	r25, 0xCD	; 205
      a0:	89 9f       	mul	r24, r25
      a2:	91 2d       	mov	r25, r1
      a4:	11 24       	eor	r1, r1
      a6:	96 95       	lsr	r25
      a8:	96 95       	lsr	r25
      aa:	96 95       	lsr	r25
      ac:	99 0f       	add	r25, r25
      ae:	29 2f       	mov	r18, r25
      b0:	22 0f       	add	r18, r18
      b2:	22 0f       	add	r18, r18
      b4:	92 0f       	add	r25, r18
      b6:	89 1b       	sub	r24, r25
      b8:	21 e0       	ldi	r18, 0x01	; 1
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	b9 01       	movw	r22, r18
      be:	02 c0       	rjmp	.+4      	; 0xc4 <pinMode+0x32>
      c0:	66 0f       	add	r22, r22
      c2:	77 1f       	adc	r23, r23
      c4:	8a 95       	dec	r24
      c6:	e2 f7       	brpl	.-8      	; 0xc0 <pinMode+0x2e>
      c8:	cb 01       	movw	r24, r22
      ca:	84 2b       	or	r24, r20
      cc:	8a bb       	out	0x1a, r24	; 26
      ce:	08 95       	ret
      d0:	68 32       	cpi	r22, 0x28	; 40
      d2:	d9 f4       	brne	.+54     	; 0x10a <pinMode+0x78>
      d4:	4a b3       	in	r20, 0x1a	; 26
      d6:	9d ec       	ldi	r25, 0xCD	; 205
      d8:	89 9f       	mul	r24, r25
      da:	91 2d       	mov	r25, r1
      dc:	11 24       	eor	r1, r1
      de:	96 95       	lsr	r25
      e0:	96 95       	lsr	r25
      e2:	96 95       	lsr	r25
      e4:	99 0f       	add	r25, r25
      e6:	29 2f       	mov	r18, r25
      e8:	22 0f       	add	r18, r18
      ea:	22 0f       	add	r18, r18
      ec:	92 0f       	add	r25, r18
      ee:	89 1b       	sub	r24, r25
      f0:	21 e0       	ldi	r18, 0x01	; 1
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	b9 01       	movw	r22, r18
      f6:	02 c0       	rjmp	.+4      	; 0xfc <pinMode+0x6a>
      f8:	66 0f       	add	r22, r22
      fa:	77 1f       	adc	r23, r23
      fc:	8a 95       	dec	r24
      fe:	e2 f7       	brpl	.-8      	; 0xf8 <pinMode+0x66>
     100:	cb 01       	movw	r24, r22
     102:	80 95       	com	r24
     104:	84 23       	and	r24, r20
     106:	8a bb       	out	0x1a, r24	; 26
     108:	08 95       	ret
     10a:	6a 32       	cpi	r22, 0x2A	; 42
     10c:	09 f0       	breq	.+2      	; 0x110 <pinMode+0x7e>
     10e:	49 c1       	rjmp	.+658    	; 0x3a2 <pinMode+0x310>
     110:	4a b3       	in	r20, 0x1a	; 26
     112:	9d ec       	ldi	r25, 0xCD	; 205
     114:	89 9f       	mul	r24, r25
     116:	91 2d       	mov	r25, r1
     118:	11 24       	eor	r1, r1
     11a:	96 95       	lsr	r25
     11c:	96 95       	lsr	r25
     11e:	96 95       	lsr	r25
     120:	99 0f       	add	r25, r25
     122:	29 2f       	mov	r18, r25
     124:	22 0f       	add	r18, r18
     126:	22 0f       	add	r18, r18
     128:	92 0f       	add	r25, r18
     12a:	89 1b       	sub	r24, r25
     12c:	21 e0       	ldi	r18, 0x01	; 1
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	b9 01       	movw	r22, r18
     132:	02 c0       	rjmp	.+4      	; 0x138 <pinMode+0xa6>
     134:	66 0f       	add	r22, r22
     136:	77 1f       	adc	r23, r23
     138:	8a 95       	dec	r24
     13a:	e2 f7       	brpl	.-8      	; 0x134 <pinMode+0xa2>
     13c:	cb 01       	movw	r24, r22
     13e:	96 2f       	mov	r25, r22
     140:	90 95       	com	r25
     142:	94 23       	and	r25, r20
     144:	9a bb       	out	0x1a, r25	; 26
     146:	90 b7       	in	r25, 0x30	; 48
     148:	9b 7f       	andi	r25, 0xFB	; 251
     14a:	90 bf       	out	0x30, r25	; 48
     14c:	9b b3       	in	r25, 0x1b	; 27
     14e:	89 2b       	or	r24, r25
     150:	8b bb       	out	0x1b, r24	; 27
     152:	08 95       	ret
     154:	96 ef       	ldi	r25, 0xF6	; 246
     156:	98 0f       	add	r25, r24
     158:	98 30       	cpi	r25, 0x08	; 8
     15a:	08 f0       	brcs	.+2      	; 0x15e <pinMode+0xcc>
     15c:	5e c0       	rjmp	.+188    	; 0x21a <pinMode+0x188>
     15e:	69 32       	cpi	r22, 0x29	; 41
     160:	d1 f4       	brne	.+52     	; 0x196 <pinMode+0x104>
     162:	47 b3       	in	r20, 0x17	; 23
     164:	9d ec       	ldi	r25, 0xCD	; 205
     166:	89 9f       	mul	r24, r25
     168:	91 2d       	mov	r25, r1
     16a:	11 24       	eor	r1, r1
     16c:	96 95       	lsr	r25
     16e:	96 95       	lsr	r25
     170:	96 95       	lsr	r25
     172:	99 0f       	add	r25, r25
     174:	29 2f       	mov	r18, r25
     176:	22 0f       	add	r18, r18
     178:	22 0f       	add	r18, r18
     17a:	92 0f       	add	r25, r18
     17c:	89 1b       	sub	r24, r25
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	b9 01       	movw	r22, r18
     184:	02 c0       	rjmp	.+4      	; 0x18a <pinMode+0xf8>
     186:	66 0f       	add	r22, r22
     188:	77 1f       	adc	r23, r23
     18a:	8a 95       	dec	r24
     18c:	e2 f7       	brpl	.-8      	; 0x186 <pinMode+0xf4>
     18e:	cb 01       	movw	r24, r22
     190:	84 2b       	or	r24, r20
     192:	87 bb       	out	0x17, r24	; 23
     194:	08 95       	ret
     196:	68 32       	cpi	r22, 0x28	; 40
     198:	d9 f4       	brne	.+54     	; 0x1d0 <pinMode+0x13e>
     19a:	47 b3       	in	r20, 0x17	; 23
     19c:	9d ec       	ldi	r25, 0xCD	; 205
     19e:	89 9f       	mul	r24, r25
     1a0:	91 2d       	mov	r25, r1
     1a2:	11 24       	eor	r1, r1
     1a4:	96 95       	lsr	r25
     1a6:	96 95       	lsr	r25
     1a8:	96 95       	lsr	r25
     1aa:	99 0f       	add	r25, r25
     1ac:	29 2f       	mov	r18, r25
     1ae:	22 0f       	add	r18, r18
     1b0:	22 0f       	add	r18, r18
     1b2:	92 0f       	add	r25, r18
     1b4:	89 1b       	sub	r24, r25
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	b9 01       	movw	r22, r18
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <pinMode+0x130>
     1be:	66 0f       	add	r22, r22
     1c0:	77 1f       	adc	r23, r23
     1c2:	8a 95       	dec	r24
     1c4:	e2 f7       	brpl	.-8      	; 0x1be <pinMode+0x12c>
     1c6:	cb 01       	movw	r24, r22
     1c8:	80 95       	com	r24
     1ca:	84 23       	and	r24, r20
     1cc:	87 bb       	out	0x17, r24	; 23
     1ce:	08 95       	ret
     1d0:	6a 32       	cpi	r22, 0x2A	; 42
     1d2:	09 f0       	breq	.+2      	; 0x1d6 <pinMode+0x144>
     1d4:	e6 c0       	rjmp	.+460    	; 0x3a2 <pinMode+0x310>
     1d6:	47 b3       	in	r20, 0x17	; 23
     1d8:	9d ec       	ldi	r25, 0xCD	; 205
     1da:	89 9f       	mul	r24, r25
     1dc:	91 2d       	mov	r25, r1
     1de:	11 24       	eor	r1, r1
     1e0:	96 95       	lsr	r25
     1e2:	96 95       	lsr	r25
     1e4:	96 95       	lsr	r25
     1e6:	99 0f       	add	r25, r25
     1e8:	29 2f       	mov	r18, r25
     1ea:	22 0f       	add	r18, r18
     1ec:	22 0f       	add	r18, r18
     1ee:	92 0f       	add	r25, r18
     1f0:	89 1b       	sub	r24, r25
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	b9 01       	movw	r22, r18
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <pinMode+0x16c>
     1fa:	66 0f       	add	r22, r22
     1fc:	77 1f       	adc	r23, r23
     1fe:	8a 95       	dec	r24
     200:	e2 f7       	brpl	.-8      	; 0x1fa <pinMode+0x168>
     202:	cb 01       	movw	r24, r22
     204:	96 2f       	mov	r25, r22
     206:	90 95       	com	r25
     208:	94 23       	and	r25, r20
     20a:	97 bb       	out	0x17, r25	; 23
     20c:	90 b7       	in	r25, 0x30	; 48
     20e:	9b 7f       	andi	r25, 0xFB	; 251
     210:	90 bf       	out	0x30, r25	; 48
     212:	98 b3       	in	r25, 0x18	; 24
     214:	89 2b       	or	r24, r25
     216:	88 bb       	out	0x18, r24	; 24
     218:	08 95       	ret
     21a:	9c ee       	ldi	r25, 0xEC	; 236
     21c:	98 0f       	add	r25, r24
     21e:	98 30       	cpi	r25, 0x08	; 8
     220:	08 f0       	brcs	.+2      	; 0x224 <pinMode+0x192>
     222:	5e c0       	rjmp	.+188    	; 0x2e0 <pinMode+0x24e>
     224:	69 32       	cpi	r22, 0x29	; 41
     226:	d1 f4       	brne	.+52     	; 0x25c <pinMode+0x1ca>
     228:	44 b3       	in	r20, 0x14	; 20
     22a:	9d ec       	ldi	r25, 0xCD	; 205
     22c:	89 9f       	mul	r24, r25
     22e:	91 2d       	mov	r25, r1
     230:	11 24       	eor	r1, r1
     232:	96 95       	lsr	r25
     234:	96 95       	lsr	r25
     236:	96 95       	lsr	r25
     238:	99 0f       	add	r25, r25
     23a:	29 2f       	mov	r18, r25
     23c:	22 0f       	add	r18, r18
     23e:	22 0f       	add	r18, r18
     240:	92 0f       	add	r25, r18
     242:	89 1b       	sub	r24, r25
     244:	21 e0       	ldi	r18, 0x01	; 1
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	b9 01       	movw	r22, r18
     24a:	02 c0       	rjmp	.+4      	; 0x250 <pinMode+0x1be>
     24c:	66 0f       	add	r22, r22
     24e:	77 1f       	adc	r23, r23
     250:	8a 95       	dec	r24
     252:	e2 f7       	brpl	.-8      	; 0x24c <pinMode+0x1ba>
     254:	cb 01       	movw	r24, r22
     256:	84 2b       	or	r24, r20
     258:	84 bb       	out	0x14, r24	; 20
     25a:	08 95       	ret
     25c:	68 32       	cpi	r22, 0x28	; 40
     25e:	d9 f4       	brne	.+54     	; 0x296 <pinMode+0x204>
     260:	44 b3       	in	r20, 0x14	; 20
     262:	9d ec       	ldi	r25, 0xCD	; 205
     264:	89 9f       	mul	r24, r25
     266:	91 2d       	mov	r25, r1
     268:	11 24       	eor	r1, r1
     26a:	96 95       	lsr	r25
     26c:	96 95       	lsr	r25
     26e:	96 95       	lsr	r25
     270:	99 0f       	add	r25, r25
     272:	29 2f       	mov	r18, r25
     274:	22 0f       	add	r18, r18
     276:	22 0f       	add	r18, r18
     278:	92 0f       	add	r25, r18
     27a:	89 1b       	sub	r24, r25
     27c:	21 e0       	ldi	r18, 0x01	; 1
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	b9 01       	movw	r22, r18
     282:	02 c0       	rjmp	.+4      	; 0x288 <pinMode+0x1f6>
     284:	66 0f       	add	r22, r22
     286:	77 1f       	adc	r23, r23
     288:	8a 95       	dec	r24
     28a:	e2 f7       	brpl	.-8      	; 0x284 <pinMode+0x1f2>
     28c:	cb 01       	movw	r24, r22
     28e:	80 95       	com	r24
     290:	84 23       	and	r24, r20
     292:	84 bb       	out	0x14, r24	; 20
     294:	08 95       	ret
     296:	6a 32       	cpi	r22, 0x2A	; 42
     298:	09 f0       	breq	.+2      	; 0x29c <pinMode+0x20a>
     29a:	83 c0       	rjmp	.+262    	; 0x3a2 <pinMode+0x310>
     29c:	44 b3       	in	r20, 0x14	; 20
     29e:	9d ec       	ldi	r25, 0xCD	; 205
     2a0:	89 9f       	mul	r24, r25
     2a2:	91 2d       	mov	r25, r1
     2a4:	11 24       	eor	r1, r1
     2a6:	96 95       	lsr	r25
     2a8:	96 95       	lsr	r25
     2aa:	96 95       	lsr	r25
     2ac:	99 0f       	add	r25, r25
     2ae:	29 2f       	mov	r18, r25
     2b0:	22 0f       	add	r18, r18
     2b2:	22 0f       	add	r18, r18
     2b4:	92 0f       	add	r25, r18
     2b6:	89 1b       	sub	r24, r25
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	b9 01       	movw	r22, r18
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <pinMode+0x232>
     2c0:	66 0f       	add	r22, r22
     2c2:	77 1f       	adc	r23, r23
     2c4:	8a 95       	dec	r24
     2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <pinMode+0x22e>
     2c8:	cb 01       	movw	r24, r22
     2ca:	96 2f       	mov	r25, r22
     2cc:	90 95       	com	r25
     2ce:	94 23       	and	r25, r20
     2d0:	94 bb       	out	0x14, r25	; 20
     2d2:	90 b7       	in	r25, 0x30	; 48
     2d4:	9b 7f       	andi	r25, 0xFB	; 251
     2d6:	90 bf       	out	0x30, r25	; 48
     2d8:	95 b3       	in	r25, 0x15	; 21
     2da:	89 2b       	or	r24, r25
     2dc:	85 bb       	out	0x15, r24	; 21
     2de:	08 95       	ret
     2e0:	92 ee       	ldi	r25, 0xE2	; 226
     2e2:	98 0f       	add	r25, r24
     2e4:	98 30       	cpi	r25, 0x08	; 8
     2e6:	08 f0       	brcs	.+2      	; 0x2ea <pinMode+0x258>
     2e8:	5c c0       	rjmp	.+184    	; 0x3a2 <pinMode+0x310>
     2ea:	69 32       	cpi	r22, 0x29	; 41
     2ec:	d1 f4       	brne	.+52     	; 0x322 <pinMode+0x290>
     2ee:	41 b3       	in	r20, 0x11	; 17
     2f0:	9d ec       	ldi	r25, 0xCD	; 205
     2f2:	89 9f       	mul	r24, r25
     2f4:	91 2d       	mov	r25, r1
     2f6:	11 24       	eor	r1, r1
     2f8:	96 95       	lsr	r25
     2fa:	96 95       	lsr	r25
     2fc:	96 95       	lsr	r25
     2fe:	99 0f       	add	r25, r25
     300:	29 2f       	mov	r18, r25
     302:	22 0f       	add	r18, r18
     304:	22 0f       	add	r18, r18
     306:	92 0f       	add	r25, r18
     308:	89 1b       	sub	r24, r25
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	b9 01       	movw	r22, r18
     310:	02 c0       	rjmp	.+4      	; 0x316 <pinMode+0x284>
     312:	66 0f       	add	r22, r22
     314:	77 1f       	adc	r23, r23
     316:	8a 95       	dec	r24
     318:	e2 f7       	brpl	.-8      	; 0x312 <pinMode+0x280>
     31a:	cb 01       	movw	r24, r22
     31c:	84 2b       	or	r24, r20
     31e:	81 bb       	out	0x11, r24	; 17
     320:	08 95       	ret
     322:	68 32       	cpi	r22, 0x28	; 40
     324:	d9 f4       	brne	.+54     	; 0x35c <pinMode+0x2ca>
     326:	41 b3       	in	r20, 0x11	; 17
     328:	9d ec       	ldi	r25, 0xCD	; 205
     32a:	89 9f       	mul	r24, r25
     32c:	91 2d       	mov	r25, r1
     32e:	11 24       	eor	r1, r1
     330:	96 95       	lsr	r25
     332:	96 95       	lsr	r25
     334:	96 95       	lsr	r25
     336:	99 0f       	add	r25, r25
     338:	29 2f       	mov	r18, r25
     33a:	22 0f       	add	r18, r18
     33c:	22 0f       	add	r18, r18
     33e:	92 0f       	add	r25, r18
     340:	89 1b       	sub	r24, r25
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	b9 01       	movw	r22, r18
     348:	02 c0       	rjmp	.+4      	; 0x34e <pinMode+0x2bc>
     34a:	66 0f       	add	r22, r22
     34c:	77 1f       	adc	r23, r23
     34e:	8a 95       	dec	r24
     350:	e2 f7       	brpl	.-8      	; 0x34a <pinMode+0x2b8>
     352:	cb 01       	movw	r24, r22
     354:	80 95       	com	r24
     356:	84 23       	and	r24, r20
     358:	81 bb       	out	0x11, r24	; 17
     35a:	08 95       	ret
     35c:	6a 32       	cpi	r22, 0x2A	; 42
     35e:	09 f5       	brne	.+66     	; 0x3a2 <pinMode+0x310>
     360:	41 b3       	in	r20, 0x11	; 17
     362:	9d ec       	ldi	r25, 0xCD	; 205
     364:	89 9f       	mul	r24, r25
     366:	91 2d       	mov	r25, r1
     368:	11 24       	eor	r1, r1
     36a:	96 95       	lsr	r25
     36c:	96 95       	lsr	r25
     36e:	96 95       	lsr	r25
     370:	99 0f       	add	r25, r25
     372:	29 2f       	mov	r18, r25
     374:	22 0f       	add	r18, r18
     376:	22 0f       	add	r18, r18
     378:	92 0f       	add	r25, r18
     37a:	89 1b       	sub	r24, r25
     37c:	21 e0       	ldi	r18, 0x01	; 1
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	b9 01       	movw	r22, r18
     382:	02 c0       	rjmp	.+4      	; 0x388 <pinMode+0x2f6>
     384:	66 0f       	add	r22, r22
     386:	77 1f       	adc	r23, r23
     388:	8a 95       	dec	r24
     38a:	e2 f7       	brpl	.-8      	; 0x384 <pinMode+0x2f2>
     38c:	cb 01       	movw	r24, r22
     38e:	96 2f       	mov	r25, r22
     390:	90 95       	com	r25
     392:	94 23       	and	r25, r20
     394:	91 bb       	out	0x11, r25	; 17
     396:	90 b7       	in	r25, 0x30	; 48
     398:	9b 7f       	andi	r25, 0xFB	; 251
     39a:	90 bf       	out	0x30, r25	; 48
     39c:	92 b3       	in	r25, 0x12	; 18
     39e:	89 2b       	or	r24, r25
     3a0:	82 bb       	out	0x12, r24	; 18
     3a2:	08 95       	ret

000003a4 <digitalWrite>:
     3a4:	88 30       	cpi	r24, 0x08	; 8
     3a6:	08 f0       	brcs	.+2      	; 0x3aa <digitalWrite+0x6>
     3a8:	46 c0       	rjmp	.+140    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     3aa:	9d ec       	ldi	r25, 0xCD	; 205
     3ac:	69 9f       	mul	r22, r25
     3ae:	91 2d       	mov	r25, r1
     3b0:	11 24       	eor	r1, r1
     3b2:	96 95       	lsr	r25
     3b4:	96 95       	lsr	r25
     3b6:	96 95       	lsr	r25
     3b8:	99 0f       	add	r25, r25
     3ba:	29 2f       	mov	r18, r25
     3bc:	22 0f       	add	r18, r18
     3be:	22 0f       	add	r18, r18
     3c0:	92 0f       	add	r25, r18
     3c2:	69 1b       	sub	r22, r25
     3c4:	61 30       	cpi	r22, 0x01	; 1
     3c6:	d1 f4       	brne	.+52     	; 0x3fc <digitalWrite+0x58>
     3c8:	4b b3       	in	r20, 0x1b	; 27
     3ca:	9d ec       	ldi	r25, 0xCD	; 205
     3cc:	89 9f       	mul	r24, r25
     3ce:	91 2d       	mov	r25, r1
     3d0:	11 24       	eor	r1, r1
     3d2:	96 95       	lsr	r25
     3d4:	96 95       	lsr	r25
     3d6:	96 95       	lsr	r25
     3d8:	99 0f       	add	r25, r25
     3da:	29 2f       	mov	r18, r25
     3dc:	22 0f       	add	r18, r18
     3de:	22 0f       	add	r18, r18
     3e0:	92 0f       	add	r25, r18
     3e2:	89 1b       	sub	r24, r25
     3e4:	21 e0       	ldi	r18, 0x01	; 1
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	b9 01       	movw	r22, r18
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <digitalWrite+0x4c>
     3ec:	66 0f       	add	r22, r22
     3ee:	77 1f       	adc	r23, r23
     3f0:	8a 95       	dec	r24
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <digitalWrite+0x48>
     3f4:	cb 01       	movw	r24, r22
     3f6:	84 2b       	or	r24, r20
     3f8:	8b bb       	out	0x1b, r24	; 27
     3fa:	08 95       	ret
     3fc:	61 11       	cpse	r22, r1
     3fe:	fb c0       	rjmp	.+502    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     400:	4b b3       	in	r20, 0x1b	; 27
     402:	9d ec       	ldi	r25, 0xCD	; 205
     404:	89 9f       	mul	r24, r25
     406:	91 2d       	mov	r25, r1
     408:	11 24       	eor	r1, r1
     40a:	96 95       	lsr	r25
     40c:	96 95       	lsr	r25
     40e:	96 95       	lsr	r25
     410:	99 0f       	add	r25, r25
     412:	29 2f       	mov	r18, r25
     414:	22 0f       	add	r18, r18
     416:	22 0f       	add	r18, r18
     418:	92 0f       	add	r25, r18
     41a:	89 1b       	sub	r24, r25
     41c:	21 e0       	ldi	r18, 0x01	; 1
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	b9 01       	movw	r22, r18
     422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     424:	66 0f       	add	r22, r22
     426:	77 1f       	adc	r23, r23
     428:	8a 95       	dec	r24
     42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     42c:	cb 01       	movw	r24, r22
     42e:	80 95       	com	r24
     430:	84 23       	and	r24, r20
     432:	8b bb       	out	0x1b, r24	; 27
     434:	08 95       	ret
     436:	96 ef       	ldi	r25, 0xF6	; 246
     438:	98 0f       	add	r25, r24
     43a:	98 30       	cpi	r25, 0x08	; 8
     43c:	08 f0       	brcs	.+2      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     43e:	46 c0       	rjmp	.+140    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
     440:	9d ec       	ldi	r25, 0xCD	; 205
     442:	69 9f       	mul	r22, r25
     444:	91 2d       	mov	r25, r1
     446:	11 24       	eor	r1, r1
     448:	96 95       	lsr	r25
     44a:	96 95       	lsr	r25
     44c:	96 95       	lsr	r25
     44e:	99 0f       	add	r25, r25
     450:	29 2f       	mov	r18, r25
     452:	22 0f       	add	r18, r18
     454:	22 0f       	add	r18, r18
     456:	92 0f       	add	r25, r18
     458:	69 1b       	sub	r22, r25
     45a:	61 30       	cpi	r22, 0x01	; 1
     45c:	d1 f4       	brne	.+52     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     45e:	48 b3       	in	r20, 0x18	; 24
     460:	9d ec       	ldi	r25, 0xCD	; 205
     462:	89 9f       	mul	r24, r25
     464:	91 2d       	mov	r25, r1
     466:	11 24       	eor	r1, r1
     468:	96 95       	lsr	r25
     46a:	96 95       	lsr	r25
     46c:	96 95       	lsr	r25
     46e:	99 0f       	add	r25, r25
     470:	29 2f       	mov	r18, r25
     472:	22 0f       	add	r18, r18
     474:	22 0f       	add	r18, r18
     476:	92 0f       	add	r25, r18
     478:	89 1b       	sub	r24, r25
     47a:	21 e0       	ldi	r18, 0x01	; 1
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	b9 01       	movw	r22, r18
     480:	02 c0       	rjmp	.+4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     482:	66 0f       	add	r22, r22
     484:	77 1f       	adc	r23, r23
     486:	8a 95       	dec	r24
     488:	e2 f7       	brpl	.-8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     48a:	cb 01       	movw	r24, r22
     48c:	84 2b       	or	r24, r20
     48e:	88 bb       	out	0x18, r24	; 24
     490:	08 95       	ret
     492:	61 11       	cpse	r22, r1
     494:	b0 c0       	rjmp	.+352    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     496:	48 b3       	in	r20, 0x18	; 24
     498:	9d ec       	ldi	r25, 0xCD	; 205
     49a:	89 9f       	mul	r24, r25
     49c:	91 2d       	mov	r25, r1
     49e:	11 24       	eor	r1, r1
     4a0:	96 95       	lsr	r25
     4a2:	96 95       	lsr	r25
     4a4:	96 95       	lsr	r25
     4a6:	99 0f       	add	r25, r25
     4a8:	29 2f       	mov	r18, r25
     4aa:	22 0f       	add	r18, r18
     4ac:	22 0f       	add	r18, r18
     4ae:	92 0f       	add	r25, r18
     4b0:	89 1b       	sub	r24, r25
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	b9 01       	movw	r22, r18
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     4ba:	66 0f       	add	r22, r22
     4bc:	77 1f       	adc	r23, r23
     4be:	8a 95       	dec	r24
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
     4c2:	cb 01       	movw	r24, r22
     4c4:	80 95       	com	r24
     4c6:	84 23       	and	r24, r20
     4c8:	88 bb       	out	0x18, r24	; 24
     4ca:	08 95       	ret
     4cc:	9c ee       	ldi	r25, 0xEC	; 236
     4ce:	98 0f       	add	r25, r24
     4d0:	98 30       	cpi	r25, 0x08	; 8
     4d2:	08 f0       	brcs	.+2      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
     4d4:	46 c0       	rjmp	.+140    	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
     4d6:	9d ec       	ldi	r25, 0xCD	; 205
     4d8:	69 9f       	mul	r22, r25
     4da:	91 2d       	mov	r25, r1
     4dc:	11 24       	eor	r1, r1
     4de:	96 95       	lsr	r25
     4e0:	96 95       	lsr	r25
     4e2:	96 95       	lsr	r25
     4e4:	99 0f       	add	r25, r25
     4e6:	29 2f       	mov	r18, r25
     4e8:	22 0f       	add	r18, r18
     4ea:	22 0f       	add	r18, r18
     4ec:	92 0f       	add	r25, r18
     4ee:	69 1b       	sub	r22, r25
     4f0:	61 30       	cpi	r22, 0x01	; 1
     4f2:	d1 f4       	brne	.+52     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
     4f4:	45 b3       	in	r20, 0x15	; 21
     4f6:	9d ec       	ldi	r25, 0xCD	; 205
     4f8:	89 9f       	mul	r24, r25
     4fa:	91 2d       	mov	r25, r1
     4fc:	11 24       	eor	r1, r1
     4fe:	96 95       	lsr	r25
     500:	96 95       	lsr	r25
     502:	96 95       	lsr	r25
     504:	99 0f       	add	r25, r25
     506:	29 2f       	mov	r18, r25
     508:	22 0f       	add	r18, r18
     50a:	22 0f       	add	r18, r18
     50c:	92 0f       	add	r25, r18
     50e:	89 1b       	sub	r24, r25
     510:	21 e0       	ldi	r18, 0x01	; 1
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	b9 01       	movw	r22, r18
     516:	02 c0       	rjmp	.+4      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
     518:	66 0f       	add	r22, r22
     51a:	77 1f       	adc	r23, r23
     51c:	8a 95       	dec	r24
     51e:	e2 f7       	brpl	.-8      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
     520:	cb 01       	movw	r24, r22
     522:	84 2b       	or	r24, r20
     524:	85 bb       	out	0x15, r24	; 21
     526:	08 95       	ret
     528:	61 11       	cpse	r22, r1
     52a:	65 c0       	rjmp	.+202    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     52c:	45 b3       	in	r20, 0x15	; 21
     52e:	9d ec       	ldi	r25, 0xCD	; 205
     530:	89 9f       	mul	r24, r25
     532:	91 2d       	mov	r25, r1
     534:	11 24       	eor	r1, r1
     536:	96 95       	lsr	r25
     538:	96 95       	lsr	r25
     53a:	96 95       	lsr	r25
     53c:	99 0f       	add	r25, r25
     53e:	29 2f       	mov	r18, r25
     540:	22 0f       	add	r18, r18
     542:	22 0f       	add	r18, r18
     544:	92 0f       	add	r25, r18
     546:	89 1b       	sub	r24, r25
     548:	21 e0       	ldi	r18, 0x01	; 1
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	b9 01       	movw	r22, r18
     54e:	02 c0       	rjmp	.+4      	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
     550:	66 0f       	add	r22, r22
     552:	77 1f       	adc	r23, r23
     554:	8a 95       	dec	r24
     556:	e2 f7       	brpl	.-8      	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
     558:	cb 01       	movw	r24, r22
     55a:	80 95       	com	r24
     55c:	84 23       	and	r24, r20
     55e:	85 bb       	out	0x15, r24	; 21
     560:	08 95       	ret
     562:	92 ee       	ldi	r25, 0xE2	; 226
     564:	98 0f       	add	r25, r24
     566:	98 30       	cpi	r25, 0x08	; 8
     568:	08 f0       	brcs	.+2      	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
     56a:	45 c0       	rjmp	.+138    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     56c:	9d ec       	ldi	r25, 0xCD	; 205
     56e:	69 9f       	mul	r22, r25
     570:	91 2d       	mov	r25, r1
     572:	11 24       	eor	r1, r1
     574:	96 95       	lsr	r25
     576:	96 95       	lsr	r25
     578:	96 95       	lsr	r25
     57a:	99 0f       	add	r25, r25
     57c:	29 2f       	mov	r18, r25
     57e:	22 0f       	add	r18, r18
     580:	22 0f       	add	r18, r18
     582:	92 0f       	add	r25, r18
     584:	69 1b       	sub	r22, r25
     586:	61 30       	cpi	r22, 0x01	; 1
     588:	d1 f4       	brne	.+52     	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
     58a:	42 b3       	in	r20, 0x12	; 18
     58c:	9d ec       	ldi	r25, 0xCD	; 205
     58e:	89 9f       	mul	r24, r25
     590:	91 2d       	mov	r25, r1
     592:	11 24       	eor	r1, r1
     594:	96 95       	lsr	r25
     596:	96 95       	lsr	r25
     598:	96 95       	lsr	r25
     59a:	99 0f       	add	r25, r25
     59c:	29 2f       	mov	r18, r25
     59e:	22 0f       	add	r18, r18
     5a0:	22 0f       	add	r18, r18
     5a2:	92 0f       	add	r25, r18
     5a4:	89 1b       	sub	r24, r25
     5a6:	21 e0       	ldi	r18, 0x01	; 1
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	b9 01       	movw	r22, r18
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <__EEPROM_REGION_LENGTH__+0x1b2>
     5ae:	66 0f       	add	r22, r22
     5b0:	77 1f       	adc	r23, r23
     5b2:	8a 95       	dec	r24
     5b4:	e2 f7       	brpl	.-8      	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
     5b6:	cb 01       	movw	r24, r22
     5b8:	84 2b       	or	r24, r20
     5ba:	82 bb       	out	0x12, r24	; 18
     5bc:	08 95       	ret
     5be:	61 11       	cpse	r22, r1
     5c0:	1a c0       	rjmp	.+52     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     5c2:	42 b3       	in	r20, 0x12	; 18
     5c4:	9d ec       	ldi	r25, 0xCD	; 205
     5c6:	89 9f       	mul	r24, r25
     5c8:	91 2d       	mov	r25, r1
     5ca:	11 24       	eor	r1, r1
     5cc:	96 95       	lsr	r25
     5ce:	96 95       	lsr	r25
     5d0:	96 95       	lsr	r25
     5d2:	99 0f       	add	r25, r25
     5d4:	29 2f       	mov	r18, r25
     5d6:	22 0f       	add	r18, r18
     5d8:	22 0f       	add	r18, r18
     5da:	92 0f       	add	r25, r18
     5dc:	89 1b       	sub	r24, r25
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	b9 01       	movw	r22, r18
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <__EEPROM_REGION_LENGTH__+0x1ea>
     5e6:	66 0f       	add	r22, r22
     5e8:	77 1f       	adc	r23, r23
     5ea:	8a 95       	dec	r24
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
     5ee:	cb 01       	movw	r24, r22
     5f0:	80 95       	com	r24
     5f2:	84 23       	and	r24, r20
     5f4:	82 bb       	out	0x12, r24	; 18
     5f6:	08 95       	ret

000005f8 <digitalRead>:
     5f8:	88 30       	cpi	r24, 0x08	; 8
     5fa:	c8 f4       	brcc	.+50     	; 0x62e <digitalRead+0x36>
     5fc:	29 b3       	in	r18, 0x19	; 25
     5fe:	9d ec       	ldi	r25, 0xCD	; 205
     600:	89 9f       	mul	r24, r25
     602:	91 2d       	mov	r25, r1
     604:	11 24       	eor	r1, r1
     606:	96 95       	lsr	r25
     608:	96 95       	lsr	r25
     60a:	96 95       	lsr	r25
     60c:	99 0f       	add	r25, r25
     60e:	39 2f       	mov	r19, r25
     610:	33 0f       	add	r19, r19
     612:	33 0f       	add	r19, r19
     614:	93 0f       	add	r25, r19
     616:	89 1b       	sub	r24, r25
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	02 c0       	rjmp	.+4      	; 0x620 <digitalRead+0x28>
     61c:	35 95       	asr	r19
     61e:	27 95       	ror	r18
     620:	8a 95       	dec	r24
     622:	e2 f7       	brpl	.-8      	; 0x61c <digitalRead+0x24>
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	20 fd       	sbrc	r18, 0
     628:	59 c0       	rjmp	.+178    	; 0x6dc <digitalRead+0xe4>
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	08 95       	ret
     62e:	96 ef       	ldi	r25, 0xF6	; 246
     630:	98 0f       	add	r25, r24
     632:	98 30       	cpi	r25, 0x08	; 8
     634:	c8 f4       	brcc	.+50     	; 0x668 <digitalRead+0x70>
     636:	26 b3       	in	r18, 0x16	; 22
     638:	9d ec       	ldi	r25, 0xCD	; 205
     63a:	89 9f       	mul	r24, r25
     63c:	91 2d       	mov	r25, r1
     63e:	11 24       	eor	r1, r1
     640:	96 95       	lsr	r25
     642:	96 95       	lsr	r25
     644:	96 95       	lsr	r25
     646:	99 0f       	add	r25, r25
     648:	39 2f       	mov	r19, r25
     64a:	33 0f       	add	r19, r19
     64c:	33 0f       	add	r19, r19
     64e:	93 0f       	add	r25, r19
     650:	89 1b       	sub	r24, r25
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	02 c0       	rjmp	.+4      	; 0x65a <digitalRead+0x62>
     656:	35 95       	asr	r19
     658:	27 95       	ror	r18
     65a:	8a 95       	dec	r24
     65c:	e2 f7       	brpl	.-8      	; 0x656 <digitalRead+0x5e>
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	20 fd       	sbrc	r18, 0
     662:	3c c0       	rjmp	.+120    	; 0x6dc <digitalRead+0xe4>
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	08 95       	ret
     668:	9c ee       	ldi	r25, 0xEC	; 236
     66a:	98 0f       	add	r25, r24
     66c:	98 30       	cpi	r25, 0x08	; 8
     66e:	c8 f4       	brcc	.+50     	; 0x6a2 <digitalRead+0xaa>
     670:	23 b3       	in	r18, 0x13	; 19
     672:	9d ec       	ldi	r25, 0xCD	; 205
     674:	89 9f       	mul	r24, r25
     676:	91 2d       	mov	r25, r1
     678:	11 24       	eor	r1, r1
     67a:	96 95       	lsr	r25
     67c:	96 95       	lsr	r25
     67e:	96 95       	lsr	r25
     680:	99 0f       	add	r25, r25
     682:	39 2f       	mov	r19, r25
     684:	33 0f       	add	r19, r19
     686:	33 0f       	add	r19, r19
     688:	93 0f       	add	r25, r19
     68a:	89 1b       	sub	r24, r25
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	02 c0       	rjmp	.+4      	; 0x694 <digitalRead+0x9c>
     690:	35 95       	asr	r19
     692:	27 95       	ror	r18
     694:	8a 95       	dec	r24
     696:	e2 f7       	brpl	.-8      	; 0x690 <digitalRead+0x98>
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	20 fd       	sbrc	r18, 0
     69c:	1f c0       	rjmp	.+62     	; 0x6dc <digitalRead+0xe4>
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	08 95       	ret
     6a2:	92 ee       	ldi	r25, 0xE2	; 226
     6a4:	98 0f       	add	r25, r24
     6a6:	98 30       	cpi	r25, 0x08	; 8
     6a8:	c8 f4       	brcc	.+50     	; 0x6dc <digitalRead+0xe4>
     6aa:	20 b3       	in	r18, 0x10	; 16
     6ac:	9d ec       	ldi	r25, 0xCD	; 205
     6ae:	89 9f       	mul	r24, r25
     6b0:	91 2d       	mov	r25, r1
     6b2:	11 24       	eor	r1, r1
     6b4:	96 95       	lsr	r25
     6b6:	96 95       	lsr	r25
     6b8:	96 95       	lsr	r25
     6ba:	99 0f       	add	r25, r25
     6bc:	39 2f       	mov	r19, r25
     6be:	33 0f       	add	r19, r19
     6c0:	33 0f       	add	r19, r19
     6c2:	93 0f       	add	r25, r19
     6c4:	89 1b       	sub	r24, r25
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <digitalRead+0xd6>
     6ca:	35 95       	asr	r19
     6cc:	27 95       	ror	r18
     6ce:	8a 95       	dec	r24
     6d0:	e2 f7       	brpl	.-8      	; 0x6ca <digitalRead+0xd2>
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	20 fd       	sbrc	r18, 0
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <digitalRead+0xe4>
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	08 95       	ret
     6dc:	08 95       	ret

000006de <__vector_1>:
}


ISR(INT0_vect)
{
     6de:	1f 92       	push	r1
     6e0:	0f 92       	push	r0
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	0f 92       	push	r0
     6e6:	11 24       	eor	r1, r1
     6e8:	2f 93       	push	r18
     6ea:	3f 93       	push	r19
     6ec:	4f 93       	push	r20
     6ee:	5f 93       	push	r21
     6f0:	6f 93       	push	r22
     6f2:	7f 93       	push	r23
     6f4:	8f 93       	push	r24
     6f6:	9f 93       	push	r25
     6f8:	af 93       	push	r26
     6fa:	bf 93       	push	r27
     6fc:	ef 93       	push	r30
     6fe:	ff 93       	push	r31
	ISR0();
     700:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <ISR0>
     704:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <ISR0+0x1>
     708:	09 95       	icall
}
     70a:	ff 91       	pop	r31
     70c:	ef 91       	pop	r30
     70e:	bf 91       	pop	r27
     710:	af 91       	pop	r26
     712:	9f 91       	pop	r25
     714:	8f 91       	pop	r24
     716:	7f 91       	pop	r23
     718:	6f 91       	pop	r22
     71a:	5f 91       	pop	r21
     71c:	4f 91       	pop	r20
     71e:	3f 91       	pop	r19
     720:	2f 91       	pop	r18
     722:	0f 90       	pop	r0
     724:	0f be       	out	0x3f, r0	; 63
     726:	0f 90       	pop	r0
     728:	1f 90       	pop	r1
     72a:	18 95       	reti

0000072c <__vector_2>:

ISR(INT1_vect)
{
     72c:	1f 92       	push	r1
     72e:	0f 92       	push	r0
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	0f 92       	push	r0
     734:	11 24       	eor	r1, r1
     736:	2f 93       	push	r18
     738:	3f 93       	push	r19
     73a:	4f 93       	push	r20
     73c:	5f 93       	push	r21
     73e:	6f 93       	push	r22
     740:	7f 93       	push	r23
     742:	8f 93       	push	r24
     744:	9f 93       	push	r25
     746:	af 93       	push	r26
     748:	bf 93       	push	r27
     74a:	ef 93       	push	r30
     74c:	ff 93       	push	r31
	ISR1();
     74e:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <ISR1>
     752:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <ISR1+0x1>
     756:	09 95       	icall
}
     758:	ff 91       	pop	r31
     75a:	ef 91       	pop	r30
     75c:	bf 91       	pop	r27
     75e:	af 91       	pop	r26
     760:	9f 91       	pop	r25
     762:	8f 91       	pop	r24
     764:	7f 91       	pop	r23
     766:	6f 91       	pop	r22
     768:	5f 91       	pop	r21
     76a:	4f 91       	pop	r20
     76c:	3f 91       	pop	r19
     76e:	2f 91       	pop	r18
     770:	0f 90       	pop	r0
     772:	0f be       	out	0x3f, r0	; 63
     774:	0f 90       	pop	r0
     776:	1f 90       	pop	r1
     778:	18 95       	reti

0000077a <__vector_3>:

ISR(INT2_vect)
{
     77a:	1f 92       	push	r1
     77c:	0f 92       	push	r0
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1
     784:	2f 93       	push	r18
     786:	3f 93       	push	r19
     788:	4f 93       	push	r20
     78a:	5f 93       	push	r21
     78c:	6f 93       	push	r22
     78e:	7f 93       	push	r23
     790:	8f 93       	push	r24
     792:	9f 93       	push	r25
     794:	af 93       	push	r26
     796:	bf 93       	push	r27
     798:	ef 93       	push	r30
     79a:	ff 93       	push	r31
	ISR2();
     79c:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
     7a0:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
     7a4:	09 95       	icall
}
     7a6:	ff 91       	pop	r31
     7a8:	ef 91       	pop	r30
     7aa:	bf 91       	pop	r27
     7ac:	af 91       	pop	r26
     7ae:	9f 91       	pop	r25
     7b0:	8f 91       	pop	r24
     7b2:	7f 91       	pop	r23
     7b4:	6f 91       	pop	r22
     7b6:	5f 91       	pop	r21
     7b8:	4f 91       	pop	r20
     7ba:	3f 91       	pop	r19
     7bc:	2f 91       	pop	r18
     7be:	0f 90       	pop	r0
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	0f 90       	pop	r0
     7c4:	1f 90       	pop	r1
     7c6:	18 95       	reti

000007c8 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     7c8:	41 11       	cpse	r20, r1
     7ca:	06 c0       	rjmp	.+12     	; 0x7d8 <prvTestWaitCondition+0x10>
     7cc:	68 23       	and	r22, r24
     7ce:	79 23       	and	r23, r25
     7d0:	67 2b       	or	r22, r23
     7d2:	49 f4       	brne	.+18     	; 0x7e6 <prvTestWaitCondition+0x1e>
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	08 95       	ret
     7d8:	86 23       	and	r24, r22
     7da:	97 23       	and	r25, r23
     7dc:	68 17       	cp	r22, r24
     7de:	79 07       	cpc	r23, r25
     7e0:	21 f0       	breq	.+8      	; 0x7ea <prvTestWaitCondition+0x22>
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	08 95       	ret
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	08 95       	ret
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	08 95       	ret

000007ee <xEventGroupCreate>:
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	8c e0       	ldi	r24, 0x0C	; 12
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 0a 05 	call	0xa14	; 0xa14 <pvPortMalloc>
     7fa:	ec 01       	movw	r28, r24
     7fc:	00 97       	sbiw	r24, 0x00	; 0
     7fe:	31 f0       	breq	.+12     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     800:	fc 01       	movw	r30, r24
     802:	11 92       	st	Z+, r1
     804:	11 92       	st	Z+, r1
     806:	cf 01       	movw	r24, r30
     808:	0e 94 d2 05 	call	0xba4	; 0xba4 <vListInitialise>
     80c:	ce 01       	movw	r24, r28
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	08 95       	ret

00000814 <xEventGroupWaitBits>:
     814:	af 92       	push	r10
     816:	bf 92       	push	r11
     818:	cf 92       	push	r12
     81a:	df 92       	push	r13
     81c:	ef 92       	push	r14
     81e:	ff 92       	push	r15
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	7c 01       	movw	r14, r24
     82a:	5b 01       	movw	r10, r22
     82c:	c4 2e       	mov	r12, r20
     82e:	d2 2e       	mov	r13, r18
     830:	0e 94 36 0a 	call	0x146c	; 0x146c <vTaskSuspendAll>
     834:	f7 01       	movw	r30, r14
     836:	c0 81       	ld	r28, Z
     838:	d1 81       	ldd	r29, Z+1	; 0x01
     83a:	4d 2d       	mov	r20, r13
     83c:	b5 01       	movw	r22, r10
     83e:	ce 01       	movw	r24, r28
     840:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <prvTestWaitCondition>
     844:	88 23       	and	r24, r24
     846:	69 f0       	breq	.+26     	; 0x862 <__stack+0x3>
     848:	cc 20       	and	r12, r12
     84a:	09 f1       	breq	.+66     	; 0x88e <__stack+0x2f>
     84c:	c5 01       	movw	r24, r10
     84e:	80 95       	com	r24
     850:	90 95       	com	r25
     852:	8c 23       	and	r24, r28
     854:	9d 23       	and	r25, r29
     856:	f7 01       	movw	r30, r14
     858:	91 83       	std	Z+1, r25	; 0x01
     85a:	80 83       	st	Z, r24
     85c:	00 e0       	ldi	r16, 0x00	; 0
     85e:	10 e0       	ldi	r17, 0x00	; 0
     860:	18 c0       	rjmp	.+48     	; 0x892 <__stack+0x33>
     862:	01 15       	cp	r16, r1
     864:	11 05       	cpc	r17, r1
     866:	a9 f0       	breq	.+42     	; 0x892 <__stack+0x33>
     868:	c1 10       	cpse	r12, r1
     86a:	03 c0       	rjmp	.+6      	; 0x872 <__stack+0x13>
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	02 c0       	rjmp	.+4      	; 0x876 <__stack+0x17>
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	71 e0       	ldi	r23, 0x01	; 1
     876:	d1 10       	cpse	r13, r1
     878:	74 60       	ori	r23, 0x04	; 4
     87a:	6a 29       	or	r22, r10
     87c:	7b 29       	or	r23, r11
     87e:	a8 01       	movw	r20, r16
     880:	c7 01       	movw	r24, r14
     882:	02 96       	adiw	r24, 0x02	; 2
     884:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <vTaskPlaceOnUnorderedEventList>
     888:	c0 e0       	ldi	r28, 0x00	; 0
     88a:	d0 e0       	ldi	r29, 0x00	; 0
     88c:	02 c0       	rjmp	.+4      	; 0x892 <__stack+0x33>
     88e:	00 e0       	ldi	r16, 0x00	; 0
     890:	10 e0       	ldi	r17, 0x00	; 0
     892:	0e 94 40 0b 	call	0x1680	; 0x1680 <xTaskResumeAll>
     896:	01 2b       	or	r16, r17
     898:	19 f1       	breq	.+70     	; 0x8e0 <__stack+0x81>
     89a:	81 11       	cpse	r24, r1
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__stack+0x43>
     89e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <vPortYield>
     8a2:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <uxTaskResetEventItemValue>
     8a6:	ec 01       	movw	r28, r24
     8a8:	91 fd       	sbrc	r25, 1
     8aa:	19 c0       	rjmp	.+50     	; 0x8de <__stack+0x7f>
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	0f 92       	push	r0
     8b2:	f7 01       	movw	r30, r14
     8b4:	c0 81       	ld	r28, Z
     8b6:	d1 81       	ldd	r29, Z+1	; 0x01
     8b8:	4d 2d       	mov	r20, r13
     8ba:	b5 01       	movw	r22, r10
     8bc:	ce 01       	movw	r24, r28
     8be:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <prvTestWaitCondition>
     8c2:	88 23       	and	r24, r24
     8c4:	51 f0       	breq	.+20     	; 0x8da <__stack+0x7b>
     8c6:	cc 20       	and	r12, r12
     8c8:	41 f0       	breq	.+16     	; 0x8da <__stack+0x7b>
     8ca:	b5 01       	movw	r22, r10
     8cc:	60 95       	com	r22
     8ce:	70 95       	com	r23
     8d0:	6c 23       	and	r22, r28
     8d2:	7d 23       	and	r23, r29
     8d4:	f7 01       	movw	r30, r14
     8d6:	71 83       	std	Z+1, r23	; 0x01
     8d8:	60 83       	st	Z, r22
     8da:	0f 90       	pop	r0
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	dd 27       	eor	r29, r29
     8e0:	ce 01       	movw	r24, r28
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	df 90       	pop	r13
     8f0:	cf 90       	pop	r12
     8f2:	bf 90       	pop	r11
     8f4:	af 90       	pop	r10
     8f6:	08 95       	ret

000008f8 <xEventGroupClearBits>:
     8f8:	fc 01       	movw	r30, r24
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	0f 92       	push	r0
     900:	80 81       	ld	r24, Z
     902:	91 81       	ldd	r25, Z+1	; 0x01
     904:	60 95       	com	r22
     906:	70 95       	com	r23
     908:	68 23       	and	r22, r24
     90a:	79 23       	and	r23, r25
     90c:	71 83       	std	Z+1, r23	; 0x01
     90e:	60 83       	st	Z, r22
     910:	0f 90       	pop	r0
     912:	0f be       	out	0x3f, r0	; 63
     914:	08 95       	ret

00000916 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     916:	cf 92       	push	r12
     918:	df 92       	push	r13
     91a:	ef 92       	push	r14
     91c:	ff 92       	push	r15
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	7c 01       	movw	r14, r24
     928:	8b 01       	movw	r16, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     92a:	ec 01       	movw	r28, r24
     92c:	25 96       	adiw	r28, 0x05	; 5
    vTaskSuspendAll();
     92e:	0e 94 36 0a 	call	0x146c	; 0x146c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     932:	d7 01       	movw	r26, r14
     934:	17 96       	adiw	r26, 0x07	; 7
     936:	ed 91       	ld	r30, X+
     938:	fc 91       	ld	r31, X
     93a:	18 97       	sbiw	r26, 0x08	; 8

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     93c:	8d 91       	ld	r24, X+
     93e:	9c 91       	ld	r25, X
     940:	11 97       	sbiw	r26, 0x01	; 1
     942:	08 2b       	or	r16, r24
     944:	19 2b       	or	r17, r25
     946:	0d 93       	st	X+, r16
     948:	1c 93       	st	X, r17
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     94a:	00 e0       	ldi	r16, 0x00	; 0
     94c:	10 e0       	ldi	r17, 0x00	; 0

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     94e:	2d c0       	rjmp	.+90     	; 0x9aa <xEventGroupSetBits+0x94>
        {
            pxNext = listGET_NEXT( pxListItem );
     950:	c2 80       	ldd	r12, Z+2	; 0x02
     952:	d3 80       	ldd	r13, Z+3	; 0x03
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     954:	80 81       	ld	r24, Z
     956:	91 81       	ldd	r25, Z+1	; 0x01
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     958:	9c 01       	movw	r18, r24
     95a:	33 27       	eor	r19, r19

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     95c:	92 fd       	sbrc	r25, 2
     95e:	09 c0       	rjmp	.+18     	; 0x972 <xEventGroupSetBits+0x5c>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     960:	d7 01       	movw	r26, r14
     962:	4d 91       	ld	r20, X+
     964:	5c 91       	ld	r21, X
     966:	42 23       	and	r20, r18
     968:	53 23       	and	r21, r19
     96a:	45 2b       	or	r20, r21
     96c:	61 f4       	brne	.+24     	; 0x986 <xEventGroupSetBits+0x70>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	0d c0       	rjmp	.+26     	; 0x98c <xEventGroupSetBits+0x76>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     972:	d7 01       	movw	r26, r14
     974:	4d 91       	ld	r20, X+
     976:	5c 91       	ld	r21, X
     978:	42 23       	and	r20, r18
     97a:	53 23       	and	r21, r19
     97c:	24 17       	cp	r18, r20
     97e:	35 07       	cpc	r19, r21
     980:	21 f0       	breq	.+8      	; 0x98a <xEventGroupSetBits+0x74>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     982:	40 e0       	ldi	r20, 0x00	; 0
     984:	03 c0       	rjmp	.+6      	; 0x98c <xEventGroupSetBits+0x76>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     986:	41 e0       	ldi	r20, 0x01	; 1
     988:	01 c0       	rjmp	.+2      	; 0x98c <xEventGroupSetBits+0x76>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     98a:	41 e0       	ldi	r20, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     98c:	44 23       	and	r20, r20
     98e:	59 f0       	breq	.+22     	; 0x9a6 <xEventGroupSetBits+0x90>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     990:	90 ff       	sbrs	r25, 0
     992:	02 c0       	rjmp	.+4      	; 0x998 <xEventGroupSetBits+0x82>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     994:	02 2b       	or	r16, r18
     996:	13 2b       	or	r17, r19
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     998:	d7 01       	movw	r26, r14
     99a:	6d 91       	ld	r22, X+
     99c:	7c 91       	ld	r23, X
     99e:	72 60       	ori	r23, 0x02	; 2
     9a0:	cf 01       	movw	r24, r30
     9a2:	0e 94 af 0c 	call	0x195e	; 0x195e <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     9a6:	ec 2d       	mov	r30, r12
     9a8:	fd 2d       	mov	r31, r13

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     9aa:	ec 17       	cp	r30, r28
     9ac:	fd 07       	cpc	r31, r29
     9ae:	81 f6       	brne	.-96     	; 0x950 <xEventGroupSetBits+0x3a>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     9b0:	00 95       	com	r16
     9b2:	10 95       	com	r17
     9b4:	f7 01       	movw	r30, r14
     9b6:	80 81       	ld	r24, Z
     9b8:	91 81       	ldd	r25, Z+1	; 0x01
     9ba:	08 23       	and	r16, r24
     9bc:	19 23       	and	r17, r25
     9be:	11 83       	std	Z+1, r17	; 0x01
     9c0:	00 83       	st	Z, r16
    }
    ( void ) xTaskResumeAll();
     9c2:	0e 94 40 0b 	call	0x1680	; 0x1680 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
}
     9c6:	d7 01       	movw	r26, r14
     9c8:	8d 91       	ld	r24, X+
     9ca:	9c 91       	ld	r25, X
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	df 90       	pop	r13
     9da:	cf 90       	pop	r12
     9dc:	08 95       	ret

000009de <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     9de:	af e7       	ldi	r26, 0x7F	; 127
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	e3 e8       	ldi	r30, 0x83	; 131
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	11 96       	adiw	r26, 0x01	; 1
     9e8:	fc 93       	st	X, r31
     9ea:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
     9ec:	13 96       	adiw	r26, 0x03	; 3
     9ee:	1c 92       	st	X, r1
     9f0:	1e 92       	st	-X, r1
     9f2:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     9f4:	ab e7       	ldi	r26, 0x7B	; 123
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	8f e1       	ldi	r24, 0x1F	; 31
     9fa:	93 e0       	ldi	r25, 0x03	; 3
     9fc:	13 96       	adiw	r26, 0x03	; 3
     9fe:	9c 93       	st	X, r25
     a00:	8e 93       	st	-X, r24
     a02:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
     a04:	11 96       	adiw	r26, 0x01	; 1
     a06:	1c 92       	st	X, r1
     a08:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     a0a:	93 83       	std	Z+3, r25	; 0x03
     a0c:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     a0e:	b1 83       	std	Z+1, r27	; 0x01
     a10:	a0 83       	st	Z, r26
     a12:	08 95       	ret

00000a14 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     a14:	ef 92       	push	r14
     a16:	ff 92       	push	r15
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     a22:	0e 94 36 0a 	call	0x146c	; 0x146c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     a26:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <xHeapHasBeenInitialised.2121>
     a2a:	81 11       	cpse	r24, r1
     a2c:	05 c0       	rjmp	.+10     	; 0xa38 <pvPortMalloc+0x24>
        {
            prvHeapInit();
     a2e:	0e 94 ef 04 	call	0x9de	; 0x9de <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <xHeapHasBeenInitialised.2121>
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     a38:	20 97       	sbiw	r28, 0x00	; 0
     a3a:	71 f0       	breq	.+28     	; 0xa58 <pvPortMalloc+0x44>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
     a3c:	ce 01       	movw	r24, r28
     a3e:	04 96       	adiw	r24, 0x04	; 4
            xHeapHasBeenInitialised = pdTRUE;
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     a40:	c8 17       	cp	r28, r24
     a42:	d9 07       	cpc	r29, r25
     a44:	38 f4       	brcc	.+14     	; 0xa54 <pvPortMalloc+0x40>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
        {
            xWantedSize += heapSTRUCT_SIZE;

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
     a46:	25 96       	adiw	r28, 0x05	; 5
     a48:	8c 17       	cp	r24, r28
     a4a:	9d 07       	cpc	r25, r29
     a4c:	28 f0       	brcs	.+10     	; 0xa58 <pvPortMalloc+0x44>
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
            }
            else
            {
                xWantedSize = 0;
     a4e:	c0 e0       	ldi	r28, 0x00	; 0
     a50:	d0 e0       	ldi	r29, 0x00	; 0
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <pvPortMalloc+0x44>
            }
        }
        else
        {
            xWantedSize = 0;
     a54:	c0 e0       	ldi	r28, 0x00	; 0
     a56:	d0 e0       	ldi	r29, 0x00	; 0
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     a58:	20 97       	sbiw	r28, 0x00	; 0
     a5a:	09 f4       	brne	.+2      	; 0xa5e <pvPortMalloc+0x4a>
     a5c:	5e c0       	rjmp	.+188    	; 0xb1a <pvPortMalloc+0x106>
     a5e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     a62:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     a66:	2c 17       	cp	r18, r28
     a68:	3d 07       	cpc	r19, r29
     a6a:	08 f4       	brcc	.+2      	; 0xa6e <pvPortMalloc+0x5a>
     a6c:	59 c0       	rjmp	.+178    	; 0xb20 <pvPortMalloc+0x10c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;
     a6e:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <xStart>
     a72:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <xStart+0x1>

        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
     a76:	af e7       	ldi	r26, 0x7F	; 127
     a78:	b0 e0       	ldi	r27, 0x00	; 0
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <pvPortMalloc+0x6c>
            {
                pxPreviousBlock = pxBlock;
     a7c:	df 01       	movw	r26, r30
                pxBlock = pxBlock->pxNextFreeBlock;
     a7e:	fc 01       	movw	r30, r24
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a80:	82 81       	ldd	r24, Z+2	; 0x02
     a82:	93 81       	ldd	r25, Z+3	; 0x03
     a84:	8c 17       	cp	r24, r28
     a86:	9d 07       	cpc	r25, r29
     a88:	20 f4       	brcc	.+8      	; 0xa92 <pvPortMalloc+0x7e>
     a8a:	80 81       	ld	r24, Z
     a8c:	91 81       	ldd	r25, Z+1	; 0x01
     a8e:	00 97       	sbiw	r24, 0x00	; 0
     a90:	a9 f7       	brne	.-22     	; 0xa7c <pvPortMalloc+0x68>
                pxPreviousBlock = pxBlock;
                pxBlock = pxBlock->pxNextFreeBlock;
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	eb 37       	cpi	r30, 0x7B	; 123
     a96:	f8 07       	cpc	r31, r24
     a98:	09 f4       	brne	.+2      	; 0xa9c <pvPortMalloc+0x88>
     a9a:	45 c0       	rjmp	.+138    	; 0xb26 <pvPortMalloc+0x112>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     a9c:	0d 91       	ld	r16, X+
     a9e:	1c 91       	ld	r17, X
     aa0:	11 97       	sbiw	r26, 0x01	; 1
     aa2:	0c 5f       	subi	r16, 0xFC	; 252
     aa4:	1f 4f       	sbci	r17, 0xFF	; 255

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     aa6:	80 81       	ld	r24, Z
     aa8:	91 81       	ldd	r25, Z+1	; 0x01
     aaa:	8d 93       	st	X+, r24
     aac:	9c 93       	st	X, r25

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     aae:	82 81       	ldd	r24, Z+2	; 0x02
     ab0:	93 81       	ldd	r25, Z+3	; 0x03
     ab2:	8c 1b       	sub	r24, r28
     ab4:	9d 0b       	sbc	r25, r29
     ab6:	89 30       	cpi	r24, 0x09	; 9
     ab8:	91 05       	cpc	r25, r1
     aba:	30 f1       	brcs	.+76     	; 0xb08 <pvPortMalloc+0xf4>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     abc:	bf 01       	movw	r22, r30
     abe:	6c 0f       	add	r22, r28
     ac0:	7d 1f       	adc	r23, r29

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     ac2:	db 01       	movw	r26, r22
     ac4:	13 96       	adiw	r26, 0x03	; 3
     ac6:	9c 93       	st	X, r25
     ac8:	8e 93       	st	-X, r24
     aca:	12 97       	sbiw	r26, 0x02	; 2
                    pxBlock->xBlockSize = xWantedSize;
     acc:	d3 83       	std	Z+3, r29	; 0x03
     ace:	c2 83       	std	Z+2, r28	; 0x02

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     ad0:	12 96       	adiw	r26, 0x02	; 2
     ad2:	4d 91       	ld	r20, X+
     ad4:	5c 91       	ld	r21, X
     ad6:	13 97       	sbiw	r26, 0x03	; 3
     ad8:	0f 2e       	mov	r0, r31
     ada:	ff e7       	ldi	r31, 0x7F	; 127
     adc:	ef 2e       	mov	r14, r31
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	ff 2e       	mov	r15, r31
     ae2:	f0 2d       	mov	r31, r0
     ae4:	01 c0       	rjmp	.+2      	; 0xae8 <pvPortMalloc+0xd4>
     ae6:	7d 01       	movw	r14, r26
     ae8:	e7 01       	movw	r28, r14
     aea:	a8 81       	ld	r26, Y
     aec:	b9 81       	ldd	r27, Y+1	; 0x01
     aee:	12 96       	adiw	r26, 0x02	; 2
     af0:	8d 91       	ld	r24, X+
     af2:	9c 91       	ld	r25, X
     af4:	13 97       	sbiw	r26, 0x03	; 3
     af6:	84 17       	cp	r24, r20
     af8:	95 07       	cpc	r25, r21
     afa:	a8 f3       	brcs	.-22     	; 0xae6 <pvPortMalloc+0xd2>
     afc:	eb 01       	movw	r28, r22
     afe:	b9 83       	std	Y+1, r27	; 0x01
     b00:	a8 83       	st	Y, r26
     b02:	d7 01       	movw	r26, r14
     b04:	6d 93       	st	X+, r22
     b06:	7c 93       	st	X, r23
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
     b08:	82 81       	ldd	r24, Z+2	; 0x02
     b0a:	93 81       	ldd	r25, Z+3	; 0x03
     b0c:	28 1b       	sub	r18, r24
     b0e:	39 0b       	sbc	r19, r25
     b10:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     b14:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
     b18:	08 c0       	rjmp	.+16     	; 0xb2a <pvPortMalloc+0x116>

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     b1a:	00 e0       	ldi	r16, 0x00	; 0
     b1c:	10 e0       	ldi	r17, 0x00	; 0
     b1e:	05 c0       	rjmp	.+10     	; 0xb2a <pvPortMalloc+0x116>
     b20:	00 e0       	ldi	r16, 0x00	; 0
     b22:	10 e0       	ldi	r17, 0x00	; 0
     b24:	02 c0       	rjmp	.+4      	; 0xb2a <pvPortMalloc+0x116>
     b26:	00 e0       	ldi	r16, 0x00	; 0
     b28:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     b2a:	0e 94 40 0b 	call	0x1680	; 0x1680 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     b2e:	c8 01       	movw	r24, r16
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	08 95       	ret

00000b3e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     b3e:	0f 93       	push	r16
     b40:	1f 93       	push	r17
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     b46:	00 97       	sbiw	r24, 0x00	; 0
     b48:	41 f1       	breq	.+80     	; 0xb9a <vPortFree+0x5c>
     b4a:	ec 01       	movw	r28, r24
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     b4c:	8c 01       	movw	r16, r24
     b4e:	04 50       	subi	r16, 0x04	; 4
     b50:	11 09       	sbc	r17, r1

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;

        vTaskSuspendAll();
     b52:	0e 94 36 0a 	call	0x146c	; 0x146c <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     b56:	f8 01       	movw	r30, r16
     b58:	42 81       	ldd	r20, Z+2	; 0x02
     b5a:	53 81       	ldd	r21, Z+3	; 0x03
     b5c:	af e7       	ldi	r26, 0x7F	; 127
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	01 c0       	rjmp	.+2      	; 0xb64 <vPortFree+0x26>
     b62:	df 01       	movw	r26, r30
     b64:	ed 91       	ld	r30, X+
     b66:	fc 91       	ld	r31, X
     b68:	11 97       	sbiw	r26, 0x01	; 1
     b6a:	22 81       	ldd	r18, Z+2	; 0x02
     b6c:	33 81       	ldd	r19, Z+3	; 0x03
     b6e:	24 17       	cp	r18, r20
     b70:	35 07       	cpc	r19, r21
     b72:	b8 f3       	brcs	.-18     	; 0xb62 <vPortFree+0x24>
     b74:	24 97       	sbiw	r28, 0x04	; 4
     b76:	f9 83       	std	Y+1, r31	; 0x01
     b78:	e8 83       	st	Y, r30
     b7a:	0d 93       	st	X+, r16
     b7c:	1c 93       	st	X, r17
            xFreeBytesRemaining += pxLink->xBlockSize;
     b7e:	8a 81       	ldd	r24, Y+2	; 0x02
     b80:	9b 81       	ldd	r25, Y+3	; 0x03
     b82:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b86:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     b8a:	82 0f       	add	r24, r18
     b8c:	93 1f       	adc	r25, r19
     b8e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     b92:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
     b96:	0e 94 40 0b 	call	0x1680	; 0x1680 <xTaskResumeAll>
    }
}
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	08 95       	ret

00000ba4 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     ba4:	fc 01       	movw	r30, r24
     ba6:	03 96       	adiw	r24, 0x03	; 3
     ba8:	92 83       	std	Z+2, r25	; 0x02
     baa:	81 83       	std	Z+1, r24	; 0x01
     bac:	2f ef       	ldi	r18, 0xFF	; 255
     bae:	3f ef       	ldi	r19, 0xFF	; 255
     bb0:	34 83       	std	Z+4, r19	; 0x04
     bb2:	23 83       	std	Z+3, r18	; 0x03
     bb4:	96 83       	std	Z+6, r25	; 0x06
     bb6:	85 83       	std	Z+5, r24	; 0x05
     bb8:	90 87       	std	Z+8, r25	; 0x08
     bba:	87 83       	std	Z+7, r24	; 0x07
     bbc:	10 82       	st	Z, r1
     bbe:	08 95       	ret

00000bc0 <vListInitialiseItem>:
     bc0:	fc 01       	movw	r30, r24
     bc2:	11 86       	std	Z+9, r1	; 0x09
     bc4:	10 86       	std	Z+8, r1	; 0x08
     bc6:	08 95       	ret

00000bc8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     bce:	48 81       	ld	r20, Y
     bd0:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     bd2:	4f 3f       	cpi	r20, 0xFF	; 255
     bd4:	2f ef       	ldi	r18, 0xFF	; 255
     bd6:	52 07       	cpc	r21, r18
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     bda:	fc 01       	movw	r30, r24
     bdc:	a7 81       	ldd	r26, Z+7	; 0x07
     bde:	b0 85       	ldd	r27, Z+8	; 0x08
     be0:	0d c0       	rjmp	.+26     	; 0xbfc <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     be2:	dc 01       	movw	r26, r24
     be4:	13 96       	adiw	r26, 0x03	; 3
     be6:	01 c0       	rjmp	.+2      	; 0xbea <vListInsert+0x22>
     be8:	df 01       	movw	r26, r30
     bea:	12 96       	adiw	r26, 0x02	; 2
     bec:	ed 91       	ld	r30, X+
     bee:	fc 91       	ld	r31, X
     bf0:	13 97       	sbiw	r26, 0x03	; 3
     bf2:	20 81       	ld	r18, Z
     bf4:	31 81       	ldd	r19, Z+1	; 0x01
     bf6:	42 17       	cp	r20, r18
     bf8:	53 07       	cpc	r21, r19
     bfa:	b0 f7       	brcc	.-20     	; 0xbe8 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     bfc:	12 96       	adiw	r26, 0x02	; 2
     bfe:	ed 91       	ld	r30, X+
     c00:	fc 91       	ld	r31, X
     c02:	13 97       	sbiw	r26, 0x03	; 3
     c04:	fb 83       	std	Y+3, r31	; 0x03
     c06:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c08:	d5 83       	std	Z+5, r29	; 0x05
     c0a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     c0c:	bd 83       	std	Y+5, r27	; 0x05
     c0e:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     c10:	13 96       	adiw	r26, 0x03	; 3
     c12:	dc 93       	st	X, r29
     c14:	ce 93       	st	-X, r28
     c16:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     c18:	99 87       	std	Y+9, r25	; 0x09
     c1a:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     c1c:	fc 01       	movw	r30, r24
     c1e:	20 81       	ld	r18, Z
     c20:	2f 5f       	subi	r18, 0xFF	; 255
     c22:	20 83       	st	Z, r18
}
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	08 95       	ret

00000c2a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     c30:	a0 85       	ldd	r26, Z+8	; 0x08
     c32:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c34:	c2 81       	ldd	r28, Z+2	; 0x02
     c36:	d3 81       	ldd	r29, Z+3	; 0x03
     c38:	84 81       	ldd	r24, Z+4	; 0x04
     c3a:	95 81       	ldd	r25, Z+5	; 0x05
     c3c:	9d 83       	std	Y+5, r25	; 0x05
     c3e:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c40:	c4 81       	ldd	r28, Z+4	; 0x04
     c42:	d5 81       	ldd	r29, Z+5	; 0x05
     c44:	82 81       	ldd	r24, Z+2	; 0x02
     c46:	93 81       	ldd	r25, Z+3	; 0x03
     c48:	9b 83       	std	Y+3, r25	; 0x03
     c4a:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     c4c:	11 96       	adiw	r26, 0x01	; 1
     c4e:	8d 91       	ld	r24, X+
     c50:	9c 91       	ld	r25, X
     c52:	12 97       	sbiw	r26, 0x02	; 2
     c54:	e8 17       	cp	r30, r24
     c56:	f9 07       	cpc	r31, r25
     c58:	31 f4       	brne	.+12     	; 0xc66 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     c5a:	84 81       	ldd	r24, Z+4	; 0x04
     c5c:	95 81       	ldd	r25, Z+5	; 0x05
     c5e:	12 96       	adiw	r26, 0x02	; 2
     c60:	9c 93       	st	X, r25
     c62:	8e 93       	st	-X, r24
     c64:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     c66:	11 86       	std	Z+9, r1	; 0x09
     c68:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     c6a:	8c 91       	ld	r24, X
     c6c:	81 50       	subi	r24, 0x01	; 1
     c6e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     c70:	8c 91       	ld	r24, X
}
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	08 95       	ret

00000c78 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     c78:	1b bc       	out	0x2b, r1	; 43
     c7a:	8c e7       	ldi	r24, 0x7C	; 124
     c7c:	8a bd       	out	0x2a, r24	; 42
     c7e:	8b e0       	ldi	r24, 0x0B	; 11
     c80:	8e bd       	out	0x2e, r24	; 46
     c82:	89 b7       	in	r24, 0x39	; 57
     c84:	80 61       	ori	r24, 0x10	; 16
     c86:	89 bf       	out	0x39, r24	; 57
     c88:	08 95       	ret

00000c8a <pxPortInitialiseStack>:
     c8a:	31 e1       	ldi	r19, 0x11	; 17
     c8c:	fc 01       	movw	r30, r24
     c8e:	30 83       	st	Z, r19
     c90:	31 97       	sbiw	r30, 0x01	; 1
     c92:	22 e2       	ldi	r18, 0x22	; 34
     c94:	20 83       	st	Z, r18
     c96:	31 97       	sbiw	r30, 0x01	; 1
     c98:	a3 e3       	ldi	r26, 0x33	; 51
     c9a:	a0 83       	st	Z, r26
     c9c:	31 97       	sbiw	r30, 0x01	; 1
     c9e:	60 83       	st	Z, r22
     ca0:	31 97       	sbiw	r30, 0x01	; 1
     ca2:	70 83       	st	Z, r23
     ca4:	31 97       	sbiw	r30, 0x01	; 1
     ca6:	10 82       	st	Z, r1
     ca8:	31 97       	sbiw	r30, 0x01	; 1
     caa:	60 e8       	ldi	r22, 0x80	; 128
     cac:	60 83       	st	Z, r22
     cae:	31 97       	sbiw	r30, 0x01	; 1
     cb0:	10 82       	st	Z, r1
     cb2:	31 97       	sbiw	r30, 0x01	; 1
     cb4:	62 e0       	ldi	r22, 0x02	; 2
     cb6:	60 83       	st	Z, r22
     cb8:	31 97       	sbiw	r30, 0x01	; 1
     cba:	63 e0       	ldi	r22, 0x03	; 3
     cbc:	60 83       	st	Z, r22
     cbe:	31 97       	sbiw	r30, 0x01	; 1
     cc0:	64 e0       	ldi	r22, 0x04	; 4
     cc2:	60 83       	st	Z, r22
     cc4:	31 97       	sbiw	r30, 0x01	; 1
     cc6:	65 e0       	ldi	r22, 0x05	; 5
     cc8:	60 83       	st	Z, r22
     cca:	31 97       	sbiw	r30, 0x01	; 1
     ccc:	66 e0       	ldi	r22, 0x06	; 6
     cce:	60 83       	st	Z, r22
     cd0:	31 97       	sbiw	r30, 0x01	; 1
     cd2:	67 e0       	ldi	r22, 0x07	; 7
     cd4:	60 83       	st	Z, r22
     cd6:	31 97       	sbiw	r30, 0x01	; 1
     cd8:	68 e0       	ldi	r22, 0x08	; 8
     cda:	60 83       	st	Z, r22
     cdc:	31 97       	sbiw	r30, 0x01	; 1
     cde:	69 e0       	ldi	r22, 0x09	; 9
     ce0:	60 83       	st	Z, r22
     ce2:	31 97       	sbiw	r30, 0x01	; 1
     ce4:	60 e1       	ldi	r22, 0x10	; 16
     ce6:	60 83       	st	Z, r22
     ce8:	31 97       	sbiw	r30, 0x01	; 1
     cea:	30 83       	st	Z, r19
     cec:	31 97       	sbiw	r30, 0x01	; 1
     cee:	32 e1       	ldi	r19, 0x12	; 18
     cf0:	30 83       	st	Z, r19
     cf2:	31 97       	sbiw	r30, 0x01	; 1
     cf4:	33 e1       	ldi	r19, 0x13	; 19
     cf6:	30 83       	st	Z, r19
     cf8:	31 97       	sbiw	r30, 0x01	; 1
     cfa:	34 e1       	ldi	r19, 0x14	; 20
     cfc:	30 83       	st	Z, r19
     cfe:	31 97       	sbiw	r30, 0x01	; 1
     d00:	35 e1       	ldi	r19, 0x15	; 21
     d02:	30 83       	st	Z, r19
     d04:	31 97       	sbiw	r30, 0x01	; 1
     d06:	36 e1       	ldi	r19, 0x16	; 22
     d08:	30 83       	st	Z, r19
     d0a:	31 97       	sbiw	r30, 0x01	; 1
     d0c:	37 e1       	ldi	r19, 0x17	; 23
     d0e:	30 83       	st	Z, r19
     d10:	31 97       	sbiw	r30, 0x01	; 1
     d12:	38 e1       	ldi	r19, 0x18	; 24
     d14:	30 83       	st	Z, r19
     d16:	31 97       	sbiw	r30, 0x01	; 1
     d18:	39 e1       	ldi	r19, 0x19	; 25
     d1a:	30 83       	st	Z, r19
     d1c:	31 97       	sbiw	r30, 0x01	; 1
     d1e:	30 e2       	ldi	r19, 0x20	; 32
     d20:	30 83       	st	Z, r19
     d22:	31 97       	sbiw	r30, 0x01	; 1
     d24:	31 e2       	ldi	r19, 0x21	; 33
     d26:	30 83       	st	Z, r19
     d28:	31 97       	sbiw	r30, 0x01	; 1
     d2a:	20 83       	st	Z, r18
     d2c:	31 97       	sbiw	r30, 0x01	; 1
     d2e:	23 e2       	ldi	r18, 0x23	; 35
     d30:	20 83       	st	Z, r18
     d32:	31 97       	sbiw	r30, 0x01	; 1
     d34:	40 83       	st	Z, r20
     d36:	31 97       	sbiw	r30, 0x01	; 1
     d38:	50 83       	st	Z, r21
     d3a:	31 97       	sbiw	r30, 0x01	; 1
     d3c:	26 e2       	ldi	r18, 0x26	; 38
     d3e:	20 83       	st	Z, r18
     d40:	31 97       	sbiw	r30, 0x01	; 1
     d42:	27 e2       	ldi	r18, 0x27	; 39
     d44:	20 83       	st	Z, r18
     d46:	31 97       	sbiw	r30, 0x01	; 1
     d48:	28 e2       	ldi	r18, 0x28	; 40
     d4a:	20 83       	st	Z, r18
     d4c:	31 97       	sbiw	r30, 0x01	; 1
     d4e:	29 e2       	ldi	r18, 0x29	; 41
     d50:	20 83       	st	Z, r18
     d52:	31 97       	sbiw	r30, 0x01	; 1
     d54:	20 e3       	ldi	r18, 0x30	; 48
     d56:	20 83       	st	Z, r18
     d58:	31 97       	sbiw	r30, 0x01	; 1
     d5a:	21 e3       	ldi	r18, 0x31	; 49
     d5c:	20 83       	st	Z, r18
     d5e:	86 97       	sbiw	r24, 0x26	; 38
     d60:	08 95       	ret

00000d62 <xPortStartScheduler>:
     d62:	0e 94 3c 06 	call	0xc78	; 0xc78 <prvSetupTimerInterrupt>
     d66:	a0 91 11 04 	lds	r26, 0x0411	; 0x800411 <pxCurrentTCB>
     d6a:	b0 91 12 04 	lds	r27, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
     d6e:	cd 91       	ld	r28, X+
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	dd 91       	ld	r29, X+
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	ff 91       	pop	r31
     d78:	ef 91       	pop	r30
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	bf 91       	pop	r27
     d80:	af 91       	pop	r26
     d82:	9f 91       	pop	r25
     d84:	8f 91       	pop	r24
     d86:	7f 91       	pop	r23
     d88:	6f 91       	pop	r22
     d8a:	5f 91       	pop	r21
     d8c:	4f 91       	pop	r20
     d8e:	3f 91       	pop	r19
     d90:	2f 91       	pop	r18
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	ff 90       	pop	r15
     d98:	ef 90       	pop	r14
     d9a:	df 90       	pop	r13
     d9c:	cf 90       	pop	r12
     d9e:	bf 90       	pop	r11
     da0:	af 90       	pop	r10
     da2:	9f 90       	pop	r9
     da4:	8f 90       	pop	r8
     da6:	7f 90       	pop	r7
     da8:	6f 90       	pop	r6
     daa:	5f 90       	pop	r5
     dac:	4f 90       	pop	r4
     dae:	3f 90       	pop	r3
     db0:	2f 90       	pop	r2
     db2:	1f 90       	pop	r1
     db4:	0f 90       	pop	r0
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	0f 90       	pop	r0
     dba:	08 95       	ret
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	08 95       	ret

00000dc0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     dc0:	0f 92       	push	r0
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	0f 92       	push	r0
     dc8:	1f 92       	push	r1
     dca:	11 24       	eor	r1, r1
     dcc:	2f 92       	push	r2
     dce:	3f 92       	push	r3
     dd0:	4f 92       	push	r4
     dd2:	5f 92       	push	r5
     dd4:	6f 92       	push	r6
     dd6:	7f 92       	push	r7
     dd8:	8f 92       	push	r8
     dda:	9f 92       	push	r9
     ddc:	af 92       	push	r10
     dde:	bf 92       	push	r11
     de0:	cf 92       	push	r12
     de2:	df 92       	push	r13
     de4:	ef 92       	push	r14
     de6:	ff 92       	push	r15
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	2f 93       	push	r18
     dee:	3f 93       	push	r19
     df0:	4f 93       	push	r20
     df2:	5f 93       	push	r21
     df4:	6f 93       	push	r22
     df6:	7f 93       	push	r23
     df8:	8f 93       	push	r24
     dfa:	9f 93       	push	r25
     dfc:	af 93       	push	r26
     dfe:	bf 93       	push	r27
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	ef 93       	push	r30
     e06:	ff 93       	push	r31
     e08:	a0 91 11 04 	lds	r26, 0x0411	; 0x800411 <pxCurrentTCB>
     e0c:	b0 91 12 04 	lds	r27, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
     e10:	0d b6       	in	r0, 0x3d	; 61
     e12:	0d 92       	st	X+, r0
     e14:	0e b6       	in	r0, 0x3e	; 62
     e16:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     e18:	0e 94 15 0c 	call	0x182a	; 0x182a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     e1c:	a0 91 11 04 	lds	r26, 0x0411	; 0x800411 <pxCurrentTCB>
     e20:	b0 91 12 04 	lds	r27, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
     e24:	cd 91       	ld	r28, X+
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	dd 91       	ld	r29, X+
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	ff 91       	pop	r31
     e2e:	ef 91       	pop	r30
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	bf 91       	pop	r27
     e36:	af 91       	pop	r26
     e38:	9f 91       	pop	r25
     e3a:	8f 91       	pop	r24
     e3c:	7f 91       	pop	r23
     e3e:	6f 91       	pop	r22
     e40:	5f 91       	pop	r21
     e42:	4f 91       	pop	r20
     e44:	3f 91       	pop	r19
     e46:	2f 91       	pop	r18
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	df 90       	pop	r13
     e52:	cf 90       	pop	r12
     e54:	bf 90       	pop	r11
     e56:	af 90       	pop	r10
     e58:	9f 90       	pop	r9
     e5a:	8f 90       	pop	r8
     e5c:	7f 90       	pop	r7
     e5e:	6f 90       	pop	r6
     e60:	5f 90       	pop	r5
     e62:	4f 90       	pop	r4
     e64:	3f 90       	pop	r3
     e66:	2f 90       	pop	r2
     e68:	1f 90       	pop	r1
     e6a:	0f 90       	pop	r0
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	0f 90       	pop	r0

	asm volatile ( "ret" );
     e70:	08 95       	ret

00000e72 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     e72:	0f 92       	push	r0
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	0f 92       	push	r0
     e7a:	1f 92       	push	r1
     e7c:	11 24       	eor	r1, r1
     e7e:	2f 92       	push	r2
     e80:	3f 92       	push	r3
     e82:	4f 92       	push	r4
     e84:	5f 92       	push	r5
     e86:	6f 92       	push	r6
     e88:	7f 92       	push	r7
     e8a:	8f 92       	push	r8
     e8c:	9f 92       	push	r9
     e8e:	af 92       	push	r10
     e90:	bf 92       	push	r11
     e92:	cf 92       	push	r12
     e94:	df 92       	push	r13
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	ef 93       	push	r30
     eb8:	ff 93       	push	r31
     eba:	a0 91 11 04 	lds	r26, 0x0411	; 0x800411 <pxCurrentTCB>
     ebe:	b0 91 12 04 	lds	r27, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
     ec2:	0d b6       	in	r0, 0x3d	; 61
     ec4:	0d 92       	st	X+, r0
     ec6:	0e b6       	in	r0, 0x3e	; 62
     ec8:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     eca:	0e 94 3c 0a 	call	0x1478	; 0x1478 <xTaskIncrementTick>
     ece:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     ed0:	0e 94 15 0c 	call	0x182a	; 0x182a <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     ed4:	a0 91 11 04 	lds	r26, 0x0411	; 0x800411 <pxCurrentTCB>
     ed8:	b0 91 12 04 	lds	r27, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
     edc:	cd 91       	ld	r28, X+
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	dd 91       	ld	r29, X+
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	ff 91       	pop	r31
     ee6:	ef 91       	pop	r30
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	bf 91       	pop	r27
     eee:	af 91       	pop	r26
     ef0:	9f 91       	pop	r25
     ef2:	8f 91       	pop	r24
     ef4:	7f 91       	pop	r23
     ef6:	6f 91       	pop	r22
     ef8:	5f 91       	pop	r21
     efa:	4f 91       	pop	r20
     efc:	3f 91       	pop	r19
     efe:	2f 91       	pop	r18
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	ff 90       	pop	r15
     f06:	ef 90       	pop	r14
     f08:	df 90       	pop	r13
     f0a:	cf 90       	pop	r12
     f0c:	bf 90       	pop	r11
     f0e:	af 90       	pop	r10
     f10:	9f 90       	pop	r9
     f12:	8f 90       	pop	r8
     f14:	7f 90       	pop	r7
     f16:	6f 90       	pop	r6
     f18:	5f 90       	pop	r5
     f1a:	4f 90       	pop	r4
     f1c:	3f 90       	pop	r3
     f1e:	2f 90       	pop	r2
     f20:	1f 90       	pop	r1
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f28:	08 95       	ret

00000f2a <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     f2a:	0e 94 39 07 	call	0xe72	; 0xe72 <vPortYieldFromTick>
		asm volatile ( "reti" );
     f2e:	18 95       	reti

00000f30 <prvResetNextTaskUnblockTime>:
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
     f30:	e0 91 d0 03 	lds	r30, 0x03D0	; 0x8003d0 <pxDelayedTaskList>
     f34:	f0 91 d1 03 	lds	r31, 0x03D1	; 0x8003d1 <pxDelayedTaskList+0x1>
     f38:	80 81       	ld	r24, Z
     f3a:	81 11       	cpse	r24, r1
     f3c:	07 c0       	rjmp	.+14     	; 0xf4c <prvResetNextTaskUnblockTime+0x1c>
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	9f ef       	ldi	r25, 0xFF	; 255
     f42:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <xNextTaskUnblockTime+0x1>
     f46:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <xNextTaskUnblockTime>
     f4a:	08 95       	ret
     f4c:	e0 91 d0 03 	lds	r30, 0x03D0	; 0x8003d0 <pxDelayedTaskList>
     f50:	f0 91 d1 03 	lds	r31, 0x03D1	; 0x8003d1 <pxDelayedTaskList+0x1>
     f54:	05 80       	ldd	r0, Z+5	; 0x05
     f56:	f6 81       	ldd	r31, Z+6	; 0x06
     f58:	e0 2d       	mov	r30, r0
     f5a:	80 81       	ld	r24, Z
     f5c:	91 81       	ldd	r25, Z+1	; 0x01
     f5e:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <xNextTaskUnblockTime+0x1>
     f62:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <xNextTaskUnblockTime>
     f66:	08 95       	ret

00000f68 <prvDeleteTCB>:
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	ec 01       	movw	r28, r24
     f6e:	8f 89       	ldd	r24, Y+23	; 0x17
     f70:	98 8d       	ldd	r25, Y+24	; 0x18
     f72:	0e 94 9f 05 	call	0xb3e	; 0xb3e <vPortFree>
     f76:	ce 01       	movw	r24, r28
     f78:	0e 94 9f 05 	call	0xb3e	; 0xb3e <vPortFree>
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	08 95       	ret

00000f82 <prvInitialiseNewTask>:
     f82:	2f 92       	push	r2
     f84:	3f 92       	push	r3
     f86:	4f 92       	push	r4
     f88:	5f 92       	push	r5
     f8a:	6f 92       	push	r6
     f8c:	7f 92       	push	r7
     f8e:	8f 92       	push	r8
     f90:	9f 92       	push	r9
     f92:	af 92       	push	r10
     f94:	bf 92       	push	r11
     f96:	cf 92       	push	r12
     f98:	df 92       	push	r13
     f9a:	ef 92       	push	r14
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	1c 01       	movw	r2, r24
     faa:	4b 01       	movw	r8, r22
     fac:	29 01       	movw	r4, r18
     fae:	3a 01       	movw	r6, r20
     fb0:	a9 01       	movw	r20, r18
     fb2:	65 ea       	ldi	r22, 0xA5	; 165
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	d5 01       	movw	r26, r10
     fb8:	57 96       	adiw	r26, 0x17	; 23
     fba:	8d 91       	ld	r24, X+
     fbc:	9c 91       	ld	r25, X
     fbe:	58 97       	sbiw	r26, 0x18	; 24
     fc0:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <memset>
     fc4:	f5 01       	movw	r30, r10
     fc6:	87 89       	ldd	r24, Z+23	; 0x17
     fc8:	90 8d       	ldd	r25, Z+24	; 0x18
     fca:	f1 e0       	ldi	r31, 0x01	; 1
     fcc:	4f 1a       	sub	r4, r31
     fce:	51 08       	sbc	r5, r1
     fd0:	48 0e       	add	r4, r24
     fd2:	59 1e       	adc	r5, r25
     fd4:	81 14       	cp	r8, r1
     fd6:	91 04       	cpc	r9, r1
     fd8:	89 f4       	brne	.+34     	; 0xffc <prvInitialiseNewTask+0x7a>
     fda:	17 c0       	rjmp	.+46     	; 0x100a <prvInitialiseNewTask+0x88>
     fdc:	82 2f       	mov	r24, r18
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	f4 01       	movw	r30, r8
     fe2:	e8 0f       	add	r30, r24
     fe4:	f9 1f       	adc	r31, r25
     fe6:	30 81       	ld	r19, Z
     fe8:	d5 01       	movw	r26, r10
     fea:	a8 0f       	add	r26, r24
     fec:	b9 1f       	adc	r27, r25
     fee:	59 96       	adiw	r26, 0x19	; 25
     ff0:	3c 93       	st	X, r19
     ff2:	80 81       	ld	r24, Z
     ff4:	88 23       	and	r24, r24
     ff6:	29 f0       	breq	.+10     	; 0x1002 <prvInitialiseNewTask+0x80>
     ff8:	2f 5f       	subi	r18, 0xFF	; 255
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <prvInitialiseNewTask+0x7c>
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	2a 30       	cpi	r18, 0x0A	; 10
    1000:	68 f3       	brcs	.-38     	; 0xfdc <prvInitialiseNewTask+0x5a>
    1002:	d5 01       	movw	r26, r10
    1004:	92 96       	adiw	r26, 0x22	; 34
    1006:	1c 92       	st	X, r1
    1008:	02 c0       	rjmp	.+4      	; 0x100e <prvInitialiseNewTask+0x8c>
    100a:	f5 01       	movw	r30, r10
    100c:	11 8e       	std	Z+25, r1	; 0x19
    100e:	f4 e0       	ldi	r31, 0x04	; 4
    1010:	fe 15       	cp	r31, r14
    1012:	18 f4       	brcc	.+6      	; 0x101a <prvInitialiseNewTask+0x98>
    1014:	68 94       	set
    1016:	ee 24       	eor	r14, r14
    1018:	e2 f8       	bld	r14, 2
    101a:	d5 01       	movw	r26, r10
    101c:	56 96       	adiw	r26, 0x16	; 22
    101e:	ec 92       	st	X, r14
    1020:	56 97       	sbiw	r26, 0x16	; 22
    1022:	95 96       	adiw	r26, 0x25	; 37
    1024:	ec 92       	st	X, r14
    1026:	95 97       	sbiw	r26, 0x25	; 37
    1028:	96 96       	adiw	r26, 0x26	; 38
    102a:	1c 92       	st	X, r1
    102c:	c5 01       	movw	r24, r10
    102e:	02 96       	adiw	r24, 0x02	; 2
    1030:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <vListInitialiseItem>
    1034:	c5 01       	movw	r24, r10
    1036:	0c 96       	adiw	r24, 0x0c	; 12
    1038:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <vListInitialiseItem>
    103c:	f5 01       	movw	r30, r10
    103e:	b1 86       	std	Z+9, r11	; 0x09
    1040:	a0 86       	std	Z+8, r10	; 0x08
    1042:	85 e0       	ldi	r24, 0x05	; 5
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	8e 19       	sub	r24, r14
    1048:	91 09       	sbc	r25, r1
    104a:	95 87       	std	Z+13, r25	; 0x0d
    104c:	84 87       	std	Z+12, r24	; 0x0c
    104e:	b3 8a       	std	Z+19, r11	; 0x13
    1050:	a2 8a       	std	Z+18, r10	; 0x12
    1052:	84 e0       	ldi	r24, 0x04	; 4
    1054:	b7 96       	adiw	r30, 0x27	; 39
    1056:	df 01       	movw	r26, r30
    1058:	1d 92       	st	X+, r1
    105a:	8a 95       	dec	r24
    105c:	e9 f7       	brne	.-6      	; 0x1058 <prvInitialiseNewTask+0xd6>
    105e:	f5 01       	movw	r30, r10
    1060:	13 a6       	std	Z+43, r1	; 0x2b
    1062:	a8 01       	movw	r20, r16
    1064:	b1 01       	movw	r22, r2
    1066:	c2 01       	movw	r24, r4
    1068:	0e 94 45 06 	call	0xc8a	; 0xc8a <pxPortInitialiseStack>
    106c:	d5 01       	movw	r26, r10
    106e:	8d 93       	st	X+, r24
    1070:	9c 93       	st	X, r25
    1072:	c1 14       	cp	r12, r1
    1074:	d1 04       	cpc	r13, r1
    1076:	19 f0       	breq	.+6      	; 0x107e <prvInitialiseNewTask+0xfc>
    1078:	f6 01       	movw	r30, r12
    107a:	b1 82       	std	Z+1, r11	; 0x01
    107c:	a0 82       	st	Z, r10
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	ef 90       	pop	r14
    1088:	df 90       	pop	r13
    108a:	cf 90       	pop	r12
    108c:	bf 90       	pop	r11
    108e:	af 90       	pop	r10
    1090:	9f 90       	pop	r9
    1092:	8f 90       	pop	r8
    1094:	7f 90       	pop	r7
    1096:	6f 90       	pop	r6
    1098:	5f 90       	pop	r5
    109a:	4f 90       	pop	r4
    109c:	3f 90       	pop	r3
    109e:	2f 90       	pop	r2
    10a0:	08 95       	ret

000010a2 <prvInitialiseTaskLists>:
    10a2:	cf 93       	push	r28
    10a4:	c0 e0       	ldi	r28, 0x00	; 0
    10a6:	10 c0       	rjmp	.+32     	; 0x10c8 <prvInitialiseTaskLists+0x26>
    10a8:	8c 2f       	mov	r24, r28
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	9c 01       	movw	r18, r24
    10ae:	22 0f       	add	r18, r18
    10b0:	33 1f       	adc	r19, r19
    10b2:	22 0f       	add	r18, r18
    10b4:	33 1f       	adc	r19, r19
    10b6:	22 0f       	add	r18, r18
    10b8:	33 1f       	adc	r19, r19
    10ba:	82 0f       	add	r24, r18
    10bc:	93 1f       	adc	r25, r19
    10be:	8c 51       	subi	r24, 0x1C	; 28
    10c0:	9c 4f       	sbci	r25, 0xFC	; 252
    10c2:	0e 94 d2 05 	call	0xba4	; 0xba4 <vListInitialise>
    10c6:	cf 5f       	subi	r28, 0xFF	; 255
    10c8:	c5 30       	cpi	r28, 0x05	; 5
    10ca:	70 f3       	brcs	.-36     	; 0x10a8 <prvInitialiseTaskLists+0x6>
    10cc:	8b ed       	ldi	r24, 0xDB	; 219
    10ce:	93 e0       	ldi	r25, 0x03	; 3
    10d0:	0e 94 d2 05 	call	0xba4	; 0xba4 <vListInitialise>
    10d4:	82 ed       	ldi	r24, 0xD2	; 210
    10d6:	93 e0       	ldi	r25, 0x03	; 3
    10d8:	0e 94 d2 05 	call	0xba4	; 0xba4 <vListInitialise>
    10dc:	85 ec       	ldi	r24, 0xC5	; 197
    10de:	93 e0       	ldi	r25, 0x03	; 3
    10e0:	0e 94 d2 05 	call	0xba4	; 0xba4 <vListInitialise>
    10e4:	8c eb       	ldi	r24, 0xBC	; 188
    10e6:	93 e0       	ldi	r25, 0x03	; 3
    10e8:	0e 94 d2 05 	call	0xba4	; 0xba4 <vListInitialise>
    10ec:	82 eb       	ldi	r24, 0xB2	; 178
    10ee:	93 e0       	ldi	r25, 0x03	; 3
    10f0:	0e 94 d2 05 	call	0xba4	; 0xba4 <vListInitialise>
    10f4:	8b ed       	ldi	r24, 0xDB	; 219
    10f6:	93 e0       	ldi	r25, 0x03	; 3
    10f8:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <pxDelayedTaskList+0x1>
    10fc:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <pxDelayedTaskList>
    1100:	82 ed       	ldi	r24, 0xD2	; 210
    1102:	93 e0       	ldi	r25, 0x03	; 3
    1104:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <pxOverflowDelayedTaskList+0x1>
    1108:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <pxOverflowDelayedTaskList>
    110c:	cf 91       	pop	r28
    110e:	08 95       	ret

00001110 <prvAddNewTaskToReadyList>:
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	ec 01       	movw	r28, r24
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	0f 92       	push	r0
    111c:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <uxCurrentNumberOfTasks>
    1120:	8f 5f       	subi	r24, 0xFF	; 255
    1122:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <uxCurrentNumberOfTasks>
    1126:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <pxCurrentTCB>
    112a:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    112e:	89 2b       	or	r24, r25
    1130:	59 f4       	brne	.+22     	; 0x1148 <prvAddNewTaskToReadyList+0x38>
    1132:	d0 93 12 04 	sts	0x0412, r29	; 0x800412 <pxCurrentTCB+0x1>
    1136:	c0 93 11 04 	sts	0x0411, r28	; 0x800411 <pxCurrentTCB>
    113a:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <uxCurrentNumberOfTasks>
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	99 f4       	brne	.+38     	; 0x1168 <prvAddNewTaskToReadyList+0x58>
    1142:	0e 94 51 08 	call	0x10a2	; 0x10a2 <prvInitialiseTaskLists>
    1146:	10 c0       	rjmp	.+32     	; 0x1168 <prvAddNewTaskToReadyList+0x58>
    1148:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <xSchedulerRunning>
    114c:	81 11       	cpse	r24, r1
    114e:	0c c0       	rjmp	.+24     	; 0x1168 <prvAddNewTaskToReadyList+0x58>
    1150:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <pxCurrentTCB>
    1154:	f0 91 12 04 	lds	r31, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    1158:	96 89       	ldd	r25, Z+22	; 0x16
    115a:	8e 89       	ldd	r24, Y+22	; 0x16
    115c:	89 17       	cp	r24, r25
    115e:	20 f0       	brcs	.+8      	; 0x1168 <prvAddNewTaskToReadyList+0x58>
    1160:	d0 93 12 04 	sts	0x0412, r29	; 0x800412 <pxCurrentTCB+0x1>
    1164:	c0 93 11 04 	sts	0x0411, r28	; 0x800411 <pxCurrentTCB>
    1168:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <uxTaskNumber>
    116c:	8f 5f       	subi	r24, 0xFF	; 255
    116e:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <uxTaskNumber>
    1172:	8b a3       	std	Y+35, r24	; 0x23
    1174:	8e 89       	ldd	r24, Y+22	; 0x16
    1176:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <uxTopReadyPriority>
    117a:	98 17       	cp	r25, r24
    117c:	10 f4       	brcc	.+4      	; 0x1182 <prvAddNewTaskToReadyList+0x72>
    117e:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <uxTopReadyPriority>
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	fc 01       	movw	r30, r24
    1186:	ee 0f       	add	r30, r30
    1188:	ff 1f       	adc	r31, r31
    118a:	ee 0f       	add	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	8e 0f       	add	r24, r30
    1194:	9f 1f       	adc	r25, r31
    1196:	fc 01       	movw	r30, r24
    1198:	ec 51       	subi	r30, 0x1C	; 28
    119a:	fc 4f       	sbci	r31, 0xFC	; 252
    119c:	01 80       	ldd	r0, Z+1	; 0x01
    119e:	f2 81       	ldd	r31, Z+2	; 0x02
    11a0:	e0 2d       	mov	r30, r0
    11a2:	fd 83       	std	Y+5, r31	; 0x05
    11a4:	ec 83       	std	Y+4, r30	; 0x04
    11a6:	84 81       	ldd	r24, Z+4	; 0x04
    11a8:	95 81       	ldd	r25, Z+5	; 0x05
    11aa:	9f 83       	std	Y+7, r25	; 0x07
    11ac:	8e 83       	std	Y+6, r24	; 0x06
    11ae:	a4 81       	ldd	r26, Z+4	; 0x04
    11b0:	b5 81       	ldd	r27, Z+5	; 0x05
    11b2:	ce 01       	movw	r24, r28
    11b4:	02 96       	adiw	r24, 0x02	; 2
    11b6:	13 96       	adiw	r26, 0x03	; 3
    11b8:	9c 93       	st	X, r25
    11ba:	8e 93       	st	-X, r24
    11bc:	12 97       	sbiw	r26, 0x02	; 2
    11be:	95 83       	std	Z+5, r25	; 0x05
    11c0:	84 83       	std	Z+4, r24	; 0x04
    11c2:	ee 89       	ldd	r30, Y+22	; 0x16
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	cf 01       	movw	r24, r30
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	e8 0f       	add	r30, r24
    11d6:	f9 1f       	adc	r31, r25
    11d8:	ec 51       	subi	r30, 0x1C	; 28
    11da:	fc 4f       	sbci	r31, 0xFC	; 252
    11dc:	fb 87       	std	Y+11, r31	; 0x0b
    11de:	ea 87       	std	Y+10, r30	; 0x0a
    11e0:	80 81       	ld	r24, Z
    11e2:	8f 5f       	subi	r24, 0xFF	; 255
    11e4:	80 83       	st	Z, r24
    11e6:	0f 90       	pop	r0
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <xSchedulerRunning>
    11ee:	88 23       	and	r24, r24
    11f0:	51 f0       	breq	.+20     	; 0x1206 <prvAddNewTaskToReadyList+0xf6>
    11f2:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <pxCurrentTCB>
    11f6:	f0 91 12 04 	lds	r31, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    11fa:	96 89       	ldd	r25, Z+22	; 0x16
    11fc:	8e 89       	ldd	r24, Y+22	; 0x16
    11fe:	98 17       	cp	r25, r24
    1200:	10 f4       	brcc	.+4      	; 0x1206 <prvAddNewTaskToReadyList+0xf6>
    1202:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <vPortYield>
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	08 95       	ret

0000120c <prvCheckTasksWaitingTermination>:
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	1c c0       	rjmp	.+56     	; 0x124a <prvCheckTasksWaitingTermination+0x3e>
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	0f 92       	push	r0
    1218:	e0 91 c1 03 	lds	r30, 0x03C1	; 0x8003c1 <xTasksWaitingTermination+0x5>
    121c:	f0 91 c2 03 	lds	r31, 0x03C2	; 0x8003c2 <xTasksWaitingTermination+0x6>
    1220:	c6 81       	ldd	r28, Z+6	; 0x06
    1222:	d7 81       	ldd	r29, Z+7	; 0x07
    1224:	ce 01       	movw	r24, r28
    1226:	02 96       	adiw	r24, 0x02	; 2
    1228:	0e 94 15 06 	call	0xc2a	; 0xc2a <uxListRemove>
    122c:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <uxCurrentNumberOfTasks>
    1230:	81 50       	subi	r24, 0x01	; 1
    1232:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <uxCurrentNumberOfTasks>
    1236:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <uxDeletedTasksWaitingCleanUp>
    123a:	81 50       	subi	r24, 0x01	; 1
    123c:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <uxDeletedTasksWaitingCleanUp>
    1240:	0f 90       	pop	r0
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	ce 01       	movw	r24, r28
    1246:	0e 94 b4 07 	call	0xf68	; 0xf68 <prvDeleteTCB>
    124a:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <uxDeletedTasksWaitingCleanUp>
    124e:	81 11       	cpse	r24, r1
    1250:	e0 cf       	rjmp	.-64     	; 0x1212 <prvCheckTasksWaitingTermination+0x6>
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	08 95       	ret

00001258 <prvIdleTask>:
    1258:	0e 94 06 09 	call	0x120c	; 0x120c <prvCheckTasksWaitingTermination>
    125c:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <pxReadyTasksLists>
    1260:	82 30       	cpi	r24, 0x02	; 2
    1262:	d0 f3       	brcs	.-12     	; 0x1258 <prvIdleTask>
    1264:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <vPortYield>
    1268:	f7 cf       	rjmp	.-18     	; 0x1258 <prvIdleTask>

0000126a <prvAddCurrentTaskToDelayedList>:
    126a:	ff 92       	push	r15
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	ec 01       	movw	r28, r24
    1276:	f6 2e       	mov	r15, r22
    1278:	00 91 af 03 	lds	r16, 0x03AF	; 0x8003af <xTickCount>
    127c:	10 91 b0 03 	lds	r17, 0x03B0	; 0x8003b0 <xTickCount+0x1>
    1280:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <pxCurrentTCB>
    1284:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    1288:	02 96       	adiw	r24, 0x02	; 2
    128a:	0e 94 15 06 	call	0xc2a	; 0xc2a <uxListRemove>
    128e:	cf 3f       	cpi	r28, 0xFF	; 255
    1290:	8f ef       	ldi	r24, 0xFF	; 255
    1292:	d8 07       	cpc	r29, r24
    1294:	b1 f5       	brne	.+108    	; 0x1302 <prvAddCurrentTaskToDelayedList+0x98>
    1296:	ff 20       	and	r15, r15
    1298:	a1 f1       	breq	.+104    	; 0x1302 <prvAddCurrentTaskToDelayedList+0x98>
    129a:	e2 eb       	ldi	r30, 0xB2	; 178
    129c:	f3 e0       	ldi	r31, 0x03	; 3
    129e:	a1 81       	ldd	r26, Z+1	; 0x01
    12a0:	b2 81       	ldd	r27, Z+2	; 0x02
    12a2:	c0 91 11 04 	lds	r28, 0x0411	; 0x800411 <pxCurrentTCB>
    12a6:	d0 91 12 04 	lds	r29, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    12aa:	bd 83       	std	Y+5, r27	; 0x05
    12ac:	ac 83       	std	Y+4, r26	; 0x04
    12ae:	c0 91 11 04 	lds	r28, 0x0411	; 0x800411 <pxCurrentTCB>
    12b2:	d0 91 12 04 	lds	r29, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    12b6:	14 96       	adiw	r26, 0x04	; 4
    12b8:	8d 91       	ld	r24, X+
    12ba:	9c 91       	ld	r25, X
    12bc:	15 97       	sbiw	r26, 0x05	; 5
    12be:	9f 83       	std	Y+7, r25	; 0x07
    12c0:	8e 83       	std	Y+6, r24	; 0x06
    12c2:	14 96       	adiw	r26, 0x04	; 4
    12c4:	cd 91       	ld	r28, X+
    12c6:	dc 91       	ld	r29, X
    12c8:	15 97       	sbiw	r26, 0x05	; 5
    12ca:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <pxCurrentTCB>
    12ce:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    12d2:	02 96       	adiw	r24, 0x02	; 2
    12d4:	9b 83       	std	Y+3, r25	; 0x03
    12d6:	8a 83       	std	Y+2, r24	; 0x02
    12d8:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <pxCurrentTCB>
    12dc:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    12e0:	02 96       	adiw	r24, 0x02	; 2
    12e2:	15 96       	adiw	r26, 0x05	; 5
    12e4:	9c 93       	st	X, r25
    12e6:	8e 93       	st	-X, r24
    12e8:	14 97       	sbiw	r26, 0x04	; 4
    12ea:	a0 91 11 04 	lds	r26, 0x0411	; 0x800411 <pxCurrentTCB>
    12ee:	b0 91 12 04 	lds	r27, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    12f2:	1b 96       	adiw	r26, 0x0b	; 11
    12f4:	fc 93       	st	X, r31
    12f6:	ee 93       	st	-X, r30
    12f8:	1a 97       	sbiw	r26, 0x0a	; 10
    12fa:	80 81       	ld	r24, Z
    12fc:	8f 5f       	subi	r24, 0xFF	; 255
    12fe:	80 83       	st	Z, r24
    1300:	2f c0       	rjmp	.+94     	; 0x1360 <prvAddCurrentTaskToDelayedList+0xf6>
    1302:	c0 0f       	add	r28, r16
    1304:	d1 1f       	adc	r29, r17
    1306:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <pxCurrentTCB>
    130a:	f0 91 12 04 	lds	r31, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    130e:	d3 83       	std	Z+3, r29	; 0x03
    1310:	c2 83       	std	Z+2, r28	; 0x02
    1312:	c0 17       	cp	r28, r16
    1314:	d1 07       	cpc	r29, r17
    1316:	68 f4       	brcc	.+26     	; 0x1332 <prvAddCurrentTaskToDelayedList+0xc8>
    1318:	60 91 11 04 	lds	r22, 0x0411	; 0x800411 <pxCurrentTCB>
    131c:	70 91 12 04 	lds	r23, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    1320:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <pxOverflowDelayedTaskList>
    1324:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <pxOverflowDelayedTaskList+0x1>
    1328:	6e 5f       	subi	r22, 0xFE	; 254
    132a:	7f 4f       	sbci	r23, 0xFF	; 255
    132c:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <vListInsert>
    1330:	17 c0       	rjmp	.+46     	; 0x1360 <prvAddCurrentTaskToDelayedList+0xf6>
    1332:	60 91 11 04 	lds	r22, 0x0411	; 0x800411 <pxCurrentTCB>
    1336:	70 91 12 04 	lds	r23, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    133a:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <pxDelayedTaskList>
    133e:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <pxDelayedTaskList+0x1>
    1342:	6e 5f       	subi	r22, 0xFE	; 254
    1344:	7f 4f       	sbci	r23, 0xFF	; 255
    1346:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <vListInsert>
    134a:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <xNextTaskUnblockTime>
    134e:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <xNextTaskUnblockTime+0x1>
    1352:	c8 17       	cp	r28, r24
    1354:	d9 07       	cpc	r29, r25
    1356:	20 f4       	brcc	.+8      	; 0x1360 <prvAddCurrentTaskToDelayedList+0xf6>
    1358:	d0 93 a7 03 	sts	0x03A7, r29	; 0x8003a7 <xNextTaskUnblockTime+0x1>
    135c:	c0 93 a6 03 	sts	0x03A6, r28	; 0x8003a6 <xNextTaskUnblockTime>
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	1f 91       	pop	r17
    1366:	0f 91       	pop	r16
    1368:	ff 90       	pop	r15
    136a:	08 95       	ret

0000136c <xTaskCreate>:
    136c:	2f 92       	push	r2
    136e:	3f 92       	push	r3
    1370:	4f 92       	push	r4
    1372:	5f 92       	push	r5
    1374:	6f 92       	push	r6
    1376:	7f 92       	push	r7
    1378:	8f 92       	push	r8
    137a:	9f 92       	push	r9
    137c:	af 92       	push	r10
    137e:	bf 92       	push	r11
    1380:	cf 92       	push	r12
    1382:	df 92       	push	r13
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	3c 01       	movw	r6, r24
    1392:	1b 01       	movw	r2, r22
    1394:	5a 01       	movw	r10, r20
    1396:	29 01       	movw	r4, r18
    1398:	ca 01       	movw	r24, r20
    139a:	0e 94 0a 05 	call	0xa14	; 0xa14 <pvPortMalloc>
    139e:	6c 01       	movw	r12, r24
    13a0:	89 2b       	or	r24, r25
    13a2:	71 f0       	breq	.+28     	; 0x13c0 <xTaskCreate+0x54>
    13a4:	8c e2       	ldi	r24, 0x2C	; 44
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 0a 05 	call	0xa14	; 0xa14 <pvPortMalloc>
    13ac:	ec 01       	movw	r28, r24
    13ae:	89 2b       	or	r24, r25
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <xTaskCreate+0x4c>
    13b2:	d8 8e       	std	Y+24, r13	; 0x18
    13b4:	cf 8a       	std	Y+23, r12	; 0x17
    13b6:	06 c0       	rjmp	.+12     	; 0x13c4 <xTaskCreate+0x58>
    13b8:	c6 01       	movw	r24, r12
    13ba:	0e 94 9f 05 	call	0xb3e	; 0xb3e <vPortFree>
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <xTaskCreate+0x58>
    13c0:	c0 e0       	ldi	r28, 0x00	; 0
    13c2:	d0 e0       	ldi	r29, 0x00	; 0
    13c4:	20 97       	sbiw	r28, 0x00	; 0
    13c6:	91 f0       	breq	.+36     	; 0x13ec <xTaskCreate+0x80>
    13c8:	95 01       	movw	r18, r10
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	81 2c       	mov	r8, r1
    13d0:	91 2c       	mov	r9, r1
    13d2:	5e 01       	movw	r10, r28
    13d4:	67 01       	movw	r12, r14
    13d6:	e0 2e       	mov	r14, r16
    13d8:	82 01       	movw	r16, r4
    13da:	b1 01       	movw	r22, r2
    13dc:	c3 01       	movw	r24, r6
    13de:	0e 94 c1 07 	call	0xf82	; 0xf82 <prvInitialiseNewTask>
    13e2:	ce 01       	movw	r24, r28
    13e4:	0e 94 88 08 	call	0x1110	; 0x1110 <prvAddNewTaskToReadyList>
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	01 c0       	rjmp	.+2      	; 0x13ee <xTaskCreate+0x82>
    13ec:	8f ef       	ldi	r24, 0xFF	; 255
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	ff 90       	pop	r15
    13f8:	ef 90       	pop	r14
    13fa:	df 90       	pop	r13
    13fc:	cf 90       	pop	r12
    13fe:	bf 90       	pop	r11
    1400:	af 90       	pop	r10
    1402:	9f 90       	pop	r9
    1404:	8f 90       	pop	r8
    1406:	7f 90       	pop	r7
    1408:	6f 90       	pop	r6
    140a:	5f 90       	pop	r5
    140c:	4f 90       	pop	r4
    140e:	3f 90       	pop	r3
    1410:	2f 90       	pop	r2
    1412:	08 95       	ret

00001414 <vTaskStartScheduler>:
    1414:	ef 92       	push	r14
    1416:	ff 92       	push	r15
    1418:	0f 93       	push	r16
    141a:	0f 2e       	mov	r0, r31
    141c:	f4 ea       	ldi	r31, 0xA4	; 164
    141e:	ef 2e       	mov	r14, r31
    1420:	f3 e0       	ldi	r31, 0x03	; 3
    1422:	ff 2e       	mov	r15, r31
    1424:	f0 2d       	mov	r31, r0
    1426:	00 e0       	ldi	r16, 0x00	; 0
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	48 ec       	ldi	r20, 0xC8	; 200
    142e:	50 e0       	ldi	r21, 0x00	; 0
    1430:	63 e6       	ldi	r22, 0x63	; 99
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	8c e2       	ldi	r24, 0x2C	; 44
    1436:	99 e0       	ldi	r25, 0x09	; 9
    1438:	0e 94 b6 09 	call	0x136c	; 0x136c <xTaskCreate>
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	81 f4       	brne	.+32     	; 0x1460 <vTaskStartScheduler+0x4c>
    1440:	f8 94       	cli
    1442:	8f ef       	ldi	r24, 0xFF	; 255
    1444:	9f ef       	ldi	r25, 0xFF	; 255
    1446:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <xNextTaskUnblockTime+0x1>
    144a:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <xNextTaskUnblockTime>
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <xSchedulerRunning>
    1454:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <xTickCount+0x1>
    1458:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <xTickCount>
    145c:	0e 94 b1 06 	call	0xd62	; 0xd62 <xPortStartScheduler>
    1460:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <uxTopUsedPriority>
    1464:	0f 91       	pop	r16
    1466:	ff 90       	pop	r15
    1468:	ef 90       	pop	r14
    146a:	08 95       	ret

0000146c <vTaskSuspendAll>:
    146c:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <uxSchedulerSuspended>
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <uxSchedulerSuspended>
    1476:	08 95       	ret

00001478 <xTaskIncrementTick>:
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <uxSchedulerSuspended>
    1484:	81 11       	cpse	r24, r1
    1486:	eb c0       	rjmp	.+470    	; 0x165e <xTaskIncrementTick+0x1e6>
    1488:	c0 91 af 03 	lds	r28, 0x03AF	; 0x8003af <xTickCount>
    148c:	d0 91 b0 03 	lds	r29, 0x03B0	; 0x8003b0 <xTickCount+0x1>
    1490:	8e 01       	movw	r16, r28
    1492:	0f 5f       	subi	r16, 0xFF	; 255
    1494:	1f 4f       	sbci	r17, 0xFF	; 255
    1496:	10 93 b0 03 	sts	0x03B0, r17	; 0x8003b0 <xTickCount+0x1>
    149a:	00 93 af 03 	sts	0x03AF, r16	; 0x8003af <xTickCount>
    149e:	01 15       	cp	r16, r1
    14a0:	11 05       	cpc	r17, r1
    14a2:	b9 f4       	brne	.+46     	; 0x14d2 <xTaskIncrementTick+0x5a>
    14a4:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <pxDelayedTaskList>
    14a8:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <pxDelayedTaskList+0x1>
    14ac:	20 91 ce 03 	lds	r18, 0x03CE	; 0x8003ce <pxOverflowDelayedTaskList>
    14b0:	30 91 cf 03 	lds	r19, 0x03CF	; 0x8003cf <pxOverflowDelayedTaskList+0x1>
    14b4:	30 93 d1 03 	sts	0x03D1, r19	; 0x8003d1 <pxDelayedTaskList+0x1>
    14b8:	20 93 d0 03 	sts	0x03D0, r18	; 0x8003d0 <pxDelayedTaskList>
    14bc:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <pxOverflowDelayedTaskList+0x1>
    14c0:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <pxOverflowDelayedTaskList>
    14c4:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <xNumOfOverflows>
    14c8:	8f 5f       	subi	r24, 0xFF	; 255
    14ca:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <xNumOfOverflows>
    14ce:	0e 94 98 07 	call	0xf30	; 0xf30 <prvResetNextTaskUnblockTime>
    14d2:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <xNextTaskUnblockTime>
    14d6:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <xNextTaskUnblockTime+0x1>
    14da:	08 17       	cp	r16, r24
    14dc:	19 07       	cpc	r17, r25
    14de:	20 f4       	brcc	.+8      	; 0x14e8 <xTaskIncrementTick+0x70>
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	b8 c0       	rjmp	.+368    	; 0x1654 <xTaskIncrementTick+0x1dc>
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	01 c0       	rjmp	.+2      	; 0x14ea <xTaskIncrementTick+0x72>
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	e0 91 d0 03 	lds	r30, 0x03D0	; 0x8003d0 <pxDelayedTaskList>
    14ee:	f0 91 d1 03 	lds	r31, 0x03D1	; 0x8003d1 <pxDelayedTaskList+0x1>
    14f2:	90 81       	ld	r25, Z
    14f4:	91 11       	cpse	r25, r1
    14f6:	07 c0       	rjmp	.+14     	; 0x1506 <xTaskIncrementTick+0x8e>
    14f8:	2f ef       	ldi	r18, 0xFF	; 255
    14fa:	3f ef       	ldi	r19, 0xFF	; 255
    14fc:	30 93 a7 03 	sts	0x03A7, r19	; 0x8003a7 <xNextTaskUnblockTime+0x1>
    1500:	20 93 a6 03 	sts	0x03A6, r18	; 0x8003a6 <xNextTaskUnblockTime>
    1504:	a7 c0       	rjmp	.+334    	; 0x1654 <xTaskIncrementTick+0x1dc>
    1506:	e0 91 d0 03 	lds	r30, 0x03D0	; 0x8003d0 <pxDelayedTaskList>
    150a:	f0 91 d1 03 	lds	r31, 0x03D1	; 0x8003d1 <pxDelayedTaskList+0x1>
    150e:	05 80       	ldd	r0, Z+5	; 0x05
    1510:	f6 81       	ldd	r31, Z+6	; 0x06
    1512:	e0 2d       	mov	r30, r0
    1514:	06 80       	ldd	r0, Z+6	; 0x06
    1516:	f7 81       	ldd	r31, Z+7	; 0x07
    1518:	e0 2d       	mov	r30, r0
    151a:	22 81       	ldd	r18, Z+2	; 0x02
    151c:	33 81       	ldd	r19, Z+3	; 0x03
    151e:	02 17       	cp	r16, r18
    1520:	13 07       	cpc	r17, r19
    1522:	28 f4       	brcc	.+10     	; 0x152e <xTaskIncrementTick+0xb6>
    1524:	30 93 a7 03 	sts	0x03A7, r19	; 0x8003a7 <xNextTaskUnblockTime+0x1>
    1528:	20 93 a6 03 	sts	0x03A6, r18	; 0x8003a6 <xNextTaskUnblockTime>
    152c:	93 c0       	rjmp	.+294    	; 0x1654 <xTaskIncrementTick+0x1dc>
    152e:	a2 85       	ldd	r26, Z+10	; 0x0a
    1530:	b3 85       	ldd	r27, Z+11	; 0x0b
    1532:	24 81       	ldd	r18, Z+4	; 0x04
    1534:	35 81       	ldd	r19, Z+5	; 0x05
    1536:	46 81       	ldd	r20, Z+6	; 0x06
    1538:	57 81       	ldd	r21, Z+7	; 0x07
    153a:	e9 01       	movw	r28, r18
    153c:	5d 83       	std	Y+5, r21	; 0x05
    153e:	4c 83       	std	Y+4, r20	; 0x04
    1540:	26 81       	ldd	r18, Z+6	; 0x06
    1542:	37 81       	ldd	r19, Z+7	; 0x07
    1544:	44 81       	ldd	r20, Z+4	; 0x04
    1546:	55 81       	ldd	r21, Z+5	; 0x05
    1548:	e9 01       	movw	r28, r18
    154a:	5b 83       	std	Y+3, r21	; 0x03
    154c:	4a 83       	std	Y+2, r20	; 0x02
    154e:	11 96       	adiw	r26, 0x01	; 1
    1550:	2d 91       	ld	r18, X+
    1552:	3c 91       	ld	r19, X
    1554:	12 97       	sbiw	r26, 0x02	; 2
    1556:	af 01       	movw	r20, r30
    1558:	4e 5f       	subi	r20, 0xFE	; 254
    155a:	5f 4f       	sbci	r21, 0xFF	; 255
    155c:	24 17       	cp	r18, r20
    155e:	35 07       	cpc	r19, r21
    1560:	31 f4       	brne	.+12     	; 0x156e <xTaskIncrementTick+0xf6>
    1562:	26 81       	ldd	r18, Z+6	; 0x06
    1564:	37 81       	ldd	r19, Z+7	; 0x07
    1566:	12 96       	adiw	r26, 0x02	; 2
    1568:	3c 93       	st	X, r19
    156a:	2e 93       	st	-X, r18
    156c:	11 97       	sbiw	r26, 0x01	; 1
    156e:	13 86       	std	Z+11, r1	; 0x0b
    1570:	12 86       	std	Z+10, r1	; 0x0a
    1572:	9c 91       	ld	r25, X
    1574:	91 50       	subi	r25, 0x01	; 1
    1576:	9c 93       	st	X, r25
    1578:	a4 89       	ldd	r26, Z+20	; 0x14
    157a:	b5 89       	ldd	r27, Z+21	; 0x15
    157c:	10 97       	sbiw	r26, 0x00	; 0
    157e:	19 f1       	breq	.+70     	; 0x15c6 <xTaskIncrementTick+0x14e>
    1580:	26 85       	ldd	r18, Z+14	; 0x0e
    1582:	37 85       	ldd	r19, Z+15	; 0x0f
    1584:	60 89       	ldd	r22, Z+16	; 0x10
    1586:	71 89       	ldd	r23, Z+17	; 0x11
    1588:	e9 01       	movw	r28, r18
    158a:	7d 83       	std	Y+5, r23	; 0x05
    158c:	6c 83       	std	Y+4, r22	; 0x04
    158e:	20 89       	ldd	r18, Z+16	; 0x10
    1590:	31 89       	ldd	r19, Z+17	; 0x11
    1592:	66 85       	ldd	r22, Z+14	; 0x0e
    1594:	77 85       	ldd	r23, Z+15	; 0x0f
    1596:	e9 01       	movw	r28, r18
    1598:	7b 83       	std	Y+3, r23	; 0x03
    159a:	6a 83       	std	Y+2, r22	; 0x02
    159c:	11 96       	adiw	r26, 0x01	; 1
    159e:	6d 91       	ld	r22, X+
    15a0:	7c 91       	ld	r23, X
    15a2:	12 97       	sbiw	r26, 0x02	; 2
    15a4:	9f 01       	movw	r18, r30
    15a6:	24 5f       	subi	r18, 0xF4	; 244
    15a8:	3f 4f       	sbci	r19, 0xFF	; 255
    15aa:	62 17       	cp	r22, r18
    15ac:	73 07       	cpc	r23, r19
    15ae:	31 f4       	brne	.+12     	; 0x15bc <xTaskIncrementTick+0x144>
    15b0:	20 89       	ldd	r18, Z+16	; 0x10
    15b2:	31 89       	ldd	r19, Z+17	; 0x11
    15b4:	12 96       	adiw	r26, 0x02	; 2
    15b6:	3c 93       	st	X, r19
    15b8:	2e 93       	st	-X, r18
    15ba:	11 97       	sbiw	r26, 0x01	; 1
    15bc:	15 8a       	std	Z+21, r1	; 0x15
    15be:	14 8a       	std	Z+20, r1	; 0x14
    15c0:	9c 91       	ld	r25, X
    15c2:	91 50       	subi	r25, 0x01	; 1
    15c4:	9c 93       	st	X, r25
    15c6:	26 89       	ldd	r18, Z+22	; 0x16
    15c8:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <uxTopReadyPriority>
    15cc:	92 17       	cp	r25, r18
    15ce:	10 f4       	brcc	.+4      	; 0x15d4 <xTaskIncrementTick+0x15c>
    15d0:	20 93 ae 03 	sts	0x03AE, r18	; 0x8003ae <uxTopReadyPriority>
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	d9 01       	movw	r26, r18
    15d8:	aa 0f       	add	r26, r26
    15da:	bb 1f       	adc	r27, r27
    15dc:	aa 0f       	add	r26, r26
    15de:	bb 1f       	adc	r27, r27
    15e0:	aa 0f       	add	r26, r26
    15e2:	bb 1f       	adc	r27, r27
    15e4:	2a 0f       	add	r18, r26
    15e6:	3b 1f       	adc	r19, r27
    15e8:	d9 01       	movw	r26, r18
    15ea:	ac 51       	subi	r26, 0x1C	; 28
    15ec:	bc 4f       	sbci	r27, 0xFC	; 252
    15ee:	11 96       	adiw	r26, 0x01	; 1
    15f0:	0d 90       	ld	r0, X+
    15f2:	bc 91       	ld	r27, X
    15f4:	a0 2d       	mov	r26, r0
    15f6:	b5 83       	std	Z+5, r27	; 0x05
    15f8:	a4 83       	std	Z+4, r26	; 0x04
    15fa:	14 96       	adiw	r26, 0x04	; 4
    15fc:	2d 91       	ld	r18, X+
    15fe:	3c 91       	ld	r19, X
    1600:	15 97       	sbiw	r26, 0x05	; 5
    1602:	37 83       	std	Z+7, r19	; 0x07
    1604:	26 83       	std	Z+6, r18	; 0x06
    1606:	14 96       	adiw	r26, 0x04	; 4
    1608:	2d 91       	ld	r18, X+
    160a:	3c 91       	ld	r19, X
    160c:	15 97       	sbiw	r26, 0x05	; 5
    160e:	e9 01       	movw	r28, r18
    1610:	5b 83       	std	Y+3, r21	; 0x03
    1612:	4a 83       	std	Y+2, r20	; 0x02
    1614:	15 96       	adiw	r26, 0x05	; 5
    1616:	5c 93       	st	X, r21
    1618:	4e 93       	st	-X, r20
    161a:	14 97       	sbiw	r26, 0x04	; 4
    161c:	a6 89       	ldd	r26, Z+22	; 0x16
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	9d 01       	movw	r18, r26
    1622:	22 0f       	add	r18, r18
    1624:	33 1f       	adc	r19, r19
    1626:	22 0f       	add	r18, r18
    1628:	33 1f       	adc	r19, r19
    162a:	22 0f       	add	r18, r18
    162c:	33 1f       	adc	r19, r19
    162e:	a2 0f       	add	r26, r18
    1630:	b3 1f       	adc	r27, r19
    1632:	ac 51       	subi	r26, 0x1C	; 28
    1634:	bc 4f       	sbci	r27, 0xFC	; 252
    1636:	b3 87       	std	Z+11, r27	; 0x0b
    1638:	a2 87       	std	Z+10, r26	; 0x0a
    163a:	9c 91       	ld	r25, X
    163c:	9f 5f       	subi	r25, 0xFF	; 255
    163e:	9c 93       	st	X, r25
    1640:	26 89       	ldd	r18, Z+22	; 0x16
    1642:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <pxCurrentTCB>
    1646:	f0 91 12 04 	lds	r31, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    164a:	96 89       	ldd	r25, Z+22	; 0x16
    164c:	29 17       	cp	r18, r25
    164e:	08 f0       	brcs	.+2      	; 0x1652 <xTaskIncrementTick+0x1da>
    1650:	49 cf       	rjmp	.-366    	; 0x14e4 <xTaskIncrementTick+0x6c>
    1652:	4b cf       	rjmp	.-362    	; 0x14ea <xTaskIncrementTick+0x72>
    1654:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <xYieldPending>
    1658:	91 11       	cpse	r25, r1
    165a:	0c c0       	rjmp	.+24     	; 0x1674 <xTaskIncrementTick+0x1fc>
    165c:	0c c0       	rjmp	.+24     	; 0x1676 <xTaskIncrementTick+0x1fe>
    165e:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <xPendedTicks>
    1662:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <xPendedTicks+0x1>
    1666:	01 96       	adiw	r24, 0x01	; 1
    1668:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <xPendedTicks+0x1>
    166c:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <xPendedTicks>
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	01 c0       	rjmp	.+2      	; 0x1676 <xTaskIncrementTick+0x1fe>
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	08 95       	ret

00001680 <xTaskResumeAll>:
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	0f 92       	push	r0
    168a:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <uxSchedulerSuspended>
    168e:	81 50       	subi	r24, 0x01	; 1
    1690:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <uxSchedulerSuspended>
    1694:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <uxSchedulerSuspended>
    1698:	81 11       	cpse	r24, r1
    169a:	bf c0       	rjmp	.+382    	; 0x181a <xTaskResumeAll+0x19a>
    169c:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <uxCurrentNumberOfTasks>
    16a0:	81 11       	cpse	r24, r1
    16a2:	96 c0       	rjmp	.+300    	; 0x17d0 <xTaskResumeAll+0x150>
    16a4:	bd c0       	rjmp	.+378    	; 0x1820 <xTaskResumeAll+0x1a0>
    16a6:	e0 91 ca 03 	lds	r30, 0x03CA	; 0x8003ca <xPendingReadyList+0x5>
    16aa:	f0 91 cb 03 	lds	r31, 0x03CB	; 0x8003cb <xPendingReadyList+0x6>
    16ae:	06 80       	ldd	r0, Z+6	; 0x06
    16b0:	f7 81       	ldd	r31, Z+7	; 0x07
    16b2:	e0 2d       	mov	r30, r0
    16b4:	a4 89       	ldd	r26, Z+20	; 0x14
    16b6:	b5 89       	ldd	r27, Z+21	; 0x15
    16b8:	c6 85       	ldd	r28, Z+14	; 0x0e
    16ba:	d7 85       	ldd	r29, Z+15	; 0x0f
    16bc:	80 89       	ldd	r24, Z+16	; 0x10
    16be:	91 89       	ldd	r25, Z+17	; 0x11
    16c0:	9d 83       	std	Y+5, r25	; 0x05
    16c2:	8c 83       	std	Y+4, r24	; 0x04
    16c4:	c0 89       	ldd	r28, Z+16	; 0x10
    16c6:	d1 89       	ldd	r29, Z+17	; 0x11
    16c8:	86 85       	ldd	r24, Z+14	; 0x0e
    16ca:	97 85       	ldd	r25, Z+15	; 0x0f
    16cc:	9b 83       	std	Y+3, r25	; 0x03
    16ce:	8a 83       	std	Y+2, r24	; 0x02
    16d0:	11 96       	adiw	r26, 0x01	; 1
    16d2:	2d 91       	ld	r18, X+
    16d4:	3c 91       	ld	r19, X
    16d6:	12 97       	sbiw	r26, 0x02	; 2
    16d8:	cf 01       	movw	r24, r30
    16da:	0c 96       	adiw	r24, 0x0c	; 12
    16dc:	28 17       	cp	r18, r24
    16de:	39 07       	cpc	r19, r25
    16e0:	31 f4       	brne	.+12     	; 0x16ee <xTaskResumeAll+0x6e>
    16e2:	80 89       	ldd	r24, Z+16	; 0x10
    16e4:	91 89       	ldd	r25, Z+17	; 0x11
    16e6:	12 96       	adiw	r26, 0x02	; 2
    16e8:	9c 93       	st	X, r25
    16ea:	8e 93       	st	-X, r24
    16ec:	11 97       	sbiw	r26, 0x01	; 1
    16ee:	15 8a       	std	Z+21, r1	; 0x15
    16f0:	14 8a       	std	Z+20, r1	; 0x14
    16f2:	8c 91       	ld	r24, X
    16f4:	81 50       	subi	r24, 0x01	; 1
    16f6:	8c 93       	st	X, r24
    16f8:	a2 85       	ldd	r26, Z+10	; 0x0a
    16fa:	b3 85       	ldd	r27, Z+11	; 0x0b
    16fc:	c4 81       	ldd	r28, Z+4	; 0x04
    16fe:	d5 81       	ldd	r29, Z+5	; 0x05
    1700:	86 81       	ldd	r24, Z+6	; 0x06
    1702:	97 81       	ldd	r25, Z+7	; 0x07
    1704:	9d 83       	std	Y+5, r25	; 0x05
    1706:	8c 83       	std	Y+4, r24	; 0x04
    1708:	c6 81       	ldd	r28, Z+6	; 0x06
    170a:	d7 81       	ldd	r29, Z+7	; 0x07
    170c:	84 81       	ldd	r24, Z+4	; 0x04
    170e:	95 81       	ldd	r25, Z+5	; 0x05
    1710:	9b 83       	std	Y+3, r25	; 0x03
    1712:	8a 83       	std	Y+2, r24	; 0x02
    1714:	11 96       	adiw	r26, 0x01	; 1
    1716:	8d 91       	ld	r24, X+
    1718:	9c 91       	ld	r25, X
    171a:	12 97       	sbiw	r26, 0x02	; 2
    171c:	9f 01       	movw	r18, r30
    171e:	2e 5f       	subi	r18, 0xFE	; 254
    1720:	3f 4f       	sbci	r19, 0xFF	; 255
    1722:	82 17       	cp	r24, r18
    1724:	93 07       	cpc	r25, r19
    1726:	31 f4       	brne	.+12     	; 0x1734 <xTaskResumeAll+0xb4>
    1728:	86 81       	ldd	r24, Z+6	; 0x06
    172a:	97 81       	ldd	r25, Z+7	; 0x07
    172c:	12 96       	adiw	r26, 0x02	; 2
    172e:	9c 93       	st	X, r25
    1730:	8e 93       	st	-X, r24
    1732:	11 97       	sbiw	r26, 0x01	; 1
    1734:	13 86       	std	Z+11, r1	; 0x0b
    1736:	12 86       	std	Z+10, r1	; 0x0a
    1738:	8c 91       	ld	r24, X
    173a:	81 50       	subi	r24, 0x01	; 1
    173c:	8c 93       	st	X, r24
    173e:	86 89       	ldd	r24, Z+22	; 0x16
    1740:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <uxTopReadyPriority>
    1744:	98 17       	cp	r25, r24
    1746:	10 f4       	brcc	.+4      	; 0x174c <xTaskResumeAll+0xcc>
    1748:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <uxTopReadyPriority>
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	dc 01       	movw	r26, r24
    1750:	aa 0f       	add	r26, r26
    1752:	bb 1f       	adc	r27, r27
    1754:	aa 0f       	add	r26, r26
    1756:	bb 1f       	adc	r27, r27
    1758:	aa 0f       	add	r26, r26
    175a:	bb 1f       	adc	r27, r27
    175c:	8a 0f       	add	r24, r26
    175e:	9b 1f       	adc	r25, r27
    1760:	dc 01       	movw	r26, r24
    1762:	ac 51       	subi	r26, 0x1C	; 28
    1764:	bc 4f       	sbci	r27, 0xFC	; 252
    1766:	11 96       	adiw	r26, 0x01	; 1
    1768:	0d 90       	ld	r0, X+
    176a:	bc 91       	ld	r27, X
    176c:	a0 2d       	mov	r26, r0
    176e:	b5 83       	std	Z+5, r27	; 0x05
    1770:	a4 83       	std	Z+4, r26	; 0x04
    1772:	14 96       	adiw	r26, 0x04	; 4
    1774:	8d 91       	ld	r24, X+
    1776:	9c 91       	ld	r25, X
    1778:	15 97       	sbiw	r26, 0x05	; 5
    177a:	97 83       	std	Z+7, r25	; 0x07
    177c:	86 83       	std	Z+6, r24	; 0x06
    177e:	14 96       	adiw	r26, 0x04	; 4
    1780:	cd 91       	ld	r28, X+
    1782:	dc 91       	ld	r29, X
    1784:	15 97       	sbiw	r26, 0x05	; 5
    1786:	3b 83       	std	Y+3, r19	; 0x03
    1788:	2a 83       	std	Y+2, r18	; 0x02
    178a:	15 96       	adiw	r26, 0x05	; 5
    178c:	3c 93       	st	X, r19
    178e:	2e 93       	st	-X, r18
    1790:	14 97       	sbiw	r26, 0x04	; 4
    1792:	a6 89       	ldd	r26, Z+22	; 0x16
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	cd 01       	movw	r24, r26
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	a8 0f       	add	r26, r24
    17a6:	b9 1f       	adc	r27, r25
    17a8:	ac 51       	subi	r26, 0x1C	; 28
    17aa:	bc 4f       	sbci	r27, 0xFC	; 252
    17ac:	b3 87       	std	Z+11, r27	; 0x0b
    17ae:	a2 87       	std	Z+10, r26	; 0x0a
    17b0:	8c 91       	ld	r24, X
    17b2:	8f 5f       	subi	r24, 0xFF	; 255
    17b4:	8c 93       	st	X, r24
    17b6:	96 89       	ldd	r25, Z+22	; 0x16
    17b8:	a0 91 11 04 	lds	r26, 0x0411	; 0x800411 <pxCurrentTCB>
    17bc:	b0 91 12 04 	lds	r27, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    17c0:	56 96       	adiw	r26, 0x16	; 22
    17c2:	8c 91       	ld	r24, X
    17c4:	98 17       	cp	r25, r24
    17c6:	30 f0       	brcs	.+12     	; 0x17d4 <xTaskResumeAll+0x154>
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <xYieldPending>
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <xTaskResumeAll+0x154>
    17d0:	e0 e0       	ldi	r30, 0x00	; 0
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <xPendingReadyList>
    17d8:	81 11       	cpse	r24, r1
    17da:	65 cf       	rjmp	.-310    	; 0x16a6 <xTaskResumeAll+0x26>
    17dc:	ef 2b       	or	r30, r31
    17de:	11 f0       	breq	.+4      	; 0x17e4 <xTaskResumeAll+0x164>
    17e0:	0e 94 98 07 	call	0xf30	; 0xf30 <prvResetNextTaskUnblockTime>
    17e4:	c0 91 ab 03 	lds	r28, 0x03AB	; 0x8003ab <xPendedTicks>
    17e8:	d0 91 ac 03 	lds	r29, 0x03AC	; 0x8003ac <xPendedTicks+0x1>
    17ec:	20 97       	sbiw	r28, 0x00	; 0
    17ee:	69 f0       	breq	.+26     	; 0x180a <xTaskResumeAll+0x18a>
    17f0:	0e 94 3c 0a 	call	0x1478	; 0x1478 <xTaskIncrementTick>
    17f4:	88 23       	and	r24, r24
    17f6:	19 f0       	breq	.+6      	; 0x17fe <xTaskResumeAll+0x17e>
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <xYieldPending>
    17fe:	21 97       	sbiw	r28, 0x01	; 1
    1800:	b9 f7       	brne	.-18     	; 0x17f0 <xTaskResumeAll+0x170>
    1802:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <xPendedTicks+0x1>
    1806:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <xPendedTicks>
    180a:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <xYieldPending>
    180e:	88 23       	and	r24, r24
    1810:	31 f0       	breq	.+12     	; 0x181e <xTaskResumeAll+0x19e>
    1812:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <vPortYield>
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	03 c0       	rjmp	.+6      	; 0x1820 <xTaskResumeAll+0x1a0>
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	01 c0       	rjmp	.+2      	; 0x1820 <xTaskResumeAll+0x1a0>
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	0f 90       	pop	r0
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	08 95       	ret

0000182a <vTaskSwitchContext>:
    182a:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <uxSchedulerSuspended>
    182e:	88 23       	and	r24, r24
    1830:	21 f0       	breq	.+8      	; 0x183a <vTaskSwitchContext+0x10>
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <xYieldPending>
    1838:	08 95       	ret
    183a:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <xYieldPending>
    183e:	20 91 ae 03 	lds	r18, 0x03AE	; 0x8003ae <uxTopReadyPriority>
    1842:	01 c0       	rjmp	.+2      	; 0x1846 <vTaskSwitchContext+0x1c>
    1844:	21 50       	subi	r18, 0x01	; 1
    1846:	82 2f       	mov	r24, r18
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	fc 01       	movw	r30, r24
    184c:	ee 0f       	add	r30, r30
    184e:	ff 1f       	adc	r31, r31
    1850:	ee 0f       	add	r30, r30
    1852:	ff 1f       	adc	r31, r31
    1854:	ee 0f       	add	r30, r30
    1856:	ff 1f       	adc	r31, r31
    1858:	e8 0f       	add	r30, r24
    185a:	f9 1f       	adc	r31, r25
    185c:	ec 51       	subi	r30, 0x1C	; 28
    185e:	fc 4f       	sbci	r31, 0xFC	; 252
    1860:	30 81       	ld	r19, Z
    1862:	33 23       	and	r19, r19
    1864:	79 f3       	breq	.-34     	; 0x1844 <vTaskSwitchContext+0x1a>
    1866:	ac 01       	movw	r20, r24
    1868:	44 0f       	add	r20, r20
    186a:	55 1f       	adc	r21, r21
    186c:	44 0f       	add	r20, r20
    186e:	55 1f       	adc	r21, r21
    1870:	44 0f       	add	r20, r20
    1872:	55 1f       	adc	r21, r21
    1874:	48 0f       	add	r20, r24
    1876:	59 1f       	adc	r21, r25
    1878:	df 01       	movw	r26, r30
    187a:	01 80       	ldd	r0, Z+1	; 0x01
    187c:	f2 81       	ldd	r31, Z+2	; 0x02
    187e:	e0 2d       	mov	r30, r0
    1880:	02 80       	ldd	r0, Z+2	; 0x02
    1882:	f3 81       	ldd	r31, Z+3	; 0x03
    1884:	e0 2d       	mov	r30, r0
    1886:	12 96       	adiw	r26, 0x02	; 2
    1888:	fc 93       	st	X, r31
    188a:	ee 93       	st	-X, r30
    188c:	11 97       	sbiw	r26, 0x01	; 1
    188e:	49 51       	subi	r20, 0x19	; 25
    1890:	5c 4f       	sbci	r21, 0xFC	; 252
    1892:	e4 17       	cp	r30, r20
    1894:	f5 07       	cpc	r31, r21
    1896:	29 f4       	brne	.+10     	; 0x18a2 <vTaskSwitchContext+0x78>
    1898:	42 81       	ldd	r20, Z+2	; 0x02
    189a:	53 81       	ldd	r21, Z+3	; 0x03
    189c:	fd 01       	movw	r30, r26
    189e:	52 83       	std	Z+2, r21	; 0x02
    18a0:	41 83       	std	Z+1, r20	; 0x01
    18a2:	fc 01       	movw	r30, r24
    18a4:	ee 0f       	add	r30, r30
    18a6:	ff 1f       	adc	r31, r31
    18a8:	ee 0f       	add	r30, r30
    18aa:	ff 1f       	adc	r31, r31
    18ac:	ee 0f       	add	r30, r30
    18ae:	ff 1f       	adc	r31, r31
    18b0:	8e 0f       	add	r24, r30
    18b2:	9f 1f       	adc	r25, r31
    18b4:	fc 01       	movw	r30, r24
    18b6:	ec 51       	subi	r30, 0x1C	; 28
    18b8:	fc 4f       	sbci	r31, 0xFC	; 252
    18ba:	01 80       	ldd	r0, Z+1	; 0x01
    18bc:	f2 81       	ldd	r31, Z+2	; 0x02
    18be:	e0 2d       	mov	r30, r0
    18c0:	86 81       	ldd	r24, Z+6	; 0x06
    18c2:	97 81       	ldd	r25, Z+7	; 0x07
    18c4:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <pxCurrentTCB+0x1>
    18c8:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <pxCurrentTCB>
    18cc:	20 93 ae 03 	sts	0x03AE, r18	; 0x8003ae <uxTopReadyPriority>
    18d0:	08 95       	ret

000018d2 <vTaskPlaceOnUnorderedEventList>:
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	fc 01       	movw	r30, r24
    18d8:	a0 91 11 04 	lds	r26, 0x0411	; 0x800411 <pxCurrentTCB>
    18dc:	b0 91 12 04 	lds	r27, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    18e0:	70 68       	ori	r23, 0x80	; 128
    18e2:	1d 96       	adiw	r26, 0x0d	; 13
    18e4:	7c 93       	st	X, r23
    18e6:	6e 93       	st	-X, r22
    18e8:	1c 97       	sbiw	r26, 0x0c	; 12
    18ea:	a1 81       	ldd	r26, Z+1	; 0x01
    18ec:	b2 81       	ldd	r27, Z+2	; 0x02
    18ee:	c0 91 11 04 	lds	r28, 0x0411	; 0x800411 <pxCurrentTCB>
    18f2:	d0 91 12 04 	lds	r29, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    18f6:	bf 87       	std	Y+15, r27	; 0x0f
    18f8:	ae 87       	std	Y+14, r26	; 0x0e
    18fa:	c0 91 11 04 	lds	r28, 0x0411	; 0x800411 <pxCurrentTCB>
    18fe:	d0 91 12 04 	lds	r29, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    1902:	14 96       	adiw	r26, 0x04	; 4
    1904:	8d 91       	ld	r24, X+
    1906:	9c 91       	ld	r25, X
    1908:	15 97       	sbiw	r26, 0x05	; 5
    190a:	99 8b       	std	Y+17, r25	; 0x11
    190c:	88 8b       	std	Y+16, r24	; 0x10
    190e:	14 96       	adiw	r26, 0x04	; 4
    1910:	cd 91       	ld	r28, X+
    1912:	dc 91       	ld	r29, X
    1914:	15 97       	sbiw	r26, 0x05	; 5
    1916:	20 91 11 04 	lds	r18, 0x0411	; 0x800411 <pxCurrentTCB>
    191a:	30 91 12 04 	lds	r19, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    191e:	24 5f       	subi	r18, 0xF4	; 244
    1920:	3f 4f       	sbci	r19, 0xFF	; 255
    1922:	3b 83       	std	Y+3, r19	; 0x03
    1924:	2a 83       	std	Y+2, r18	; 0x02
    1926:	20 91 11 04 	lds	r18, 0x0411	; 0x800411 <pxCurrentTCB>
    192a:	30 91 12 04 	lds	r19, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    192e:	24 5f       	subi	r18, 0xF4	; 244
    1930:	3f 4f       	sbci	r19, 0xFF	; 255
    1932:	15 96       	adiw	r26, 0x05	; 5
    1934:	3c 93       	st	X, r19
    1936:	2e 93       	st	-X, r18
    1938:	14 97       	sbiw	r26, 0x04	; 4
    193a:	a0 91 11 04 	lds	r26, 0x0411	; 0x800411 <pxCurrentTCB>
    193e:	b0 91 12 04 	lds	r27, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    1942:	55 96       	adiw	r26, 0x15	; 21
    1944:	fc 93       	st	X, r31
    1946:	ee 93       	st	-X, r30
    1948:	54 97       	sbiw	r26, 0x14	; 20
    194a:	90 81       	ld	r25, Z
    194c:	9f 5f       	subi	r25, 0xFF	; 255
    194e:	90 83       	st	Z, r25
    1950:	61 e0       	ldi	r22, 0x01	; 1
    1952:	ca 01       	movw	r24, r20
    1954:	0e 94 35 09 	call	0x126a	; 0x126a <prvAddCurrentTaskToDelayedList>
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	08 95       	ret

0000195e <vTaskRemoveFromUnorderedEventList>:
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	dc 01       	movw	r26, r24
    1964:	70 68       	ori	r23, 0x80	; 128
    1966:	11 96       	adiw	r26, 0x01	; 1
    1968:	7c 93       	st	X, r23
    196a:	6e 93       	st	-X, r22
    196c:	16 96       	adiw	r26, 0x06	; 6
    196e:	ed 91       	ld	r30, X+
    1970:	fc 91       	ld	r31, X
    1972:	17 97       	sbiw	r26, 0x07	; 7
    1974:	18 96       	adiw	r26, 0x08	; 8
    1976:	4d 91       	ld	r20, X+
    1978:	5c 91       	ld	r21, X
    197a:	19 97       	sbiw	r26, 0x09	; 9
    197c:	12 96       	adiw	r26, 0x02	; 2
    197e:	8d 91       	ld	r24, X+
    1980:	9c 91       	ld	r25, X
    1982:	13 97       	sbiw	r26, 0x03	; 3
    1984:	14 96       	adiw	r26, 0x04	; 4
    1986:	2d 91       	ld	r18, X+
    1988:	3c 91       	ld	r19, X
    198a:	15 97       	sbiw	r26, 0x05	; 5
    198c:	ec 01       	movw	r28, r24
    198e:	3d 83       	std	Y+5, r19	; 0x05
    1990:	2c 83       	std	Y+4, r18	; 0x04
    1992:	14 96       	adiw	r26, 0x04	; 4
    1994:	8d 91       	ld	r24, X+
    1996:	9c 91       	ld	r25, X
    1998:	15 97       	sbiw	r26, 0x05	; 5
    199a:	12 96       	adiw	r26, 0x02	; 2
    199c:	2d 91       	ld	r18, X+
    199e:	3c 91       	ld	r19, X
    19a0:	13 97       	sbiw	r26, 0x03	; 3
    19a2:	ec 01       	movw	r28, r24
    19a4:	3b 83       	std	Y+3, r19	; 0x03
    19a6:	2a 83       	std	Y+2, r18	; 0x02
    19a8:	ea 01       	movw	r28, r20
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	9a 81       	ldd	r25, Y+2	; 0x02
    19ae:	a8 17       	cp	r26, r24
    19b0:	b9 07       	cpc	r27, r25
    19b2:	31 f4       	brne	.+12     	; 0x19c0 <vTaskRemoveFromUnorderedEventList+0x62>
    19b4:	14 96       	adiw	r26, 0x04	; 4
    19b6:	8d 91       	ld	r24, X+
    19b8:	9c 91       	ld	r25, X
    19ba:	15 97       	sbiw	r26, 0x05	; 5
    19bc:	9a 83       	std	Y+2, r25	; 0x02
    19be:	89 83       	std	Y+1, r24	; 0x01
    19c0:	19 96       	adiw	r26, 0x09	; 9
    19c2:	1c 92       	st	X, r1
    19c4:	1e 92       	st	-X, r1
    19c6:	18 97       	sbiw	r26, 0x08	; 8
    19c8:	da 01       	movw	r26, r20
    19ca:	8c 91       	ld	r24, X
    19cc:	81 50       	subi	r24, 0x01	; 1
    19ce:	8c 93       	st	X, r24
    19d0:	a2 85       	ldd	r26, Z+10	; 0x0a
    19d2:	b3 85       	ldd	r27, Z+11	; 0x0b
    19d4:	c4 81       	ldd	r28, Z+4	; 0x04
    19d6:	d5 81       	ldd	r29, Z+5	; 0x05
    19d8:	86 81       	ldd	r24, Z+6	; 0x06
    19da:	97 81       	ldd	r25, Z+7	; 0x07
    19dc:	9d 83       	std	Y+5, r25	; 0x05
    19de:	8c 83       	std	Y+4, r24	; 0x04
    19e0:	c6 81       	ldd	r28, Z+6	; 0x06
    19e2:	d7 81       	ldd	r29, Z+7	; 0x07
    19e4:	84 81       	ldd	r24, Z+4	; 0x04
    19e6:	95 81       	ldd	r25, Z+5	; 0x05
    19e8:	9b 83       	std	Y+3, r25	; 0x03
    19ea:	8a 83       	std	Y+2, r24	; 0x02
    19ec:	11 96       	adiw	r26, 0x01	; 1
    19ee:	8d 91       	ld	r24, X+
    19f0:	9c 91       	ld	r25, X
    19f2:	12 97       	sbiw	r26, 0x02	; 2
    19f4:	9f 01       	movw	r18, r30
    19f6:	2e 5f       	subi	r18, 0xFE	; 254
    19f8:	3f 4f       	sbci	r19, 0xFF	; 255
    19fa:	82 17       	cp	r24, r18
    19fc:	93 07       	cpc	r25, r19
    19fe:	31 f4       	brne	.+12     	; 0x1a0c <vTaskRemoveFromUnorderedEventList+0xae>
    1a00:	86 81       	ldd	r24, Z+6	; 0x06
    1a02:	97 81       	ldd	r25, Z+7	; 0x07
    1a04:	12 96       	adiw	r26, 0x02	; 2
    1a06:	9c 93       	st	X, r25
    1a08:	8e 93       	st	-X, r24
    1a0a:	11 97       	sbiw	r26, 0x01	; 1
    1a0c:	13 86       	std	Z+11, r1	; 0x0b
    1a0e:	12 86       	std	Z+10, r1	; 0x0a
    1a10:	8c 91       	ld	r24, X
    1a12:	81 50       	subi	r24, 0x01	; 1
    1a14:	8c 93       	st	X, r24
    1a16:	86 89       	ldd	r24, Z+22	; 0x16
    1a18:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <uxTopReadyPriority>
    1a1c:	98 17       	cp	r25, r24
    1a1e:	10 f4       	brcc	.+4      	; 0x1a24 <vTaskRemoveFromUnorderedEventList+0xc6>
    1a20:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <uxTopReadyPriority>
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	dc 01       	movw	r26, r24
    1a28:	aa 0f       	add	r26, r26
    1a2a:	bb 1f       	adc	r27, r27
    1a2c:	aa 0f       	add	r26, r26
    1a2e:	bb 1f       	adc	r27, r27
    1a30:	aa 0f       	add	r26, r26
    1a32:	bb 1f       	adc	r27, r27
    1a34:	8a 0f       	add	r24, r26
    1a36:	9b 1f       	adc	r25, r27
    1a38:	dc 01       	movw	r26, r24
    1a3a:	ac 51       	subi	r26, 0x1C	; 28
    1a3c:	bc 4f       	sbci	r27, 0xFC	; 252
    1a3e:	11 96       	adiw	r26, 0x01	; 1
    1a40:	0d 90       	ld	r0, X+
    1a42:	bc 91       	ld	r27, X
    1a44:	a0 2d       	mov	r26, r0
    1a46:	b5 83       	std	Z+5, r27	; 0x05
    1a48:	a4 83       	std	Z+4, r26	; 0x04
    1a4a:	14 96       	adiw	r26, 0x04	; 4
    1a4c:	8d 91       	ld	r24, X+
    1a4e:	9c 91       	ld	r25, X
    1a50:	15 97       	sbiw	r26, 0x05	; 5
    1a52:	97 83       	std	Z+7, r25	; 0x07
    1a54:	86 83       	std	Z+6, r24	; 0x06
    1a56:	14 96       	adiw	r26, 0x04	; 4
    1a58:	cd 91       	ld	r28, X+
    1a5a:	dc 91       	ld	r29, X
    1a5c:	15 97       	sbiw	r26, 0x05	; 5
    1a5e:	3b 83       	std	Y+3, r19	; 0x03
    1a60:	2a 83       	std	Y+2, r18	; 0x02
    1a62:	15 96       	adiw	r26, 0x05	; 5
    1a64:	3c 93       	st	X, r19
    1a66:	2e 93       	st	-X, r18
    1a68:	14 97       	sbiw	r26, 0x04	; 4
    1a6a:	a6 89       	ldd	r26, Z+22	; 0x16
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	cd 01       	movw	r24, r26
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	a8 0f       	add	r26, r24
    1a7e:	b9 1f       	adc	r27, r25
    1a80:	ac 51       	subi	r26, 0x1C	; 28
    1a82:	bc 4f       	sbci	r27, 0xFC	; 252
    1a84:	b3 87       	std	Z+11, r27	; 0x0b
    1a86:	a2 87       	std	Z+10, r26	; 0x0a
    1a88:	8c 91       	ld	r24, X
    1a8a:	8f 5f       	subi	r24, 0xFF	; 255
    1a8c:	8c 93       	st	X, r24
    1a8e:	96 89       	ldd	r25, Z+22	; 0x16
    1a90:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <pxCurrentTCB>
    1a94:	f0 91 12 04 	lds	r31, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    1a98:	86 89       	ldd	r24, Z+22	; 0x16
    1a9a:	89 17       	cp	r24, r25
    1a9c:	18 f4       	brcc	.+6      	; 0x1aa4 <vTaskRemoveFromUnorderedEventList+0x146>
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <xYieldPending>
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	08 95       	ret

00001aaa <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1aaa:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <pxCurrentTCB>
    1aae:	f0 91 12 04 	lds	r31, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    1ab2:	84 85       	ldd	r24, Z+12	; 0x0c
    1ab4:	95 85       	ldd	r25, Z+13	; 0x0d

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1ab6:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <pxCurrentTCB>
    1aba:	f0 91 12 04 	lds	r31, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    1abe:	a0 91 11 04 	lds	r26, 0x0411	; 0x800411 <pxCurrentTCB>
    1ac2:	b0 91 12 04 	lds	r27, 0x0412	; 0x800412 <pxCurrentTCB+0x1>
    1ac6:	56 96       	adiw	r26, 0x16	; 22
    1ac8:	4c 91       	ld	r20, X
    1aca:	25 e0       	ldi	r18, 0x05	; 5
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	24 1b       	sub	r18, r20
    1ad0:	31 09       	sbc	r19, r1
    1ad2:	35 87       	std	Z+13, r19	; 0x0d
    1ad4:	24 87       	std	Z+12, r18	; 0x0c

    return uxReturn;
}
    1ad6:	08 95       	ret

00001ad8 <read_button>:
	vTaskStartScheduler();
}

void read_button(void* ptr)
{	
	uint8_t x1=0;
    1ad8:	c0 e0       	ldi	r28, 0x00	; 0

	while(1)
	{
	if(digitalRead(A0) == 0 && x1 == 0)
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <digitalRead>
    1ae0:	81 11       	cpse	r24, r1
    1ae2:	14 c0       	rjmp	.+40     	; 0x1b0c <read_button+0x34>
    1ae4:	c1 11       	cpse	r28, r1
    1ae6:	12 c0       	rjmp	.+36     	; 0x1b0c <read_button+0x34>
	{
	xEventGroupSetBits(xb,1<<0);
    1ae8:	61 e0       	ldi	r22, 0x01	; 1
    1aea:	70 e0       	ldi	r23, 0x00	; 0
    1aec:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <xb>
    1af0:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <xb+0x1>
    1af4:	0e 94 8b 04 	call	0x916	; 0x916 <xEventGroupSetBits>
	xEventGroupSetBits(xb,1<<1);
    1af8:	62 e0       	ldi	r22, 0x02	; 2
    1afa:	70 e0       	ldi	r23, 0x00	; 0
    1afc:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <xb>
    1b00:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <xb+0x1>
    1b04:	0e 94 8b 04 	call	0x916	; 0x916 <xEventGroupSetBits>
	x1=1;
    1b08:	c1 e0       	ldi	r28, 0x01	; 1
    1b0a:	e7 cf       	rjmp	.-50     	; 0x1ada <read_button+0x2>
	
	}
	else if(digitalRead(A0) == 1 && x1==1)
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <digitalRead>
    1b12:	88 23       	and	r24, r24
    1b14:	11 f3       	breq	.-60     	; 0x1ada <read_button+0x2>
    1b16:	c1 30       	cpi	r28, 0x01	; 1
    1b18:	01 f7       	brne	.-64     	; 0x1ada <read_button+0x2>
	{
	xEventGroupClearBits(xb,1<<0);	
    1b1a:	61 e0       	ldi	r22, 0x01	; 1
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <xb>
    1b22:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <xb+0x1>
    1b26:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <xEventGroupClearBits>
	x1=0;
    1b2a:	c0 e0       	ldi	r28, 0x00	; 0
    1b2c:	d6 cf       	rjmp	.-84     	; 0x1ada <read_button+0x2>

00001b2e <toggle_led>:
	
}

void toggle_led(void* ptr)
{
	uint8_t x=0;
    1b2e:	c0 e0       	ldi	r28, 0x00	; 0
	while(1)
	{
	
	xEventGroupWaitBits(xb,1<<0,pdTRUE,pdTRUE,portMAX_DELAY);
    1b30:	0f ef       	ldi	r16, 0xFF	; 255
    1b32:	1f ef       	ldi	r17, 0xFF	; 255
    1b34:	21 e0       	ldi	r18, 0x01	; 1
    1b36:	41 e0       	ldi	r20, 0x01	; 1
    1b38:	61 e0       	ldi	r22, 0x01	; 1
    1b3a:	70 e0       	ldi	r23, 0x00	; 0
    1b3c:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <xb>
    1b40:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <xb+0x1>
    1b44:	0e 94 0a 04 	call	0x814	; 0x814 <xEventGroupWaitBits>
	if(x == 0)
    1b48:	c1 11       	cpse	r28, r1
    1b4a:	06 c0       	rjmp	.+12     	; 0x1b58 <toggle_led+0x2a>
	{
		digitalWrite(A1, HIGH);
    1b4c:	63 e3       	ldi	r22, 0x33	; 51
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
		x = 1;	
    1b54:	c1 e0       	ldi	r28, 0x01	; 1
    1b56:	ec cf       	rjmp	.-40     	; 0x1b30 <toggle_led+0x2>
	}
	else
	{
		digitalWrite(A1, LOW);
    1b58:	62 e3       	ldi	r22, 0x32	; 50
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
		x = 0;
    1b60:	c0 e0       	ldi	r28, 0x00	; 0
    1b62:	e6 cf       	rjmp	.-52     	; 0x1b30 <toggle_led+0x2>

00001b64 <main>:
void toggle_led(void* ptr);
TaskHandle_t task2 = NULL;
EventGroupHandle_t xb;

int main(void)
{
    1b64:	ef 92       	push	r14
    1b66:	ff 92       	push	r15
    1b68:	0f 93       	push	r16
	pinMode(A0,INPUT_PULLUP);
    1b6a:	6a e2       	ldi	r22, 0x2A	; 42
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	0e 94 49 00 	call	0x92	; 0x92 <pinMode>
	pinMode(A1,OUTPUT);
    1b72:	69 e2       	ldi	r22, 0x29	; 41
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	0e 94 49 00 	call	0x92	; 0x92 <pinMode>
	xTaskCreate(read_button, "Ahmed", 50, NULL, 1, task1);
    1b7a:	e0 90 15 04 	lds	r14, 0x0415	; 0x800415 <task1>
    1b7e:	f0 90 16 04 	lds	r15, 0x0416	; 0x800416 <task1+0x1>
    1b82:	01 e0       	ldi	r16, 0x01	; 1
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	42 e3       	ldi	r20, 0x32	; 50
    1b8a:	50 e0       	ldi	r21, 0x00	; 0
    1b8c:	68 e6       	ldi	r22, 0x68	; 104
    1b8e:	70 e0       	ldi	r23, 0x00	; 0
    1b90:	8c e6       	ldi	r24, 0x6C	; 108
    1b92:	9d e0       	ldi	r25, 0x0D	; 13
    1b94:	0e 94 b6 09 	call	0x136c	; 0x136c <xTaskCreate>
	xTaskCreate(toggle_led, "Omar", 50, NULL, 2, task2);
    1b98:	e0 90 13 04 	lds	r14, 0x0413	; 0x800413 <task2>
    1b9c:	f0 90 14 04 	lds	r15, 0x0414	; 0x800414 <task2+0x1>
    1ba0:	02 e0       	ldi	r16, 0x02	; 2
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	42 e3       	ldi	r20, 0x32	; 50
    1ba8:	50 e0       	ldi	r21, 0x00	; 0
    1baa:	6e e6       	ldi	r22, 0x6E	; 110
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	87 e9       	ldi	r24, 0x97	; 151
    1bb0:	9d e0       	ldi	r25, 0x0D	; 13
    1bb2:	0e 94 b6 09 	call	0x136c	; 0x136c <xTaskCreate>
	xb= xEventGroupCreate();
    1bb6:	0e 94 f7 03 	call	0x7ee	; 0x7ee <xEventGroupCreate>
    1bba:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <xb+0x1>
    1bbe:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <xb>
	
	vTaskStartScheduler();
    1bc2:	0e 94 0a 0a 	call	0x1414	; 0x1414 <vTaskStartScheduler>
}
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0f 91       	pop	r16
    1bcc:	ff 90       	pop	r15
    1bce:	ef 90       	pop	r14
    1bd0:	08 95       	ret

00001bd2 <memset>:
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	01 c0       	rjmp	.+2      	; 0x1bd8 <memset+0x6>
    1bd6:	6d 93       	st	X+, r22
    1bd8:	41 50       	subi	r20, 0x01	; 1
    1bda:	50 40       	sbci	r21, 0x00	; 0
    1bdc:	e0 f7       	brcc	.-8      	; 0x1bd6 <memset+0x4>
    1bde:	08 95       	ret

00001be0 <_exit>:
    1be0:	f8 94       	cli

00001be2 <__stop_program>:
    1be2:	ff cf       	rjmp	.-2      	; 0x1be2 <__stop_program>
