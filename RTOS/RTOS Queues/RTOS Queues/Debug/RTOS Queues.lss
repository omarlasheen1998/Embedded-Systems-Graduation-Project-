
RTOS Queues.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003162  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  00003162  000031f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003ad  008000d6  008000d6  0000326c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000326c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000032c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d8  00000000  00000000  00003304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005945  00000000  00000000  000037dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011bb  00000000  00000000  00009121  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000036c3  00000000  00000000  0000a2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010b0  00000000  00000000  0000d9a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b12  00000000  00000000  0000ea50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006368  00000000  00000000  00010562  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000518  00000000  00000000  000168ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__vector_1>
       8:	0c 94 96 03 	jmp	0x72c	; 0x72c <__vector_2>
       c:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__vector_13>
      38:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3d       	cpi	r26, 0xD6	; 214
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	24 e0       	ldi	r18, 0x04	; 4
      78:	a6 ed       	ldi	r26, 0xD6	; 214
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 31 06 	call	0xc62	; 0xc62 <main>
      8a:	0c 94 af 18 	jmp	0x315e	; 0x315e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pinMode>:

}

void Interrupts(void){
	
	sei();
      92:	88 30       	cpi	r24, 0x08	; 8
      94:	08 f0       	brcs	.+2      	; 0x98 <pinMode+0x6>
      96:	5e c0       	rjmp	.+188    	; 0x154 <pinMode+0xc2>
      98:	69 32       	cpi	r22, 0x29	; 41
      9a:	d1 f4       	brne	.+52     	; 0xd0 <pinMode+0x3e>
      9c:	4a b3       	in	r20, 0x1a	; 26
      9e:	9d ec       	ldi	r25, 0xCD	; 205
      a0:	89 9f       	mul	r24, r25
      a2:	91 2d       	mov	r25, r1
      a4:	11 24       	eor	r1, r1
      a6:	96 95       	lsr	r25
      a8:	96 95       	lsr	r25
      aa:	96 95       	lsr	r25
      ac:	99 0f       	add	r25, r25
      ae:	29 2f       	mov	r18, r25
      b0:	22 0f       	add	r18, r18
      b2:	22 0f       	add	r18, r18
      b4:	92 0f       	add	r25, r18
      b6:	89 1b       	sub	r24, r25
      b8:	21 e0       	ldi	r18, 0x01	; 1
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	b9 01       	movw	r22, r18
      be:	02 c0       	rjmp	.+4      	; 0xc4 <pinMode+0x32>
      c0:	66 0f       	add	r22, r22
      c2:	77 1f       	adc	r23, r23
      c4:	8a 95       	dec	r24
      c6:	e2 f7       	brpl	.-8      	; 0xc0 <pinMode+0x2e>
      c8:	cb 01       	movw	r24, r22
      ca:	84 2b       	or	r24, r20
      cc:	8a bb       	out	0x1a, r24	; 26
      ce:	08 95       	ret
      d0:	68 32       	cpi	r22, 0x28	; 40
      d2:	d9 f4       	brne	.+54     	; 0x10a <pinMode+0x78>
      d4:	4a b3       	in	r20, 0x1a	; 26
      d6:	9d ec       	ldi	r25, 0xCD	; 205
      d8:	89 9f       	mul	r24, r25
      da:	91 2d       	mov	r25, r1
      dc:	11 24       	eor	r1, r1
      de:	96 95       	lsr	r25
      e0:	96 95       	lsr	r25
      e2:	96 95       	lsr	r25
      e4:	99 0f       	add	r25, r25
      e6:	29 2f       	mov	r18, r25
      e8:	22 0f       	add	r18, r18
      ea:	22 0f       	add	r18, r18
      ec:	92 0f       	add	r25, r18
      ee:	89 1b       	sub	r24, r25
      f0:	21 e0       	ldi	r18, 0x01	; 1
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	b9 01       	movw	r22, r18
      f6:	02 c0       	rjmp	.+4      	; 0xfc <pinMode+0x6a>
      f8:	66 0f       	add	r22, r22
      fa:	77 1f       	adc	r23, r23
      fc:	8a 95       	dec	r24
      fe:	e2 f7       	brpl	.-8      	; 0xf8 <pinMode+0x66>
     100:	cb 01       	movw	r24, r22
     102:	80 95       	com	r24
     104:	84 23       	and	r24, r20
     106:	8a bb       	out	0x1a, r24	; 26
     108:	08 95       	ret
     10a:	6a 32       	cpi	r22, 0x2A	; 42
     10c:	09 f0       	breq	.+2      	; 0x110 <pinMode+0x7e>
     10e:	49 c1       	rjmp	.+658    	; 0x3a2 <pinMode+0x310>
     110:	4a b3       	in	r20, 0x1a	; 26
     112:	9d ec       	ldi	r25, 0xCD	; 205
     114:	89 9f       	mul	r24, r25
     116:	91 2d       	mov	r25, r1
     118:	11 24       	eor	r1, r1
     11a:	96 95       	lsr	r25
     11c:	96 95       	lsr	r25
     11e:	96 95       	lsr	r25
     120:	99 0f       	add	r25, r25
     122:	29 2f       	mov	r18, r25
     124:	22 0f       	add	r18, r18
     126:	22 0f       	add	r18, r18
     128:	92 0f       	add	r25, r18
     12a:	89 1b       	sub	r24, r25
     12c:	21 e0       	ldi	r18, 0x01	; 1
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	b9 01       	movw	r22, r18
     132:	02 c0       	rjmp	.+4      	; 0x138 <pinMode+0xa6>
     134:	66 0f       	add	r22, r22
     136:	77 1f       	adc	r23, r23
     138:	8a 95       	dec	r24
     13a:	e2 f7       	brpl	.-8      	; 0x134 <pinMode+0xa2>
     13c:	cb 01       	movw	r24, r22
     13e:	96 2f       	mov	r25, r22
     140:	90 95       	com	r25
     142:	94 23       	and	r25, r20
     144:	9a bb       	out	0x1a, r25	; 26
     146:	90 b7       	in	r25, 0x30	; 48
     148:	9b 7f       	andi	r25, 0xFB	; 251
     14a:	90 bf       	out	0x30, r25	; 48
     14c:	9b b3       	in	r25, 0x1b	; 27
     14e:	89 2b       	or	r24, r25
     150:	8b bb       	out	0x1b, r24	; 27
     152:	08 95       	ret
     154:	96 ef       	ldi	r25, 0xF6	; 246
     156:	98 0f       	add	r25, r24
     158:	98 30       	cpi	r25, 0x08	; 8
     15a:	08 f0       	brcs	.+2      	; 0x15e <pinMode+0xcc>
     15c:	5e c0       	rjmp	.+188    	; 0x21a <pinMode+0x188>
     15e:	69 32       	cpi	r22, 0x29	; 41
     160:	d1 f4       	brne	.+52     	; 0x196 <pinMode+0x104>
     162:	47 b3       	in	r20, 0x17	; 23
     164:	9d ec       	ldi	r25, 0xCD	; 205
     166:	89 9f       	mul	r24, r25
     168:	91 2d       	mov	r25, r1
     16a:	11 24       	eor	r1, r1
     16c:	96 95       	lsr	r25
     16e:	96 95       	lsr	r25
     170:	96 95       	lsr	r25
     172:	99 0f       	add	r25, r25
     174:	29 2f       	mov	r18, r25
     176:	22 0f       	add	r18, r18
     178:	22 0f       	add	r18, r18
     17a:	92 0f       	add	r25, r18
     17c:	89 1b       	sub	r24, r25
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	b9 01       	movw	r22, r18
     184:	02 c0       	rjmp	.+4      	; 0x18a <pinMode+0xf8>
     186:	66 0f       	add	r22, r22
     188:	77 1f       	adc	r23, r23
     18a:	8a 95       	dec	r24
     18c:	e2 f7       	brpl	.-8      	; 0x186 <pinMode+0xf4>
     18e:	cb 01       	movw	r24, r22
     190:	84 2b       	or	r24, r20
     192:	87 bb       	out	0x17, r24	; 23
     194:	08 95       	ret
     196:	68 32       	cpi	r22, 0x28	; 40
     198:	d9 f4       	brne	.+54     	; 0x1d0 <pinMode+0x13e>
     19a:	47 b3       	in	r20, 0x17	; 23
     19c:	9d ec       	ldi	r25, 0xCD	; 205
     19e:	89 9f       	mul	r24, r25
     1a0:	91 2d       	mov	r25, r1
     1a2:	11 24       	eor	r1, r1
     1a4:	96 95       	lsr	r25
     1a6:	96 95       	lsr	r25
     1a8:	96 95       	lsr	r25
     1aa:	99 0f       	add	r25, r25
     1ac:	29 2f       	mov	r18, r25
     1ae:	22 0f       	add	r18, r18
     1b0:	22 0f       	add	r18, r18
     1b2:	92 0f       	add	r25, r18
     1b4:	89 1b       	sub	r24, r25
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	b9 01       	movw	r22, r18
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <pinMode+0x130>
     1be:	66 0f       	add	r22, r22
     1c0:	77 1f       	adc	r23, r23
     1c2:	8a 95       	dec	r24
     1c4:	e2 f7       	brpl	.-8      	; 0x1be <pinMode+0x12c>
     1c6:	cb 01       	movw	r24, r22
     1c8:	80 95       	com	r24
     1ca:	84 23       	and	r24, r20
     1cc:	87 bb       	out	0x17, r24	; 23
     1ce:	08 95       	ret
     1d0:	6a 32       	cpi	r22, 0x2A	; 42
     1d2:	09 f0       	breq	.+2      	; 0x1d6 <pinMode+0x144>
     1d4:	e6 c0       	rjmp	.+460    	; 0x3a2 <pinMode+0x310>
     1d6:	47 b3       	in	r20, 0x17	; 23
     1d8:	9d ec       	ldi	r25, 0xCD	; 205
     1da:	89 9f       	mul	r24, r25
     1dc:	91 2d       	mov	r25, r1
     1de:	11 24       	eor	r1, r1
     1e0:	96 95       	lsr	r25
     1e2:	96 95       	lsr	r25
     1e4:	96 95       	lsr	r25
     1e6:	99 0f       	add	r25, r25
     1e8:	29 2f       	mov	r18, r25
     1ea:	22 0f       	add	r18, r18
     1ec:	22 0f       	add	r18, r18
     1ee:	92 0f       	add	r25, r18
     1f0:	89 1b       	sub	r24, r25
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	b9 01       	movw	r22, r18
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <pinMode+0x16c>
     1fa:	66 0f       	add	r22, r22
     1fc:	77 1f       	adc	r23, r23
     1fe:	8a 95       	dec	r24
     200:	e2 f7       	brpl	.-8      	; 0x1fa <pinMode+0x168>
     202:	cb 01       	movw	r24, r22
     204:	96 2f       	mov	r25, r22
     206:	90 95       	com	r25
     208:	94 23       	and	r25, r20
     20a:	97 bb       	out	0x17, r25	; 23
     20c:	90 b7       	in	r25, 0x30	; 48
     20e:	9b 7f       	andi	r25, 0xFB	; 251
     210:	90 bf       	out	0x30, r25	; 48
     212:	98 b3       	in	r25, 0x18	; 24
     214:	89 2b       	or	r24, r25
     216:	88 bb       	out	0x18, r24	; 24
     218:	08 95       	ret
     21a:	9c ee       	ldi	r25, 0xEC	; 236
     21c:	98 0f       	add	r25, r24
     21e:	98 30       	cpi	r25, 0x08	; 8
     220:	08 f0       	brcs	.+2      	; 0x224 <pinMode+0x192>
     222:	5e c0       	rjmp	.+188    	; 0x2e0 <pinMode+0x24e>
     224:	69 32       	cpi	r22, 0x29	; 41
     226:	d1 f4       	brne	.+52     	; 0x25c <pinMode+0x1ca>
     228:	44 b3       	in	r20, 0x14	; 20
     22a:	9d ec       	ldi	r25, 0xCD	; 205
     22c:	89 9f       	mul	r24, r25
     22e:	91 2d       	mov	r25, r1
     230:	11 24       	eor	r1, r1
     232:	96 95       	lsr	r25
     234:	96 95       	lsr	r25
     236:	96 95       	lsr	r25
     238:	99 0f       	add	r25, r25
     23a:	29 2f       	mov	r18, r25
     23c:	22 0f       	add	r18, r18
     23e:	22 0f       	add	r18, r18
     240:	92 0f       	add	r25, r18
     242:	89 1b       	sub	r24, r25
     244:	21 e0       	ldi	r18, 0x01	; 1
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	b9 01       	movw	r22, r18
     24a:	02 c0       	rjmp	.+4      	; 0x250 <pinMode+0x1be>
     24c:	66 0f       	add	r22, r22
     24e:	77 1f       	adc	r23, r23
     250:	8a 95       	dec	r24
     252:	e2 f7       	brpl	.-8      	; 0x24c <pinMode+0x1ba>
     254:	cb 01       	movw	r24, r22
     256:	84 2b       	or	r24, r20
     258:	84 bb       	out	0x14, r24	; 20
     25a:	08 95       	ret
     25c:	68 32       	cpi	r22, 0x28	; 40
     25e:	d9 f4       	brne	.+54     	; 0x296 <pinMode+0x204>
     260:	44 b3       	in	r20, 0x14	; 20
     262:	9d ec       	ldi	r25, 0xCD	; 205
     264:	89 9f       	mul	r24, r25
     266:	91 2d       	mov	r25, r1
     268:	11 24       	eor	r1, r1
     26a:	96 95       	lsr	r25
     26c:	96 95       	lsr	r25
     26e:	96 95       	lsr	r25
     270:	99 0f       	add	r25, r25
     272:	29 2f       	mov	r18, r25
     274:	22 0f       	add	r18, r18
     276:	22 0f       	add	r18, r18
     278:	92 0f       	add	r25, r18
     27a:	89 1b       	sub	r24, r25
     27c:	21 e0       	ldi	r18, 0x01	; 1
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	b9 01       	movw	r22, r18
     282:	02 c0       	rjmp	.+4      	; 0x288 <pinMode+0x1f6>
     284:	66 0f       	add	r22, r22
     286:	77 1f       	adc	r23, r23
     288:	8a 95       	dec	r24
     28a:	e2 f7       	brpl	.-8      	; 0x284 <pinMode+0x1f2>
     28c:	cb 01       	movw	r24, r22
     28e:	80 95       	com	r24
     290:	84 23       	and	r24, r20
     292:	84 bb       	out	0x14, r24	; 20
     294:	08 95       	ret
     296:	6a 32       	cpi	r22, 0x2A	; 42
     298:	09 f0       	breq	.+2      	; 0x29c <pinMode+0x20a>
     29a:	83 c0       	rjmp	.+262    	; 0x3a2 <pinMode+0x310>
     29c:	44 b3       	in	r20, 0x14	; 20
     29e:	9d ec       	ldi	r25, 0xCD	; 205
     2a0:	89 9f       	mul	r24, r25
     2a2:	91 2d       	mov	r25, r1
     2a4:	11 24       	eor	r1, r1
     2a6:	96 95       	lsr	r25
     2a8:	96 95       	lsr	r25
     2aa:	96 95       	lsr	r25
     2ac:	99 0f       	add	r25, r25
     2ae:	29 2f       	mov	r18, r25
     2b0:	22 0f       	add	r18, r18
     2b2:	22 0f       	add	r18, r18
     2b4:	92 0f       	add	r25, r18
     2b6:	89 1b       	sub	r24, r25
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	b9 01       	movw	r22, r18
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <pinMode+0x232>
     2c0:	66 0f       	add	r22, r22
     2c2:	77 1f       	adc	r23, r23
     2c4:	8a 95       	dec	r24
     2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <pinMode+0x22e>
     2c8:	cb 01       	movw	r24, r22
     2ca:	96 2f       	mov	r25, r22
     2cc:	90 95       	com	r25
     2ce:	94 23       	and	r25, r20
     2d0:	94 bb       	out	0x14, r25	; 20
     2d2:	90 b7       	in	r25, 0x30	; 48
     2d4:	9b 7f       	andi	r25, 0xFB	; 251
     2d6:	90 bf       	out	0x30, r25	; 48
     2d8:	95 b3       	in	r25, 0x15	; 21
     2da:	89 2b       	or	r24, r25
     2dc:	85 bb       	out	0x15, r24	; 21
     2de:	08 95       	ret
     2e0:	92 ee       	ldi	r25, 0xE2	; 226
     2e2:	98 0f       	add	r25, r24
     2e4:	98 30       	cpi	r25, 0x08	; 8
     2e6:	08 f0       	brcs	.+2      	; 0x2ea <pinMode+0x258>
     2e8:	5c c0       	rjmp	.+184    	; 0x3a2 <pinMode+0x310>
     2ea:	69 32       	cpi	r22, 0x29	; 41
     2ec:	d1 f4       	brne	.+52     	; 0x322 <pinMode+0x290>
     2ee:	41 b3       	in	r20, 0x11	; 17
     2f0:	9d ec       	ldi	r25, 0xCD	; 205
     2f2:	89 9f       	mul	r24, r25
     2f4:	91 2d       	mov	r25, r1
     2f6:	11 24       	eor	r1, r1
     2f8:	96 95       	lsr	r25
     2fa:	96 95       	lsr	r25
     2fc:	96 95       	lsr	r25
     2fe:	99 0f       	add	r25, r25
     300:	29 2f       	mov	r18, r25
     302:	22 0f       	add	r18, r18
     304:	22 0f       	add	r18, r18
     306:	92 0f       	add	r25, r18
     308:	89 1b       	sub	r24, r25
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	b9 01       	movw	r22, r18
     310:	02 c0       	rjmp	.+4      	; 0x316 <pinMode+0x284>
     312:	66 0f       	add	r22, r22
     314:	77 1f       	adc	r23, r23
     316:	8a 95       	dec	r24
     318:	e2 f7       	brpl	.-8      	; 0x312 <pinMode+0x280>
     31a:	cb 01       	movw	r24, r22
     31c:	84 2b       	or	r24, r20
     31e:	81 bb       	out	0x11, r24	; 17
     320:	08 95       	ret
     322:	68 32       	cpi	r22, 0x28	; 40
     324:	d9 f4       	brne	.+54     	; 0x35c <pinMode+0x2ca>
     326:	41 b3       	in	r20, 0x11	; 17
     328:	9d ec       	ldi	r25, 0xCD	; 205
     32a:	89 9f       	mul	r24, r25
     32c:	91 2d       	mov	r25, r1
     32e:	11 24       	eor	r1, r1
     330:	96 95       	lsr	r25
     332:	96 95       	lsr	r25
     334:	96 95       	lsr	r25
     336:	99 0f       	add	r25, r25
     338:	29 2f       	mov	r18, r25
     33a:	22 0f       	add	r18, r18
     33c:	22 0f       	add	r18, r18
     33e:	92 0f       	add	r25, r18
     340:	89 1b       	sub	r24, r25
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	b9 01       	movw	r22, r18
     348:	02 c0       	rjmp	.+4      	; 0x34e <pinMode+0x2bc>
     34a:	66 0f       	add	r22, r22
     34c:	77 1f       	adc	r23, r23
     34e:	8a 95       	dec	r24
     350:	e2 f7       	brpl	.-8      	; 0x34a <pinMode+0x2b8>
     352:	cb 01       	movw	r24, r22
     354:	80 95       	com	r24
     356:	84 23       	and	r24, r20
     358:	81 bb       	out	0x11, r24	; 17
     35a:	08 95       	ret
     35c:	6a 32       	cpi	r22, 0x2A	; 42
     35e:	09 f5       	brne	.+66     	; 0x3a2 <pinMode+0x310>
     360:	41 b3       	in	r20, 0x11	; 17
     362:	9d ec       	ldi	r25, 0xCD	; 205
     364:	89 9f       	mul	r24, r25
     366:	91 2d       	mov	r25, r1
     368:	11 24       	eor	r1, r1
     36a:	96 95       	lsr	r25
     36c:	96 95       	lsr	r25
     36e:	96 95       	lsr	r25
     370:	99 0f       	add	r25, r25
     372:	29 2f       	mov	r18, r25
     374:	22 0f       	add	r18, r18
     376:	22 0f       	add	r18, r18
     378:	92 0f       	add	r25, r18
     37a:	89 1b       	sub	r24, r25
     37c:	21 e0       	ldi	r18, 0x01	; 1
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	b9 01       	movw	r22, r18
     382:	02 c0       	rjmp	.+4      	; 0x388 <pinMode+0x2f6>
     384:	66 0f       	add	r22, r22
     386:	77 1f       	adc	r23, r23
     388:	8a 95       	dec	r24
     38a:	e2 f7       	brpl	.-8      	; 0x384 <pinMode+0x2f2>
     38c:	cb 01       	movw	r24, r22
     38e:	96 2f       	mov	r25, r22
     390:	90 95       	com	r25
     392:	94 23       	and	r25, r20
     394:	91 bb       	out	0x11, r25	; 17
     396:	90 b7       	in	r25, 0x30	; 48
     398:	9b 7f       	andi	r25, 0xFB	; 251
     39a:	90 bf       	out	0x30, r25	; 48
     39c:	92 b3       	in	r25, 0x12	; 18
     39e:	89 2b       	or	r24, r25
     3a0:	82 bb       	out	0x12, r24	; 18
     3a2:	08 95       	ret

000003a4 <digitalWrite>:
     3a4:	88 30       	cpi	r24, 0x08	; 8
     3a6:	08 f0       	brcs	.+2      	; 0x3aa <digitalWrite+0x6>
     3a8:	46 c0       	rjmp	.+140    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     3aa:	9d ec       	ldi	r25, 0xCD	; 205
     3ac:	69 9f       	mul	r22, r25
     3ae:	91 2d       	mov	r25, r1
     3b0:	11 24       	eor	r1, r1
     3b2:	96 95       	lsr	r25
     3b4:	96 95       	lsr	r25
     3b6:	96 95       	lsr	r25
     3b8:	99 0f       	add	r25, r25
     3ba:	29 2f       	mov	r18, r25
     3bc:	22 0f       	add	r18, r18
     3be:	22 0f       	add	r18, r18
     3c0:	92 0f       	add	r25, r18
     3c2:	69 1b       	sub	r22, r25
     3c4:	61 30       	cpi	r22, 0x01	; 1
     3c6:	d1 f4       	brne	.+52     	; 0x3fc <digitalWrite+0x58>
     3c8:	4b b3       	in	r20, 0x1b	; 27
     3ca:	9d ec       	ldi	r25, 0xCD	; 205
     3cc:	89 9f       	mul	r24, r25
     3ce:	91 2d       	mov	r25, r1
     3d0:	11 24       	eor	r1, r1
     3d2:	96 95       	lsr	r25
     3d4:	96 95       	lsr	r25
     3d6:	96 95       	lsr	r25
     3d8:	99 0f       	add	r25, r25
     3da:	29 2f       	mov	r18, r25
     3dc:	22 0f       	add	r18, r18
     3de:	22 0f       	add	r18, r18
     3e0:	92 0f       	add	r25, r18
     3e2:	89 1b       	sub	r24, r25
     3e4:	21 e0       	ldi	r18, 0x01	; 1
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	b9 01       	movw	r22, r18
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <digitalWrite+0x4c>
     3ec:	66 0f       	add	r22, r22
     3ee:	77 1f       	adc	r23, r23
     3f0:	8a 95       	dec	r24
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <digitalWrite+0x48>
     3f4:	cb 01       	movw	r24, r22
     3f6:	84 2b       	or	r24, r20
     3f8:	8b bb       	out	0x1b, r24	; 27
     3fa:	08 95       	ret
     3fc:	61 11       	cpse	r22, r1
     3fe:	fb c0       	rjmp	.+502    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     400:	4b b3       	in	r20, 0x1b	; 27
     402:	9d ec       	ldi	r25, 0xCD	; 205
     404:	89 9f       	mul	r24, r25
     406:	91 2d       	mov	r25, r1
     408:	11 24       	eor	r1, r1
     40a:	96 95       	lsr	r25
     40c:	96 95       	lsr	r25
     40e:	96 95       	lsr	r25
     410:	99 0f       	add	r25, r25
     412:	29 2f       	mov	r18, r25
     414:	22 0f       	add	r18, r18
     416:	22 0f       	add	r18, r18
     418:	92 0f       	add	r25, r18
     41a:	89 1b       	sub	r24, r25
     41c:	21 e0       	ldi	r18, 0x01	; 1
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	b9 01       	movw	r22, r18
     422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     424:	66 0f       	add	r22, r22
     426:	77 1f       	adc	r23, r23
     428:	8a 95       	dec	r24
     42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     42c:	cb 01       	movw	r24, r22
     42e:	80 95       	com	r24
     430:	84 23       	and	r24, r20
     432:	8b bb       	out	0x1b, r24	; 27
     434:	08 95       	ret
     436:	96 ef       	ldi	r25, 0xF6	; 246
     438:	98 0f       	add	r25, r24
     43a:	98 30       	cpi	r25, 0x08	; 8
     43c:	08 f0       	brcs	.+2      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     43e:	46 c0       	rjmp	.+140    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
     440:	9d ec       	ldi	r25, 0xCD	; 205
     442:	69 9f       	mul	r22, r25
     444:	91 2d       	mov	r25, r1
     446:	11 24       	eor	r1, r1
     448:	96 95       	lsr	r25
     44a:	96 95       	lsr	r25
     44c:	96 95       	lsr	r25
     44e:	99 0f       	add	r25, r25
     450:	29 2f       	mov	r18, r25
     452:	22 0f       	add	r18, r18
     454:	22 0f       	add	r18, r18
     456:	92 0f       	add	r25, r18
     458:	69 1b       	sub	r22, r25
     45a:	61 30       	cpi	r22, 0x01	; 1
     45c:	d1 f4       	brne	.+52     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     45e:	48 b3       	in	r20, 0x18	; 24
     460:	9d ec       	ldi	r25, 0xCD	; 205
     462:	89 9f       	mul	r24, r25
     464:	91 2d       	mov	r25, r1
     466:	11 24       	eor	r1, r1
     468:	96 95       	lsr	r25
     46a:	96 95       	lsr	r25
     46c:	96 95       	lsr	r25
     46e:	99 0f       	add	r25, r25
     470:	29 2f       	mov	r18, r25
     472:	22 0f       	add	r18, r18
     474:	22 0f       	add	r18, r18
     476:	92 0f       	add	r25, r18
     478:	89 1b       	sub	r24, r25
     47a:	21 e0       	ldi	r18, 0x01	; 1
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	b9 01       	movw	r22, r18
     480:	02 c0       	rjmp	.+4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     482:	66 0f       	add	r22, r22
     484:	77 1f       	adc	r23, r23
     486:	8a 95       	dec	r24
     488:	e2 f7       	brpl	.-8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     48a:	cb 01       	movw	r24, r22
     48c:	84 2b       	or	r24, r20
     48e:	88 bb       	out	0x18, r24	; 24
     490:	08 95       	ret
     492:	61 11       	cpse	r22, r1
     494:	b0 c0       	rjmp	.+352    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     496:	48 b3       	in	r20, 0x18	; 24
     498:	9d ec       	ldi	r25, 0xCD	; 205
     49a:	89 9f       	mul	r24, r25
     49c:	91 2d       	mov	r25, r1
     49e:	11 24       	eor	r1, r1
     4a0:	96 95       	lsr	r25
     4a2:	96 95       	lsr	r25
     4a4:	96 95       	lsr	r25
     4a6:	99 0f       	add	r25, r25
     4a8:	29 2f       	mov	r18, r25
     4aa:	22 0f       	add	r18, r18
     4ac:	22 0f       	add	r18, r18
     4ae:	92 0f       	add	r25, r18
     4b0:	89 1b       	sub	r24, r25
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	b9 01       	movw	r22, r18
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     4ba:	66 0f       	add	r22, r22
     4bc:	77 1f       	adc	r23, r23
     4be:	8a 95       	dec	r24
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
     4c2:	cb 01       	movw	r24, r22
     4c4:	80 95       	com	r24
     4c6:	84 23       	and	r24, r20
     4c8:	88 bb       	out	0x18, r24	; 24
     4ca:	08 95       	ret
     4cc:	9c ee       	ldi	r25, 0xEC	; 236
     4ce:	98 0f       	add	r25, r24
     4d0:	98 30       	cpi	r25, 0x08	; 8
     4d2:	08 f0       	brcs	.+2      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
     4d4:	46 c0       	rjmp	.+140    	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
     4d6:	9d ec       	ldi	r25, 0xCD	; 205
     4d8:	69 9f       	mul	r22, r25
     4da:	91 2d       	mov	r25, r1
     4dc:	11 24       	eor	r1, r1
     4de:	96 95       	lsr	r25
     4e0:	96 95       	lsr	r25
     4e2:	96 95       	lsr	r25
     4e4:	99 0f       	add	r25, r25
     4e6:	29 2f       	mov	r18, r25
     4e8:	22 0f       	add	r18, r18
     4ea:	22 0f       	add	r18, r18
     4ec:	92 0f       	add	r25, r18
     4ee:	69 1b       	sub	r22, r25
     4f0:	61 30       	cpi	r22, 0x01	; 1
     4f2:	d1 f4       	brne	.+52     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
     4f4:	45 b3       	in	r20, 0x15	; 21
     4f6:	9d ec       	ldi	r25, 0xCD	; 205
     4f8:	89 9f       	mul	r24, r25
     4fa:	91 2d       	mov	r25, r1
     4fc:	11 24       	eor	r1, r1
     4fe:	96 95       	lsr	r25
     500:	96 95       	lsr	r25
     502:	96 95       	lsr	r25
     504:	99 0f       	add	r25, r25
     506:	29 2f       	mov	r18, r25
     508:	22 0f       	add	r18, r18
     50a:	22 0f       	add	r18, r18
     50c:	92 0f       	add	r25, r18
     50e:	89 1b       	sub	r24, r25
     510:	21 e0       	ldi	r18, 0x01	; 1
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	b9 01       	movw	r22, r18
     516:	02 c0       	rjmp	.+4      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
     518:	66 0f       	add	r22, r22
     51a:	77 1f       	adc	r23, r23
     51c:	8a 95       	dec	r24
     51e:	e2 f7       	brpl	.-8      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
     520:	cb 01       	movw	r24, r22
     522:	84 2b       	or	r24, r20
     524:	85 bb       	out	0x15, r24	; 21
     526:	08 95       	ret
     528:	61 11       	cpse	r22, r1
     52a:	65 c0       	rjmp	.+202    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     52c:	45 b3       	in	r20, 0x15	; 21
     52e:	9d ec       	ldi	r25, 0xCD	; 205
     530:	89 9f       	mul	r24, r25
     532:	91 2d       	mov	r25, r1
     534:	11 24       	eor	r1, r1
     536:	96 95       	lsr	r25
     538:	96 95       	lsr	r25
     53a:	96 95       	lsr	r25
     53c:	99 0f       	add	r25, r25
     53e:	29 2f       	mov	r18, r25
     540:	22 0f       	add	r18, r18
     542:	22 0f       	add	r18, r18
     544:	92 0f       	add	r25, r18
     546:	89 1b       	sub	r24, r25
     548:	21 e0       	ldi	r18, 0x01	; 1
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	b9 01       	movw	r22, r18
     54e:	02 c0       	rjmp	.+4      	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
     550:	66 0f       	add	r22, r22
     552:	77 1f       	adc	r23, r23
     554:	8a 95       	dec	r24
     556:	e2 f7       	brpl	.-8      	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
     558:	cb 01       	movw	r24, r22
     55a:	80 95       	com	r24
     55c:	84 23       	and	r24, r20
     55e:	85 bb       	out	0x15, r24	; 21
     560:	08 95       	ret
     562:	92 ee       	ldi	r25, 0xE2	; 226
     564:	98 0f       	add	r25, r24
     566:	98 30       	cpi	r25, 0x08	; 8
     568:	08 f0       	brcs	.+2      	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
     56a:	45 c0       	rjmp	.+138    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     56c:	9d ec       	ldi	r25, 0xCD	; 205
     56e:	69 9f       	mul	r22, r25
     570:	91 2d       	mov	r25, r1
     572:	11 24       	eor	r1, r1
     574:	96 95       	lsr	r25
     576:	96 95       	lsr	r25
     578:	96 95       	lsr	r25
     57a:	99 0f       	add	r25, r25
     57c:	29 2f       	mov	r18, r25
     57e:	22 0f       	add	r18, r18
     580:	22 0f       	add	r18, r18
     582:	92 0f       	add	r25, r18
     584:	69 1b       	sub	r22, r25
     586:	61 30       	cpi	r22, 0x01	; 1
     588:	d1 f4       	brne	.+52     	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
     58a:	42 b3       	in	r20, 0x12	; 18
     58c:	9d ec       	ldi	r25, 0xCD	; 205
     58e:	89 9f       	mul	r24, r25
     590:	91 2d       	mov	r25, r1
     592:	11 24       	eor	r1, r1
     594:	96 95       	lsr	r25
     596:	96 95       	lsr	r25
     598:	96 95       	lsr	r25
     59a:	99 0f       	add	r25, r25
     59c:	29 2f       	mov	r18, r25
     59e:	22 0f       	add	r18, r18
     5a0:	22 0f       	add	r18, r18
     5a2:	92 0f       	add	r25, r18
     5a4:	89 1b       	sub	r24, r25
     5a6:	21 e0       	ldi	r18, 0x01	; 1
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	b9 01       	movw	r22, r18
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <__EEPROM_REGION_LENGTH__+0x1b2>
     5ae:	66 0f       	add	r22, r22
     5b0:	77 1f       	adc	r23, r23
     5b2:	8a 95       	dec	r24
     5b4:	e2 f7       	brpl	.-8      	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
     5b6:	cb 01       	movw	r24, r22
     5b8:	84 2b       	or	r24, r20
     5ba:	82 bb       	out	0x12, r24	; 18
     5bc:	08 95       	ret
     5be:	61 11       	cpse	r22, r1
     5c0:	1a c0       	rjmp	.+52     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     5c2:	42 b3       	in	r20, 0x12	; 18
     5c4:	9d ec       	ldi	r25, 0xCD	; 205
     5c6:	89 9f       	mul	r24, r25
     5c8:	91 2d       	mov	r25, r1
     5ca:	11 24       	eor	r1, r1
     5cc:	96 95       	lsr	r25
     5ce:	96 95       	lsr	r25
     5d0:	96 95       	lsr	r25
     5d2:	99 0f       	add	r25, r25
     5d4:	29 2f       	mov	r18, r25
     5d6:	22 0f       	add	r18, r18
     5d8:	22 0f       	add	r18, r18
     5da:	92 0f       	add	r25, r18
     5dc:	89 1b       	sub	r24, r25
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	b9 01       	movw	r22, r18
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <__EEPROM_REGION_LENGTH__+0x1ea>
     5e6:	66 0f       	add	r22, r22
     5e8:	77 1f       	adc	r23, r23
     5ea:	8a 95       	dec	r24
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
     5ee:	cb 01       	movw	r24, r22
     5f0:	80 95       	com	r24
     5f2:	84 23       	and	r24, r20
     5f4:	82 bb       	out	0x12, r24	; 18
     5f6:	08 95       	ret

000005f8 <digitalRead>:
     5f8:	88 30       	cpi	r24, 0x08	; 8
     5fa:	c8 f4       	brcc	.+50     	; 0x62e <digitalRead+0x36>
     5fc:	29 b3       	in	r18, 0x19	; 25
     5fe:	9d ec       	ldi	r25, 0xCD	; 205
     600:	89 9f       	mul	r24, r25
     602:	91 2d       	mov	r25, r1
     604:	11 24       	eor	r1, r1
     606:	96 95       	lsr	r25
     608:	96 95       	lsr	r25
     60a:	96 95       	lsr	r25
     60c:	99 0f       	add	r25, r25
     60e:	39 2f       	mov	r19, r25
     610:	33 0f       	add	r19, r19
     612:	33 0f       	add	r19, r19
     614:	93 0f       	add	r25, r19
     616:	89 1b       	sub	r24, r25
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	02 c0       	rjmp	.+4      	; 0x620 <digitalRead+0x28>
     61c:	35 95       	asr	r19
     61e:	27 95       	ror	r18
     620:	8a 95       	dec	r24
     622:	e2 f7       	brpl	.-8      	; 0x61c <digitalRead+0x24>
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	20 fd       	sbrc	r18, 0
     628:	59 c0       	rjmp	.+178    	; 0x6dc <digitalRead+0xe4>
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	08 95       	ret
     62e:	96 ef       	ldi	r25, 0xF6	; 246
     630:	98 0f       	add	r25, r24
     632:	98 30       	cpi	r25, 0x08	; 8
     634:	c8 f4       	brcc	.+50     	; 0x668 <digitalRead+0x70>
     636:	26 b3       	in	r18, 0x16	; 22
     638:	9d ec       	ldi	r25, 0xCD	; 205
     63a:	89 9f       	mul	r24, r25
     63c:	91 2d       	mov	r25, r1
     63e:	11 24       	eor	r1, r1
     640:	96 95       	lsr	r25
     642:	96 95       	lsr	r25
     644:	96 95       	lsr	r25
     646:	99 0f       	add	r25, r25
     648:	39 2f       	mov	r19, r25
     64a:	33 0f       	add	r19, r19
     64c:	33 0f       	add	r19, r19
     64e:	93 0f       	add	r25, r19
     650:	89 1b       	sub	r24, r25
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	02 c0       	rjmp	.+4      	; 0x65a <digitalRead+0x62>
     656:	35 95       	asr	r19
     658:	27 95       	ror	r18
     65a:	8a 95       	dec	r24
     65c:	e2 f7       	brpl	.-8      	; 0x656 <digitalRead+0x5e>
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	20 fd       	sbrc	r18, 0
     662:	3c c0       	rjmp	.+120    	; 0x6dc <digitalRead+0xe4>
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	08 95       	ret
     668:	9c ee       	ldi	r25, 0xEC	; 236
     66a:	98 0f       	add	r25, r24
     66c:	98 30       	cpi	r25, 0x08	; 8
     66e:	c8 f4       	brcc	.+50     	; 0x6a2 <digitalRead+0xaa>
     670:	23 b3       	in	r18, 0x13	; 19
     672:	9d ec       	ldi	r25, 0xCD	; 205
     674:	89 9f       	mul	r24, r25
     676:	91 2d       	mov	r25, r1
     678:	11 24       	eor	r1, r1
     67a:	96 95       	lsr	r25
     67c:	96 95       	lsr	r25
     67e:	96 95       	lsr	r25
     680:	99 0f       	add	r25, r25
     682:	39 2f       	mov	r19, r25
     684:	33 0f       	add	r19, r19
     686:	33 0f       	add	r19, r19
     688:	93 0f       	add	r25, r19
     68a:	89 1b       	sub	r24, r25
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	02 c0       	rjmp	.+4      	; 0x694 <digitalRead+0x9c>
     690:	35 95       	asr	r19
     692:	27 95       	ror	r18
     694:	8a 95       	dec	r24
     696:	e2 f7       	brpl	.-8      	; 0x690 <digitalRead+0x98>
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	20 fd       	sbrc	r18, 0
     69c:	1f c0       	rjmp	.+62     	; 0x6dc <digitalRead+0xe4>
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	08 95       	ret
     6a2:	92 ee       	ldi	r25, 0xE2	; 226
     6a4:	98 0f       	add	r25, r24
     6a6:	98 30       	cpi	r25, 0x08	; 8
     6a8:	c8 f4       	brcc	.+50     	; 0x6dc <digitalRead+0xe4>
     6aa:	20 b3       	in	r18, 0x10	; 16
     6ac:	9d ec       	ldi	r25, 0xCD	; 205
     6ae:	89 9f       	mul	r24, r25
     6b0:	91 2d       	mov	r25, r1
     6b2:	11 24       	eor	r1, r1
     6b4:	96 95       	lsr	r25
     6b6:	96 95       	lsr	r25
     6b8:	96 95       	lsr	r25
     6ba:	99 0f       	add	r25, r25
     6bc:	39 2f       	mov	r19, r25
     6be:	33 0f       	add	r19, r19
     6c0:	33 0f       	add	r19, r19
     6c2:	93 0f       	add	r25, r19
     6c4:	89 1b       	sub	r24, r25
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <digitalRead+0xd6>
     6ca:	35 95       	asr	r19
     6cc:	27 95       	ror	r18
     6ce:	8a 95       	dec	r24
     6d0:	e2 f7       	brpl	.-8      	; 0x6ca <digitalRead+0xd2>
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	20 fd       	sbrc	r18, 0
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <digitalRead+0xe4>
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	08 95       	ret
     6dc:	08 95       	ret

000006de <__vector_1>:
}


ISR(INT0_vect)
{
     6de:	1f 92       	push	r1
     6e0:	0f 92       	push	r0
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	0f 92       	push	r0
     6e6:	11 24       	eor	r1, r1
     6e8:	2f 93       	push	r18
     6ea:	3f 93       	push	r19
     6ec:	4f 93       	push	r20
     6ee:	5f 93       	push	r21
     6f0:	6f 93       	push	r22
     6f2:	7f 93       	push	r23
     6f4:	8f 93       	push	r24
     6f6:	9f 93       	push	r25
     6f8:	af 93       	push	r26
     6fa:	bf 93       	push	r27
     6fc:	ef 93       	push	r30
     6fe:	ff 93       	push	r31
	ISR0();
     700:	e0 91 da 00 	lds	r30, 0x00DA	; 0x8000da <ISR0>
     704:	f0 91 db 00 	lds	r31, 0x00DB	; 0x8000db <ISR0+0x1>
     708:	09 95       	icall
}
     70a:	ff 91       	pop	r31
     70c:	ef 91       	pop	r30
     70e:	bf 91       	pop	r27
     710:	af 91       	pop	r26
     712:	9f 91       	pop	r25
     714:	8f 91       	pop	r24
     716:	7f 91       	pop	r23
     718:	6f 91       	pop	r22
     71a:	5f 91       	pop	r21
     71c:	4f 91       	pop	r20
     71e:	3f 91       	pop	r19
     720:	2f 91       	pop	r18
     722:	0f 90       	pop	r0
     724:	0f be       	out	0x3f, r0	; 63
     726:	0f 90       	pop	r0
     728:	1f 90       	pop	r1
     72a:	18 95       	reti

0000072c <__vector_2>:

ISR(INT1_vect)
{
     72c:	1f 92       	push	r1
     72e:	0f 92       	push	r0
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	0f 92       	push	r0
     734:	11 24       	eor	r1, r1
     736:	2f 93       	push	r18
     738:	3f 93       	push	r19
     73a:	4f 93       	push	r20
     73c:	5f 93       	push	r21
     73e:	6f 93       	push	r22
     740:	7f 93       	push	r23
     742:	8f 93       	push	r24
     744:	9f 93       	push	r25
     746:	af 93       	push	r26
     748:	bf 93       	push	r27
     74a:	ef 93       	push	r30
     74c:	ff 93       	push	r31
	ISR1();
     74e:	e0 91 d8 00 	lds	r30, 0x00D8	; 0x8000d8 <ISR1>
     752:	f0 91 d9 00 	lds	r31, 0x00D9	; 0x8000d9 <ISR1+0x1>
     756:	09 95       	icall
}
     758:	ff 91       	pop	r31
     75a:	ef 91       	pop	r30
     75c:	bf 91       	pop	r27
     75e:	af 91       	pop	r26
     760:	9f 91       	pop	r25
     762:	8f 91       	pop	r24
     764:	7f 91       	pop	r23
     766:	6f 91       	pop	r22
     768:	5f 91       	pop	r21
     76a:	4f 91       	pop	r20
     76c:	3f 91       	pop	r19
     76e:	2f 91       	pop	r18
     770:	0f 90       	pop	r0
     772:	0f be       	out	0x3f, r0	; 63
     774:	0f 90       	pop	r0
     776:	1f 90       	pop	r1
     778:	18 95       	reti

0000077a <__vector_3>:

ISR(INT2_vect)
{
     77a:	1f 92       	push	r1
     77c:	0f 92       	push	r0
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1
     784:	2f 93       	push	r18
     786:	3f 93       	push	r19
     788:	4f 93       	push	r20
     78a:	5f 93       	push	r21
     78c:	6f 93       	push	r22
     78e:	7f 93       	push	r23
     790:	8f 93       	push	r24
     792:	9f 93       	push	r25
     794:	af 93       	push	r26
     796:	bf 93       	push	r27
     798:	ef 93       	push	r30
     79a:	ff 93       	push	r31
	ISR2();
     79c:	e0 91 d6 00 	lds	r30, 0x00D6	; 0x8000d6 <__data_end>
     7a0:	f0 91 d7 00 	lds	r31, 0x00D7	; 0x8000d7 <__data_end+0x1>
     7a4:	09 95       	icall
}
     7a6:	ff 91       	pop	r31
     7a8:	ef 91       	pop	r30
     7aa:	bf 91       	pop	r27
     7ac:	af 91       	pop	r26
     7ae:	9f 91       	pop	r25
     7b0:	8f 91       	pop	r24
     7b2:	7f 91       	pop	r23
     7b4:	6f 91       	pop	r22
     7b6:	5f 91       	pop	r21
     7b8:	4f 91       	pop	r20
     7ba:	3f 91       	pop	r19
     7bc:	2f 91       	pop	r18
     7be:	0f 90       	pop	r0
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	0f 90       	pop	r0
     7c4:	1f 90       	pop	r1
     7c6:	18 95       	reti

000007c8 <Serial_print>:
	
	}
	x[i] = '\0';                           // ensure string is null terminated
	
	
}
     7c8:	4f 92       	push	r4
     7ca:	5f 92       	push	r5
     7cc:	6f 92       	push	r6
     7ce:	7f 92       	push	r7
     7d0:	8f 92       	push	r8
     7d2:	9f 92       	push	r9
     7d4:	af 92       	push	r10
     7d6:	bf 92       	push	r11
     7d8:	cf 92       	push	r12
     7da:	df 92       	push	r13
     7dc:	ef 92       	push	r14
     7de:	ff 92       	push	r15
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	60 97       	sbiw	r28, 0x10	; 16
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	dc 01       	movw	r26, r24
     7f6:	69 32       	cpi	r22, 0x29	; 41
     7f8:	39 f5       	brne	.+78     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     7fa:	11 96       	adiw	r26, 0x01	; 1
     7fc:	8c 91       	ld	r24, X
     7fe:	11 97       	sbiw	r26, 0x01	; 1
     800:	8f 93       	push	r24
     802:	8c 91       	ld	r24, X
     804:	8f 93       	push	r24
     806:	82 e7       	ldi	r24, 0x72	; 114
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	9f 93       	push	r25
     80c:	8f 93       	push	r24
     80e:	ce 01       	movw	r24, r28
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	9f 93       	push	r25
     814:	8f 93       	push	r24
     816:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <sprintf>
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	04 c0       	rjmp	.+8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     82c:	5d 9b       	sbis	0x0b, 5	; 11
     82e:	fe cf       	rjmp	.-4      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     830:	2c b9       	out	0x0c, r18	; 12
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	e1 e0       	ldi	r30, 0x01	; 1
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	ec 0f       	add	r30, r28
     83a:	fd 1f       	adc	r31, r29
     83c:	e8 0f       	add	r30, r24
     83e:	f9 1f       	adc	r31, r25
     840:	20 81       	ld	r18, Z
     842:	21 11       	cpse	r18, r1
     844:	f3 cf       	rjmp	.-26     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     846:	5f c0       	rjmp	.+190    	; 0x906 <__stack+0xa7>
     848:	68 32       	cpi	r22, 0x28	; 40
     84a:	09 f0       	breq	.+2      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     84c:	46 c0       	rjmp	.+140    	; 0x8da <__stack+0x7b>
     84e:	cd 90       	ld	r12, X+
     850:	dd 90       	ld	r13, X+
     852:	ed 90       	ld	r14, X+
     854:	fc 90       	ld	r15, X
     856:	c7 01       	movw	r24, r14
     858:	b6 01       	movw	r22, r12
     85a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <floor>
     85e:	2b 01       	movw	r4, r22
     860:	3c 01       	movw	r6, r24
     862:	9b 01       	movw	r18, r22
     864:	ac 01       	movw	r20, r24
     866:	c7 01       	movw	r24, r14
     868:	b6 01       	movw	r22, r12
     86a:	0e 94 c6 13 	call	0x278c	; 0x278c <__subsf3>
     86e:	4b 01       	movw	r8, r22
     870:	5c 01       	movw	r10, r24
     872:	c3 01       	movw	r24, r6
     874:	b2 01       	movw	r22, r4
     876:	0e 94 33 14 	call	0x2866	; 0x2866 <__fixsfsi>
     87a:	f6 2e       	mov	r15, r22
     87c:	e7 2e       	mov	r14, r23
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	4a e7       	ldi	r20, 0x7A	; 122
     884:	54 e4       	ldi	r21, 0x44	; 68
     886:	c5 01       	movw	r24, r10
     888:	b4 01       	movw	r22, r8
     88a:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__mulsf3>
     88e:	0e 94 33 14 	call	0x2866	; 0x2866 <__fixsfsi>
     892:	7f 93       	push	r23
     894:	6f 93       	push	r22
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	8f e6       	ldi	r24, 0x6F	; 111
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	9f 93       	push	r25
     8a0:	8f 93       	push	r24
     8a2:	ce 01       	movw	r24, r28
     8a4:	01 96       	adiw	r24, 0x01	; 1
     8a6:	9f 93       	push	r25
     8a8:	8f 93       	push	r24
     8aa:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <sprintf>
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	f8 94       	cli
     8b2:	de bf       	out	0x3e, r29	; 62
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	cd bf       	out	0x3d, r28	; 61
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	5d 9b       	sbis	0x0b, 5	; 11
     8c0:	fe cf       	rjmp	.-4      	; 0x8be <__stack+0x5f>
     8c2:	2c b9       	out	0x0c, r18	; 12
     8c4:	01 96       	adiw	r24, 0x01	; 1
     8c6:	e1 e0       	ldi	r30, 0x01	; 1
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	ec 0f       	add	r30, r28
     8cc:	fd 1f       	adc	r31, r29
     8ce:	e8 0f       	add	r30, r24
     8d0:	f9 1f       	adc	r31, r25
     8d2:	20 81       	ld	r18, Z
     8d4:	21 11       	cpse	r18, r1
     8d6:	f3 cf       	rjmp	.-26     	; 0x8be <__stack+0x5f>
     8d8:	16 c0       	rjmp	.+44     	; 0x906 <__stack+0xa7>
     8da:	6a 32       	cpi	r22, 0x2A	; 42
     8dc:	19 f4       	brne	.+6      	; 0x8e4 <__stack+0x85>
     8de:	8c 91       	ld	r24, X
     8e0:	8c b9       	out	0x0c, r24	; 12
     8e2:	11 c0       	rjmp	.+34     	; 0x906 <__stack+0xa7>
     8e4:	6b 32       	cpi	r22, 0x2B	; 43
     8e6:	79 f4       	brne	.+30     	; 0x906 <__stack+0xa7>
     8e8:	06 c0       	rjmp	.+12     	; 0x8f6 <__stack+0x97>
     8ea:	5d 9b       	sbis	0x0b, 5	; 11
     8ec:	fe cf       	rjmp	.-4      	; 0x8ea <__stack+0x8b>
     8ee:	9c b9       	out	0x0c, r25	; 12
     8f0:	2f 5f       	subi	r18, 0xFF	; 255
     8f2:	3f 4f       	sbci	r19, 0xFF	; 255
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <__stack+0x9b>
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	fd 01       	movw	r30, r26
     8fc:	e2 0f       	add	r30, r18
     8fe:	f3 1f       	adc	r31, r19
     900:	90 81       	ld	r25, Z
     902:	91 11       	cpse	r25, r1
     904:	f2 cf       	rjmp	.-28     	; 0x8ea <__stack+0x8b>
     906:	60 96       	adiw	r28, 0x10	; 16
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	cd bf       	out	0x3d, r28	; 61
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	ff 90       	pop	r15
     918:	ef 90       	pop	r14
     91a:	df 90       	pop	r13
     91c:	cf 90       	pop	r12
     91e:	bf 90       	pop	r11
     920:	af 90       	pop	r10
     922:	9f 90       	pop	r9
     924:	8f 90       	pop	r8
     926:	7f 90       	pop	r7
     928:	6f 90       	pop	r6
     92a:	5f 90       	pop	r5
     92c:	4f 90       	pop	r4
     92e:	08 95       	ret

00000930 <Serial_begin>:
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	90 93 7a 04 	sts	0x047A, r25	; 0x80047a <baud+0x1>
     93c:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <baud>
     940:	09 2e       	mov	r0, r25
     942:	00 0c       	add	r0, r0
     944:	aa 0b       	sbc	r26, r26
     946:	bb 0b       	sbc	r27, r27
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
     94c:	aa 1f       	adc	r26, r26
     94e:	bb 1f       	adc	r27, r27
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	aa 1f       	adc	r26, r26
     956:	bb 1f       	adc	r27, r27
     958:	9c 01       	movw	r18, r24
     95a:	ad 01       	movw	r20, r26
     95c:	22 0f       	add	r18, r18
     95e:	33 1f       	adc	r19, r19
     960:	44 1f       	adc	r20, r20
     962:	55 1f       	adc	r21, r21
     964:	22 0f       	add	r18, r18
     966:	33 1f       	adc	r19, r19
     968:	44 1f       	adc	r20, r20
     96a:	55 1f       	adc	r21, r21
     96c:	0f 2e       	mov	r0, r31
     96e:	c1 2c       	mov	r12, r1
     970:	f2 e1       	ldi	r31, 0x12	; 18
     972:	df 2e       	mov	r13, r31
     974:	fa e7       	ldi	r31, 0x7A	; 122
     976:	ef 2e       	mov	r14, r31
     978:	f1 2c       	mov	r15, r1
     97a:	f0 2d       	mov	r31, r0
     97c:	c7 01       	movw	r24, r14
     97e:	b6 01       	movw	r22, r12
     980:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__udivmodsi4>
     984:	da 01       	movw	r26, r20
     986:	c9 01       	movw	r24, r18
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	a1 09       	sbc	r26, r1
     98c:	b1 09       	sbc	r27, r1
     98e:	89 2f       	mov	r24, r25
     990:	9a 2f       	mov	r25, r26
     992:	ab 2f       	mov	r26, r27
     994:	bb 27       	eor	r27, r27
     996:	80 bd       	out	0x20, r24	; 32
     998:	20 91 79 04 	lds	r18, 0x0479	; 0x800479 <baud>
     99c:	30 91 7a 04 	lds	r19, 0x047A	; 0x80047a <baud+0x1>
     9a0:	c9 01       	movw	r24, r18
     9a2:	33 0f       	add	r19, r19
     9a4:	aa 0b       	sbc	r26, r26
     9a6:	bb 0b       	sbc	r27, r27
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	aa 1f       	adc	r26, r26
     9ae:	bb 1f       	adc	r27, r27
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	aa 1f       	adc	r26, r26
     9b6:	bb 1f       	adc	r27, r27
     9b8:	9c 01       	movw	r18, r24
     9ba:	ad 01       	movw	r20, r26
     9bc:	22 0f       	add	r18, r18
     9be:	33 1f       	adc	r19, r19
     9c0:	44 1f       	adc	r20, r20
     9c2:	55 1f       	adc	r21, r21
     9c4:	22 0f       	add	r18, r18
     9c6:	33 1f       	adc	r19, r19
     9c8:	44 1f       	adc	r20, r20
     9ca:	55 1f       	adc	r21, r21
     9cc:	c7 01       	movw	r24, r14
     9ce:	b6 01       	movw	r22, r12
     9d0:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__udivmodsi4>
     9d4:	21 50       	subi	r18, 0x01	; 1
     9d6:	29 b9       	out	0x09, r18	; 9
     9d8:	8a b1       	in	r24, 0x0a	; 10
     9da:	88 61       	ori	r24, 0x18	; 24
     9dc:	8a b9       	out	0x0a, r24	; 10
     9de:	80 b5       	in	r24, 0x20	; 32
     9e0:	86 68       	ori	r24, 0x86	; 134
     9e2:	80 bd       	out	0x20, r24	; 32
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	cf 90       	pop	r12
     9ec:	08 95       	ret

000009ee <__vector_13>:

ISR(USART_RXC_vect){
     9ee:	1f 92       	push	r1
     9f0:	0f 92       	push	r0
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	0f 92       	push	r0
     9f6:	11 24       	eor	r1, r1
     9f8:	2f 93       	push	r18
     9fa:	3f 93       	push	r19
     9fc:	4f 93       	push	r20
     9fe:	5f 93       	push	r21
     a00:	6f 93       	push	r22
     a02:	7f 93       	push	r23
     a04:	8f 93       	push	r24
     a06:	9f 93       	push	r25
     a08:	af 93       	push	r26
     a0a:	bf 93       	push	r27
     a0c:	ef 93       	push	r30
     a0e:	ff 93       	push	r31
RXC_ISR();		
     a10:	e0 91 de 00 	lds	r30, 0x00DE	; 0x8000de <RXC_ISR>
     a14:	f0 91 df 00 	lds	r31, 0x00DF	; 0x8000df <RXC_ISR+0x1>
     a18:	09 95       	icall
}
     a1a:	ff 91       	pop	r31
     a1c:	ef 91       	pop	r30
     a1e:	bf 91       	pop	r27
     a20:	af 91       	pop	r26
     a22:	9f 91       	pop	r25
     a24:	8f 91       	pop	r24
     a26:	7f 91       	pop	r23
     a28:	6f 91       	pop	r22
     a2a:	5f 91       	pop	r21
     a2c:	4f 91       	pop	r20
     a2e:	3f 91       	pop	r19
     a30:	2f 91       	pop	r18
     a32:	0f 90       	pop	r0
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	0f 90       	pop	r0
     a38:	1f 90       	pop	r1
     a3a:	18 95       	reti

00000a3c <__vector_14>:
ISR(USART_UDRE_vect){
     a3c:	1f 92       	push	r1
     a3e:	0f 92       	push	r0
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	0f 92       	push	r0
     a44:	11 24       	eor	r1, r1
     a46:	2f 93       	push	r18
     a48:	3f 93       	push	r19
     a4a:	4f 93       	push	r20
     a4c:	5f 93       	push	r21
     a4e:	6f 93       	push	r22
     a50:	7f 93       	push	r23
     a52:	8f 93       	push	r24
     a54:	9f 93       	push	r25
     a56:	af 93       	push	r26
     a58:	bf 93       	push	r27
     a5a:	ef 93       	push	r30
     a5c:	ff 93       	push	r31
TXC_ISR();	
     a5e:	e0 91 dc 00 	lds	r30, 0x00DC	; 0x8000dc <TXC_ISR>
     a62:	f0 91 dd 00 	lds	r31, 0x00DD	; 0x8000dd <TXC_ISR+0x1>
     a66:	09 95       	icall
     a68:	ff 91       	pop	r31
     a6a:	ef 91       	pop	r30
     a6c:	bf 91       	pop	r27
     a6e:	af 91       	pop	r26
     a70:	9f 91       	pop	r25
     a72:	8f 91       	pop	r24
     a74:	7f 91       	pop	r23
     a76:	6f 91       	pop	r22
     a78:	5f 91       	pop	r21
     a7a:	4f 91       	pop	r20
     a7c:	3f 91       	pop	r19
     a7e:	2f 91       	pop	r18
     a80:	0f 90       	pop	r0
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	0f 90       	pop	r0
     a86:	1f 90       	pop	r1
     a88:	18 95       	reti

00000a8a <recieve_button>:
}

void recieve_button(void* ptr)
{
	uint8_t counter = 0;
	uint8_t flag = 0;
     a8a:	00 e0       	ldi	r16, 0x00	; 0
	}
}

void recieve_button(void* ptr)
{
	uint8_t counter = 0;
     a8c:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t flag = 0;
	
	while(1)
	{
		if (digitalRead(A0) == 0)
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <digitalRead>
     a94:	81 11       	cpse	r24, r1
     a96:	2d c0       	rjmp	.+90     	; 0xaf2 <recieve_button+0x68>
		{
			if(queue1 != NULL)
     a98:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <queue1>
     a9c:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <queue1+0x1>
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	a9 f1       	breq	.+106    	; 0xb0e <recieve_button+0x84>
			{
				xQueueOverwrite(queue1, &pins[counter]);
     aa4:	c1 2f       	mov	r28, r17
     aa6:	d0 e0       	ldi	r29, 0x00	; 0
     aa8:	be 01       	movw	r22, r28
     aaa:	68 59       	subi	r22, 0x98	; 152
     aac:	7f 4f       	sbci	r23, 0xFF	; 255
     aae:	22 e0       	ldi	r18, 0x02	; 2
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <xQueueGenericSend>
				
				if (queue2 != NULL)
     ab8:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <queue2>
     abc:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <queue2+0x1>
     ac0:	00 97       	sbiw	r24, 0x00	; 0
     ac2:	e9 f0       	breq	.+58     	; 0xafe <recieve_button+0x74>
				{
					xQueueOverwrite(queue2, &colors[counter]);
     ac4:	be 01       	movw	r22, r28
     ac6:	66 0f       	add	r22, r22
     ac8:	77 1f       	adc	r23, r23
     aca:	60 5a       	subi	r22, 0xA0	; 160
     acc:	7f 4f       	sbci	r23, 0xFF	; 255
     ace:	22 e0       	ldi	r18, 0x02	; 2
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <xQueueGenericSend>
					
					if(counter < 3 && flag == 0)
     ad8:	13 30       	cpi	r17, 0x03	; 3
     ada:	28 f4       	brcc	.+10     	; 0xae6 <recieve_button+0x5c>
     adc:	01 11       	cpse	r16, r1
     ade:	03 c0       	rjmp	.+6      	; 0xae6 <recieve_button+0x5c>
					{
						counter++;
     ae0:	1f 5f       	subi	r17, 0xFF	; 255
					else if (counter >= 3 && flag == 0)
					{
						counter = 0;
					}
				}
				flag=1;
     ae2:	01 e0       	ldi	r16, 0x01	; 1
				{
					xQueueOverwrite(queue2, &colors[counter]);
					
					if(counter < 3 && flag == 0)
					{
						counter++;
     ae4:	14 c0       	rjmp	.+40     	; 0xb0e <recieve_button+0x84>
					}
					else if (counter >= 3 && flag == 0)
     ae6:	13 30       	cpi	r17, 0x03	; 3
     ae8:	60 f0       	brcs	.+24     	; 0xb02 <recieve_button+0x78>
     aea:	00 23       	and	r16, r16
     aec:	61 f0       	breq	.+24     	; 0xb06 <recieve_button+0x7c>
					{
						counter = 0;
					}
				}
				flag=1;
     aee:	01 e0       	ldi	r16, 0x01	; 1
     af0:	0e c0       	rjmp	.+28     	; 0xb0e <recieve_button+0x84>
			}
		}
		
		else if(digitalRead(A0) == 1)
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <digitalRead>
     af8:	81 11       	cpse	r24, r1
     afa:	08 c0       	rjmp	.+16     	; 0xb0c <recieve_button+0x82>
     afc:	08 c0       	rjmp	.+16     	; 0xb0e <recieve_button+0x84>
					else if (counter >= 3 && flag == 0)
					{
						counter = 0;
					}
				}
				flag=1;
     afe:	01 e0       	ldi	r16, 0x01	; 1
     b00:	06 c0       	rjmp	.+12     	; 0xb0e <recieve_button+0x84>
     b02:	01 e0       	ldi	r16, 0x01	; 1
     b04:	04 c0       	rjmp	.+8      	; 0xb0e <recieve_button+0x84>
     b06:	01 e0       	ldi	r16, 0x01	; 1
					{
						counter++;
					}
					else if (counter >= 3 && flag == 0)
					{
						counter = 0;
     b08:	10 e0       	ldi	r17, 0x00	; 0
     b0a:	01 c0       	rjmp	.+2      	; 0xb0e <recieve_button+0x84>
			}
		}
		
		else if(digitalRead(A0) == 1)
		{
			flag=0;
     b0c:	00 e0       	ldi	r16, 0x00	; 0
		}
		vTaskSuspend(NULL);
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 e5 11 	call	0x23ca	; 0x23ca <vTaskSuspend>
	}
     b16:	bb cf       	rjmp	.-138    	; 0xa8e <recieve_button+0x4>

00000b18 <led_output>:
}

void led_output(void* ptr)
{
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	2b 97       	sbiw	r28, 0x0b	; 11
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	f8 94       	cli
     b26:	de bf       	out	0x3e, r29	; 62
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	cd bf       	out	0x3d, r28	; 61
	uint8_t value=0;
     b2c:	19 82       	std	Y+1, r1	; 0x01
	char string_values[10];
	
	while(1)
	{
		if(xQueuePeek(queue1, &value, 1) == pdPASS)
     b2e:	41 e0       	ldi	r20, 0x01	; 1
     b30:	50 e0       	ldi	r21, 0x00	; 0
     b32:	be 01       	movw	r22, r28
     b34:	6f 5f       	subi	r22, 0xFF	; 255
     b36:	7f 4f       	sbci	r23, 0xFF	; 255
     b38:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <queue1>
     b3c:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <queue1+0x1>
     b40:	0e 94 65 0b 	call	0x16ca	; 0x16ca <xQueuePeek>
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	09 f0       	breq	.+2      	; 0xb4a <led_output+0x32>
     b48:	7b c0       	rjmp	.+246    	; 0xc40 <led_output+0x128>
		{
			if (xQueuePeek(queue2, string_values, 1) == pdPASS)
     b4a:	41 e0       	ldi	r20, 0x01	; 1
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	be 01       	movw	r22, r28
     b50:	6e 5f       	subi	r22, 0xFE	; 254
     b52:	7f 4f       	sbci	r23, 0xFF	; 255
     b54:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <queue2>
     b58:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <queue2+0x1>
     b5c:	0e 94 65 0b 	call	0x16ca	; 0x16ca <xQueuePeek>
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	09 f0       	breq	.+2      	; 0xb66 <led_output+0x4e>
     b64:	6d c0       	rjmp	.+218    	; 0xc40 <led_output+0x128>
			{
				if(value == A1)
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	a9 f4       	brne	.+42     	; 0xb96 <led_output+0x7e>
				{
					digitalWrite(A1, HIGH);
     b6c:	63 e3       	ldi	r22, 0x33	; 51
     b6e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					digitalWrite(A2, LOW);
     b72:	62 e3       	ldi	r22, 0x32	; 50
     b74:	82 e0       	ldi	r24, 0x02	; 2
     b76:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					digitalWrite(A3, LOW);
     b7a:	62 e3       	ldi	r22, 0x32	; 50
     b7c:	83 e0       	ldi	r24, 0x03	; 3
     b7e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					digitalWrite(A4, LOW);
     b82:	62 e3       	ldi	r22, 0x32	; 50
     b84:	84 e0       	ldi	r24, 0x04	; 4
     b86:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					Serial_print("...RED...", STRING);
     b8a:	6b e2       	ldi	r22, 0x2B	; 43
     b8c:	85 e7       	ldi	r24, 0x75	; 117
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <Serial_print>
     b94:	55 c0       	rjmp	.+170    	; 0xc40 <led_output+0x128>
				}
				else if(value == A2)
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	a9 f4       	brne	.+42     	; 0xbc4 <led_output+0xac>
				{
					digitalWrite(A2, HIGH);
     b9a:	63 e3       	ldi	r22, 0x33	; 51
     b9c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					digitalWrite(A1, LOW);
     ba0:	62 e3       	ldi	r22, 0x32	; 50
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					digitalWrite(A3, LOW);
     ba8:	62 e3       	ldi	r22, 0x32	; 50
     baa:	83 e0       	ldi	r24, 0x03	; 3
     bac:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					digitalWrite(A4, LOW);
     bb0:	62 e3       	ldi	r22, 0x32	; 50
     bb2:	84 e0       	ldi	r24, 0x04	; 4
     bb4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					Serial_print("...YELLOW...", STRING);
     bb8:	6b e2       	ldi	r22, 0x2B	; 43
     bba:	8f e7       	ldi	r24, 0x7F	; 127
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <Serial_print>
     bc2:	3e c0       	rjmp	.+124    	; 0xc40 <led_output+0x128>
				}
				else if(value == A3)
     bc4:	83 30       	cpi	r24, 0x03	; 3
     bc6:	a9 f4       	brne	.+42     	; 0xbf2 <led_output+0xda>
				{
					digitalWrite(A3, HIGH);
     bc8:	63 e3       	ldi	r22, 0x33	; 51
     bca:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					digitalWrite(A1, LOW);
     bce:	62 e3       	ldi	r22, 0x32	; 50
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					digitalWrite(A2, LOW);
     bd6:	62 e3       	ldi	r22, 0x32	; 50
     bd8:	82 e0       	ldi	r24, 0x02	; 2
     bda:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					digitalWrite(A4, LOW);
     bde:	62 e3       	ldi	r22, 0x32	; 50
     be0:	84 e0       	ldi	r24, 0x04	; 4
     be2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					Serial_print("...BLUE...", STRING);
     be6:	6b e2       	ldi	r22, 0x2B	; 43
     be8:	8c e8       	ldi	r24, 0x8C	; 140
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <Serial_print>
     bf0:	27 c0       	rjmp	.+78     	; 0xc40 <led_output+0x128>
				}
				else if(value == A4)
     bf2:	84 30       	cpi	r24, 0x04	; 4
     bf4:	a9 f4       	brne	.+42     	; 0xc20 <led_output+0x108>
				{
					digitalWrite(A4, HIGH);
     bf6:	63 e3       	ldi	r22, 0x33	; 51
     bf8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					digitalWrite(A1, LOW);
     bfc:	62 e3       	ldi	r22, 0x32	; 50
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					digitalWrite(A2, LOW);
     c04:	62 e3       	ldi	r22, 0x32	; 50
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					digitalWrite(A3, LOW);
     c0c:	62 e3       	ldi	r22, 0x32	; 50
     c0e:	83 e0       	ldi	r24, 0x03	; 3
     c10:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					Serial_print("...GREEN...", STRING);
     c14:	6b e2       	ldi	r22, 0x2B	; 43
     c16:	87 e9       	ldi	r24, 0x97	; 151
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <Serial_print>
     c1e:	10 c0       	rjmp	.+32     	; 0xc40 <led_output+0x128>
				}
				else
				{
					  digitalWrite(A1, LOW);
     c20:	62 e3       	ldi	r22, 0x32	; 50
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					  digitalWrite(A2, LOW);
     c28:	62 e3       	ldi	r22, 0x32	; 50
     c2a:	82 e0       	ldi	r24, 0x02	; 2
     c2c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					  digitalWrite(A3, LOW);
     c30:	62 e3       	ldi	r22, 0x32	; 50
     c32:	83 e0       	ldi	r24, 0x03	; 3
     c34:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
					  digitalWrite(A4, LOW);
     c38:	62 e3       	ldi	r22, 0x32	; 50
     c3a:	84 e0       	ldi	r24, 0x04	; 4
     c3c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
				}
			}
		}
		vTaskPrioritySet(NULL, 3);
     c40:	63 e0       	ldi	r22, 0x03	; 3
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vTaskPrioritySet>
		vTaskResume(task1);
     c4a:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <task1>
     c4e:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <task1+0x1>
     c52:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <vTaskResume>
		vTaskPrioritySet(NULL, 1);
     c56:	61 e0       	ldi	r22, 0x01	; 1
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vTaskPrioritySet>
	}
     c60:	66 cf       	rjmp	.-308    	; 0xb2e <led_output+0x16>

00000c62 <main>:

void led_output(void* ptr);
TaskHandle_t task2;

int main(void)
{
     c62:	ef 92       	push	r14
     c64:	ff 92       	push	r15
     c66:	0f 93       	push	r16
	Serial_begin(9600);
     c68:	80 e8       	ldi	r24, 0x80	; 128
     c6a:	95 e2       	ldi	r25, 0x25	; 37
     c6c:	0e 94 98 04 	call	0x930	; 0x930 <Serial_begin>
	
	pinMode(A0,INPUT_PULLUP);
     c70:	6a e2       	ldi	r22, 0x2A	; 42
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	0e 94 49 00 	call	0x92	; 0x92 <pinMode>
	pinMode(A1,OUTPUT);
     c78:	69 e2       	ldi	r22, 0x29	; 41
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	0e 94 49 00 	call	0x92	; 0x92 <pinMode>
	pinMode(A2,OUTPUT);
     c80:	69 e2       	ldi	r22, 0x29	; 41
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	0e 94 49 00 	call	0x92	; 0x92 <pinMode>
	pinMode(A3,OUTPUT);
     c88:	69 e2       	ldi	r22, 0x29	; 41
     c8a:	83 e0       	ldi	r24, 0x03	; 3
     c8c:	0e 94 49 00 	call	0x92	; 0x92 <pinMode>
	pinMode(A4,OUTPUT);
     c90:	69 e2       	ldi	r22, 0x29	; 41
     c92:	84 e0       	ldi	r24, 0x04	; 4
     c94:	0e 94 49 00 	call	0x92	; 0x92 <pinMode>
	
	queue1 = xQueueCreate(1, sizeof(pins));
     c98:	40 e0       	ldi	r20, 0x00	; 0
     c9a:	64 e0       	ldi	r22, 0x04	; 4
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	0e 94 92 0a 	call	0x1524	; 0x1524 <xQueueGenericCreate>
     ca2:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <queue1+0x1>
     ca6:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <queue1>
	queue2 = xQueueCreate(1, sizeof(colors));
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	68 e0       	ldi	r22, 0x08	; 8
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	0e 94 92 0a 	call	0x1524	; 0x1524 <xQueueGenericCreate>
     cb4:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <queue2+0x1>
     cb8:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <queue2>
	
	xTaskCreate(recieve_button, "read_button" , 250, NULL, 2, task1);
     cbc:	e0 90 7d 04 	lds	r14, 0x047D	; 0x80047d <task1>
     cc0:	f0 90 7e 04 	lds	r15, 0x047E	; 0x80047e <task1+0x1>
     cc4:	02 e0       	ldi	r16, 0x02	; 2
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	4a ef       	ldi	r20, 0xFA	; 250
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	63 ea       	ldi	r22, 0xA3	; 163
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	85 e4       	ldi	r24, 0x45	; 69
     cd4:	95 e0       	ldi	r25, 0x05	; 5
     cd6:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <xTaskCreate>
	xTaskCreate(led_output, "output_led" , 250, NULL, 1, task2);
     cda:	e0 90 7f 04 	lds	r14, 0x047F	; 0x80047f <task2>
     cde:	f0 90 80 04 	lds	r15, 0x0480	; 0x800480 <task2+0x1>
     ce2:	01 e0       	ldi	r16, 0x01	; 1
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	4a ef       	ldi	r20, 0xFA	; 250
     cea:	50 e0       	ldi	r21, 0x00	; 0
     cec:	6f ea       	ldi	r22, 0xAF	; 175
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	8c e8       	ldi	r24, 0x8C	; 140
     cf2:	95 e0       	ldi	r25, 0x05	; 5
     cf4:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <xTaskCreate>
	
	vTaskStartScheduler();
     cf8:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <vTaskStartScheduler>
}
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	08 95       	ret

00000d08 <vApplicationIdleHook>:

void vApplicationIdleHook(void*ptr)
{
     d08:	ff cf       	rjmp	.-2      	; 0xd08 <vApplicationIdleHook>

00000d0a <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     d0a:	a5 ee       	ldi	r26, 0xE5	; 229
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e9 ee       	ldi	r30, 0xE9	; 233
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	11 96       	adiw	r26, 0x01	; 1
     d14:	fc 93       	st	X, r31
     d16:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
     d18:	13 96       	adiw	r26, 0x03	; 3
     d1a:	1c 92       	st	X, r1
     d1c:	1e 92       	st	-X, r1
     d1e:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     d20:	a1 ee       	ldi	r26, 0xE1	; 225
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	8f e1       	ldi	r24, 0x1F	; 31
     d26:	93 e0       	ldi	r25, 0x03	; 3
     d28:	13 96       	adiw	r26, 0x03	; 3
     d2a:	9c 93       	st	X, r25
     d2c:	8e 93       	st	-X, r24
     d2e:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
     d30:	11 96       	adiw	r26, 0x01	; 1
     d32:	1c 92       	st	X, r1
     d34:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     d36:	93 83       	std	Z+3, r25	; 0x03
     d38:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     d3a:	b1 83       	std	Z+1, r27	; 0x01
     d3c:	a0 83       	st	Z, r26
     d3e:	08 95       	ret

00000d40 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     d40:	ef 92       	push	r14
     d42:	ff 92       	push	r15
     d44:	0f 93       	push	r16
     d46:	1f 93       	push	r17
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     d4e:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     d52:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <xHeapHasBeenInitialised.2121>
     d56:	81 11       	cpse	r24, r1
     d58:	05 c0       	rjmp	.+10     	; 0xd64 <pvPortMalloc+0x24>
        {
            prvHeapInit();
     d5a:	0e 94 85 06 	call	0xd0a	; 0xd0a <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <xHeapHasBeenInitialised.2121>
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     d64:	20 97       	sbiw	r28, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <pvPortMalloc+0x44>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
     d68:	ce 01       	movw	r24, r28
     d6a:	04 96       	adiw	r24, 0x04	; 4
            xHeapHasBeenInitialised = pdTRUE;
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     d6c:	c8 17       	cp	r28, r24
     d6e:	d9 07       	cpc	r29, r25
     d70:	38 f4       	brcc	.+14     	; 0xd80 <pvPortMalloc+0x40>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
        {
            xWantedSize += heapSTRUCT_SIZE;

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
     d72:	25 96       	adiw	r28, 0x05	; 5
     d74:	8c 17       	cp	r24, r28
     d76:	9d 07       	cpc	r25, r29
     d78:	28 f0       	brcs	.+10     	; 0xd84 <pvPortMalloc+0x44>
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
            }
            else
            {
                xWantedSize = 0;
     d7a:	c0 e0       	ldi	r28, 0x00	; 0
     d7c:	d0 e0       	ldi	r29, 0x00	; 0
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <pvPortMalloc+0x44>
            }
        }
        else
        {
            xWantedSize = 0;
     d80:	c0 e0       	ldi	r28, 0x00	; 0
     d82:	d0 e0       	ldi	r29, 0x00	; 0
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     d84:	20 97       	sbiw	r28, 0x00	; 0
     d86:	09 f4       	brne	.+2      	; 0xd8a <pvPortMalloc+0x4a>
     d88:	5e c0       	rjmp	.+188    	; 0xe46 <pvPortMalloc+0x106>
     d8a:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <xFreeBytesRemaining>
     d8e:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <xFreeBytesRemaining+0x1>
     d92:	2c 17       	cp	r18, r28
     d94:	3d 07       	cpc	r19, r29
     d96:	08 f4       	brcc	.+2      	; 0xd9a <pvPortMalloc+0x5a>
     d98:	59 c0       	rjmp	.+178    	; 0xe4c <pvPortMalloc+0x10c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;
     d9a:	e0 91 e5 00 	lds	r30, 0x00E5	; 0x8000e5 <xStart>
     d9e:	f0 91 e6 00 	lds	r31, 0x00E6	; 0x8000e6 <xStart+0x1>

        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
     da2:	a5 ee       	ldi	r26, 0xE5	; 229
     da4:	b0 e0       	ldi	r27, 0x00	; 0
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     da6:	02 c0       	rjmp	.+4      	; 0xdac <pvPortMalloc+0x6c>
            {
                pxPreviousBlock = pxBlock;
     da8:	df 01       	movw	r26, r30
                pxBlock = pxBlock->pxNextFreeBlock;
     daa:	fc 01       	movw	r30, r24
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     dac:	82 81       	ldd	r24, Z+2	; 0x02
     dae:	93 81       	ldd	r25, Z+3	; 0x03
     db0:	8c 17       	cp	r24, r28
     db2:	9d 07       	cpc	r25, r29
     db4:	20 f4       	brcc	.+8      	; 0xdbe <pvPortMalloc+0x7e>
     db6:	80 81       	ld	r24, Z
     db8:	91 81       	ldd	r25, Z+1	; 0x01
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	a9 f7       	brne	.-22     	; 0xda8 <pvPortMalloc+0x68>
                pxPreviousBlock = pxBlock;
                pxBlock = pxBlock->pxNextFreeBlock;
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	e1 3e       	cpi	r30, 0xE1	; 225
     dc2:	f8 07       	cpc	r31, r24
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <pvPortMalloc+0x88>
     dc6:	45 c0       	rjmp	.+138    	; 0xe52 <pvPortMalloc+0x112>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     dc8:	0d 91       	ld	r16, X+
     dca:	1c 91       	ld	r17, X
     dcc:	11 97       	sbiw	r26, 0x01	; 1
     dce:	0c 5f       	subi	r16, 0xFC	; 252
     dd0:	1f 4f       	sbci	r17, 0xFF	; 255

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     dd2:	80 81       	ld	r24, Z
     dd4:	91 81       	ldd	r25, Z+1	; 0x01
     dd6:	8d 93       	st	X+, r24
     dd8:	9c 93       	st	X, r25

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     dda:	82 81       	ldd	r24, Z+2	; 0x02
     ddc:	93 81       	ldd	r25, Z+3	; 0x03
     dde:	8c 1b       	sub	r24, r28
     de0:	9d 0b       	sbc	r25, r29
     de2:	89 30       	cpi	r24, 0x09	; 9
     de4:	91 05       	cpc	r25, r1
     de6:	30 f1       	brcs	.+76     	; 0xe34 <pvPortMalloc+0xf4>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     de8:	bf 01       	movw	r22, r30
     dea:	6c 0f       	add	r22, r28
     dec:	7d 1f       	adc	r23, r29

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     dee:	db 01       	movw	r26, r22
     df0:	13 96       	adiw	r26, 0x03	; 3
     df2:	9c 93       	st	X, r25
     df4:	8e 93       	st	-X, r24
     df6:	12 97       	sbiw	r26, 0x02	; 2
                    pxBlock->xBlockSize = xWantedSize;
     df8:	d3 83       	std	Z+3, r29	; 0x03
     dfa:	c2 83       	std	Z+2, r28	; 0x02

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     dfc:	12 96       	adiw	r26, 0x02	; 2
     dfe:	4d 91       	ld	r20, X+
     e00:	5c 91       	ld	r21, X
     e02:	13 97       	sbiw	r26, 0x03	; 3
     e04:	0f 2e       	mov	r0, r31
     e06:	f5 ee       	ldi	r31, 0xE5	; 229
     e08:	ef 2e       	mov	r14, r31
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	ff 2e       	mov	r15, r31
     e0e:	f0 2d       	mov	r31, r0
     e10:	01 c0       	rjmp	.+2      	; 0xe14 <pvPortMalloc+0xd4>
     e12:	7d 01       	movw	r14, r26
     e14:	e7 01       	movw	r28, r14
     e16:	a8 81       	ld	r26, Y
     e18:	b9 81       	ldd	r27, Y+1	; 0x01
     e1a:	12 96       	adiw	r26, 0x02	; 2
     e1c:	8d 91       	ld	r24, X+
     e1e:	9c 91       	ld	r25, X
     e20:	13 97       	sbiw	r26, 0x03	; 3
     e22:	84 17       	cp	r24, r20
     e24:	95 07       	cpc	r25, r21
     e26:	a8 f3       	brcs	.-22     	; 0xe12 <pvPortMalloc+0xd2>
     e28:	eb 01       	movw	r28, r22
     e2a:	b9 83       	std	Y+1, r27	; 0x01
     e2c:	a8 83       	st	Y, r26
     e2e:	d7 01       	movw	r26, r14
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
     e34:	82 81       	ldd	r24, Z+2	; 0x02
     e36:	93 81       	ldd	r25, Z+3	; 0x03
     e38:	28 1b       	sub	r18, r24
     e3a:	39 0b       	sbc	r19, r25
     e3c:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <xFreeBytesRemaining+0x1>
     e40:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <xFreeBytesRemaining>
     e44:	08 c0       	rjmp	.+16     	; 0xe56 <pvPortMalloc+0x116>

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     e46:	00 e0       	ldi	r16, 0x00	; 0
     e48:	10 e0       	ldi	r17, 0x00	; 0
     e4a:	05 c0       	rjmp	.+10     	; 0xe56 <pvPortMalloc+0x116>
     e4c:	00 e0       	ldi	r16, 0x00	; 0
     e4e:	10 e0       	ldi	r17, 0x00	; 0
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <pvPortMalloc+0x116>
     e52:	00 e0       	ldi	r16, 0x00	; 0
     e54:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     e56:	0e 94 bc 10 	call	0x2178	; 0x2178 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     e5a:	c8 01       	movw	r24, r16
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	08 95       	ret

00000e6a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	41 f1       	breq	.+80     	; 0xec6 <vPortFree+0x5c>
     e76:	ec 01       	movw	r28, r24
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     e78:	8c 01       	movw	r16, r24
     e7a:	04 50       	subi	r16, 0x04	; 4
     e7c:	11 09       	sbc	r17, r1

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;

        vTaskSuspendAll();
     e7e:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     e82:	f8 01       	movw	r30, r16
     e84:	42 81       	ldd	r20, Z+2	; 0x02
     e86:	53 81       	ldd	r21, Z+3	; 0x03
     e88:	a5 ee       	ldi	r26, 0xE5	; 229
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	01 c0       	rjmp	.+2      	; 0xe90 <vPortFree+0x26>
     e8e:	df 01       	movw	r26, r30
     e90:	ed 91       	ld	r30, X+
     e92:	fc 91       	ld	r31, X
     e94:	11 97       	sbiw	r26, 0x01	; 1
     e96:	22 81       	ldd	r18, Z+2	; 0x02
     e98:	33 81       	ldd	r19, Z+3	; 0x03
     e9a:	24 17       	cp	r18, r20
     e9c:	35 07       	cpc	r19, r21
     e9e:	b8 f3       	brcs	.-18     	; 0xe8e <vPortFree+0x24>
     ea0:	24 97       	sbiw	r28, 0x04	; 4
     ea2:	f9 83       	std	Y+1, r31	; 0x01
     ea4:	e8 83       	st	Y, r30
     ea6:	0d 93       	st	X+, r16
     ea8:	1c 93       	st	X, r17
            xFreeBytesRemaining += pxLink->xBlockSize;
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	9b 81       	ldd	r25, Y+3	; 0x03
     eae:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <xFreeBytesRemaining>
     eb2:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <xFreeBytesRemaining+0x1>
     eb6:	82 0f       	add	r24, r18
     eb8:	93 1f       	adc	r25, r19
     eba:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <xFreeBytesRemaining+0x1>
     ebe:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <xFreeBytesRemaining>
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
     ec2:	0e 94 bc 10 	call	0x2178	; 0x2178 <xTaskResumeAll>
    }
}
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	08 95       	ret

00000ed0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     ed0:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ed2:	03 96       	adiw	r24, 0x03	; 3
     ed4:	92 83       	std	Z+2, r25	; 0x02
     ed6:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     ed8:	2f ef       	ldi	r18, 0xFF	; 255
     eda:	3f ef       	ldi	r19, 0xFF	; 255
     edc:	34 83       	std	Z+4, r19	; 0x04
     ede:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ee0:	96 83       	std	Z+6, r25	; 0x06
     ee2:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ee4:	90 87       	std	Z+8, r25	; 0x08
     ee6:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     ee8:	10 82       	st	Z, r1
     eea:	08 95       	ret

00000eec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     eec:	fc 01       	movw	r30, r24
     eee:	11 86       	std	Z+9, r1	; 0x09
     ef0:	10 86       	std	Z+8, r1	; 0x08
     ef2:	08 95       	ret

00000ef4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	9c 01       	movw	r18, r24
     efa:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
     efc:	dc 01       	movw	r26, r24
     efe:	11 96       	adiw	r26, 0x01	; 1
     f00:	cd 91       	ld	r28, X+
     f02:	dc 91       	ld	r29, X
     f04:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     f06:	d3 83       	std	Z+3, r29	; 0x03
     f08:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	9d 81       	ldd	r25, Y+5	; 0x05
     f0e:	95 83       	std	Z+5, r25	; 0x05
     f10:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	9d 81       	ldd	r25, Y+5	; 0x05
     f16:	dc 01       	movw	r26, r24
     f18:	13 96       	adiw	r26, 0x03	; 3
     f1a:	7c 93       	st	X, r23
     f1c:	6e 93       	st	-X, r22
     f1e:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     f20:	7d 83       	std	Y+5, r23	; 0x05
     f22:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     f24:	31 87       	std	Z+9, r19	; 0x09
     f26:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     f28:	f9 01       	movw	r30, r18
     f2a:	80 81       	ld	r24, Z
     f2c:	8f 5f       	subi	r24, 0xFF	; 255
     f2e:	80 83       	st	Z, r24
}
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	08 95       	ret

00000f36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     f3c:	48 81       	ld	r20, Y
     f3e:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     f40:	4f 3f       	cpi	r20, 0xFF	; 255
     f42:	2f ef       	ldi	r18, 0xFF	; 255
     f44:	52 07       	cpc	r21, r18
     f46:	21 f4       	brne	.+8      	; 0xf50 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     f48:	fc 01       	movw	r30, r24
     f4a:	a7 81       	ldd	r26, Z+7	; 0x07
     f4c:	b0 85       	ldd	r27, Z+8	; 0x08
     f4e:	0d c0       	rjmp	.+26     	; 0xf6a <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     f50:	dc 01       	movw	r26, r24
     f52:	13 96       	adiw	r26, 0x03	; 3
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <vListInsert+0x22>
     f56:	df 01       	movw	r26, r30
     f58:	12 96       	adiw	r26, 0x02	; 2
     f5a:	ed 91       	ld	r30, X+
     f5c:	fc 91       	ld	r31, X
     f5e:	13 97       	sbiw	r26, 0x03	; 3
     f60:	20 81       	ld	r18, Z
     f62:	31 81       	ldd	r19, Z+1	; 0x01
     f64:	42 17       	cp	r20, r18
     f66:	53 07       	cpc	r21, r19
     f68:	b0 f7       	brcc	.-20     	; 0xf56 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     f6a:	12 96       	adiw	r26, 0x02	; 2
     f6c:	ed 91       	ld	r30, X+
     f6e:	fc 91       	ld	r31, X
     f70:	13 97       	sbiw	r26, 0x03	; 3
     f72:	fb 83       	std	Y+3, r31	; 0x03
     f74:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     f76:	d5 83       	std	Z+5, r29	; 0x05
     f78:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     f7a:	bd 83       	std	Y+5, r27	; 0x05
     f7c:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     f7e:	13 96       	adiw	r26, 0x03	; 3
     f80:	dc 93       	st	X, r29
     f82:	ce 93       	st	-X, r28
     f84:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     f86:	99 87       	std	Y+9, r25	; 0x09
     f88:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     f8a:	fc 01       	movw	r30, r24
     f8c:	20 81       	ld	r18, Z
     f8e:	2f 5f       	subi	r18, 0xFF	; 255
     f90:	20 83       	st	Z, r18
}
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	08 95       	ret

00000f98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     f9e:	a0 85       	ldd	r26, Z+8	; 0x08
     fa0:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     fa2:	c2 81       	ldd	r28, Z+2	; 0x02
     fa4:	d3 81       	ldd	r29, Z+3	; 0x03
     fa6:	84 81       	ldd	r24, Z+4	; 0x04
     fa8:	95 81       	ldd	r25, Z+5	; 0x05
     faa:	9d 83       	std	Y+5, r25	; 0x05
     fac:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     fae:	c4 81       	ldd	r28, Z+4	; 0x04
     fb0:	d5 81       	ldd	r29, Z+5	; 0x05
     fb2:	82 81       	ldd	r24, Z+2	; 0x02
     fb4:	93 81       	ldd	r25, Z+3	; 0x03
     fb6:	9b 83       	std	Y+3, r25	; 0x03
     fb8:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     fba:	11 96       	adiw	r26, 0x01	; 1
     fbc:	8d 91       	ld	r24, X+
     fbe:	9c 91       	ld	r25, X
     fc0:	12 97       	sbiw	r26, 0x02	; 2
     fc2:	e8 17       	cp	r30, r24
     fc4:	f9 07       	cpc	r31, r25
     fc6:	31 f4       	brne	.+12     	; 0xfd4 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     fc8:	84 81       	ldd	r24, Z+4	; 0x04
     fca:	95 81       	ldd	r25, Z+5	; 0x05
     fcc:	12 96       	adiw	r26, 0x02	; 2
     fce:	9c 93       	st	X, r25
     fd0:	8e 93       	st	-X, r24
     fd2:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     fd4:	11 86       	std	Z+9, r1	; 0x09
     fd6:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     fd8:	8c 91       	ld	r24, X
     fda:	81 50       	subi	r24, 0x01	; 1
     fdc:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     fde:	8c 91       	ld	r24, X
}
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	08 95       	ret

00000fe6 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     fe6:	1b bc       	out	0x2b, r1	; 43
     fe8:	8c e7       	ldi	r24, 0x7C	; 124
     fea:	8a bd       	out	0x2a, r24	; 42
     fec:	8b e0       	ldi	r24, 0x0B	; 11
     fee:	8e bd       	out	0x2e, r24	; 46
     ff0:	89 b7       	in	r24, 0x39	; 57
     ff2:	80 61       	ori	r24, 0x10	; 16
     ff4:	89 bf       	out	0x39, r24	; 57
     ff6:	08 95       	ret

00000ff8 <pxPortInitialiseStack>:
     ff8:	31 e1       	ldi	r19, 0x11	; 17
     ffa:	fc 01       	movw	r30, r24
     ffc:	30 83       	st	Z, r19
     ffe:	31 97       	sbiw	r30, 0x01	; 1
    1000:	22 e2       	ldi	r18, 0x22	; 34
    1002:	20 83       	st	Z, r18
    1004:	31 97       	sbiw	r30, 0x01	; 1
    1006:	a3 e3       	ldi	r26, 0x33	; 51
    1008:	a0 83       	st	Z, r26
    100a:	31 97       	sbiw	r30, 0x01	; 1
    100c:	60 83       	st	Z, r22
    100e:	31 97       	sbiw	r30, 0x01	; 1
    1010:	70 83       	st	Z, r23
    1012:	31 97       	sbiw	r30, 0x01	; 1
    1014:	10 82       	st	Z, r1
    1016:	31 97       	sbiw	r30, 0x01	; 1
    1018:	60 e8       	ldi	r22, 0x80	; 128
    101a:	60 83       	st	Z, r22
    101c:	31 97       	sbiw	r30, 0x01	; 1
    101e:	10 82       	st	Z, r1
    1020:	31 97       	sbiw	r30, 0x01	; 1
    1022:	62 e0       	ldi	r22, 0x02	; 2
    1024:	60 83       	st	Z, r22
    1026:	31 97       	sbiw	r30, 0x01	; 1
    1028:	63 e0       	ldi	r22, 0x03	; 3
    102a:	60 83       	st	Z, r22
    102c:	31 97       	sbiw	r30, 0x01	; 1
    102e:	64 e0       	ldi	r22, 0x04	; 4
    1030:	60 83       	st	Z, r22
    1032:	31 97       	sbiw	r30, 0x01	; 1
    1034:	65 e0       	ldi	r22, 0x05	; 5
    1036:	60 83       	st	Z, r22
    1038:	31 97       	sbiw	r30, 0x01	; 1
    103a:	66 e0       	ldi	r22, 0x06	; 6
    103c:	60 83       	st	Z, r22
    103e:	31 97       	sbiw	r30, 0x01	; 1
    1040:	67 e0       	ldi	r22, 0x07	; 7
    1042:	60 83       	st	Z, r22
    1044:	31 97       	sbiw	r30, 0x01	; 1
    1046:	68 e0       	ldi	r22, 0x08	; 8
    1048:	60 83       	st	Z, r22
    104a:	31 97       	sbiw	r30, 0x01	; 1
    104c:	69 e0       	ldi	r22, 0x09	; 9
    104e:	60 83       	st	Z, r22
    1050:	31 97       	sbiw	r30, 0x01	; 1
    1052:	60 e1       	ldi	r22, 0x10	; 16
    1054:	60 83       	st	Z, r22
    1056:	31 97       	sbiw	r30, 0x01	; 1
    1058:	30 83       	st	Z, r19
    105a:	31 97       	sbiw	r30, 0x01	; 1
    105c:	32 e1       	ldi	r19, 0x12	; 18
    105e:	30 83       	st	Z, r19
    1060:	31 97       	sbiw	r30, 0x01	; 1
    1062:	33 e1       	ldi	r19, 0x13	; 19
    1064:	30 83       	st	Z, r19
    1066:	31 97       	sbiw	r30, 0x01	; 1
    1068:	34 e1       	ldi	r19, 0x14	; 20
    106a:	30 83       	st	Z, r19
    106c:	31 97       	sbiw	r30, 0x01	; 1
    106e:	35 e1       	ldi	r19, 0x15	; 21
    1070:	30 83       	st	Z, r19
    1072:	31 97       	sbiw	r30, 0x01	; 1
    1074:	36 e1       	ldi	r19, 0x16	; 22
    1076:	30 83       	st	Z, r19
    1078:	31 97       	sbiw	r30, 0x01	; 1
    107a:	37 e1       	ldi	r19, 0x17	; 23
    107c:	30 83       	st	Z, r19
    107e:	31 97       	sbiw	r30, 0x01	; 1
    1080:	38 e1       	ldi	r19, 0x18	; 24
    1082:	30 83       	st	Z, r19
    1084:	31 97       	sbiw	r30, 0x01	; 1
    1086:	39 e1       	ldi	r19, 0x19	; 25
    1088:	30 83       	st	Z, r19
    108a:	31 97       	sbiw	r30, 0x01	; 1
    108c:	30 e2       	ldi	r19, 0x20	; 32
    108e:	30 83       	st	Z, r19
    1090:	31 97       	sbiw	r30, 0x01	; 1
    1092:	31 e2       	ldi	r19, 0x21	; 33
    1094:	30 83       	st	Z, r19
    1096:	31 97       	sbiw	r30, 0x01	; 1
    1098:	20 83       	st	Z, r18
    109a:	31 97       	sbiw	r30, 0x01	; 1
    109c:	23 e2       	ldi	r18, 0x23	; 35
    109e:	20 83       	st	Z, r18
    10a0:	31 97       	sbiw	r30, 0x01	; 1
    10a2:	40 83       	st	Z, r20
    10a4:	31 97       	sbiw	r30, 0x01	; 1
    10a6:	50 83       	st	Z, r21
    10a8:	31 97       	sbiw	r30, 0x01	; 1
    10aa:	26 e2       	ldi	r18, 0x26	; 38
    10ac:	20 83       	st	Z, r18
    10ae:	31 97       	sbiw	r30, 0x01	; 1
    10b0:	27 e2       	ldi	r18, 0x27	; 39
    10b2:	20 83       	st	Z, r18
    10b4:	31 97       	sbiw	r30, 0x01	; 1
    10b6:	28 e2       	ldi	r18, 0x28	; 40
    10b8:	20 83       	st	Z, r18
    10ba:	31 97       	sbiw	r30, 0x01	; 1
    10bc:	29 e2       	ldi	r18, 0x29	; 41
    10be:	20 83       	st	Z, r18
    10c0:	31 97       	sbiw	r30, 0x01	; 1
    10c2:	20 e3       	ldi	r18, 0x30	; 48
    10c4:	20 83       	st	Z, r18
    10c6:	31 97       	sbiw	r30, 0x01	; 1
    10c8:	21 e3       	ldi	r18, 0x31	; 49
    10ca:	20 83       	st	Z, r18
    10cc:	86 97       	sbiw	r24, 0x26	; 38
    10ce:	08 95       	ret

000010d0 <xPortStartScheduler>:
    10d0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <prvSetupTimerInterrupt>
    10d4:	a0 91 77 04 	lds	r26, 0x0477	; 0x800477 <pxCurrentTCB>
    10d8:	b0 91 78 04 	lds	r27, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    10dc:	cd 91       	ld	r28, X+
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	dd 91       	ld	r29, X+
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	ff 91       	pop	r31
    10e6:	ef 91       	pop	r30
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	bf 91       	pop	r27
    10ee:	af 91       	pop	r26
    10f0:	9f 91       	pop	r25
    10f2:	8f 91       	pop	r24
    10f4:	7f 91       	pop	r23
    10f6:	6f 91       	pop	r22
    10f8:	5f 91       	pop	r21
    10fa:	4f 91       	pop	r20
    10fc:	3f 91       	pop	r19
    10fe:	2f 91       	pop	r18
    1100:	1f 91       	pop	r17
    1102:	0f 91       	pop	r16
    1104:	ff 90       	pop	r15
    1106:	ef 90       	pop	r14
    1108:	df 90       	pop	r13
    110a:	cf 90       	pop	r12
    110c:	bf 90       	pop	r11
    110e:	af 90       	pop	r10
    1110:	9f 90       	pop	r9
    1112:	8f 90       	pop	r8
    1114:	7f 90       	pop	r7
    1116:	6f 90       	pop	r6
    1118:	5f 90       	pop	r5
    111a:	4f 90       	pop	r4
    111c:	3f 90       	pop	r3
    111e:	2f 90       	pop	r2
    1120:	1f 90       	pop	r1
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	0f 90       	pop	r0
    1128:	08 95       	ret
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	08 95       	ret

0000112e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    112e:	0f 92       	push	r0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	0f 92       	push	r0
    1136:	1f 92       	push	r1
    1138:	11 24       	eor	r1, r1
    113a:	2f 92       	push	r2
    113c:	3f 92       	push	r3
    113e:	4f 92       	push	r4
    1140:	5f 92       	push	r5
    1142:	6f 92       	push	r6
    1144:	7f 92       	push	r7
    1146:	8f 92       	push	r8
    1148:	9f 92       	push	r9
    114a:	af 92       	push	r10
    114c:	bf 92       	push	r11
    114e:	cf 92       	push	r12
    1150:	df 92       	push	r13
    1152:	ef 92       	push	r14
    1154:	ff 92       	push	r15
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	2f 93       	push	r18
    115c:	3f 93       	push	r19
    115e:	4f 93       	push	r20
    1160:	5f 93       	push	r21
    1162:	6f 93       	push	r22
    1164:	7f 93       	push	r23
    1166:	8f 93       	push	r24
    1168:	9f 93       	push	r25
    116a:	af 93       	push	r26
    116c:	bf 93       	push	r27
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	ef 93       	push	r30
    1174:	ff 93       	push	r31
    1176:	a0 91 77 04 	lds	r26, 0x0477	; 0x800477 <pxCurrentTCB>
    117a:	b0 91 78 04 	lds	r27, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    117e:	0d b6       	in	r0, 0x3d	; 61
    1180:	0d 92       	st	X+, r0
    1182:	0e b6       	in	r0, 0x3e	; 62
    1184:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1186:	0e 94 91 11 	call	0x2322	; 0x2322 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    118a:	a0 91 77 04 	lds	r26, 0x0477	; 0x800477 <pxCurrentTCB>
    118e:	b0 91 78 04 	lds	r27, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1192:	cd 91       	ld	r28, X+
    1194:	cd bf       	out	0x3d, r28	; 61
    1196:	dd 91       	ld	r29, X+
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	ff 91       	pop	r31
    119c:	ef 91       	pop	r30
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	bf 91       	pop	r27
    11a4:	af 91       	pop	r26
    11a6:	9f 91       	pop	r25
    11a8:	8f 91       	pop	r24
    11aa:	7f 91       	pop	r23
    11ac:	6f 91       	pop	r22
    11ae:	5f 91       	pop	r21
    11b0:	4f 91       	pop	r20
    11b2:	3f 91       	pop	r19
    11b4:	2f 91       	pop	r18
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	ff 90       	pop	r15
    11bc:	ef 90       	pop	r14
    11be:	df 90       	pop	r13
    11c0:	cf 90       	pop	r12
    11c2:	bf 90       	pop	r11
    11c4:	af 90       	pop	r10
    11c6:	9f 90       	pop	r9
    11c8:	8f 90       	pop	r8
    11ca:	7f 90       	pop	r7
    11cc:	6f 90       	pop	r6
    11ce:	5f 90       	pop	r5
    11d0:	4f 90       	pop	r4
    11d2:	3f 90       	pop	r3
    11d4:	2f 90       	pop	r2
    11d6:	1f 90       	pop	r1
    11d8:	0f 90       	pop	r0
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	0f 90       	pop	r0

	asm volatile ( "ret" );
    11de:	08 95       	ret

000011e0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    11e0:	0f 92       	push	r0
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	0f 92       	push	r0
    11e8:	1f 92       	push	r1
    11ea:	11 24       	eor	r1, r1
    11ec:	2f 92       	push	r2
    11ee:	3f 92       	push	r3
    11f0:	4f 92       	push	r4
    11f2:	5f 92       	push	r5
    11f4:	6f 92       	push	r6
    11f6:	7f 92       	push	r7
    11f8:	8f 92       	push	r8
    11fa:	9f 92       	push	r9
    11fc:	af 92       	push	r10
    11fe:	bf 92       	push	r11
    1200:	cf 92       	push	r12
    1202:	df 92       	push	r13
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	2f 93       	push	r18
    120e:	3f 93       	push	r19
    1210:	4f 93       	push	r20
    1212:	5f 93       	push	r21
    1214:	6f 93       	push	r22
    1216:	7f 93       	push	r23
    1218:	8f 93       	push	r24
    121a:	9f 93       	push	r25
    121c:	af 93       	push	r26
    121e:	bf 93       	push	r27
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	ef 93       	push	r30
    1226:	ff 93       	push	r31
    1228:	a0 91 77 04 	lds	r26, 0x0477	; 0x800477 <pxCurrentTCB>
    122c:	b0 91 78 04 	lds	r27, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1230:	0d b6       	in	r0, 0x3d	; 61
    1232:	0d 92       	st	X+, r0
    1234:	0e b6       	in	r0, 0x3e	; 62
    1236:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1238:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <xTaskIncrementTick>
    123c:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    123e:	0e 94 91 11 	call	0x2322	; 0x2322 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1242:	a0 91 77 04 	lds	r26, 0x0477	; 0x800477 <pxCurrentTCB>
    1246:	b0 91 78 04 	lds	r27, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    124a:	cd 91       	ld	r28, X+
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	dd 91       	ld	r29, X+
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	ff 91       	pop	r31
    1254:	ef 91       	pop	r30
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	bf 91       	pop	r27
    125c:	af 91       	pop	r26
    125e:	9f 91       	pop	r25
    1260:	8f 91       	pop	r24
    1262:	7f 91       	pop	r23
    1264:	6f 91       	pop	r22
    1266:	5f 91       	pop	r21
    1268:	4f 91       	pop	r20
    126a:	3f 91       	pop	r19
    126c:	2f 91       	pop	r18
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	df 90       	pop	r13
    1278:	cf 90       	pop	r12
    127a:	bf 90       	pop	r11
    127c:	af 90       	pop	r10
    127e:	9f 90       	pop	r9
    1280:	8f 90       	pop	r8
    1282:	7f 90       	pop	r7
    1284:	6f 90       	pop	r6
    1286:	5f 90       	pop	r5
    1288:	4f 90       	pop	r4
    128a:	3f 90       	pop	r3
    128c:	2f 90       	pop	r2
    128e:	1f 90       	pop	r1
    1290:	0f 90       	pop	r0
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1296:	08 95       	ret

00001298 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    1298:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <vPortYieldFromTick>
		asm volatile ( "reti" );
    129c:	18 95       	reti

0000129e <prvIsQueueEmpty>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	0f 92       	push	r0
    12a4:	fc 01       	movw	r30, r24
    12a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    12a8:	81 11       	cpse	r24, r1
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <prvIsQueueEmpty+0x12>
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <prvIsQueueEmpty+0x14>
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	0f 90       	pop	r0
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	08 95       	ret

000012b8 <prvIsQueueFull>:
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	0f 92       	push	r0
    12be:	fc 01       	movw	r30, r24
    12c0:	22 8d       	ldd	r18, Z+26	; 0x1a
    12c2:	83 8d       	ldd	r24, Z+27	; 0x1b
    12c4:	28 13       	cpse	r18, r24
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <prvIsQueueFull+0x14>
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	01 c0       	rjmp	.+2      	; 0x12ce <prvIsQueueFull+0x16>
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	08 95       	ret

000012d4 <prvCopyDataToQueue>:
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	ec 01       	movw	r28, r24
    12de:	04 2f       	mov	r16, r20
    12e0:	1a 8d       	ldd	r17, Y+26	; 0x1a
    12e2:	4c 8d       	ldd	r20, Y+28	; 0x1c
    12e4:	41 11       	cpse	r20, r1
    12e6:	0c c0       	rjmp	.+24     	; 0x1300 <prvCopyDataToQueue+0x2c>
    12e8:	88 81       	ld	r24, Y
    12ea:	99 81       	ldd	r25, Y+1	; 0x01
    12ec:	89 2b       	or	r24, r25
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <prvCopyDataToQueue+0x1e>
    12f0:	42 c0       	rjmp	.+132    	; 0x1376 <prvCopyDataToQueue+0xa2>
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	9d 81       	ldd	r25, Y+5	; 0x05
    12f6:	0e 94 63 13 	call	0x26c6	; 0x26c6 <xTaskPriorityDisinherit>
    12fa:	1d 82       	std	Y+5, r1	; 0x05
    12fc:	1c 82       	std	Y+4, r1	; 0x04
    12fe:	42 c0       	rjmp	.+132    	; 0x1384 <prvCopyDataToQueue+0xb0>
    1300:	01 11       	cpse	r16, r1
    1302:	17 c0       	rjmp	.+46     	; 0x1332 <prvCopyDataToQueue+0x5e>
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	9b 81       	ldd	r25, Y+3	; 0x03
    130a:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <memcpy>
    130e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	9b 81       	ldd	r25, Y+3	; 0x03
    1314:	82 0f       	add	r24, r18
    1316:	91 1d       	adc	r25, r1
    1318:	9b 83       	std	Y+3, r25	; 0x03
    131a:	8a 83       	std	Y+2, r24	; 0x02
    131c:	2c 81       	ldd	r18, Y+4	; 0x04
    131e:	3d 81       	ldd	r19, Y+5	; 0x05
    1320:	82 17       	cp	r24, r18
    1322:	93 07       	cpc	r25, r19
    1324:	50 f1       	brcs	.+84     	; 0x137a <prvCopyDataToQueue+0xa6>
    1326:	88 81       	ld	r24, Y
    1328:	99 81       	ldd	r25, Y+1	; 0x01
    132a:	9b 83       	std	Y+3, r25	; 0x03
    132c:	8a 83       	std	Y+2, r24	; 0x02
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	29 c0       	rjmp	.+82     	; 0x1384 <prvCopyDataToQueue+0xb0>
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	8e 81       	ldd	r24, Y+6	; 0x06
    1336:	9f 81       	ldd	r25, Y+7	; 0x07
    1338:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <memcpy>
    133c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	91 95       	neg	r25
    1342:	81 95       	neg	r24
    1344:	91 09       	sbc	r25, r1
    1346:	2e 81       	ldd	r18, Y+6	; 0x06
    1348:	3f 81       	ldd	r19, Y+7	; 0x07
    134a:	28 0f       	add	r18, r24
    134c:	39 1f       	adc	r19, r25
    134e:	3f 83       	std	Y+7, r19	; 0x07
    1350:	2e 83       	std	Y+6, r18	; 0x06
    1352:	48 81       	ld	r20, Y
    1354:	59 81       	ldd	r21, Y+1	; 0x01
    1356:	24 17       	cp	r18, r20
    1358:	35 07       	cpc	r19, r21
    135a:	30 f4       	brcc	.+12     	; 0x1368 <prvCopyDataToQueue+0x94>
    135c:	2c 81       	ldd	r18, Y+4	; 0x04
    135e:	3d 81       	ldd	r19, Y+5	; 0x05
    1360:	82 0f       	add	r24, r18
    1362:	93 1f       	adc	r25, r19
    1364:	9f 83       	std	Y+7, r25	; 0x07
    1366:	8e 83       	std	Y+6, r24	; 0x06
    1368:	02 30       	cpi	r16, 0x02	; 2
    136a:	49 f4       	brne	.+18     	; 0x137e <prvCopyDataToQueue+0xaa>
    136c:	11 23       	and	r17, r17
    136e:	49 f0       	breq	.+18     	; 0x1382 <prvCopyDataToQueue+0xae>
    1370:	11 50       	subi	r17, 0x01	; 1
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	07 c0       	rjmp	.+14     	; 0x1384 <prvCopyDataToQueue+0xb0>
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	05 c0       	rjmp	.+10     	; 0x1384 <prvCopyDataToQueue+0xb0>
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	03 c0       	rjmp	.+6      	; 0x1384 <prvCopyDataToQueue+0xb0>
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	01 c0       	rjmp	.+2      	; 0x1384 <prvCopyDataToQueue+0xb0>
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	1f 5f       	subi	r17, 0xFF	; 255
    1386:	1a 8f       	std	Y+26, r17	; 0x1a
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	08 95       	ret

00001392 <prvCopyDataFromQueue>:
    1392:	fc 01       	movw	r30, r24
    1394:	44 8d       	ldd	r20, Z+28	; 0x1c
    1396:	44 23       	and	r20, r20
    1398:	a9 f0       	breq	.+42     	; 0x13c4 <prvCopyDataFromQueue+0x32>
    139a:	50 e0       	ldi	r21, 0x00	; 0
    139c:	26 81       	ldd	r18, Z+6	; 0x06
    139e:	37 81       	ldd	r19, Z+7	; 0x07
    13a0:	24 0f       	add	r18, r20
    13a2:	35 1f       	adc	r19, r21
    13a4:	37 83       	std	Z+7, r19	; 0x07
    13a6:	26 83       	std	Z+6, r18	; 0x06
    13a8:	84 81       	ldd	r24, Z+4	; 0x04
    13aa:	95 81       	ldd	r25, Z+5	; 0x05
    13ac:	28 17       	cp	r18, r24
    13ae:	39 07       	cpc	r19, r25
    13b0:	20 f0       	brcs	.+8      	; 0x13ba <prvCopyDataFromQueue+0x28>
    13b2:	80 81       	ld	r24, Z
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	97 83       	std	Z+7, r25	; 0x07
    13b8:	86 83       	std	Z+6, r24	; 0x06
    13ba:	cb 01       	movw	r24, r22
    13bc:	66 81       	ldd	r22, Z+6	; 0x06
    13be:	77 81       	ldd	r23, Z+7	; 0x07
    13c0:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <memcpy>
    13c4:	08 95       	ret

000013c6 <prvUnlockQueue>:
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	ec 01       	movw	r28, r24
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	0f 92       	push	r0
    13d4:	1e 8d       	ldd	r17, Y+30	; 0x1e
    13d6:	0b c0       	rjmp	.+22     	; 0x13ee <prvUnlockQueue+0x28>
    13d8:	89 89       	ldd	r24, Y+17	; 0x11
    13da:	88 23       	and	r24, r24
    13dc:	51 f0       	breq	.+20     	; 0x13f2 <prvUnlockQueue+0x2c>
    13de:	ce 01       	movw	r24, r28
    13e0:	41 96       	adiw	r24, 0x11	; 17
    13e2:	0e 94 58 12 	call	0x24b0	; 0x24b0 <xTaskRemoveFromEventList>
    13e6:	81 11       	cpse	r24, r1
    13e8:	0e 94 5f 13 	call	0x26be	; 0x26be <vTaskMissedYield>
    13ec:	11 50       	subi	r17, 0x01	; 1
    13ee:	11 16       	cp	r1, r17
    13f0:	9c f3       	brlt	.-26     	; 0x13d8 <prvUnlockQueue+0x12>
    13f2:	8f ef       	ldi	r24, 0xFF	; 255
    13f4:	8e 8f       	std	Y+30, r24	; 0x1e
    13f6:	0f 90       	pop	r0
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	0f 92       	push	r0
    1400:	1d 8d       	ldd	r17, Y+29	; 0x1d
    1402:	0b c0       	rjmp	.+22     	; 0x141a <prvUnlockQueue+0x54>
    1404:	88 85       	ldd	r24, Y+8	; 0x08
    1406:	88 23       	and	r24, r24
    1408:	51 f0       	breq	.+20     	; 0x141e <prvUnlockQueue+0x58>
    140a:	ce 01       	movw	r24, r28
    140c:	08 96       	adiw	r24, 0x08	; 8
    140e:	0e 94 58 12 	call	0x24b0	; 0x24b0 <xTaskRemoveFromEventList>
    1412:	81 11       	cpse	r24, r1
    1414:	0e 94 5f 13 	call	0x26be	; 0x26be <vTaskMissedYield>
    1418:	11 50       	subi	r17, 0x01	; 1
    141a:	11 16       	cp	r1, r17
    141c:	9c f3       	brlt	.-26     	; 0x1404 <prvUnlockQueue+0x3e>
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	8d 8f       	std	Y+29, r24	; 0x1d
    1422:	0f 90       	pop	r0
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	1f 91       	pop	r17
    142c:	08 95       	ret

0000142e <xQueueGenericReset>:
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	fc 01       	movw	r30, r24
    1438:	36 2f       	mov	r19, r22
    143a:	89 2b       	or	r24, r25
    143c:	09 f4       	brne	.+2      	; 0x1440 <xQueueGenericReset+0x12>
    143e:	4d c0       	rjmp	.+154    	; 0x14da <xQueueGenericReset+0xac>
    1440:	23 8d       	ldd	r18, Z+27	; 0x1b
    1442:	22 23       	and	r18, r18
    1444:	09 f4       	brne	.+2      	; 0x1448 <xQueueGenericReset+0x1a>
    1446:	4b c0       	rjmp	.+150    	; 0x14de <xQueueGenericReset+0xb0>
    1448:	02 2f       	mov	r16, r18
    144a:	10 e0       	ldi	r17, 0x00	; 0
    144c:	8f ef       	ldi	r24, 0xFF	; 255
    144e:	9f ef       	ldi	r25, 0xFF	; 255
    1450:	b8 01       	movw	r22, r16
    1452:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__udivmodhi4>
    1456:	44 8d       	ldd	r20, Z+28	; 0x1c
    1458:	84 2f       	mov	r24, r20
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	68 17       	cp	r22, r24
    145e:	79 07       	cpc	r23, r25
    1460:	08 f4       	brcc	.+2      	; 0x1464 <xQueueGenericReset+0x36>
    1462:	3f c0       	rjmp	.+126    	; 0x14e2 <xQueueGenericReset+0xb4>
    1464:	ef 01       	movw	r28, r30
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	0f 92       	push	r0
    146c:	60 81       	ld	r22, Z
    146e:	71 81       	ldd	r23, Z+1	; 0x01
    1470:	fb 01       	movw	r30, r22
    1472:	24 9f       	mul	r18, r20
    1474:	e0 0d       	add	r30, r0
    1476:	f1 1d       	adc	r31, r1
    1478:	11 24       	eor	r1, r1
    147a:	fd 83       	std	Y+5, r31	; 0x05
    147c:	ec 83       	std	Y+4, r30	; 0x04
    147e:	1a 8e       	std	Y+26, r1	; 0x1a
    1480:	7b 83       	std	Y+3, r23	; 0x03
    1482:	6a 83       	std	Y+2, r22	; 0x02
    1484:	01 50       	subi	r16, 0x01	; 1
    1486:	11 09       	sbc	r17, r1
    1488:	80 9f       	mul	r24, r16
    148a:	a0 01       	movw	r20, r0
    148c:	81 9f       	mul	r24, r17
    148e:	50 0d       	add	r21, r0
    1490:	90 9f       	mul	r25, r16
    1492:	50 0d       	add	r21, r0
    1494:	11 24       	eor	r1, r1
    1496:	cb 01       	movw	r24, r22
    1498:	84 0f       	add	r24, r20
    149a:	95 1f       	adc	r25, r21
    149c:	9f 83       	std	Y+7, r25	; 0x07
    149e:	8e 83       	std	Y+6, r24	; 0x06
    14a0:	8f ef       	ldi	r24, 0xFF	; 255
    14a2:	8d 8f       	std	Y+29, r24	; 0x1d
    14a4:	8e 8f       	std	Y+30, r24	; 0x1e
    14a6:	31 11       	cpse	r19, r1
    14a8:	0c c0       	rjmp	.+24     	; 0x14c2 <xQueueGenericReset+0x94>
    14aa:	88 85       	ldd	r24, Y+8	; 0x08
    14ac:	88 23       	and	r24, r24
    14ae:	89 f0       	breq	.+34     	; 0x14d2 <xQueueGenericReset+0xa4>
    14b0:	ce 01       	movw	r24, r28
    14b2:	08 96       	adiw	r24, 0x08	; 8
    14b4:	0e 94 58 12 	call	0x24b0	; 0x24b0 <xTaskRemoveFromEventList>
    14b8:	88 23       	and	r24, r24
    14ba:	59 f0       	breq	.+22     	; 0x14d2 <xQueueGenericReset+0xa4>
    14bc:	0e 94 97 08 	call	0x112e	; 0x112e <vPortYield>
    14c0:	08 c0       	rjmp	.+16     	; 0x14d2 <xQueueGenericReset+0xa4>
    14c2:	ce 01       	movw	r24, r28
    14c4:	08 96       	adiw	r24, 0x08	; 8
    14c6:	0e 94 68 07 	call	0xed0	; 0xed0 <vListInitialise>
    14ca:	ce 01       	movw	r24, r28
    14cc:	41 96       	adiw	r24, 0x11	; 17
    14ce:	0e 94 68 07 	call	0xed0	; 0xed0 <vListInitialise>
    14d2:	0f 90       	pop	r0
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	05 c0       	rjmp	.+10     	; 0x14e4 <xQueueGenericReset+0xb6>
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	03 c0       	rjmp	.+6      	; 0x14e4 <xQueueGenericReset+0xb6>
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	01 c0       	rjmp	.+2      	; 0x14e4 <xQueueGenericReset+0xb6>
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	08 95       	ret

000014ee <prvInitialiseNewQueue>:
    14ee:	ff 92       	push	r15
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	f2 2e       	mov	r15, r18
    14fa:	e8 01       	movw	r28, r16
    14fc:	61 11       	cpse	r22, r1
    14fe:	03 c0       	rjmp	.+6      	; 0x1506 <prvInitialiseNewQueue+0x18>
    1500:	19 83       	std	Y+1, r17	; 0x01
    1502:	08 83       	st	Y, r16
    1504:	02 c0       	rjmp	.+4      	; 0x150a <prvInitialiseNewQueue+0x1c>
    1506:	59 83       	std	Y+1, r21	; 0x01
    1508:	48 83       	st	Y, r20
    150a:	8b 8f       	std	Y+27, r24	; 0x1b
    150c:	6c 8f       	std	Y+28, r22	; 0x1c
    150e:	61 e0       	ldi	r22, 0x01	; 1
    1510:	ce 01       	movw	r24, r28
    1512:	0e 94 17 0a 	call	0x142e	; 0x142e <xQueueGenericReset>
    1516:	f8 a2       	std	Y+32, r15	; 0x20
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	ff 90       	pop	r15
    1522:	08 95       	ret

00001524 <xQueueGenericCreate>:
    1524:	df 92       	push	r13
    1526:	ef 92       	push	r14
    1528:	ff 92       	push	r15
    152a:	0f 93       	push	r16
    152c:	1f 93       	push	r17
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	38 2f       	mov	r19, r24
    1534:	e6 2f       	mov	r30, r22
    1536:	88 23       	and	r24, r24
    1538:	29 f1       	breq	.+74     	; 0x1584 <xQueueGenericCreate+0x60>
    153a:	68 2f       	mov	r22, r24
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	8f ef       	ldi	r24, 0xFF	; 255
    1540:	9f ef       	ldi	r25, 0xFF	; 255
    1542:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__udivmodhi4>
    1546:	8e 2f       	mov	r24, r30
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	68 17       	cp	r22, r24
    154c:	79 07       	cpc	r23, r25
    154e:	e8 f0       	brcs	.+58     	; 0x158a <xQueueGenericCreate+0x66>
    1550:	3e 9f       	mul	r19, r30
    1552:	c0 01       	movw	r24, r0
    1554:	11 24       	eor	r1, r1
    1556:	8f 3d       	cpi	r24, 0xDF	; 223
    1558:	2f ef       	ldi	r18, 0xFF	; 255
    155a:	92 07       	cpc	r25, r18
    155c:	c8 f4       	brcc	.+50     	; 0x1590 <xQueueGenericCreate+0x6c>
    155e:	d4 2e       	mov	r13, r20
    1560:	de 2f       	mov	r29, r30
    1562:	c3 2f       	mov	r28, r19
    1564:	81 96       	adiw	r24, 0x21	; 33
    1566:	0e 94 a0 06 	call	0xd40	; 0xd40 <pvPortMalloc>
    156a:	7c 01       	movw	r14, r24
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	91 f0       	breq	.+36     	; 0x1594 <xQueueGenericCreate+0x70>
    1570:	8c 01       	movw	r16, r24
    1572:	2d 2d       	mov	r18, r13
    1574:	ac 01       	movw	r20, r24
    1576:	4f 5d       	subi	r20, 0xDF	; 223
    1578:	5f 4f       	sbci	r21, 0xFF	; 255
    157a:	6d 2f       	mov	r22, r29
    157c:	8c 2f       	mov	r24, r28
    157e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <prvInitialiseNewQueue>
    1582:	08 c0       	rjmp	.+16     	; 0x1594 <xQueueGenericCreate+0x70>
    1584:	e1 2c       	mov	r14, r1
    1586:	f1 2c       	mov	r15, r1
    1588:	05 c0       	rjmp	.+10     	; 0x1594 <xQueueGenericCreate+0x70>
    158a:	e1 2c       	mov	r14, r1
    158c:	f1 2c       	mov	r15, r1
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <xQueueGenericCreate+0x70>
    1590:	e1 2c       	mov	r14, r1
    1592:	f1 2c       	mov	r15, r1
    1594:	c7 01       	movw	r24, r14
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	ff 90       	pop	r15
    15a0:	ef 90       	pop	r14
    15a2:	df 90       	pop	r13
    15a4:	08 95       	ret

000015a6 <xQueueGenericSend>:
    15a6:	cf 92       	push	r12
    15a8:	df 92       	push	r13
    15aa:	ef 92       	push	r14
    15ac:	ff 92       	push	r15
    15ae:	0f 93       	push	r16
    15b0:	1f 93       	push	r17
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <xQueueGenericSend+0x12>
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <xQueueGenericSend+0x14>
    15ba:	1f 92       	push	r1
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	8c 01       	movw	r16, r24
    15c2:	7b 01       	movw	r14, r22
    15c4:	5d 83       	std	Y+5, r21	; 0x05
    15c6:	4c 83       	std	Y+4, r20	; 0x04
    15c8:	c2 2e       	mov	r12, r18
    15ca:	d1 2c       	mov	r13, r1
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	0f 92       	push	r0
    15d2:	f8 01       	movw	r30, r16
    15d4:	92 8d       	ldd	r25, Z+26	; 0x1a
    15d6:	83 8d       	ldd	r24, Z+27	; 0x1b
    15d8:	98 17       	cp	r25, r24
    15da:	18 f0       	brcs	.+6      	; 0x15e2 <xQueueGenericSend+0x3c>
    15dc:	f2 e0       	ldi	r31, 0x02	; 2
    15de:	cf 12       	cpse	r12, r31
    15e0:	19 c0       	rjmp	.+50     	; 0x1614 <xQueueGenericSend+0x6e>
    15e2:	4c 2d       	mov	r20, r12
    15e4:	b7 01       	movw	r22, r14
    15e6:	c8 01       	movw	r24, r16
    15e8:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <prvCopyDataToQueue>
    15ec:	f8 01       	movw	r30, r16
    15ee:	91 89       	ldd	r25, Z+17	; 0x11
    15f0:	99 23       	and	r25, r25
    15f2:	49 f0       	breq	.+18     	; 0x1606 <xQueueGenericSend+0x60>
    15f4:	c8 01       	movw	r24, r16
    15f6:	41 96       	adiw	r24, 0x11	; 17
    15f8:	0e 94 58 12 	call	0x24b0	; 0x24b0 <xTaskRemoveFromEventList>
    15fc:	88 23       	and	r24, r24
    15fe:	31 f0       	breq	.+12     	; 0x160c <xQueueGenericSend+0x66>
    1600:	0e 94 97 08 	call	0x112e	; 0x112e <vPortYield>
    1604:	03 c0       	rjmp	.+6      	; 0x160c <xQueueGenericSend+0x66>
    1606:	81 11       	cpse	r24, r1
    1608:	0e 94 97 08 	call	0x112e	; 0x112e <vPortYield>
    160c:	0f 90       	pop	r0
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	4d c0       	rjmp	.+154    	; 0x16ae <xQueueGenericSend+0x108>
    1614:	8c 81       	ldd	r24, Y+4	; 0x04
    1616:	9d 81       	ldd	r25, Y+5	; 0x05
    1618:	89 2b       	or	r24, r25
    161a:	21 f4       	brne	.+8      	; 0x1624 <xQueueGenericSend+0x7e>
    161c:	0f 90       	pop	r0
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	45 c0       	rjmp	.+138    	; 0x16ae <xQueueGenericSend+0x108>
    1624:	d1 10       	cpse	r13, r1
    1626:	06 c0       	rjmp	.+12     	; 0x1634 <xQueueGenericSend+0x8e>
    1628:	ce 01       	movw	r24, r28
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	0e 94 15 13 	call	0x262a	; 0x262a <vTaskInternalSetTimeOutState>
    1630:	dd 24       	eor	r13, r13
    1632:	d3 94       	inc	r13
    1634:	0f 90       	pop	r0
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <vTaskSuspendAll>
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	0f 92       	push	r0
    1642:	f8 01       	movw	r30, r16
    1644:	85 8d       	ldd	r24, Z+29	; 0x1d
    1646:	8f 3f       	cpi	r24, 0xFF	; 255
    1648:	09 f4       	brne	.+2      	; 0x164c <xQueueGenericSend+0xa6>
    164a:	15 8e       	std	Z+29, r1	; 0x1d
    164c:	f8 01       	movw	r30, r16
    164e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1650:	8f 3f       	cpi	r24, 0xFF	; 255
    1652:	09 f4       	brne	.+2      	; 0x1656 <xQueueGenericSend+0xb0>
    1654:	16 8e       	std	Z+30, r1	; 0x1e
    1656:	0f 90       	pop	r0
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	be 01       	movw	r22, r28
    165c:	6c 5f       	subi	r22, 0xFC	; 252
    165e:	7f 4f       	sbci	r23, 0xFF	; 255
    1660:	ce 01       	movw	r24, r28
    1662:	01 96       	adiw	r24, 0x01	; 1
    1664:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskCheckForTimeOut>
    1668:	81 11       	cpse	r24, r1
    166a:	1b c0       	rjmp	.+54     	; 0x16a2 <xQueueGenericSend+0xfc>
    166c:	c8 01       	movw	r24, r16
    166e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <prvIsQueueFull>
    1672:	88 23       	and	r24, r24
    1674:	81 f0       	breq	.+32     	; 0x1696 <xQueueGenericSend+0xf0>
    1676:	6c 81       	ldd	r22, Y+4	; 0x04
    1678:	7d 81       	ldd	r23, Y+5	; 0x05
    167a:	c8 01       	movw	r24, r16
    167c:	08 96       	adiw	r24, 0x08	; 8
    167e:	0e 94 46 12 	call	0x248c	; 0x248c <vTaskPlaceOnEventList>
    1682:	c8 01       	movw	r24, r16
    1684:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <prvUnlockQueue>
    1688:	0e 94 bc 10 	call	0x2178	; 0x2178 <xTaskResumeAll>
    168c:	81 11       	cpse	r24, r1
    168e:	9e cf       	rjmp	.-196    	; 0x15cc <xQueueGenericSend+0x26>
    1690:	0e 94 97 08 	call	0x112e	; 0x112e <vPortYield>
    1694:	9b cf       	rjmp	.-202    	; 0x15cc <xQueueGenericSend+0x26>
    1696:	c8 01       	movw	r24, r16
    1698:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <prvUnlockQueue>
    169c:	0e 94 bc 10 	call	0x2178	; 0x2178 <xTaskResumeAll>
    16a0:	95 cf       	rjmp	.-214    	; 0x15cc <xQueueGenericSend+0x26>
    16a2:	c8 01       	movw	r24, r16
    16a4:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <prvUnlockQueue>
    16a8:	0e 94 bc 10 	call	0x2178	; 0x2178 <xTaskResumeAll>
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	ff 90       	pop	r15
    16c2:	ef 90       	pop	r14
    16c4:	df 90       	pop	r13
    16c6:	cf 90       	pop	r12
    16c8:	08 95       	ret

000016ca <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
    16ca:	cf 92       	push	r12
    16cc:	df 92       	push	r13
    16ce:	ef 92       	push	r14
    16d0:	ff 92       	push	r15
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	00 d0       	rcall	.+0      	; 0x16dc <xQueuePeek+0x12>
    16dc:	00 d0       	rcall	.+0      	; 0x16de <xQueuePeek+0x14>
    16de:	1f 92       	push	r1
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	8c 01       	movw	r16, r24
    16e6:	7b 01       	movw	r14, r22
    16e8:	5d 83       	std	Y+5, r21	; 0x05
    16ea:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    16ec:	d1 2c       	mov	r13, r1
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    16f4:	f8 01       	movw	r30, r16
    16f6:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    16f8:	88 23       	and	r24, r24
    16fa:	b9 f0       	breq	.+46     	; 0x172a <xQueuePeek+0x60>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    16fc:	c6 80       	ldd	r12, Z+6	; 0x06
    16fe:	d7 80       	ldd	r13, Z+7	; 0x07

                prvCopyDataFromQueue( pxQueue, pvBuffer );
    1700:	b7 01       	movw	r22, r14
    1702:	c8 01       	movw	r24, r16
    1704:	0e 94 c9 09 	call	0x1392	; 0x1392 <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    1708:	f8 01       	movw	r30, r16
    170a:	d7 82       	std	Z+7, r13	; 0x07
    170c:	c6 82       	std	Z+6, r12	; 0x06

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    170e:	81 89       	ldd	r24, Z+17	; 0x11
    1710:	88 23       	and	r24, r24
    1712:	39 f0       	breq	.+14     	; 0x1722 <xQueuePeek+0x58>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1714:	c8 01       	movw	r24, r16
    1716:	41 96       	adiw	r24, 0x11	; 17
    1718:	0e 94 58 12 	call	0x24b0	; 0x24b0 <xTaskRemoveFromEventList>
    171c:	81 11       	cpse	r24, r1
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
    171e:	0e 94 97 08 	call	0x112e	; 0x112e <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    1722:	0f 90       	pop	r0
    1724:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	53 c0       	rjmp	.+166    	; 0x17d0 <xQueuePeek+0x106>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    172a:	8c 81       	ldd	r24, Y+4	; 0x04
    172c:	9d 81       	ldd	r25, Y+5	; 0x05
    172e:	89 2b       	or	r24, r25
    1730:	21 f4       	brne	.+8      	; 0x173a <xQueuePeek+0x70>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    1732:	0f 90       	pop	r0
    1734:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_PEEK_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	4b c0       	rjmp	.+150    	; 0x17d0 <xQueuePeek+0x106>
                }
                else if( xEntryTimeSet == pdFALSE )
    173a:	d1 10       	cpse	r13, r1
    173c:	06 c0       	rjmp	.+12     	; 0x174a <xQueuePeek+0x80>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    173e:	ce 01       	movw	r24, r28
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	0e 94 15 13 	call	0x262a	; 0x262a <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
    1746:	dd 24       	eor	r13, r13
    1748:	d3 94       	inc	r13
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    174a:	0f 90       	pop	r0
    174c:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
    174e:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	0f 92       	push	r0
    1758:	f8 01       	movw	r30, r16
    175a:	85 8d       	ldd	r24, Z+29	; 0x1d
    175c:	8f 3f       	cpi	r24, 0xFF	; 255
    175e:	09 f4       	brne	.+2      	; 0x1762 <xQueuePeek+0x98>
    1760:	15 8e       	std	Z+29, r1	; 0x1d
    1762:	f8 01       	movw	r30, r16
    1764:	86 8d       	ldd	r24, Z+30	; 0x1e
    1766:	8f 3f       	cpi	r24, 0xFF	; 255
    1768:	09 f4       	brne	.+2      	; 0x176c <xQueuePeek+0xa2>
    176a:	16 8e       	std	Z+30, r1	; 0x1e
    176c:	0f 90       	pop	r0
    176e:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1770:	be 01       	movw	r22, r28
    1772:	6c 5f       	subi	r22, 0xFC	; 252
    1774:	7f 4f       	sbci	r23, 0xFF	; 255
    1776:	ce 01       	movw	r24, r28
    1778:	01 96       	adiw	r24, 0x01	; 1
    177a:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskCheckForTimeOut>
    177e:	81 11       	cpse	r24, r1
    1780:	1b c0       	rjmp	.+54     	; 0x17b8 <xQueuePeek+0xee>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1782:	c8 01       	movw	r24, r16
    1784:	0e 94 4f 09 	call	0x129e	; 0x129e <prvIsQueueEmpty>
    1788:	88 23       	and	r24, r24
    178a:	81 f0       	breq	.+32     	; 0x17ac <xQueuePeek+0xe2>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    178c:	6c 81       	ldd	r22, Y+4	; 0x04
    178e:	7d 81       	ldd	r23, Y+5	; 0x05
    1790:	c8 01       	movw	r24, r16
    1792:	41 96       	adiw	r24, 0x11	; 17
    1794:	0e 94 46 12 	call	0x248c	; 0x248c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    1798:	c8 01       	movw	r24, r16
    179a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    179e:	0e 94 bc 10 	call	0x2178	; 0x2178 <xTaskResumeAll>
    17a2:	81 11       	cpse	r24, r1
    17a4:	a4 cf       	rjmp	.-184    	; 0x16ee <xQueuePeek+0x24>
                {
                    portYIELD_WITHIN_API();
    17a6:	0e 94 97 08 	call	0x112e	; 0x112e <vPortYield>
    17aa:	a1 cf       	rjmp	.-190    	; 0x16ee <xQueuePeek+0x24>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
    17ac:	c8 01       	movw	r24, r16
    17ae:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    17b2:	0e 94 bc 10 	call	0x2178	; 0x2178 <xTaskResumeAll>
    17b6:	9b cf       	rjmp	.-202    	; 0x16ee <xQueuePeek+0x24>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
    17b8:	c8 01       	movw	r24, r16
    17ba:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    17be:	0e 94 bc 10 	call	0x2178	; 0x2178 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    17c2:	c8 01       	movw	r24, r16
    17c4:	0e 94 4f 09 	call	0x129e	; 0x129e <prvIsQueueEmpty>
    17c8:	88 23       	and	r24, r24
    17ca:	09 f4       	brne	.+2      	; 0x17ce <xQueuePeek+0x104>
    17cc:	90 cf       	rjmp	.-224    	; 0x16ee <xQueuePeek+0x24>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                return errQUEUE_EMPTY;
    17ce:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	1f 91       	pop	r17
    17e0:	0f 91       	pop	r16
    17e2:	ff 90       	pop	r15
    17e4:	ef 90       	pop	r14
    17e6:	df 90       	pop	r13
    17e8:	cf 90       	pop	r12
    17ea:	08 95       	ret

000017ec <prvTaskIsTaskSuspended>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    17ec:	fc 01       	movw	r30, r24
    17ee:	22 85       	ldd	r18, Z+10	; 0x0a
    17f0:	33 85       	ldd	r19, Z+11	; 0x0b
    17f2:	28 51       	subi	r18, 0x18	; 24
    17f4:	34 40       	sbci	r19, 0x04	; 4
    17f6:	59 f4       	brne	.+22     	; 0x180e <prvTaskIsTaskSuspended+0x22>
    17f8:	fc 01       	movw	r30, r24
    17fa:	84 89       	ldd	r24, Z+20	; 0x14
    17fc:	95 89       	ldd	r25, Z+21	; 0x15
    17fe:	f4 e0       	ldi	r31, 0x04	; 4
    1800:	8b 32       	cpi	r24, 0x2B	; 43
    1802:	9f 07       	cpc	r25, r31
    1804:	31 f0       	breq	.+12     	; 0x1812 <prvTaskIsTaskSuspended+0x26>
    1806:	89 2b       	or	r24, r25
    1808:	31 f0       	breq	.+12     	; 0x1816 <prvTaskIsTaskSuspended+0x2a>
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	08 95       	ret
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	08 95       	ret
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	08 95       	ret
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	08 95       	ret

0000181a <prvResetNextTaskUnblockTime>:
    181a:	e0 91 36 04 	lds	r30, 0x0436	; 0x800436 <pxDelayedTaskList>
    181e:	f0 91 37 04 	lds	r31, 0x0437	; 0x800437 <pxDelayedTaskList+0x1>
    1822:	80 81       	ld	r24, Z
    1824:	81 11       	cpse	r24, r1
    1826:	07 c0       	rjmp	.+14     	; 0x1836 <prvResetNextTaskUnblockTime+0x1c>
    1828:	8f ef       	ldi	r24, 0xFF	; 255
    182a:	9f ef       	ldi	r25, 0xFF	; 255
    182c:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <xNextTaskUnblockTime+0x1>
    1830:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <xNextTaskUnblockTime>
    1834:	08 95       	ret
    1836:	e0 91 36 04 	lds	r30, 0x0436	; 0x800436 <pxDelayedTaskList>
    183a:	f0 91 37 04 	lds	r31, 0x0437	; 0x800437 <pxDelayedTaskList+0x1>
    183e:	05 80       	ldd	r0, Z+5	; 0x05
    1840:	f6 81       	ldd	r31, Z+6	; 0x06
    1842:	e0 2d       	mov	r30, r0
    1844:	80 81       	ld	r24, Z
    1846:	91 81       	ldd	r25, Z+1	; 0x01
    1848:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <xNextTaskUnblockTime+0x1>
    184c:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <xNextTaskUnblockTime>
    1850:	08 95       	ret

00001852 <prvDeleteTCB>:
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	ec 01       	movw	r28, r24
    1858:	8f 89       	ldd	r24, Y+23	; 0x17
    185a:	98 8d       	ldd	r25, Y+24	; 0x18
    185c:	0e 94 35 07 	call	0xe6a	; 0xe6a <vPortFree>
    1860:	ce 01       	movw	r24, r28
    1862:	0e 94 35 07 	call	0xe6a	; 0xe6a <vPortFree>
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	08 95       	ret

0000186c <prvInitialiseNewTask>:
    186c:	2f 92       	push	r2
    186e:	3f 92       	push	r3
    1870:	4f 92       	push	r4
    1872:	5f 92       	push	r5
    1874:	6f 92       	push	r6
    1876:	7f 92       	push	r7
    1878:	8f 92       	push	r8
    187a:	9f 92       	push	r9
    187c:	af 92       	push	r10
    187e:	bf 92       	push	r11
    1880:	cf 92       	push	r12
    1882:	df 92       	push	r13
    1884:	ef 92       	push	r14
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	1c 01       	movw	r2, r24
    1894:	4b 01       	movw	r8, r22
    1896:	29 01       	movw	r4, r18
    1898:	3a 01       	movw	r6, r20
    189a:	a9 01       	movw	r20, r18
    189c:	65 ea       	ldi	r22, 0xA5	; 165
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	d5 01       	movw	r26, r10
    18a2:	57 96       	adiw	r26, 0x17	; 23
    18a4:	8d 91       	ld	r24, X+
    18a6:	9c 91       	ld	r25, X
    18a8:	58 97       	sbiw	r26, 0x18	; 24
    18aa:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <memset>
    18ae:	f5 01       	movw	r30, r10
    18b0:	87 89       	ldd	r24, Z+23	; 0x17
    18b2:	90 8d       	ldd	r25, Z+24	; 0x18
    18b4:	f1 e0       	ldi	r31, 0x01	; 1
    18b6:	4f 1a       	sub	r4, r31
    18b8:	51 08       	sbc	r5, r1
    18ba:	48 0e       	add	r4, r24
    18bc:	59 1e       	adc	r5, r25
    18be:	81 14       	cp	r8, r1
    18c0:	91 04       	cpc	r9, r1
    18c2:	89 f4       	brne	.+34     	; 0x18e6 <prvInitialiseNewTask+0x7a>
    18c4:	17 c0       	rjmp	.+46     	; 0x18f4 <prvInitialiseNewTask+0x88>
    18c6:	82 2f       	mov	r24, r18
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	f4 01       	movw	r30, r8
    18cc:	e8 0f       	add	r30, r24
    18ce:	f9 1f       	adc	r31, r25
    18d0:	30 81       	ld	r19, Z
    18d2:	d5 01       	movw	r26, r10
    18d4:	a8 0f       	add	r26, r24
    18d6:	b9 1f       	adc	r27, r25
    18d8:	59 96       	adiw	r26, 0x19	; 25
    18da:	3c 93       	st	X, r19
    18dc:	80 81       	ld	r24, Z
    18de:	88 23       	and	r24, r24
    18e0:	29 f0       	breq	.+10     	; 0x18ec <prvInitialiseNewTask+0x80>
    18e2:	2f 5f       	subi	r18, 0xFF	; 255
    18e4:	01 c0       	rjmp	.+2      	; 0x18e8 <prvInitialiseNewTask+0x7c>
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	2a 30       	cpi	r18, 0x0A	; 10
    18ea:	68 f3       	brcs	.-38     	; 0x18c6 <prvInitialiseNewTask+0x5a>
    18ec:	d5 01       	movw	r26, r10
    18ee:	92 96       	adiw	r26, 0x22	; 34
    18f0:	1c 92       	st	X, r1
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <prvInitialiseNewTask+0x8c>
    18f4:	f5 01       	movw	r30, r10
    18f6:	11 8e       	std	Z+25, r1	; 0x19
    18f8:	f4 e0       	ldi	r31, 0x04	; 4
    18fa:	fe 15       	cp	r31, r14
    18fc:	18 f4       	brcc	.+6      	; 0x1904 <prvInitialiseNewTask+0x98>
    18fe:	68 94       	set
    1900:	ee 24       	eor	r14, r14
    1902:	e2 f8       	bld	r14, 2
    1904:	d5 01       	movw	r26, r10
    1906:	56 96       	adiw	r26, 0x16	; 22
    1908:	ec 92       	st	X, r14
    190a:	56 97       	sbiw	r26, 0x16	; 22
    190c:	95 96       	adiw	r26, 0x25	; 37
    190e:	ec 92       	st	X, r14
    1910:	95 97       	sbiw	r26, 0x25	; 37
    1912:	96 96       	adiw	r26, 0x26	; 38
    1914:	1c 92       	st	X, r1
    1916:	c5 01       	movw	r24, r10
    1918:	02 96       	adiw	r24, 0x02	; 2
    191a:	0e 94 76 07 	call	0xeec	; 0xeec <vListInitialiseItem>
    191e:	c5 01       	movw	r24, r10
    1920:	0c 96       	adiw	r24, 0x0c	; 12
    1922:	0e 94 76 07 	call	0xeec	; 0xeec <vListInitialiseItem>
    1926:	f5 01       	movw	r30, r10
    1928:	b1 86       	std	Z+9, r11	; 0x09
    192a:	a0 86       	std	Z+8, r10	; 0x08
    192c:	85 e0       	ldi	r24, 0x05	; 5
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	8e 19       	sub	r24, r14
    1932:	91 09       	sbc	r25, r1
    1934:	95 87       	std	Z+13, r25	; 0x0d
    1936:	84 87       	std	Z+12, r24	; 0x0c
    1938:	b3 8a       	std	Z+19, r11	; 0x13
    193a:	a2 8a       	std	Z+18, r10	; 0x12
    193c:	84 e0       	ldi	r24, 0x04	; 4
    193e:	b7 96       	adiw	r30, 0x27	; 39
    1940:	df 01       	movw	r26, r30
    1942:	1d 92       	st	X+, r1
    1944:	8a 95       	dec	r24
    1946:	e9 f7       	brne	.-6      	; 0x1942 <prvInitialiseNewTask+0xd6>
    1948:	f5 01       	movw	r30, r10
    194a:	13 a6       	std	Z+43, r1	; 0x2b
    194c:	a8 01       	movw	r20, r16
    194e:	b1 01       	movw	r22, r2
    1950:	c2 01       	movw	r24, r4
    1952:	0e 94 fc 07 	call	0xff8	; 0xff8 <pxPortInitialiseStack>
    1956:	d5 01       	movw	r26, r10
    1958:	8d 93       	st	X+, r24
    195a:	9c 93       	st	X, r25
    195c:	c1 14       	cp	r12, r1
    195e:	d1 04       	cpc	r13, r1
    1960:	19 f0       	breq	.+6      	; 0x1968 <prvInitialiseNewTask+0xfc>
    1962:	f6 01       	movw	r30, r12
    1964:	b1 82       	std	Z+1, r11	; 0x01
    1966:	a0 82       	st	Z, r10
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	ef 90       	pop	r14
    1972:	df 90       	pop	r13
    1974:	cf 90       	pop	r12
    1976:	bf 90       	pop	r11
    1978:	af 90       	pop	r10
    197a:	9f 90       	pop	r9
    197c:	8f 90       	pop	r8
    197e:	7f 90       	pop	r7
    1980:	6f 90       	pop	r6
    1982:	5f 90       	pop	r5
    1984:	4f 90       	pop	r4
    1986:	3f 90       	pop	r3
    1988:	2f 90       	pop	r2
    198a:	08 95       	ret

0000198c <prvInitialiseTaskLists>:
    198c:	cf 93       	push	r28
    198e:	c0 e0       	ldi	r28, 0x00	; 0
    1990:	10 c0       	rjmp	.+32     	; 0x19b2 <prvInitialiseTaskLists+0x26>
    1992:	8c 2f       	mov	r24, r28
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	9c 01       	movw	r18, r24
    1998:	22 0f       	add	r18, r18
    199a:	33 1f       	adc	r19, r19
    199c:	22 0f       	add	r18, r18
    199e:	33 1f       	adc	r19, r19
    19a0:	22 0f       	add	r18, r18
    19a2:	33 1f       	adc	r19, r19
    19a4:	82 0f       	add	r24, r18
    19a6:	93 1f       	adc	r25, r19
    19a8:	86 5b       	subi	r24, 0xB6	; 182
    19aa:	9b 4f       	sbci	r25, 0xFB	; 251
    19ac:	0e 94 68 07 	call	0xed0	; 0xed0 <vListInitialise>
    19b0:	cf 5f       	subi	r28, 0xFF	; 255
    19b2:	c5 30       	cpi	r28, 0x05	; 5
    19b4:	70 f3       	brcs	.-36     	; 0x1992 <prvInitialiseTaskLists+0x6>
    19b6:	81 e4       	ldi	r24, 0x41	; 65
    19b8:	94 e0       	ldi	r25, 0x04	; 4
    19ba:	0e 94 68 07 	call	0xed0	; 0xed0 <vListInitialise>
    19be:	88 e3       	ldi	r24, 0x38	; 56
    19c0:	94 e0       	ldi	r25, 0x04	; 4
    19c2:	0e 94 68 07 	call	0xed0	; 0xed0 <vListInitialise>
    19c6:	8b e2       	ldi	r24, 0x2B	; 43
    19c8:	94 e0       	ldi	r25, 0x04	; 4
    19ca:	0e 94 68 07 	call	0xed0	; 0xed0 <vListInitialise>
    19ce:	82 e2       	ldi	r24, 0x22	; 34
    19d0:	94 e0       	ldi	r25, 0x04	; 4
    19d2:	0e 94 68 07 	call	0xed0	; 0xed0 <vListInitialise>
    19d6:	88 e1       	ldi	r24, 0x18	; 24
    19d8:	94 e0       	ldi	r25, 0x04	; 4
    19da:	0e 94 68 07 	call	0xed0	; 0xed0 <vListInitialise>
    19de:	81 e4       	ldi	r24, 0x41	; 65
    19e0:	94 e0       	ldi	r25, 0x04	; 4
    19e2:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <pxDelayedTaskList+0x1>
    19e6:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <pxDelayedTaskList>
    19ea:	88 e3       	ldi	r24, 0x38	; 56
    19ec:	94 e0       	ldi	r25, 0x04	; 4
    19ee:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <pxOverflowDelayedTaskList+0x1>
    19f2:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <pxOverflowDelayedTaskList>
    19f6:	cf 91       	pop	r28
    19f8:	08 95       	ret

000019fa <prvAddNewTaskToReadyList>:
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	ec 01       	movw	r28, r24
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	0f 92       	push	r0
    1a06:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <uxCurrentNumberOfTasks>
    1a0a:	8f 5f       	subi	r24, 0xFF	; 255
    1a0c:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <uxCurrentNumberOfTasks>
    1a10:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <pxCurrentTCB>
    1a14:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1a18:	89 2b       	or	r24, r25
    1a1a:	59 f4       	brne	.+22     	; 0x1a32 <prvAddNewTaskToReadyList+0x38>
    1a1c:	d0 93 78 04 	sts	0x0478, r29	; 0x800478 <pxCurrentTCB+0x1>
    1a20:	c0 93 77 04 	sts	0x0477, r28	; 0x800477 <pxCurrentTCB>
    1a24:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <uxCurrentNumberOfTasks>
    1a28:	81 30       	cpi	r24, 0x01	; 1
    1a2a:	99 f4       	brne	.+38     	; 0x1a52 <prvAddNewTaskToReadyList+0x58>
    1a2c:	0e 94 c6 0c 	call	0x198c	; 0x198c <prvInitialiseTaskLists>
    1a30:	10 c0       	rjmp	.+32     	; 0x1a52 <prvAddNewTaskToReadyList+0x58>
    1a32:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <xSchedulerRunning>
    1a36:	81 11       	cpse	r24, r1
    1a38:	0c c0       	rjmp	.+24     	; 0x1a52 <prvAddNewTaskToReadyList+0x58>
    1a3a:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <pxCurrentTCB>
    1a3e:	f0 91 78 04 	lds	r31, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1a42:	96 89       	ldd	r25, Z+22	; 0x16
    1a44:	8e 89       	ldd	r24, Y+22	; 0x16
    1a46:	89 17       	cp	r24, r25
    1a48:	20 f0       	brcs	.+8      	; 0x1a52 <prvAddNewTaskToReadyList+0x58>
    1a4a:	d0 93 78 04 	sts	0x0478, r29	; 0x800478 <pxCurrentTCB+0x1>
    1a4e:	c0 93 77 04 	sts	0x0477, r28	; 0x800477 <pxCurrentTCB>
    1a52:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <uxTaskNumber>
    1a56:	8f 5f       	subi	r24, 0xFF	; 255
    1a58:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <uxTaskNumber>
    1a5c:	8b a3       	std	Y+35, r24	; 0x23
    1a5e:	8e 89       	ldd	r24, Y+22	; 0x16
    1a60:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <uxTopReadyPriority>
    1a64:	98 17       	cp	r25, r24
    1a66:	10 f4       	brcc	.+4      	; 0x1a6c <prvAddNewTaskToReadyList+0x72>
    1a68:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <uxTopReadyPriority>
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	fc 01       	movw	r30, r24
    1a70:	ee 0f       	add	r30, r30
    1a72:	ff 1f       	adc	r31, r31
    1a74:	ee 0f       	add	r30, r30
    1a76:	ff 1f       	adc	r31, r31
    1a78:	ee 0f       	add	r30, r30
    1a7a:	ff 1f       	adc	r31, r31
    1a7c:	8e 0f       	add	r24, r30
    1a7e:	9f 1f       	adc	r25, r31
    1a80:	fc 01       	movw	r30, r24
    1a82:	e6 5b       	subi	r30, 0xB6	; 182
    1a84:	fb 4f       	sbci	r31, 0xFB	; 251
    1a86:	01 80       	ldd	r0, Z+1	; 0x01
    1a88:	f2 81       	ldd	r31, Z+2	; 0x02
    1a8a:	e0 2d       	mov	r30, r0
    1a8c:	fd 83       	std	Y+5, r31	; 0x05
    1a8e:	ec 83       	std	Y+4, r30	; 0x04
    1a90:	84 81       	ldd	r24, Z+4	; 0x04
    1a92:	95 81       	ldd	r25, Z+5	; 0x05
    1a94:	9f 83       	std	Y+7, r25	; 0x07
    1a96:	8e 83       	std	Y+6, r24	; 0x06
    1a98:	a4 81       	ldd	r26, Z+4	; 0x04
    1a9a:	b5 81       	ldd	r27, Z+5	; 0x05
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	02 96       	adiw	r24, 0x02	; 2
    1aa0:	13 96       	adiw	r26, 0x03	; 3
    1aa2:	9c 93       	st	X, r25
    1aa4:	8e 93       	st	-X, r24
    1aa6:	12 97       	sbiw	r26, 0x02	; 2
    1aa8:	95 83       	std	Z+5, r25	; 0x05
    1aaa:	84 83       	std	Z+4, r24	; 0x04
    1aac:	ee 89       	ldd	r30, Y+22	; 0x16
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	cf 01       	movw	r24, r30
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	e8 0f       	add	r30, r24
    1ac0:	f9 1f       	adc	r31, r25
    1ac2:	e6 5b       	subi	r30, 0xB6	; 182
    1ac4:	fb 4f       	sbci	r31, 0xFB	; 251
    1ac6:	fb 87       	std	Y+11, r31	; 0x0b
    1ac8:	ea 87       	std	Y+10, r30	; 0x0a
    1aca:	80 81       	ld	r24, Z
    1acc:	8f 5f       	subi	r24, 0xFF	; 255
    1ace:	80 83       	st	Z, r24
    1ad0:	0f 90       	pop	r0
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <xSchedulerRunning>
    1ad8:	88 23       	and	r24, r24
    1ada:	51 f0       	breq	.+20     	; 0x1af0 <prvAddNewTaskToReadyList+0xf6>
    1adc:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <pxCurrentTCB>
    1ae0:	f0 91 78 04 	lds	r31, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1ae4:	96 89       	ldd	r25, Z+22	; 0x16
    1ae6:	8e 89       	ldd	r24, Y+22	; 0x16
    1ae8:	98 17       	cp	r25, r24
    1aea:	10 f4       	brcc	.+4      	; 0x1af0 <prvAddNewTaskToReadyList+0xf6>
    1aec:	0e 94 97 08 	call	0x112e	; 0x112e <vPortYield>
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	08 95       	ret

00001af6 <prvCheckTasksWaitingTermination>:
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	1c c0       	rjmp	.+56     	; 0x1b34 <prvCheckTasksWaitingTermination+0x3e>
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	0f 92       	push	r0
    1b02:	e0 91 27 04 	lds	r30, 0x0427	; 0x800427 <xTasksWaitingTermination+0x5>
    1b06:	f0 91 28 04 	lds	r31, 0x0428	; 0x800428 <xTasksWaitingTermination+0x6>
    1b0a:	c6 81       	ldd	r28, Z+6	; 0x06
    1b0c:	d7 81       	ldd	r29, Z+7	; 0x07
    1b0e:	ce 01       	movw	r24, r28
    1b10:	02 96       	adiw	r24, 0x02	; 2
    1b12:	0e 94 cc 07 	call	0xf98	; 0xf98 <uxListRemove>
    1b16:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <uxCurrentNumberOfTasks>
    1b1a:	81 50       	subi	r24, 0x01	; 1
    1b1c:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <uxCurrentNumberOfTasks>
    1b20:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <uxDeletedTasksWaitingCleanUp>
    1b24:	81 50       	subi	r24, 0x01	; 1
    1b26:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <uxDeletedTasksWaitingCleanUp>
    1b2a:	0f 90       	pop	r0
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	ce 01       	movw	r24, r28
    1b30:	0e 94 29 0c 	call	0x1852	; 0x1852 <prvDeleteTCB>
    1b34:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <uxDeletedTasksWaitingCleanUp>
    1b38:	81 11       	cpse	r24, r1
    1b3a:	e0 cf       	rjmp	.-64     	; 0x1afc <prvCheckTasksWaitingTermination+0x6>
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	08 95       	ret

00001b42 <prvAddCurrentTaskToDelayedList>:
    1b42:	ff 92       	push	r15
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	ec 01       	movw	r28, r24
    1b4e:	f6 2e       	mov	r15, r22
    1b50:	00 91 15 04 	lds	r16, 0x0415	; 0x800415 <xTickCount>
    1b54:	10 91 16 04 	lds	r17, 0x0416	; 0x800416 <xTickCount+0x1>
    1b58:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <pxCurrentTCB>
    1b5c:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1b60:	02 96       	adiw	r24, 0x02	; 2
    1b62:	0e 94 cc 07 	call	0xf98	; 0xf98 <uxListRemove>
    1b66:	cf 3f       	cpi	r28, 0xFF	; 255
    1b68:	8f ef       	ldi	r24, 0xFF	; 255
    1b6a:	d8 07       	cpc	r29, r24
    1b6c:	b1 f5       	brne	.+108    	; 0x1bda <prvAddCurrentTaskToDelayedList+0x98>
    1b6e:	ff 20       	and	r15, r15
    1b70:	a1 f1       	breq	.+104    	; 0x1bda <prvAddCurrentTaskToDelayedList+0x98>
    1b72:	e8 e1       	ldi	r30, 0x18	; 24
    1b74:	f4 e0       	ldi	r31, 0x04	; 4
    1b76:	a1 81       	ldd	r26, Z+1	; 0x01
    1b78:	b2 81       	ldd	r27, Z+2	; 0x02
    1b7a:	c0 91 77 04 	lds	r28, 0x0477	; 0x800477 <pxCurrentTCB>
    1b7e:	d0 91 78 04 	lds	r29, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1b82:	bd 83       	std	Y+5, r27	; 0x05
    1b84:	ac 83       	std	Y+4, r26	; 0x04
    1b86:	c0 91 77 04 	lds	r28, 0x0477	; 0x800477 <pxCurrentTCB>
    1b8a:	d0 91 78 04 	lds	r29, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1b8e:	14 96       	adiw	r26, 0x04	; 4
    1b90:	8d 91       	ld	r24, X+
    1b92:	9c 91       	ld	r25, X
    1b94:	15 97       	sbiw	r26, 0x05	; 5
    1b96:	9f 83       	std	Y+7, r25	; 0x07
    1b98:	8e 83       	std	Y+6, r24	; 0x06
    1b9a:	14 96       	adiw	r26, 0x04	; 4
    1b9c:	cd 91       	ld	r28, X+
    1b9e:	dc 91       	ld	r29, X
    1ba0:	15 97       	sbiw	r26, 0x05	; 5
    1ba2:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <pxCurrentTCB>
    1ba6:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1baa:	02 96       	adiw	r24, 0x02	; 2
    1bac:	9b 83       	std	Y+3, r25	; 0x03
    1bae:	8a 83       	std	Y+2, r24	; 0x02
    1bb0:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <pxCurrentTCB>
    1bb4:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1bb8:	02 96       	adiw	r24, 0x02	; 2
    1bba:	15 96       	adiw	r26, 0x05	; 5
    1bbc:	9c 93       	st	X, r25
    1bbe:	8e 93       	st	-X, r24
    1bc0:	14 97       	sbiw	r26, 0x04	; 4
    1bc2:	a0 91 77 04 	lds	r26, 0x0477	; 0x800477 <pxCurrentTCB>
    1bc6:	b0 91 78 04 	lds	r27, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1bca:	1b 96       	adiw	r26, 0x0b	; 11
    1bcc:	fc 93       	st	X, r31
    1bce:	ee 93       	st	-X, r30
    1bd0:	1a 97       	sbiw	r26, 0x0a	; 10
    1bd2:	80 81       	ld	r24, Z
    1bd4:	8f 5f       	subi	r24, 0xFF	; 255
    1bd6:	80 83       	st	Z, r24
    1bd8:	2f c0       	rjmp	.+94     	; 0x1c38 <prvAddCurrentTaskToDelayedList+0xf6>
    1bda:	c0 0f       	add	r28, r16
    1bdc:	d1 1f       	adc	r29, r17
    1bde:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <pxCurrentTCB>
    1be2:	f0 91 78 04 	lds	r31, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1be6:	d3 83       	std	Z+3, r29	; 0x03
    1be8:	c2 83       	std	Z+2, r28	; 0x02
    1bea:	c0 17       	cp	r28, r16
    1bec:	d1 07       	cpc	r29, r17
    1bee:	68 f4       	brcc	.+26     	; 0x1c0a <prvAddCurrentTaskToDelayedList+0xc8>
    1bf0:	60 91 77 04 	lds	r22, 0x0477	; 0x800477 <pxCurrentTCB>
    1bf4:	70 91 78 04 	lds	r23, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1bf8:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <pxOverflowDelayedTaskList>
    1bfc:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <pxOverflowDelayedTaskList+0x1>
    1c00:	6e 5f       	subi	r22, 0xFE	; 254
    1c02:	7f 4f       	sbci	r23, 0xFF	; 255
    1c04:	0e 94 9b 07 	call	0xf36	; 0xf36 <vListInsert>
    1c08:	17 c0       	rjmp	.+46     	; 0x1c38 <prvAddCurrentTaskToDelayedList+0xf6>
    1c0a:	60 91 77 04 	lds	r22, 0x0477	; 0x800477 <pxCurrentTCB>
    1c0e:	70 91 78 04 	lds	r23, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1c12:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <pxDelayedTaskList>
    1c16:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <pxDelayedTaskList+0x1>
    1c1a:	6e 5f       	subi	r22, 0xFE	; 254
    1c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1e:	0e 94 9b 07 	call	0xf36	; 0xf36 <vListInsert>
    1c22:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <xNextTaskUnblockTime>
    1c26:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <xNextTaskUnblockTime+0x1>
    1c2a:	c8 17       	cp	r28, r24
    1c2c:	d9 07       	cpc	r29, r25
    1c2e:	20 f4       	brcc	.+8      	; 0x1c38 <prvAddCurrentTaskToDelayedList+0xf6>
    1c30:	d0 93 0d 04 	sts	0x040D, r29	; 0x80040d <xNextTaskUnblockTime+0x1>
    1c34:	c0 93 0c 04 	sts	0x040C, r28	; 0x80040c <xNextTaskUnblockTime>
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	1f 91       	pop	r17
    1c3e:	0f 91       	pop	r16
    1c40:	ff 90       	pop	r15
    1c42:	08 95       	ret

00001c44 <prvIdleTask>:
    1c44:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <prvCheckTasksWaitingTermination>
    1c48:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <pxReadyTasksLists>
    1c4c:	82 30       	cpi	r24, 0x02	; 2
    1c4e:	10 f0       	brcs	.+4      	; 0x1c54 <prvIdleTask+0x10>
    1c50:	0e 94 97 08 	call	0x112e	; 0x112e <vPortYield>
    1c54:	0e 94 84 06 	call	0xd08	; 0xd08 <vApplicationIdleHook>
    1c58:	f5 cf       	rjmp	.-22     	; 0x1c44 <prvIdleTask>

00001c5a <xTaskCreate>:
    1c5a:	2f 92       	push	r2
    1c5c:	3f 92       	push	r3
    1c5e:	4f 92       	push	r4
    1c60:	5f 92       	push	r5
    1c62:	6f 92       	push	r6
    1c64:	7f 92       	push	r7
    1c66:	8f 92       	push	r8
    1c68:	9f 92       	push	r9
    1c6a:	af 92       	push	r10
    1c6c:	bf 92       	push	r11
    1c6e:	cf 92       	push	r12
    1c70:	df 92       	push	r13
    1c72:	ef 92       	push	r14
    1c74:	ff 92       	push	r15
    1c76:	0f 93       	push	r16
    1c78:	1f 93       	push	r17
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
    1c7e:	3c 01       	movw	r6, r24
    1c80:	1b 01       	movw	r2, r22
    1c82:	5a 01       	movw	r10, r20
    1c84:	29 01       	movw	r4, r18
    1c86:	ca 01       	movw	r24, r20
    1c88:	0e 94 a0 06 	call	0xd40	; 0xd40 <pvPortMalloc>
    1c8c:	6c 01       	movw	r12, r24
    1c8e:	89 2b       	or	r24, r25
    1c90:	71 f0       	breq	.+28     	; 0x1cae <xTaskCreate+0x54>
    1c92:	8c e2       	ldi	r24, 0x2C	; 44
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	0e 94 a0 06 	call	0xd40	; 0xd40 <pvPortMalloc>
    1c9a:	ec 01       	movw	r28, r24
    1c9c:	89 2b       	or	r24, r25
    1c9e:	19 f0       	breq	.+6      	; 0x1ca6 <xTaskCreate+0x4c>
    1ca0:	d8 8e       	std	Y+24, r13	; 0x18
    1ca2:	cf 8a       	std	Y+23, r12	; 0x17
    1ca4:	06 c0       	rjmp	.+12     	; 0x1cb2 <xTaskCreate+0x58>
    1ca6:	c6 01       	movw	r24, r12
    1ca8:	0e 94 35 07 	call	0xe6a	; 0xe6a <vPortFree>
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <xTaskCreate+0x58>
    1cae:	c0 e0       	ldi	r28, 0x00	; 0
    1cb0:	d0 e0       	ldi	r29, 0x00	; 0
    1cb2:	20 97       	sbiw	r28, 0x00	; 0
    1cb4:	91 f0       	breq	.+36     	; 0x1cda <xTaskCreate+0x80>
    1cb6:	95 01       	movw	r18, r10
    1cb8:	40 e0       	ldi	r20, 0x00	; 0
    1cba:	50 e0       	ldi	r21, 0x00	; 0
    1cbc:	81 2c       	mov	r8, r1
    1cbe:	91 2c       	mov	r9, r1
    1cc0:	5e 01       	movw	r10, r28
    1cc2:	67 01       	movw	r12, r14
    1cc4:	e0 2e       	mov	r14, r16
    1cc6:	82 01       	movw	r16, r4
    1cc8:	b1 01       	movw	r22, r2
    1cca:	c3 01       	movw	r24, r6
    1ccc:	0e 94 36 0c 	call	0x186c	; 0x186c <prvInitialiseNewTask>
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <prvAddNewTaskToReadyList>
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	01 c0       	rjmp	.+2      	; 0x1cdc <xTaskCreate+0x82>
    1cda:	8f ef       	ldi	r24, 0xFF	; 255
    1cdc:	df 91       	pop	r29
    1cde:	cf 91       	pop	r28
    1ce0:	1f 91       	pop	r17
    1ce2:	0f 91       	pop	r16
    1ce4:	ff 90       	pop	r15
    1ce6:	ef 90       	pop	r14
    1ce8:	df 90       	pop	r13
    1cea:	cf 90       	pop	r12
    1cec:	bf 90       	pop	r11
    1cee:	af 90       	pop	r10
    1cf0:	9f 90       	pop	r9
    1cf2:	8f 90       	pop	r8
    1cf4:	7f 90       	pop	r7
    1cf6:	6f 90       	pop	r6
    1cf8:	5f 90       	pop	r5
    1cfa:	4f 90       	pop	r4
    1cfc:	3f 90       	pop	r3
    1cfe:	2f 90       	pop	r2
    1d00:	08 95       	ret

00001d02 <vTaskPrioritySet>:
    1d02:	ef 92       	push	r14
    1d04:	ff 92       	push	r15
    1d06:	1f 93       	push	r17
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	ec 01       	movw	r28, r24
    1d0e:	65 30       	cpi	r22, 0x05	; 5
    1d10:	08 f0       	brcs	.+2      	; 0x1d14 <vTaskPrioritySet+0x12>
    1d12:	64 e0       	ldi	r22, 0x04	; 4
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	0f 92       	push	r0
    1d1a:	20 97       	sbiw	r28, 0x00	; 0
    1d1c:	21 f4       	brne	.+8      	; 0x1d26 <vTaskPrioritySet+0x24>
    1d1e:	c0 91 77 04 	lds	r28, 0x0477	; 0x800477 <pxCurrentTCB>
    1d22:	d0 91 78 04 	lds	r29, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1d26:	9d a1       	ldd	r25, Y+37	; 0x25
    1d28:	69 17       	cp	r22, r25
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <vTaskPrioritySet+0x2c>
    1d2c:	81 c0       	rjmp	.+258    	; 0x1e30 <vTaskPrioritySet+0x12e>
    1d2e:	96 17       	cp	r25, r22
    1d30:	80 f4       	brcc	.+32     	; 0x1d52 <vTaskPrioritySet+0x50>
    1d32:	20 91 77 04 	lds	r18, 0x0477	; 0x800477 <pxCurrentTCB>
    1d36:	30 91 78 04 	lds	r19, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1d3a:	c2 17       	cp	r28, r18
    1d3c:	d3 07       	cpc	r29, r19
    1d3e:	91 f0       	breq	.+36     	; 0x1d64 <vTaskPrioritySet+0x62>
    1d40:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <pxCurrentTCB>
    1d44:	f0 91 78 04 	lds	r31, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1d48:	86 89       	ldd	r24, Z+22	; 0x16
    1d4a:	68 17       	cp	r22, r24
    1d4c:	68 f4       	brcc	.+26     	; 0x1d68 <vTaskPrioritySet+0x66>
    1d4e:	10 e0       	ldi	r17, 0x00	; 0
    1d50:	0e c0       	rjmp	.+28     	; 0x1d6e <vTaskPrioritySet+0x6c>
    1d52:	20 91 77 04 	lds	r18, 0x0477	; 0x800477 <pxCurrentTCB>
    1d56:	30 91 78 04 	lds	r19, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1d5a:	c2 17       	cp	r28, r18
    1d5c:	d3 07       	cpc	r29, r19
    1d5e:	31 f0       	breq	.+12     	; 0x1d6c <vTaskPrioritySet+0x6a>
    1d60:	10 e0       	ldi	r17, 0x00	; 0
    1d62:	05 c0       	rjmp	.+10     	; 0x1d6e <vTaskPrioritySet+0x6c>
    1d64:	10 e0       	ldi	r17, 0x00	; 0
    1d66:	03 c0       	rjmp	.+6      	; 0x1d6e <vTaskPrioritySet+0x6c>
    1d68:	11 e0       	ldi	r17, 0x01	; 1
    1d6a:	01 c0       	rjmp	.+2      	; 0x1d6e <vTaskPrioritySet+0x6c>
    1d6c:	11 e0       	ldi	r17, 0x01	; 1
    1d6e:	8e 89       	ldd	r24, Y+22	; 0x16
    1d70:	98 13       	cpse	r25, r24
    1d72:	01 c0       	rjmp	.+2      	; 0x1d76 <vTaskPrioritySet+0x74>
    1d74:	6e 8b       	std	Y+22, r22	; 0x16
    1d76:	6d a3       	std	Y+37, r22	; 0x25
    1d78:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d7a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1d7c:	33 23       	and	r19, r19
    1d7e:	34 f0       	brlt	.+12     	; 0x1d8c <vTaskPrioritySet+0x8a>
    1d80:	25 e0       	ldi	r18, 0x05	; 5
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	26 1b       	sub	r18, r22
    1d86:	31 09       	sbc	r19, r1
    1d88:	3d 87       	std	Y+13, r19	; 0x0d
    1d8a:	2c 87       	std	Y+12, r18	; 0x0c
    1d8c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d8e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	ac 01       	movw	r20, r24
    1d94:	44 0f       	add	r20, r20
    1d96:	55 1f       	adc	r21, r21
    1d98:	44 0f       	add	r20, r20
    1d9a:	55 1f       	adc	r21, r21
    1d9c:	44 0f       	add	r20, r20
    1d9e:	55 1f       	adc	r21, r21
    1da0:	84 0f       	add	r24, r20
    1da2:	95 1f       	adc	r25, r21
    1da4:	86 5b       	subi	r24, 0xB6	; 182
    1da6:	9b 4f       	sbci	r25, 0xFB	; 251
    1da8:	28 17       	cp	r18, r24
    1daa:	39 07       	cpc	r19, r25
    1dac:	f1 f5       	brne	.+124    	; 0x1e2a <vTaskPrioritySet+0x128>
    1dae:	7e 01       	movw	r14, r28
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	e8 0e       	add	r14, r24
    1db4:	f1 1c       	adc	r15, r1
    1db6:	c7 01       	movw	r24, r14
    1db8:	0e 94 cc 07 	call	0xf98	; 0xf98 <uxListRemove>
    1dbc:	8e 89       	ldd	r24, Y+22	; 0x16
    1dbe:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <uxTopReadyPriority>
    1dc2:	98 17       	cp	r25, r24
    1dc4:	10 f4       	brcc	.+4      	; 0x1dca <vTaskPrioritySet+0xc8>
    1dc6:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <uxTopReadyPriority>
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	fc 01       	movw	r30, r24
    1dce:	ee 0f       	add	r30, r30
    1dd0:	ff 1f       	adc	r31, r31
    1dd2:	ee 0f       	add	r30, r30
    1dd4:	ff 1f       	adc	r31, r31
    1dd6:	ee 0f       	add	r30, r30
    1dd8:	ff 1f       	adc	r31, r31
    1dda:	8e 0f       	add	r24, r30
    1ddc:	9f 1f       	adc	r25, r31
    1dde:	fc 01       	movw	r30, r24
    1de0:	e6 5b       	subi	r30, 0xB6	; 182
    1de2:	fb 4f       	sbci	r31, 0xFB	; 251
    1de4:	01 80       	ldd	r0, Z+1	; 0x01
    1de6:	f2 81       	ldd	r31, Z+2	; 0x02
    1de8:	e0 2d       	mov	r30, r0
    1dea:	fd 83       	std	Y+5, r31	; 0x05
    1dec:	ec 83       	std	Y+4, r30	; 0x04
    1dee:	84 81       	ldd	r24, Z+4	; 0x04
    1df0:	95 81       	ldd	r25, Z+5	; 0x05
    1df2:	9f 83       	std	Y+7, r25	; 0x07
    1df4:	8e 83       	std	Y+6, r24	; 0x06
    1df6:	a4 81       	ldd	r26, Z+4	; 0x04
    1df8:	b5 81       	ldd	r27, Z+5	; 0x05
    1dfa:	13 96       	adiw	r26, 0x03	; 3
    1dfc:	fc 92       	st	X, r15
    1dfe:	ee 92       	st	-X, r14
    1e00:	12 97       	sbiw	r26, 0x02	; 2
    1e02:	f5 82       	std	Z+5, r15	; 0x05
    1e04:	e4 82       	std	Z+4, r14	; 0x04
    1e06:	8e 89       	ldd	r24, Y+22	; 0x16
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	ee 0f       	add	r30, r30
    1e0e:	ff 1f       	adc	r31, r31
    1e10:	ee 0f       	add	r30, r30
    1e12:	ff 1f       	adc	r31, r31
    1e14:	ee 0f       	add	r30, r30
    1e16:	ff 1f       	adc	r31, r31
    1e18:	e8 0f       	add	r30, r24
    1e1a:	f9 1f       	adc	r31, r25
    1e1c:	e6 5b       	subi	r30, 0xB6	; 182
    1e1e:	fb 4f       	sbci	r31, 0xFB	; 251
    1e20:	fb 87       	std	Y+11, r31	; 0x0b
    1e22:	ea 87       	std	Y+10, r30	; 0x0a
    1e24:	80 81       	ld	r24, Z
    1e26:	8f 5f       	subi	r24, 0xFF	; 255
    1e28:	80 83       	st	Z, r24
    1e2a:	11 11       	cpse	r17, r1
    1e2c:	0e 94 97 08 	call	0x112e	; 0x112e <vPortYield>
    1e30:	0f 90       	pop	r0
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	1f 91       	pop	r17
    1e3a:	ff 90       	pop	r15
    1e3c:	ef 90       	pop	r14
    1e3e:	08 95       	ret

00001e40 <vTaskResume>:
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	20 91 77 04 	lds	r18, 0x0477	; 0x800477 <pxCurrentTCB>
    1e4c:	30 91 78 04 	lds	r19, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1e50:	82 17       	cp	r24, r18
    1e52:	93 07       	cpc	r25, r19
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <vTaskResume+0x18>
    1e56:	55 c0       	rjmp	.+170    	; 0x1f02 <vTaskResume+0xc2>
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <vTaskResume+0x1e>
    1e5c:	52 c0       	rjmp	.+164    	; 0x1f02 <vTaskResume+0xc2>
    1e5e:	ec 01       	movw	r28, r24
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	0f 92       	push	r0
    1e66:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <prvTaskIsTaskSuspended>
    1e6a:	88 23       	and	r24, r24
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <vTaskResume+0x30>
    1e6e:	47 c0       	rjmp	.+142    	; 0x1efe <vTaskResume+0xbe>
    1e70:	8e 01       	movw	r16, r28
    1e72:	0e 5f       	subi	r16, 0xFE	; 254
    1e74:	1f 4f       	sbci	r17, 0xFF	; 255
    1e76:	c8 01       	movw	r24, r16
    1e78:	0e 94 cc 07 	call	0xf98	; 0xf98 <uxListRemove>
    1e7c:	8e 89       	ldd	r24, Y+22	; 0x16
    1e7e:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <uxTopReadyPriority>
    1e82:	98 17       	cp	r25, r24
    1e84:	10 f4       	brcc	.+4      	; 0x1e8a <vTaskResume+0x4a>
    1e86:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <uxTopReadyPriority>
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	ee 0f       	add	r30, r30
    1e90:	ff 1f       	adc	r31, r31
    1e92:	ee 0f       	add	r30, r30
    1e94:	ff 1f       	adc	r31, r31
    1e96:	ee 0f       	add	r30, r30
    1e98:	ff 1f       	adc	r31, r31
    1e9a:	8e 0f       	add	r24, r30
    1e9c:	9f 1f       	adc	r25, r31
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	e6 5b       	subi	r30, 0xB6	; 182
    1ea2:	fb 4f       	sbci	r31, 0xFB	; 251
    1ea4:	01 80       	ldd	r0, Z+1	; 0x01
    1ea6:	f2 81       	ldd	r31, Z+2	; 0x02
    1ea8:	e0 2d       	mov	r30, r0
    1eaa:	fd 83       	std	Y+5, r31	; 0x05
    1eac:	ec 83       	std	Y+4, r30	; 0x04
    1eae:	84 81       	ldd	r24, Z+4	; 0x04
    1eb0:	95 81       	ldd	r25, Z+5	; 0x05
    1eb2:	9f 83       	std	Y+7, r25	; 0x07
    1eb4:	8e 83       	std	Y+6, r24	; 0x06
    1eb6:	a4 81       	ldd	r26, Z+4	; 0x04
    1eb8:	b5 81       	ldd	r27, Z+5	; 0x05
    1eba:	13 96       	adiw	r26, 0x03	; 3
    1ebc:	1c 93       	st	X, r17
    1ebe:	0e 93       	st	-X, r16
    1ec0:	12 97       	sbiw	r26, 0x02	; 2
    1ec2:	15 83       	std	Z+5, r17	; 0x05
    1ec4:	04 83       	std	Z+4, r16	; 0x04
    1ec6:	ee 89       	ldd	r30, Y+22	; 0x16
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	cf 01       	movw	r24, r30
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	e8 0f       	add	r30, r24
    1eda:	f9 1f       	adc	r31, r25
    1edc:	e6 5b       	subi	r30, 0xB6	; 182
    1ede:	fb 4f       	sbci	r31, 0xFB	; 251
    1ee0:	fb 87       	std	Y+11, r31	; 0x0b
    1ee2:	ea 87       	std	Y+10, r30	; 0x0a
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8f 5f       	subi	r24, 0xFF	; 255
    1ee8:	80 83       	st	Z, r24
    1eea:	9e 89       	ldd	r25, Y+22	; 0x16
    1eec:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <pxCurrentTCB>
    1ef0:	f0 91 78 04 	lds	r31, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    1ef4:	86 89       	ldd	r24, Z+22	; 0x16
    1ef6:	98 17       	cp	r25, r24
    1ef8:	10 f0       	brcs	.+4      	; 0x1efe <vTaskResume+0xbe>
    1efa:	0e 94 97 08 	call	0x112e	; 0x112e <vPortYield>
    1efe:	0f 90       	pop	r0
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	df 91       	pop	r29
    1f04:	cf 91       	pop	r28
    1f06:	1f 91       	pop	r17
    1f08:	0f 91       	pop	r16
    1f0a:	08 95       	ret

00001f0c <vTaskStartScheduler>:
    1f0c:	ef 92       	push	r14
    1f0e:	ff 92       	push	r15
    1f10:	0f 93       	push	r16
    1f12:	0f 2e       	mov	r0, r31
    1f14:	fa e0       	ldi	r31, 0x0A	; 10
    1f16:	ef 2e       	mov	r14, r31
    1f18:	f4 e0       	ldi	r31, 0x04	; 4
    1f1a:	ff 2e       	mov	r15, r31
    1f1c:	f0 2d       	mov	r31, r0
    1f1e:	00 e0       	ldi	r16, 0x00	; 0
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	48 ec       	ldi	r20, 0xC8	; 200
    1f26:	50 e0       	ldi	r21, 0x00	; 0
    1f28:	60 ed       	ldi	r22, 0xD0	; 208
    1f2a:	70 e0       	ldi	r23, 0x00	; 0
    1f2c:	82 e2       	ldi	r24, 0x22	; 34
    1f2e:	9e e0       	ldi	r25, 0x0E	; 14
    1f30:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <xTaskCreate>
    1f34:	81 30       	cpi	r24, 0x01	; 1
    1f36:	81 f4       	brne	.+32     	; 0x1f58 <vTaskStartScheduler+0x4c>
    1f38:	f8 94       	cli
    1f3a:	8f ef       	ldi	r24, 0xFF	; 255
    1f3c:	9f ef       	ldi	r25, 0xFF	; 255
    1f3e:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <xNextTaskUnblockTime+0x1>
    1f42:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <xNextTaskUnblockTime>
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <xSchedulerRunning>
    1f4c:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <xTickCount+0x1>
    1f50:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <xTickCount>
    1f54:	0e 94 68 08 	call	0x10d0	; 0x10d0 <xPortStartScheduler>
    1f58:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <uxTopUsedPriority>
    1f5c:	0f 91       	pop	r16
    1f5e:	ff 90       	pop	r15
    1f60:	ef 90       	pop	r14
    1f62:	08 95       	ret

00001f64 <vTaskSuspendAll>:
    1f64:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <uxSchedulerSuspended>
    1f68:	8f 5f       	subi	r24, 0xFF	; 255
    1f6a:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <uxSchedulerSuspended>
    1f6e:	08 95       	ret

00001f70 <xTaskIncrementTick>:
    1f70:	0f 93       	push	r16
    1f72:	1f 93       	push	r17
    1f74:	cf 93       	push	r28
    1f76:	df 93       	push	r29
    1f78:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <uxSchedulerSuspended>
    1f7c:	81 11       	cpse	r24, r1
    1f7e:	eb c0       	rjmp	.+470    	; 0x2156 <xTaskIncrementTick+0x1e6>
    1f80:	c0 91 15 04 	lds	r28, 0x0415	; 0x800415 <xTickCount>
    1f84:	d0 91 16 04 	lds	r29, 0x0416	; 0x800416 <xTickCount+0x1>
    1f88:	8e 01       	movw	r16, r28
    1f8a:	0f 5f       	subi	r16, 0xFF	; 255
    1f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8e:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <xTickCount+0x1>
    1f92:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <xTickCount>
    1f96:	01 15       	cp	r16, r1
    1f98:	11 05       	cpc	r17, r1
    1f9a:	b9 f4       	brne	.+46     	; 0x1fca <xTaskIncrementTick+0x5a>
    1f9c:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <pxDelayedTaskList>
    1fa0:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <pxDelayedTaskList+0x1>
    1fa4:	20 91 34 04 	lds	r18, 0x0434	; 0x800434 <pxOverflowDelayedTaskList>
    1fa8:	30 91 35 04 	lds	r19, 0x0435	; 0x800435 <pxOverflowDelayedTaskList+0x1>
    1fac:	30 93 37 04 	sts	0x0437, r19	; 0x800437 <pxDelayedTaskList+0x1>
    1fb0:	20 93 36 04 	sts	0x0436, r18	; 0x800436 <pxDelayedTaskList>
    1fb4:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <pxOverflowDelayedTaskList+0x1>
    1fb8:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <pxOverflowDelayedTaskList>
    1fbc:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <xNumOfOverflows>
    1fc0:	8f 5f       	subi	r24, 0xFF	; 255
    1fc2:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <xNumOfOverflows>
    1fc6:	0e 94 0d 0c 	call	0x181a	; 0x181a <prvResetNextTaskUnblockTime>
    1fca:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <xNextTaskUnblockTime>
    1fce:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <xNextTaskUnblockTime+0x1>
    1fd2:	08 17       	cp	r16, r24
    1fd4:	19 07       	cpc	r17, r25
    1fd6:	20 f4       	brcc	.+8      	; 0x1fe0 <xTaskIncrementTick+0x70>
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	b8 c0       	rjmp	.+368    	; 0x214c <xTaskIncrementTick+0x1dc>
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	01 c0       	rjmp	.+2      	; 0x1fe2 <xTaskIncrementTick+0x72>
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	e0 91 36 04 	lds	r30, 0x0436	; 0x800436 <pxDelayedTaskList>
    1fe6:	f0 91 37 04 	lds	r31, 0x0437	; 0x800437 <pxDelayedTaskList+0x1>
    1fea:	90 81       	ld	r25, Z
    1fec:	91 11       	cpse	r25, r1
    1fee:	07 c0       	rjmp	.+14     	; 0x1ffe <xTaskIncrementTick+0x8e>
    1ff0:	2f ef       	ldi	r18, 0xFF	; 255
    1ff2:	3f ef       	ldi	r19, 0xFF	; 255
    1ff4:	30 93 0d 04 	sts	0x040D, r19	; 0x80040d <xNextTaskUnblockTime+0x1>
    1ff8:	20 93 0c 04 	sts	0x040C, r18	; 0x80040c <xNextTaskUnblockTime>
    1ffc:	a7 c0       	rjmp	.+334    	; 0x214c <xTaskIncrementTick+0x1dc>
    1ffe:	e0 91 36 04 	lds	r30, 0x0436	; 0x800436 <pxDelayedTaskList>
    2002:	f0 91 37 04 	lds	r31, 0x0437	; 0x800437 <pxDelayedTaskList+0x1>
    2006:	05 80       	ldd	r0, Z+5	; 0x05
    2008:	f6 81       	ldd	r31, Z+6	; 0x06
    200a:	e0 2d       	mov	r30, r0
    200c:	06 80       	ldd	r0, Z+6	; 0x06
    200e:	f7 81       	ldd	r31, Z+7	; 0x07
    2010:	e0 2d       	mov	r30, r0
    2012:	22 81       	ldd	r18, Z+2	; 0x02
    2014:	33 81       	ldd	r19, Z+3	; 0x03
    2016:	02 17       	cp	r16, r18
    2018:	13 07       	cpc	r17, r19
    201a:	28 f4       	brcc	.+10     	; 0x2026 <xTaskIncrementTick+0xb6>
    201c:	30 93 0d 04 	sts	0x040D, r19	; 0x80040d <xNextTaskUnblockTime+0x1>
    2020:	20 93 0c 04 	sts	0x040C, r18	; 0x80040c <xNextTaskUnblockTime>
    2024:	93 c0       	rjmp	.+294    	; 0x214c <xTaskIncrementTick+0x1dc>
    2026:	a2 85       	ldd	r26, Z+10	; 0x0a
    2028:	b3 85       	ldd	r27, Z+11	; 0x0b
    202a:	24 81       	ldd	r18, Z+4	; 0x04
    202c:	35 81       	ldd	r19, Z+5	; 0x05
    202e:	46 81       	ldd	r20, Z+6	; 0x06
    2030:	57 81       	ldd	r21, Z+7	; 0x07
    2032:	e9 01       	movw	r28, r18
    2034:	5d 83       	std	Y+5, r21	; 0x05
    2036:	4c 83       	std	Y+4, r20	; 0x04
    2038:	26 81       	ldd	r18, Z+6	; 0x06
    203a:	37 81       	ldd	r19, Z+7	; 0x07
    203c:	44 81       	ldd	r20, Z+4	; 0x04
    203e:	55 81       	ldd	r21, Z+5	; 0x05
    2040:	e9 01       	movw	r28, r18
    2042:	5b 83       	std	Y+3, r21	; 0x03
    2044:	4a 83       	std	Y+2, r20	; 0x02
    2046:	11 96       	adiw	r26, 0x01	; 1
    2048:	2d 91       	ld	r18, X+
    204a:	3c 91       	ld	r19, X
    204c:	12 97       	sbiw	r26, 0x02	; 2
    204e:	af 01       	movw	r20, r30
    2050:	4e 5f       	subi	r20, 0xFE	; 254
    2052:	5f 4f       	sbci	r21, 0xFF	; 255
    2054:	24 17       	cp	r18, r20
    2056:	35 07       	cpc	r19, r21
    2058:	31 f4       	brne	.+12     	; 0x2066 <xTaskIncrementTick+0xf6>
    205a:	26 81       	ldd	r18, Z+6	; 0x06
    205c:	37 81       	ldd	r19, Z+7	; 0x07
    205e:	12 96       	adiw	r26, 0x02	; 2
    2060:	3c 93       	st	X, r19
    2062:	2e 93       	st	-X, r18
    2064:	11 97       	sbiw	r26, 0x01	; 1
    2066:	13 86       	std	Z+11, r1	; 0x0b
    2068:	12 86       	std	Z+10, r1	; 0x0a
    206a:	9c 91       	ld	r25, X
    206c:	91 50       	subi	r25, 0x01	; 1
    206e:	9c 93       	st	X, r25
    2070:	a4 89       	ldd	r26, Z+20	; 0x14
    2072:	b5 89       	ldd	r27, Z+21	; 0x15
    2074:	10 97       	sbiw	r26, 0x00	; 0
    2076:	19 f1       	breq	.+70     	; 0x20be <xTaskIncrementTick+0x14e>
    2078:	26 85       	ldd	r18, Z+14	; 0x0e
    207a:	37 85       	ldd	r19, Z+15	; 0x0f
    207c:	60 89       	ldd	r22, Z+16	; 0x10
    207e:	71 89       	ldd	r23, Z+17	; 0x11
    2080:	e9 01       	movw	r28, r18
    2082:	7d 83       	std	Y+5, r23	; 0x05
    2084:	6c 83       	std	Y+4, r22	; 0x04
    2086:	20 89       	ldd	r18, Z+16	; 0x10
    2088:	31 89       	ldd	r19, Z+17	; 0x11
    208a:	66 85       	ldd	r22, Z+14	; 0x0e
    208c:	77 85       	ldd	r23, Z+15	; 0x0f
    208e:	e9 01       	movw	r28, r18
    2090:	7b 83       	std	Y+3, r23	; 0x03
    2092:	6a 83       	std	Y+2, r22	; 0x02
    2094:	11 96       	adiw	r26, 0x01	; 1
    2096:	6d 91       	ld	r22, X+
    2098:	7c 91       	ld	r23, X
    209a:	12 97       	sbiw	r26, 0x02	; 2
    209c:	9f 01       	movw	r18, r30
    209e:	24 5f       	subi	r18, 0xF4	; 244
    20a0:	3f 4f       	sbci	r19, 0xFF	; 255
    20a2:	62 17       	cp	r22, r18
    20a4:	73 07       	cpc	r23, r19
    20a6:	31 f4       	brne	.+12     	; 0x20b4 <xTaskIncrementTick+0x144>
    20a8:	20 89       	ldd	r18, Z+16	; 0x10
    20aa:	31 89       	ldd	r19, Z+17	; 0x11
    20ac:	12 96       	adiw	r26, 0x02	; 2
    20ae:	3c 93       	st	X, r19
    20b0:	2e 93       	st	-X, r18
    20b2:	11 97       	sbiw	r26, 0x01	; 1
    20b4:	15 8a       	std	Z+21, r1	; 0x15
    20b6:	14 8a       	std	Z+20, r1	; 0x14
    20b8:	9c 91       	ld	r25, X
    20ba:	91 50       	subi	r25, 0x01	; 1
    20bc:	9c 93       	st	X, r25
    20be:	26 89       	ldd	r18, Z+22	; 0x16
    20c0:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <uxTopReadyPriority>
    20c4:	92 17       	cp	r25, r18
    20c6:	10 f4       	brcc	.+4      	; 0x20cc <xTaskIncrementTick+0x15c>
    20c8:	20 93 14 04 	sts	0x0414, r18	; 0x800414 <uxTopReadyPriority>
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	d9 01       	movw	r26, r18
    20d0:	aa 0f       	add	r26, r26
    20d2:	bb 1f       	adc	r27, r27
    20d4:	aa 0f       	add	r26, r26
    20d6:	bb 1f       	adc	r27, r27
    20d8:	aa 0f       	add	r26, r26
    20da:	bb 1f       	adc	r27, r27
    20dc:	2a 0f       	add	r18, r26
    20de:	3b 1f       	adc	r19, r27
    20e0:	d9 01       	movw	r26, r18
    20e2:	a6 5b       	subi	r26, 0xB6	; 182
    20e4:	bb 4f       	sbci	r27, 0xFB	; 251
    20e6:	11 96       	adiw	r26, 0x01	; 1
    20e8:	0d 90       	ld	r0, X+
    20ea:	bc 91       	ld	r27, X
    20ec:	a0 2d       	mov	r26, r0
    20ee:	b5 83       	std	Z+5, r27	; 0x05
    20f0:	a4 83       	std	Z+4, r26	; 0x04
    20f2:	14 96       	adiw	r26, 0x04	; 4
    20f4:	2d 91       	ld	r18, X+
    20f6:	3c 91       	ld	r19, X
    20f8:	15 97       	sbiw	r26, 0x05	; 5
    20fa:	37 83       	std	Z+7, r19	; 0x07
    20fc:	26 83       	std	Z+6, r18	; 0x06
    20fe:	14 96       	adiw	r26, 0x04	; 4
    2100:	2d 91       	ld	r18, X+
    2102:	3c 91       	ld	r19, X
    2104:	15 97       	sbiw	r26, 0x05	; 5
    2106:	e9 01       	movw	r28, r18
    2108:	5b 83       	std	Y+3, r21	; 0x03
    210a:	4a 83       	std	Y+2, r20	; 0x02
    210c:	15 96       	adiw	r26, 0x05	; 5
    210e:	5c 93       	st	X, r21
    2110:	4e 93       	st	-X, r20
    2112:	14 97       	sbiw	r26, 0x04	; 4
    2114:	a6 89       	ldd	r26, Z+22	; 0x16
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	9d 01       	movw	r18, r26
    211a:	22 0f       	add	r18, r18
    211c:	33 1f       	adc	r19, r19
    211e:	22 0f       	add	r18, r18
    2120:	33 1f       	adc	r19, r19
    2122:	22 0f       	add	r18, r18
    2124:	33 1f       	adc	r19, r19
    2126:	a2 0f       	add	r26, r18
    2128:	b3 1f       	adc	r27, r19
    212a:	a6 5b       	subi	r26, 0xB6	; 182
    212c:	bb 4f       	sbci	r27, 0xFB	; 251
    212e:	b3 87       	std	Z+11, r27	; 0x0b
    2130:	a2 87       	std	Z+10, r26	; 0x0a
    2132:	9c 91       	ld	r25, X
    2134:	9f 5f       	subi	r25, 0xFF	; 255
    2136:	9c 93       	st	X, r25
    2138:	26 89       	ldd	r18, Z+22	; 0x16
    213a:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <pxCurrentTCB>
    213e:	f0 91 78 04 	lds	r31, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    2142:	96 89       	ldd	r25, Z+22	; 0x16
    2144:	29 17       	cp	r18, r25
    2146:	08 f0       	brcs	.+2      	; 0x214a <xTaskIncrementTick+0x1da>
    2148:	49 cf       	rjmp	.-366    	; 0x1fdc <xTaskIncrementTick+0x6c>
    214a:	4b cf       	rjmp	.-362    	; 0x1fe2 <xTaskIncrementTick+0x72>
    214c:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <xYieldPending>
    2150:	91 11       	cpse	r25, r1
    2152:	0c c0       	rjmp	.+24     	; 0x216c <xTaskIncrementTick+0x1fc>
    2154:	0c c0       	rjmp	.+24     	; 0x216e <xTaskIncrementTick+0x1fe>
    2156:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <xPendedTicks>
    215a:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <xPendedTicks+0x1>
    215e:	01 96       	adiw	r24, 0x01	; 1
    2160:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <xPendedTicks+0x1>
    2164:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <xPendedTicks>
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	01 c0       	rjmp	.+2      	; 0x216e <xTaskIncrementTick+0x1fe>
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	df 91       	pop	r29
    2170:	cf 91       	pop	r28
    2172:	1f 91       	pop	r17
    2174:	0f 91       	pop	r16
    2176:	08 95       	ret

00002178 <xTaskResumeAll>:
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	0f 92       	push	r0
    2182:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <uxSchedulerSuspended>
    2186:	81 50       	subi	r24, 0x01	; 1
    2188:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <uxSchedulerSuspended>
    218c:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <uxSchedulerSuspended>
    2190:	81 11       	cpse	r24, r1
    2192:	bf c0       	rjmp	.+382    	; 0x2312 <xTaskResumeAll+0x19a>
    2194:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <uxCurrentNumberOfTasks>
    2198:	81 11       	cpse	r24, r1
    219a:	96 c0       	rjmp	.+300    	; 0x22c8 <xTaskResumeAll+0x150>
    219c:	bd c0       	rjmp	.+378    	; 0x2318 <xTaskResumeAll+0x1a0>
    219e:	e0 91 30 04 	lds	r30, 0x0430	; 0x800430 <xPendingReadyList+0x5>
    21a2:	f0 91 31 04 	lds	r31, 0x0431	; 0x800431 <xPendingReadyList+0x6>
    21a6:	06 80       	ldd	r0, Z+6	; 0x06
    21a8:	f7 81       	ldd	r31, Z+7	; 0x07
    21aa:	e0 2d       	mov	r30, r0
    21ac:	a4 89       	ldd	r26, Z+20	; 0x14
    21ae:	b5 89       	ldd	r27, Z+21	; 0x15
    21b0:	c6 85       	ldd	r28, Z+14	; 0x0e
    21b2:	d7 85       	ldd	r29, Z+15	; 0x0f
    21b4:	80 89       	ldd	r24, Z+16	; 0x10
    21b6:	91 89       	ldd	r25, Z+17	; 0x11
    21b8:	9d 83       	std	Y+5, r25	; 0x05
    21ba:	8c 83       	std	Y+4, r24	; 0x04
    21bc:	c0 89       	ldd	r28, Z+16	; 0x10
    21be:	d1 89       	ldd	r29, Z+17	; 0x11
    21c0:	86 85       	ldd	r24, Z+14	; 0x0e
    21c2:	97 85       	ldd	r25, Z+15	; 0x0f
    21c4:	9b 83       	std	Y+3, r25	; 0x03
    21c6:	8a 83       	std	Y+2, r24	; 0x02
    21c8:	11 96       	adiw	r26, 0x01	; 1
    21ca:	2d 91       	ld	r18, X+
    21cc:	3c 91       	ld	r19, X
    21ce:	12 97       	sbiw	r26, 0x02	; 2
    21d0:	cf 01       	movw	r24, r30
    21d2:	0c 96       	adiw	r24, 0x0c	; 12
    21d4:	28 17       	cp	r18, r24
    21d6:	39 07       	cpc	r19, r25
    21d8:	31 f4       	brne	.+12     	; 0x21e6 <xTaskResumeAll+0x6e>
    21da:	80 89       	ldd	r24, Z+16	; 0x10
    21dc:	91 89       	ldd	r25, Z+17	; 0x11
    21de:	12 96       	adiw	r26, 0x02	; 2
    21e0:	9c 93       	st	X, r25
    21e2:	8e 93       	st	-X, r24
    21e4:	11 97       	sbiw	r26, 0x01	; 1
    21e6:	15 8a       	std	Z+21, r1	; 0x15
    21e8:	14 8a       	std	Z+20, r1	; 0x14
    21ea:	8c 91       	ld	r24, X
    21ec:	81 50       	subi	r24, 0x01	; 1
    21ee:	8c 93       	st	X, r24
    21f0:	a2 85       	ldd	r26, Z+10	; 0x0a
    21f2:	b3 85       	ldd	r27, Z+11	; 0x0b
    21f4:	c4 81       	ldd	r28, Z+4	; 0x04
    21f6:	d5 81       	ldd	r29, Z+5	; 0x05
    21f8:	86 81       	ldd	r24, Z+6	; 0x06
    21fa:	97 81       	ldd	r25, Z+7	; 0x07
    21fc:	9d 83       	std	Y+5, r25	; 0x05
    21fe:	8c 83       	std	Y+4, r24	; 0x04
    2200:	c6 81       	ldd	r28, Z+6	; 0x06
    2202:	d7 81       	ldd	r29, Z+7	; 0x07
    2204:	84 81       	ldd	r24, Z+4	; 0x04
    2206:	95 81       	ldd	r25, Z+5	; 0x05
    2208:	9b 83       	std	Y+3, r25	; 0x03
    220a:	8a 83       	std	Y+2, r24	; 0x02
    220c:	11 96       	adiw	r26, 0x01	; 1
    220e:	8d 91       	ld	r24, X+
    2210:	9c 91       	ld	r25, X
    2212:	12 97       	sbiw	r26, 0x02	; 2
    2214:	9f 01       	movw	r18, r30
    2216:	2e 5f       	subi	r18, 0xFE	; 254
    2218:	3f 4f       	sbci	r19, 0xFF	; 255
    221a:	82 17       	cp	r24, r18
    221c:	93 07       	cpc	r25, r19
    221e:	31 f4       	brne	.+12     	; 0x222c <xTaskResumeAll+0xb4>
    2220:	86 81       	ldd	r24, Z+6	; 0x06
    2222:	97 81       	ldd	r25, Z+7	; 0x07
    2224:	12 96       	adiw	r26, 0x02	; 2
    2226:	9c 93       	st	X, r25
    2228:	8e 93       	st	-X, r24
    222a:	11 97       	sbiw	r26, 0x01	; 1
    222c:	13 86       	std	Z+11, r1	; 0x0b
    222e:	12 86       	std	Z+10, r1	; 0x0a
    2230:	8c 91       	ld	r24, X
    2232:	81 50       	subi	r24, 0x01	; 1
    2234:	8c 93       	st	X, r24
    2236:	86 89       	ldd	r24, Z+22	; 0x16
    2238:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <uxTopReadyPriority>
    223c:	98 17       	cp	r25, r24
    223e:	10 f4       	brcc	.+4      	; 0x2244 <xTaskResumeAll+0xcc>
    2240:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <uxTopReadyPriority>
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	dc 01       	movw	r26, r24
    2248:	aa 0f       	add	r26, r26
    224a:	bb 1f       	adc	r27, r27
    224c:	aa 0f       	add	r26, r26
    224e:	bb 1f       	adc	r27, r27
    2250:	aa 0f       	add	r26, r26
    2252:	bb 1f       	adc	r27, r27
    2254:	8a 0f       	add	r24, r26
    2256:	9b 1f       	adc	r25, r27
    2258:	dc 01       	movw	r26, r24
    225a:	a6 5b       	subi	r26, 0xB6	; 182
    225c:	bb 4f       	sbci	r27, 0xFB	; 251
    225e:	11 96       	adiw	r26, 0x01	; 1
    2260:	0d 90       	ld	r0, X+
    2262:	bc 91       	ld	r27, X
    2264:	a0 2d       	mov	r26, r0
    2266:	b5 83       	std	Z+5, r27	; 0x05
    2268:	a4 83       	std	Z+4, r26	; 0x04
    226a:	14 96       	adiw	r26, 0x04	; 4
    226c:	8d 91       	ld	r24, X+
    226e:	9c 91       	ld	r25, X
    2270:	15 97       	sbiw	r26, 0x05	; 5
    2272:	97 83       	std	Z+7, r25	; 0x07
    2274:	86 83       	std	Z+6, r24	; 0x06
    2276:	14 96       	adiw	r26, 0x04	; 4
    2278:	cd 91       	ld	r28, X+
    227a:	dc 91       	ld	r29, X
    227c:	15 97       	sbiw	r26, 0x05	; 5
    227e:	3b 83       	std	Y+3, r19	; 0x03
    2280:	2a 83       	std	Y+2, r18	; 0x02
    2282:	15 96       	adiw	r26, 0x05	; 5
    2284:	3c 93       	st	X, r19
    2286:	2e 93       	st	-X, r18
    2288:	14 97       	sbiw	r26, 0x04	; 4
    228a:	a6 89       	ldd	r26, Z+22	; 0x16
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	cd 01       	movw	r24, r26
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	a8 0f       	add	r26, r24
    229e:	b9 1f       	adc	r27, r25
    22a0:	a6 5b       	subi	r26, 0xB6	; 182
    22a2:	bb 4f       	sbci	r27, 0xFB	; 251
    22a4:	b3 87       	std	Z+11, r27	; 0x0b
    22a6:	a2 87       	std	Z+10, r26	; 0x0a
    22a8:	8c 91       	ld	r24, X
    22aa:	8f 5f       	subi	r24, 0xFF	; 255
    22ac:	8c 93       	st	X, r24
    22ae:	96 89       	ldd	r25, Z+22	; 0x16
    22b0:	a0 91 77 04 	lds	r26, 0x0477	; 0x800477 <pxCurrentTCB>
    22b4:	b0 91 78 04 	lds	r27, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    22b8:	56 96       	adiw	r26, 0x16	; 22
    22ba:	8c 91       	ld	r24, X
    22bc:	98 17       	cp	r25, r24
    22be:	30 f0       	brcs	.+12     	; 0x22cc <xTaskResumeAll+0x154>
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <xYieldPending>
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <xTaskResumeAll+0x154>
    22c8:	e0 e0       	ldi	r30, 0x00	; 0
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <xPendingReadyList>
    22d0:	81 11       	cpse	r24, r1
    22d2:	65 cf       	rjmp	.-310    	; 0x219e <xTaskResumeAll+0x26>
    22d4:	ef 2b       	or	r30, r31
    22d6:	11 f0       	breq	.+4      	; 0x22dc <xTaskResumeAll+0x164>
    22d8:	0e 94 0d 0c 	call	0x181a	; 0x181a <prvResetNextTaskUnblockTime>
    22dc:	c0 91 11 04 	lds	r28, 0x0411	; 0x800411 <xPendedTicks>
    22e0:	d0 91 12 04 	lds	r29, 0x0412	; 0x800412 <xPendedTicks+0x1>
    22e4:	20 97       	sbiw	r28, 0x00	; 0
    22e6:	69 f0       	breq	.+26     	; 0x2302 <xTaskResumeAll+0x18a>
    22e8:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <xTaskIncrementTick>
    22ec:	88 23       	and	r24, r24
    22ee:	19 f0       	breq	.+6      	; 0x22f6 <xTaskResumeAll+0x17e>
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <xYieldPending>
    22f6:	21 97       	sbiw	r28, 0x01	; 1
    22f8:	b9 f7       	brne	.-18     	; 0x22e8 <xTaskResumeAll+0x170>
    22fa:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <xPendedTicks+0x1>
    22fe:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <xPendedTicks>
    2302:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <xYieldPending>
    2306:	88 23       	and	r24, r24
    2308:	31 f0       	breq	.+12     	; 0x2316 <xTaskResumeAll+0x19e>
    230a:	0e 94 97 08 	call	0x112e	; 0x112e <vPortYield>
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	03 c0       	rjmp	.+6      	; 0x2318 <xTaskResumeAll+0x1a0>
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	01 c0       	rjmp	.+2      	; 0x2318 <xTaskResumeAll+0x1a0>
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	0f 90       	pop	r0
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	df 91       	pop	r29
    231e:	cf 91       	pop	r28
    2320:	08 95       	ret

00002322 <vTaskSwitchContext>:
    2322:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <uxSchedulerSuspended>
    2326:	88 23       	and	r24, r24
    2328:	21 f0       	breq	.+8      	; 0x2332 <vTaskSwitchContext+0x10>
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <xYieldPending>
    2330:	08 95       	ret
    2332:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <xYieldPending>
    2336:	20 91 14 04 	lds	r18, 0x0414	; 0x800414 <uxTopReadyPriority>
    233a:	01 c0       	rjmp	.+2      	; 0x233e <vTaskSwitchContext+0x1c>
    233c:	21 50       	subi	r18, 0x01	; 1
    233e:	82 2f       	mov	r24, r18
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	fc 01       	movw	r30, r24
    2344:	ee 0f       	add	r30, r30
    2346:	ff 1f       	adc	r31, r31
    2348:	ee 0f       	add	r30, r30
    234a:	ff 1f       	adc	r31, r31
    234c:	ee 0f       	add	r30, r30
    234e:	ff 1f       	adc	r31, r31
    2350:	e8 0f       	add	r30, r24
    2352:	f9 1f       	adc	r31, r25
    2354:	e6 5b       	subi	r30, 0xB6	; 182
    2356:	fb 4f       	sbci	r31, 0xFB	; 251
    2358:	30 81       	ld	r19, Z
    235a:	33 23       	and	r19, r19
    235c:	79 f3       	breq	.-34     	; 0x233c <vTaskSwitchContext+0x1a>
    235e:	ac 01       	movw	r20, r24
    2360:	44 0f       	add	r20, r20
    2362:	55 1f       	adc	r21, r21
    2364:	44 0f       	add	r20, r20
    2366:	55 1f       	adc	r21, r21
    2368:	44 0f       	add	r20, r20
    236a:	55 1f       	adc	r21, r21
    236c:	48 0f       	add	r20, r24
    236e:	59 1f       	adc	r21, r25
    2370:	df 01       	movw	r26, r30
    2372:	01 80       	ldd	r0, Z+1	; 0x01
    2374:	f2 81       	ldd	r31, Z+2	; 0x02
    2376:	e0 2d       	mov	r30, r0
    2378:	02 80       	ldd	r0, Z+2	; 0x02
    237a:	f3 81       	ldd	r31, Z+3	; 0x03
    237c:	e0 2d       	mov	r30, r0
    237e:	12 96       	adiw	r26, 0x02	; 2
    2380:	fc 93       	st	X, r31
    2382:	ee 93       	st	-X, r30
    2384:	11 97       	sbiw	r26, 0x01	; 1
    2386:	43 5b       	subi	r20, 0xB3	; 179
    2388:	5b 4f       	sbci	r21, 0xFB	; 251
    238a:	e4 17       	cp	r30, r20
    238c:	f5 07       	cpc	r31, r21
    238e:	29 f4       	brne	.+10     	; 0x239a <vTaskSwitchContext+0x78>
    2390:	42 81       	ldd	r20, Z+2	; 0x02
    2392:	53 81       	ldd	r21, Z+3	; 0x03
    2394:	fd 01       	movw	r30, r26
    2396:	52 83       	std	Z+2, r21	; 0x02
    2398:	41 83       	std	Z+1, r20	; 0x01
    239a:	fc 01       	movw	r30, r24
    239c:	ee 0f       	add	r30, r30
    239e:	ff 1f       	adc	r31, r31
    23a0:	ee 0f       	add	r30, r30
    23a2:	ff 1f       	adc	r31, r31
    23a4:	ee 0f       	add	r30, r30
    23a6:	ff 1f       	adc	r31, r31
    23a8:	8e 0f       	add	r24, r30
    23aa:	9f 1f       	adc	r25, r31
    23ac:	fc 01       	movw	r30, r24
    23ae:	e6 5b       	subi	r30, 0xB6	; 182
    23b0:	fb 4f       	sbci	r31, 0xFB	; 251
    23b2:	01 80       	ldd	r0, Z+1	; 0x01
    23b4:	f2 81       	ldd	r31, Z+2	; 0x02
    23b6:	e0 2d       	mov	r30, r0
    23b8:	86 81       	ldd	r24, Z+6	; 0x06
    23ba:	97 81       	ldd	r25, Z+7	; 0x07
    23bc:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <pxCurrentTCB+0x1>
    23c0:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <pxCurrentTCB>
    23c4:	20 93 14 04 	sts	0x0414, r18	; 0x800414 <uxTopReadyPriority>
    23c8:	08 95       	ret

000023ca <vTaskSuspend>:
    23ca:	0f 93       	push	r16
    23cc:	1f 93       	push	r17
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	ec 01       	movw	r28, r24
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	0f 92       	push	r0
    23da:	89 2b       	or	r24, r25
    23dc:	21 f4       	brne	.+8      	; 0x23e6 <vTaskSuspend+0x1c>
    23de:	c0 91 77 04 	lds	r28, 0x0477	; 0x800477 <pxCurrentTCB>
    23e2:	d0 91 78 04 	lds	r29, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    23e6:	8e 01       	movw	r16, r28
    23e8:	0e 5f       	subi	r16, 0xFE	; 254
    23ea:	1f 4f       	sbci	r17, 0xFF	; 255
    23ec:	c8 01       	movw	r24, r16
    23ee:	0e 94 cc 07 	call	0xf98	; 0xf98 <uxListRemove>
    23f2:	8c 89       	ldd	r24, Y+20	; 0x14
    23f4:	9d 89       	ldd	r25, Y+21	; 0x15
    23f6:	89 2b       	or	r24, r25
    23f8:	21 f0       	breq	.+8      	; 0x2402 <vTaskSuspend+0x38>
    23fa:	ce 01       	movw	r24, r28
    23fc:	0c 96       	adiw	r24, 0x0c	; 12
    23fe:	0e 94 cc 07 	call	0xf98	; 0xf98 <uxListRemove>
    2402:	b8 01       	movw	r22, r16
    2404:	88 e1       	ldi	r24, 0x18	; 24
    2406:	94 e0       	ldi	r25, 0x04	; 4
    2408:	0e 94 7a 07 	call	0xef4	; 0xef4 <vListInsertEnd>
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	0f c0       	rjmp	.+30     	; 0x242e <vTaskSuspend+0x64>
    2410:	28 2f       	mov	r18, r24
    2412:	08 2e       	mov	r0, r24
    2414:	00 0c       	add	r0, r0
    2416:	33 0b       	sbc	r19, r19
    2418:	fe 01       	movw	r30, r28
    241a:	e2 0f       	add	r30, r18
    241c:	f3 1f       	adc	r31, r19
    241e:	93 a5       	ldd	r25, Z+43	; 0x2b
    2420:	91 30       	cpi	r25, 0x01	; 1
    2422:	21 f4       	brne	.+8      	; 0x242c <vTaskSuspend+0x62>
    2424:	fe 01       	movw	r30, r28
    2426:	e2 0f       	add	r30, r18
    2428:	f3 1f       	adc	r31, r19
    242a:	13 a6       	std	Z+43, r1	; 0x2b
    242c:	8f 5f       	subi	r24, 0xFF	; 255
    242e:	18 16       	cp	r1, r24
    2430:	7c f7       	brge	.-34     	; 0x2410 <vTaskSuspend+0x46>
    2432:	0f 90       	pop	r0
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <xSchedulerRunning>
    243a:	88 23       	and	r24, r24
    243c:	39 f0       	breq	.+14     	; 0x244c <vTaskSuspend+0x82>
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	0f 92       	push	r0
    2444:	0e 94 0d 0c 	call	0x181a	; 0x181a <prvResetNextTaskUnblockTime>
    2448:	0f 90       	pop	r0
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <pxCurrentTCB>
    2450:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    2454:	c8 17       	cp	r28, r24
    2456:	d9 07       	cpc	r29, r25
    2458:	a1 f4       	brne	.+40     	; 0x2482 <vTaskSuspend+0xb8>
    245a:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <xSchedulerRunning>
    245e:	88 23       	and	r24, r24
    2460:	19 f0       	breq	.+6      	; 0x2468 <vTaskSuspend+0x9e>
    2462:	0e 94 97 08 	call	0x112e	; 0x112e <vPortYield>
    2466:	0d c0       	rjmp	.+26     	; 0x2482 <vTaskSuspend+0xb8>
    2468:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <xSuspendedTaskList>
    246c:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <uxCurrentNumberOfTasks>
    2470:	98 13       	cpse	r25, r24
    2472:	05 c0       	rjmp	.+10     	; 0x247e <vTaskSuspend+0xb4>
    2474:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <pxCurrentTCB+0x1>
    2478:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <pxCurrentTCB>
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <vTaskSuspend+0xb8>
    247e:	0e 94 91 11 	call	0x2322	; 0x2322 <vTaskSwitchContext>
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	1f 91       	pop	r17
    2488:	0f 91       	pop	r16
    248a:	08 95       	ret

0000248c <vTaskPlaceOnEventList>:
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
    2490:	eb 01       	movw	r28, r22
    2492:	60 91 77 04 	lds	r22, 0x0477	; 0x800477 <pxCurrentTCB>
    2496:	70 91 78 04 	lds	r23, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    249a:	64 5f       	subi	r22, 0xF4	; 244
    249c:	7f 4f       	sbci	r23, 0xFF	; 255
    249e:	0e 94 9b 07 	call	0xf36	; 0xf36 <vListInsert>
    24a2:	61 e0       	ldi	r22, 0x01	; 1
    24a4:	ce 01       	movw	r24, r28
    24a6:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <prvAddCurrentTaskToDelayedList>
    24aa:	df 91       	pop	r29
    24ac:	cf 91       	pop	r28
    24ae:	08 95       	ret

000024b0 <xTaskRemoveFromEventList>:
    24b0:	cf 93       	push	r28
    24b2:	df 93       	push	r29
    24b4:	dc 01       	movw	r26, r24
    24b6:	15 96       	adiw	r26, 0x05	; 5
    24b8:	ed 91       	ld	r30, X+
    24ba:	fc 91       	ld	r31, X
    24bc:	16 97       	sbiw	r26, 0x06	; 6
    24be:	06 80       	ldd	r0, Z+6	; 0x06
    24c0:	f7 81       	ldd	r31, Z+7	; 0x07
    24c2:	e0 2d       	mov	r30, r0
    24c4:	a4 89       	ldd	r26, Z+20	; 0x14
    24c6:	b5 89       	ldd	r27, Z+21	; 0x15
    24c8:	c6 85       	ldd	r28, Z+14	; 0x0e
    24ca:	d7 85       	ldd	r29, Z+15	; 0x0f
    24cc:	80 89       	ldd	r24, Z+16	; 0x10
    24ce:	91 89       	ldd	r25, Z+17	; 0x11
    24d0:	9d 83       	std	Y+5, r25	; 0x05
    24d2:	8c 83       	std	Y+4, r24	; 0x04
    24d4:	c0 89       	ldd	r28, Z+16	; 0x10
    24d6:	d1 89       	ldd	r29, Z+17	; 0x11
    24d8:	86 85       	ldd	r24, Z+14	; 0x0e
    24da:	97 85       	ldd	r25, Z+15	; 0x0f
    24dc:	9b 83       	std	Y+3, r25	; 0x03
    24de:	8a 83       	std	Y+2, r24	; 0x02
    24e0:	11 96       	adiw	r26, 0x01	; 1
    24e2:	8d 91       	ld	r24, X+
    24e4:	9c 91       	ld	r25, X
    24e6:	12 97       	sbiw	r26, 0x02	; 2
    24e8:	9f 01       	movw	r18, r30
    24ea:	24 5f       	subi	r18, 0xF4	; 244
    24ec:	3f 4f       	sbci	r19, 0xFF	; 255
    24ee:	82 17       	cp	r24, r18
    24f0:	93 07       	cpc	r25, r19
    24f2:	31 f4       	brne	.+12     	; 0x2500 <xTaskRemoveFromEventList+0x50>
    24f4:	80 89       	ldd	r24, Z+16	; 0x10
    24f6:	91 89       	ldd	r25, Z+17	; 0x11
    24f8:	12 96       	adiw	r26, 0x02	; 2
    24fa:	9c 93       	st	X, r25
    24fc:	8e 93       	st	-X, r24
    24fe:	11 97       	sbiw	r26, 0x01	; 1
    2500:	15 8a       	std	Z+21, r1	; 0x15
    2502:	14 8a       	std	Z+20, r1	; 0x14
    2504:	8c 91       	ld	r24, X
    2506:	81 50       	subi	r24, 0x01	; 1
    2508:	8c 93       	st	X, r24
    250a:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <uxSchedulerSuspended>
    250e:	81 11       	cpse	r24, r1
    2510:	60 c0       	rjmp	.+192    	; 0x25d2 <xTaskRemoveFromEventList+0x122>
    2512:	a2 85       	ldd	r26, Z+10	; 0x0a
    2514:	b3 85       	ldd	r27, Z+11	; 0x0b
    2516:	c4 81       	ldd	r28, Z+4	; 0x04
    2518:	d5 81       	ldd	r29, Z+5	; 0x05
    251a:	86 81       	ldd	r24, Z+6	; 0x06
    251c:	97 81       	ldd	r25, Z+7	; 0x07
    251e:	9d 83       	std	Y+5, r25	; 0x05
    2520:	8c 83       	std	Y+4, r24	; 0x04
    2522:	c6 81       	ldd	r28, Z+6	; 0x06
    2524:	d7 81       	ldd	r29, Z+7	; 0x07
    2526:	84 81       	ldd	r24, Z+4	; 0x04
    2528:	95 81       	ldd	r25, Z+5	; 0x05
    252a:	9b 83       	std	Y+3, r25	; 0x03
    252c:	8a 83       	std	Y+2, r24	; 0x02
    252e:	11 96       	adiw	r26, 0x01	; 1
    2530:	8d 91       	ld	r24, X+
    2532:	9c 91       	ld	r25, X
    2534:	12 97       	sbiw	r26, 0x02	; 2
    2536:	9f 01       	movw	r18, r30
    2538:	2e 5f       	subi	r18, 0xFE	; 254
    253a:	3f 4f       	sbci	r19, 0xFF	; 255
    253c:	82 17       	cp	r24, r18
    253e:	93 07       	cpc	r25, r19
    2540:	31 f4       	brne	.+12     	; 0x254e <xTaskRemoveFromEventList+0x9e>
    2542:	86 81       	ldd	r24, Z+6	; 0x06
    2544:	97 81       	ldd	r25, Z+7	; 0x07
    2546:	12 96       	adiw	r26, 0x02	; 2
    2548:	9c 93       	st	X, r25
    254a:	8e 93       	st	-X, r24
    254c:	11 97       	sbiw	r26, 0x01	; 1
    254e:	13 86       	std	Z+11, r1	; 0x0b
    2550:	12 86       	std	Z+10, r1	; 0x0a
    2552:	8c 91       	ld	r24, X
    2554:	81 50       	subi	r24, 0x01	; 1
    2556:	8c 93       	st	X, r24
    2558:	86 89       	ldd	r24, Z+22	; 0x16
    255a:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <uxTopReadyPriority>
    255e:	98 17       	cp	r25, r24
    2560:	10 f4       	brcc	.+4      	; 0x2566 <xTaskRemoveFromEventList+0xb6>
    2562:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <uxTopReadyPriority>
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	dc 01       	movw	r26, r24
    256a:	aa 0f       	add	r26, r26
    256c:	bb 1f       	adc	r27, r27
    256e:	aa 0f       	add	r26, r26
    2570:	bb 1f       	adc	r27, r27
    2572:	aa 0f       	add	r26, r26
    2574:	bb 1f       	adc	r27, r27
    2576:	8a 0f       	add	r24, r26
    2578:	9b 1f       	adc	r25, r27
    257a:	dc 01       	movw	r26, r24
    257c:	a6 5b       	subi	r26, 0xB6	; 182
    257e:	bb 4f       	sbci	r27, 0xFB	; 251
    2580:	11 96       	adiw	r26, 0x01	; 1
    2582:	0d 90       	ld	r0, X+
    2584:	bc 91       	ld	r27, X
    2586:	a0 2d       	mov	r26, r0
    2588:	b5 83       	std	Z+5, r27	; 0x05
    258a:	a4 83       	std	Z+4, r26	; 0x04
    258c:	14 96       	adiw	r26, 0x04	; 4
    258e:	8d 91       	ld	r24, X+
    2590:	9c 91       	ld	r25, X
    2592:	15 97       	sbiw	r26, 0x05	; 5
    2594:	97 83       	std	Z+7, r25	; 0x07
    2596:	86 83       	std	Z+6, r24	; 0x06
    2598:	14 96       	adiw	r26, 0x04	; 4
    259a:	cd 91       	ld	r28, X+
    259c:	dc 91       	ld	r29, X
    259e:	15 97       	sbiw	r26, 0x05	; 5
    25a0:	3b 83       	std	Y+3, r19	; 0x03
    25a2:	2a 83       	std	Y+2, r18	; 0x02
    25a4:	15 96       	adiw	r26, 0x05	; 5
    25a6:	3c 93       	st	X, r19
    25a8:	2e 93       	st	-X, r18
    25aa:	14 97       	sbiw	r26, 0x04	; 4
    25ac:	a6 89       	ldd	r26, Z+22	; 0x16
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	cd 01       	movw	r24, r26
    25b2:	88 0f       	add	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	88 0f       	add	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	88 0f       	add	r24, r24
    25bc:	99 1f       	adc	r25, r25
    25be:	a8 0f       	add	r26, r24
    25c0:	b9 1f       	adc	r27, r25
    25c2:	a6 5b       	subi	r26, 0xB6	; 182
    25c4:	bb 4f       	sbci	r27, 0xFB	; 251
    25c6:	b3 87       	std	Z+11, r27	; 0x0b
    25c8:	a2 87       	std	Z+10, r26	; 0x0a
    25ca:	8c 91       	ld	r24, X
    25cc:	8f 5f       	subi	r24, 0xFF	; 255
    25ce:	8c 93       	st	X, r24
    25d0:	1c c0       	rjmp	.+56     	; 0x260a <xTaskRemoveFromEventList+0x15a>
    25d2:	4b e2       	ldi	r20, 0x2B	; 43
    25d4:	54 e0       	ldi	r21, 0x04	; 4
    25d6:	da 01       	movw	r26, r20
    25d8:	11 96       	adiw	r26, 0x01	; 1
    25da:	cd 91       	ld	r28, X+
    25dc:	dc 91       	ld	r29, X
    25de:	12 97       	sbiw	r26, 0x02	; 2
    25e0:	d7 87       	std	Z+15, r29	; 0x0f
    25e2:	c6 87       	std	Z+14, r28	; 0x0e
    25e4:	8c 81       	ldd	r24, Y+4	; 0x04
    25e6:	9d 81       	ldd	r25, Y+5	; 0x05
    25e8:	91 8b       	std	Z+17, r25	; 0x11
    25ea:	80 8b       	std	Z+16, r24	; 0x10
    25ec:	8c 81       	ldd	r24, Y+4	; 0x04
    25ee:	9d 81       	ldd	r25, Y+5	; 0x05
    25f0:	dc 01       	movw	r26, r24
    25f2:	13 96       	adiw	r26, 0x03	; 3
    25f4:	3c 93       	st	X, r19
    25f6:	2e 93       	st	-X, r18
    25f8:	12 97       	sbiw	r26, 0x02	; 2
    25fa:	3d 83       	std	Y+5, r19	; 0x05
    25fc:	2c 83       	std	Y+4, r18	; 0x04
    25fe:	55 8b       	std	Z+21, r21	; 0x15
    2600:	44 8b       	std	Z+20, r20	; 0x14
    2602:	da 01       	movw	r26, r20
    2604:	8c 91       	ld	r24, X
    2606:	8f 5f       	subi	r24, 0xFF	; 255
    2608:	8c 93       	st	X, r24
    260a:	96 89       	ldd	r25, Z+22	; 0x16
    260c:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <pxCurrentTCB>
    2610:	f0 91 78 04 	lds	r31, 0x0478	; 0x800478 <pxCurrentTCB+0x1>
    2614:	86 89       	ldd	r24, Z+22	; 0x16
    2616:	89 17       	cp	r24, r25
    2618:	20 f4       	brcc	.+8      	; 0x2622 <xTaskRemoveFromEventList+0x172>
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <xYieldPending>
    2620:	01 c0       	rjmp	.+2      	; 0x2624 <xTaskRemoveFromEventList+0x174>
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	df 91       	pop	r29
    2626:	cf 91       	pop	r28
    2628:	08 95       	ret

0000262a <vTaskInternalSetTimeOutState>:
    262a:	20 91 0f 04 	lds	r18, 0x040F	; 0x80040f <xNumOfOverflows>
    262e:	fc 01       	movw	r30, r24
    2630:	20 83       	st	Z, r18
    2632:	20 91 15 04 	lds	r18, 0x0415	; 0x800415 <xTickCount>
    2636:	30 91 16 04 	lds	r19, 0x0416	; 0x800416 <xTickCount+0x1>
    263a:	32 83       	std	Z+2, r19	; 0x02
    263c:	21 83       	std	Z+1, r18	; 0x01
    263e:	08 95       	ret

00002640 <xTaskCheckForTimeOut>:
    2640:	1f 93       	push	r17
    2642:	cf 93       	push	r28
    2644:	df 93       	push	r29
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	0f 92       	push	r0
    264c:	e0 91 15 04 	lds	r30, 0x0415	; 0x800415 <xTickCount>
    2650:	f0 91 16 04 	lds	r31, 0x0416	; 0x800416 <xTickCount+0x1>
    2654:	dc 01       	movw	r26, r24
    2656:	11 96       	adiw	r26, 0x01	; 1
    2658:	4d 91       	ld	r20, X+
    265a:	5c 91       	ld	r21, X
    265c:	12 97       	sbiw	r26, 0x02	; 2
    265e:	df 01       	movw	r26, r30
    2660:	a4 1b       	sub	r26, r20
    2662:	b5 0b       	sbc	r27, r21
    2664:	eb 01       	movw	r28, r22
    2666:	28 81       	ld	r18, Y
    2668:	39 81       	ldd	r19, Y+1	; 0x01
    266a:	2f 3f       	cpi	r18, 0xFF	; 255
    266c:	df ef       	ldi	r29, 0xFF	; 255
    266e:	3d 07       	cpc	r19, r29
    2670:	f9 f0       	breq	.+62     	; 0x26b0 <xTaskCheckForTimeOut+0x70>
    2672:	ec 01       	movw	r28, r24
    2674:	18 81       	ld	r17, Y
    2676:	c0 91 0f 04 	lds	r28, 0x040F	; 0x80040f <xNumOfOverflows>
    267a:	1c 17       	cp	r17, r28
    267c:	41 f0       	breq	.+16     	; 0x268e <xTaskCheckForTimeOut+0x4e>
    267e:	e4 17       	cp	r30, r20
    2680:	f5 07       	cpc	r31, r21
    2682:	28 f0       	brcs	.+10     	; 0x268e <xTaskCheckForTimeOut+0x4e>
    2684:	fb 01       	movw	r30, r22
    2686:	11 82       	std	Z+1, r1	; 0x01
    2688:	10 82       	st	Z, r1
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	12 c0       	rjmp	.+36     	; 0x26b2 <xTaskCheckForTimeOut+0x72>
    268e:	a2 17       	cp	r26, r18
    2690:	b3 07       	cpc	r27, r19
    2692:	48 f4       	brcc	.+18     	; 0x26a6 <xTaskCheckForTimeOut+0x66>
    2694:	fb 01       	movw	r30, r22
    2696:	2a 1b       	sub	r18, r26
    2698:	3b 0b       	sbc	r19, r27
    269a:	31 83       	std	Z+1, r19	; 0x01
    269c:	20 83       	st	Z, r18
    269e:	0e 94 15 13 	call	0x262a	; 0x262a <vTaskInternalSetTimeOutState>
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	06 c0       	rjmp	.+12     	; 0x26b2 <xTaskCheckForTimeOut+0x72>
    26a6:	db 01       	movw	r26, r22
    26a8:	1d 92       	st	X+, r1
    26aa:	1c 92       	st	X, r1
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	01 c0       	rjmp	.+2      	; 0x26b2 <xTaskCheckForTimeOut+0x72>
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	0f 90       	pop	r0
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	1f 91       	pop	r17
    26bc:	08 95       	ret

000026be <vTaskMissedYield>:
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <xYieldPending>
    26c4:	08 95       	ret

000026c6 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    26c6:	0f 93       	push	r16
    26c8:	1f 93       	push	r17
    26ca:	cf 93       	push	r28
    26cc:	df 93       	push	r29
    26ce:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    26d0:	89 2b       	or	r24, r25
    26d2:	09 f4       	brne	.+2      	; 0x26d6 <xTaskPriorityDisinherit+0x10>
    26d4:	51 c0       	rjmp	.+162    	; 0x2778 <xTaskPriorityDisinherit+0xb2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    26d6:	86 a1       	ldd	r24, Z+38	; 0x26
    26d8:	81 50       	subi	r24, 0x01	; 1
    26da:	86 a3       	std	Z+38, r24	; 0x26

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    26dc:	26 89       	ldd	r18, Z+22	; 0x16
    26de:	95 a1       	ldd	r25, Z+37	; 0x25
    26e0:	29 17       	cp	r18, r25
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <xTaskPriorityDisinherit+0x20>
    26e4:	4b c0       	rjmp	.+150    	; 0x277c <xTaskPriorityDisinherit+0xb6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    26e6:	81 11       	cpse	r24, r1
    26e8:	4b c0       	rjmp	.+150    	; 0x2780 <xTaskPriorityDisinherit+0xba>
    26ea:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    26ec:	8f 01       	movw	r16, r30
    26ee:	0e 5f       	subi	r16, 0xFE	; 254
    26f0:	1f 4f       	sbci	r17, 0xFF	; 255
    26f2:	c8 01       	movw	r24, r16
    26f4:	0e 94 cc 07 	call	0xf98	; 0xf98 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    26f8:	8d a1       	ldd	r24, Y+37	; 0x25
    26fa:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    26fc:	25 e0       	ldi	r18, 0x05	; 5
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	28 1b       	sub	r18, r24
    2702:	31 09       	sbc	r19, r1
    2704:	3d 87       	std	Y+13, r19	; 0x0d
    2706:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    2708:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <uxTopReadyPriority>
    270c:	98 17       	cp	r25, r24
    270e:	10 f4       	brcc	.+4      	; 0x2714 <xTaskPriorityDisinherit+0x4e>
    2710:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <uxTopReadyPriority>
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	fc 01       	movw	r30, r24
    2718:	ee 0f       	add	r30, r30
    271a:	ff 1f       	adc	r31, r31
    271c:	ee 0f       	add	r30, r30
    271e:	ff 1f       	adc	r31, r31
    2720:	ee 0f       	add	r30, r30
    2722:	ff 1f       	adc	r31, r31
    2724:	8e 0f       	add	r24, r30
    2726:	9f 1f       	adc	r25, r31
    2728:	fc 01       	movw	r30, r24
    272a:	e6 5b       	subi	r30, 0xB6	; 182
    272c:	fb 4f       	sbci	r31, 0xFB	; 251
    272e:	01 80       	ldd	r0, Z+1	; 0x01
    2730:	f2 81       	ldd	r31, Z+2	; 0x02
    2732:	e0 2d       	mov	r30, r0
    2734:	fd 83       	std	Y+5, r31	; 0x05
    2736:	ec 83       	std	Y+4, r30	; 0x04
    2738:	84 81       	ldd	r24, Z+4	; 0x04
    273a:	95 81       	ldd	r25, Z+5	; 0x05
    273c:	9f 83       	std	Y+7, r25	; 0x07
    273e:	8e 83       	std	Y+6, r24	; 0x06
    2740:	a4 81       	ldd	r26, Z+4	; 0x04
    2742:	b5 81       	ldd	r27, Z+5	; 0x05
    2744:	13 96       	adiw	r26, 0x03	; 3
    2746:	1c 93       	st	X, r17
    2748:	0e 93       	st	-X, r16
    274a:	12 97       	sbiw	r26, 0x02	; 2
    274c:	15 83       	std	Z+5, r17	; 0x05
    274e:	04 83       	std	Z+4, r16	; 0x04
    2750:	ee 89       	ldd	r30, Y+22	; 0x16
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	cf 01       	movw	r24, r30
    2756:	88 0f       	add	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	88 0f       	add	r24, r24
    275c:	99 1f       	adc	r25, r25
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	e8 0f       	add	r30, r24
    2764:	f9 1f       	adc	r31, r25
    2766:	e6 5b       	subi	r30, 0xB6	; 182
    2768:	fb 4f       	sbci	r31, 0xFB	; 251
    276a:	fb 87       	std	Y+11, r31	; 0x0b
    276c:	ea 87       	std	Y+10, r30	; 0x0a
    276e:	80 81       	ld	r24, Z
    2770:	8f 5f       	subi	r24, 0xFF	; 255
    2772:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	05 c0       	rjmp	.+10     	; 0x2782 <xTaskPriorityDisinherit+0xbc>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	03 c0       	rjmp	.+6      	; 0x2782 <xTaskPriorityDisinherit+0xbc>
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	01 c0       	rjmp	.+2      	; 0x2782 <xTaskPriorityDisinherit+0xbc>
    2780:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	1f 91       	pop	r17
    2788:	0f 91       	pop	r16
    278a:	08 95       	ret

0000278c <__subsf3>:
    278c:	50 58       	subi	r21, 0x80	; 128

0000278e <__addsf3>:
    278e:	bb 27       	eor	r27, r27
    2790:	aa 27       	eor	r26, r26
    2792:	0e 94 de 13 	call	0x27bc	; 0x27bc <__addsf3x>
    2796:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <__fp_round>
    279a:	0e 94 b2 14 	call	0x2964	; 0x2964 <__fp_pscA>
    279e:	38 f0       	brcs	.+14     	; 0x27ae <__addsf3+0x20>
    27a0:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fp_pscB>
    27a4:	20 f0       	brcs	.+8      	; 0x27ae <__addsf3+0x20>
    27a6:	39 f4       	brne	.+14     	; 0x27b6 <__addsf3+0x28>
    27a8:	9f 3f       	cpi	r25, 0xFF	; 255
    27aa:	19 f4       	brne	.+6      	; 0x27b2 <__addsf3+0x24>
    27ac:	26 f4       	brtc	.+8      	; 0x27b6 <__addsf3+0x28>
    27ae:	0c 94 af 14 	jmp	0x295e	; 0x295e <__fp_nan>
    27b2:	0e f4       	brtc	.+2      	; 0x27b6 <__addsf3+0x28>
    27b4:	e0 95       	com	r30
    27b6:	e7 fb       	bst	r30, 7
    27b8:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__fp_inf>

000027bc <__addsf3x>:
    27bc:	e9 2f       	mov	r30, r25
    27be:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__fp_split3>
    27c2:	58 f3       	brcs	.-42     	; 0x279a <__addsf3+0xc>
    27c4:	ba 17       	cp	r27, r26
    27c6:	62 07       	cpc	r22, r18
    27c8:	73 07       	cpc	r23, r19
    27ca:	84 07       	cpc	r24, r20
    27cc:	95 07       	cpc	r25, r21
    27ce:	20 f0       	brcs	.+8      	; 0x27d8 <__addsf3x+0x1c>
    27d0:	79 f4       	brne	.+30     	; 0x27f0 <__addsf3x+0x34>
    27d2:	a6 f5       	brtc	.+104    	; 0x283c <__addsf3x+0x80>
    27d4:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__fp_zero>
    27d8:	0e f4       	brtc	.+2      	; 0x27dc <__addsf3x+0x20>
    27da:	e0 95       	com	r30
    27dc:	0b 2e       	mov	r0, r27
    27de:	ba 2f       	mov	r27, r26
    27e0:	a0 2d       	mov	r26, r0
    27e2:	0b 01       	movw	r0, r22
    27e4:	b9 01       	movw	r22, r18
    27e6:	90 01       	movw	r18, r0
    27e8:	0c 01       	movw	r0, r24
    27ea:	ca 01       	movw	r24, r20
    27ec:	a0 01       	movw	r20, r0
    27ee:	11 24       	eor	r1, r1
    27f0:	ff 27       	eor	r31, r31
    27f2:	59 1b       	sub	r21, r25
    27f4:	99 f0       	breq	.+38     	; 0x281c <__addsf3x+0x60>
    27f6:	59 3f       	cpi	r21, 0xF9	; 249
    27f8:	50 f4       	brcc	.+20     	; 0x280e <__addsf3x+0x52>
    27fa:	50 3e       	cpi	r21, 0xE0	; 224
    27fc:	68 f1       	brcs	.+90     	; 0x2858 <__addsf3x+0x9c>
    27fe:	1a 16       	cp	r1, r26
    2800:	f0 40       	sbci	r31, 0x00	; 0
    2802:	a2 2f       	mov	r26, r18
    2804:	23 2f       	mov	r18, r19
    2806:	34 2f       	mov	r19, r20
    2808:	44 27       	eor	r20, r20
    280a:	58 5f       	subi	r21, 0xF8	; 248
    280c:	f3 cf       	rjmp	.-26     	; 0x27f4 <__addsf3x+0x38>
    280e:	46 95       	lsr	r20
    2810:	37 95       	ror	r19
    2812:	27 95       	ror	r18
    2814:	a7 95       	ror	r26
    2816:	f0 40       	sbci	r31, 0x00	; 0
    2818:	53 95       	inc	r21
    281a:	c9 f7       	brne	.-14     	; 0x280e <__addsf3x+0x52>
    281c:	7e f4       	brtc	.+30     	; 0x283c <__addsf3x+0x80>
    281e:	1f 16       	cp	r1, r31
    2820:	ba 0b       	sbc	r27, r26
    2822:	62 0b       	sbc	r22, r18
    2824:	73 0b       	sbc	r23, r19
    2826:	84 0b       	sbc	r24, r20
    2828:	ba f0       	brmi	.+46     	; 0x2858 <__addsf3x+0x9c>
    282a:	91 50       	subi	r25, 0x01	; 1
    282c:	a1 f0       	breq	.+40     	; 0x2856 <__addsf3x+0x9a>
    282e:	ff 0f       	add	r31, r31
    2830:	bb 1f       	adc	r27, r27
    2832:	66 1f       	adc	r22, r22
    2834:	77 1f       	adc	r23, r23
    2836:	88 1f       	adc	r24, r24
    2838:	c2 f7       	brpl	.-16     	; 0x282a <__addsf3x+0x6e>
    283a:	0e c0       	rjmp	.+28     	; 0x2858 <__addsf3x+0x9c>
    283c:	ba 0f       	add	r27, r26
    283e:	62 1f       	adc	r22, r18
    2840:	73 1f       	adc	r23, r19
    2842:	84 1f       	adc	r24, r20
    2844:	48 f4       	brcc	.+18     	; 0x2858 <__addsf3x+0x9c>
    2846:	87 95       	ror	r24
    2848:	77 95       	ror	r23
    284a:	67 95       	ror	r22
    284c:	b7 95       	ror	r27
    284e:	f7 95       	ror	r31
    2850:	9e 3f       	cpi	r25, 0xFE	; 254
    2852:	08 f0       	brcs	.+2      	; 0x2856 <__addsf3x+0x9a>
    2854:	b0 cf       	rjmp	.-160    	; 0x27b6 <__addsf3+0x28>
    2856:	93 95       	inc	r25
    2858:	88 0f       	add	r24, r24
    285a:	08 f0       	brcs	.+2      	; 0x285e <__addsf3x+0xa2>
    285c:	99 27       	eor	r25, r25
    285e:	ee 0f       	add	r30, r30
    2860:	97 95       	ror	r25
    2862:	87 95       	ror	r24
    2864:	08 95       	ret

00002866 <__fixsfsi>:
    2866:	0e 94 3a 14 	call	0x2874	; 0x2874 <__fixunssfsi>
    286a:	68 94       	set
    286c:	b1 11       	cpse	r27, r1
    286e:	0c 94 0c 15 	jmp	0x2a18	; 0x2a18 <__fp_szero>
    2872:	08 95       	ret

00002874 <__fixunssfsi>:
    2874:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__fp_splitA>
    2878:	88 f0       	brcs	.+34     	; 0x289c <__fixunssfsi+0x28>
    287a:	9f 57       	subi	r25, 0x7F	; 127
    287c:	98 f0       	brcs	.+38     	; 0x28a4 <__fixunssfsi+0x30>
    287e:	b9 2f       	mov	r27, r25
    2880:	99 27       	eor	r25, r25
    2882:	b7 51       	subi	r27, 0x17	; 23
    2884:	b0 f0       	brcs	.+44     	; 0x28b2 <__fixunssfsi+0x3e>
    2886:	e1 f0       	breq	.+56     	; 0x28c0 <__fixunssfsi+0x4c>
    2888:	66 0f       	add	r22, r22
    288a:	77 1f       	adc	r23, r23
    288c:	88 1f       	adc	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	1a f0       	brmi	.+6      	; 0x2898 <__fixunssfsi+0x24>
    2892:	ba 95       	dec	r27
    2894:	c9 f7       	brne	.-14     	; 0x2888 <__fixunssfsi+0x14>
    2896:	14 c0       	rjmp	.+40     	; 0x28c0 <__fixunssfsi+0x4c>
    2898:	b1 30       	cpi	r27, 0x01	; 1
    289a:	91 f0       	breq	.+36     	; 0x28c0 <__fixunssfsi+0x4c>
    289c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <__fp_zero>
    28a0:	b1 e0       	ldi	r27, 0x01	; 1
    28a2:	08 95       	ret
    28a4:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__fp_zero>
    28a8:	67 2f       	mov	r22, r23
    28aa:	78 2f       	mov	r23, r24
    28ac:	88 27       	eor	r24, r24
    28ae:	b8 5f       	subi	r27, 0xF8	; 248
    28b0:	39 f0       	breq	.+14     	; 0x28c0 <__fixunssfsi+0x4c>
    28b2:	b9 3f       	cpi	r27, 0xF9	; 249
    28b4:	cc f3       	brlt	.-14     	; 0x28a8 <__fixunssfsi+0x34>
    28b6:	86 95       	lsr	r24
    28b8:	77 95       	ror	r23
    28ba:	67 95       	ror	r22
    28bc:	b3 95       	inc	r27
    28be:	d9 f7       	brne	.-10     	; 0x28b6 <__fixunssfsi+0x42>
    28c0:	3e f4       	brtc	.+14     	; 0x28d0 <__fixunssfsi+0x5c>
    28c2:	90 95       	com	r25
    28c4:	80 95       	com	r24
    28c6:	70 95       	com	r23
    28c8:	61 95       	neg	r22
    28ca:	7f 4f       	sbci	r23, 0xFF	; 255
    28cc:	8f 4f       	sbci	r24, 0xFF	; 255
    28ce:	9f 4f       	sbci	r25, 0xFF	; 255
    28d0:	08 95       	ret

000028d2 <floor>:
    28d2:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__fp_trunc>
    28d6:	90 f0       	brcs	.+36     	; 0x28fc <floor+0x2a>
    28d8:	9f 37       	cpi	r25, 0x7F	; 127
    28da:	48 f4       	brcc	.+18     	; 0x28ee <floor+0x1c>
    28dc:	91 11       	cpse	r25, r1
    28de:	16 f0       	brts	.+4      	; 0x28e4 <floor+0x12>
    28e0:	0c 94 0c 15 	jmp	0x2a18	; 0x2a18 <__fp_szero>
    28e4:	60 e0       	ldi	r22, 0x00	; 0
    28e6:	70 e0       	ldi	r23, 0x00	; 0
    28e8:	80 e8       	ldi	r24, 0x80	; 128
    28ea:	9f eb       	ldi	r25, 0xBF	; 191
    28ec:	08 95       	ret
    28ee:	26 f4       	brtc	.+8      	; 0x28f8 <floor+0x26>
    28f0:	1b 16       	cp	r1, r27
    28f2:	61 1d       	adc	r22, r1
    28f4:	71 1d       	adc	r23, r1
    28f6:	81 1d       	adc	r24, r1
    28f8:	0c 94 86 14 	jmp	0x290c	; 0x290c <__fp_mintl>
    28fc:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__fp_mpack>

00002900 <__fp_inf>:
    2900:	97 f9       	bld	r25, 7
    2902:	9f 67       	ori	r25, 0x7F	; 127
    2904:	80 e8       	ldi	r24, 0x80	; 128
    2906:	70 e0       	ldi	r23, 0x00	; 0
    2908:	60 e0       	ldi	r22, 0x00	; 0
    290a:	08 95       	ret

0000290c <__fp_mintl>:
    290c:	88 23       	and	r24, r24
    290e:	71 f4       	brne	.+28     	; 0x292c <__fp_mintl+0x20>
    2910:	77 23       	and	r23, r23
    2912:	21 f0       	breq	.+8      	; 0x291c <__fp_mintl+0x10>
    2914:	98 50       	subi	r25, 0x08	; 8
    2916:	87 2b       	or	r24, r23
    2918:	76 2f       	mov	r23, r22
    291a:	07 c0       	rjmp	.+14     	; 0x292a <__fp_mintl+0x1e>
    291c:	66 23       	and	r22, r22
    291e:	11 f4       	brne	.+4      	; 0x2924 <__fp_mintl+0x18>
    2920:	99 27       	eor	r25, r25
    2922:	0d c0       	rjmp	.+26     	; 0x293e <__fp_mintl+0x32>
    2924:	90 51       	subi	r25, 0x10	; 16
    2926:	86 2b       	or	r24, r22
    2928:	70 e0       	ldi	r23, 0x00	; 0
    292a:	60 e0       	ldi	r22, 0x00	; 0
    292c:	2a f0       	brmi	.+10     	; 0x2938 <__fp_mintl+0x2c>
    292e:	9a 95       	dec	r25
    2930:	66 0f       	add	r22, r22
    2932:	77 1f       	adc	r23, r23
    2934:	88 1f       	adc	r24, r24
    2936:	da f7       	brpl	.-10     	; 0x292e <__fp_mintl+0x22>
    2938:	88 0f       	add	r24, r24
    293a:	96 95       	lsr	r25
    293c:	87 95       	ror	r24
    293e:	97 f9       	bld	r25, 7
    2940:	08 95       	ret

00002942 <__fp_mpack>:
    2942:	9f 3f       	cpi	r25, 0xFF	; 255
    2944:	31 f0       	breq	.+12     	; 0x2952 <__fp_mpack_finite+0xc>

00002946 <__fp_mpack_finite>:
    2946:	91 50       	subi	r25, 0x01	; 1
    2948:	20 f4       	brcc	.+8      	; 0x2952 <__fp_mpack_finite+0xc>
    294a:	87 95       	ror	r24
    294c:	77 95       	ror	r23
    294e:	67 95       	ror	r22
    2950:	b7 95       	ror	r27
    2952:	88 0f       	add	r24, r24
    2954:	91 1d       	adc	r25, r1
    2956:	96 95       	lsr	r25
    2958:	87 95       	ror	r24
    295a:	97 f9       	bld	r25, 7
    295c:	08 95       	ret

0000295e <__fp_nan>:
    295e:	9f ef       	ldi	r25, 0xFF	; 255
    2960:	80 ec       	ldi	r24, 0xC0	; 192
    2962:	08 95       	ret

00002964 <__fp_pscA>:
    2964:	00 24       	eor	r0, r0
    2966:	0a 94       	dec	r0
    2968:	16 16       	cp	r1, r22
    296a:	17 06       	cpc	r1, r23
    296c:	18 06       	cpc	r1, r24
    296e:	09 06       	cpc	r0, r25
    2970:	08 95       	ret

00002972 <__fp_pscB>:
    2972:	00 24       	eor	r0, r0
    2974:	0a 94       	dec	r0
    2976:	12 16       	cp	r1, r18
    2978:	13 06       	cpc	r1, r19
    297a:	14 06       	cpc	r1, r20
    297c:	05 06       	cpc	r0, r21
    297e:	08 95       	ret

00002980 <__fp_round>:
    2980:	09 2e       	mov	r0, r25
    2982:	03 94       	inc	r0
    2984:	00 0c       	add	r0, r0
    2986:	11 f4       	brne	.+4      	; 0x298c <__fp_round+0xc>
    2988:	88 23       	and	r24, r24
    298a:	52 f0       	brmi	.+20     	; 0x29a0 <__fp_round+0x20>
    298c:	bb 0f       	add	r27, r27
    298e:	40 f4       	brcc	.+16     	; 0x29a0 <__fp_round+0x20>
    2990:	bf 2b       	or	r27, r31
    2992:	11 f4       	brne	.+4      	; 0x2998 <__fp_round+0x18>
    2994:	60 ff       	sbrs	r22, 0
    2996:	04 c0       	rjmp	.+8      	; 0x29a0 <__fp_round+0x20>
    2998:	6f 5f       	subi	r22, 0xFF	; 255
    299a:	7f 4f       	sbci	r23, 0xFF	; 255
    299c:	8f 4f       	sbci	r24, 0xFF	; 255
    299e:	9f 4f       	sbci	r25, 0xFF	; 255
    29a0:	08 95       	ret

000029a2 <__fp_split3>:
    29a2:	57 fd       	sbrc	r21, 7
    29a4:	90 58       	subi	r25, 0x80	; 128
    29a6:	44 0f       	add	r20, r20
    29a8:	55 1f       	adc	r21, r21
    29aa:	59 f0       	breq	.+22     	; 0x29c2 <__fp_splitA+0x10>
    29ac:	5f 3f       	cpi	r21, 0xFF	; 255
    29ae:	71 f0       	breq	.+28     	; 0x29cc <__fp_splitA+0x1a>
    29b0:	47 95       	ror	r20

000029b2 <__fp_splitA>:
    29b2:	88 0f       	add	r24, r24
    29b4:	97 fb       	bst	r25, 7
    29b6:	99 1f       	adc	r25, r25
    29b8:	61 f0       	breq	.+24     	; 0x29d2 <__fp_splitA+0x20>
    29ba:	9f 3f       	cpi	r25, 0xFF	; 255
    29bc:	79 f0       	breq	.+30     	; 0x29dc <__fp_splitA+0x2a>
    29be:	87 95       	ror	r24
    29c0:	08 95       	ret
    29c2:	12 16       	cp	r1, r18
    29c4:	13 06       	cpc	r1, r19
    29c6:	14 06       	cpc	r1, r20
    29c8:	55 1f       	adc	r21, r21
    29ca:	f2 cf       	rjmp	.-28     	; 0x29b0 <__fp_split3+0xe>
    29cc:	46 95       	lsr	r20
    29ce:	f1 df       	rcall	.-30     	; 0x29b2 <__fp_splitA>
    29d0:	08 c0       	rjmp	.+16     	; 0x29e2 <__fp_splitA+0x30>
    29d2:	16 16       	cp	r1, r22
    29d4:	17 06       	cpc	r1, r23
    29d6:	18 06       	cpc	r1, r24
    29d8:	99 1f       	adc	r25, r25
    29da:	f1 cf       	rjmp	.-30     	; 0x29be <__fp_splitA+0xc>
    29dc:	86 95       	lsr	r24
    29de:	71 05       	cpc	r23, r1
    29e0:	61 05       	cpc	r22, r1
    29e2:	08 94       	sec
    29e4:	08 95       	ret

000029e6 <__fp_trunc>:
    29e6:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__fp_splitA>
    29ea:	a0 f0       	brcs	.+40     	; 0x2a14 <__fp_trunc+0x2e>
    29ec:	be e7       	ldi	r27, 0x7E	; 126
    29ee:	b9 17       	cp	r27, r25
    29f0:	88 f4       	brcc	.+34     	; 0x2a14 <__fp_trunc+0x2e>
    29f2:	bb 27       	eor	r27, r27
    29f4:	9f 38       	cpi	r25, 0x8F	; 143
    29f6:	60 f4       	brcc	.+24     	; 0x2a10 <__fp_trunc+0x2a>
    29f8:	16 16       	cp	r1, r22
    29fa:	b1 1d       	adc	r27, r1
    29fc:	67 2f       	mov	r22, r23
    29fe:	78 2f       	mov	r23, r24
    2a00:	88 27       	eor	r24, r24
    2a02:	98 5f       	subi	r25, 0xF8	; 248
    2a04:	f7 cf       	rjmp	.-18     	; 0x29f4 <__fp_trunc+0xe>
    2a06:	86 95       	lsr	r24
    2a08:	77 95       	ror	r23
    2a0a:	67 95       	ror	r22
    2a0c:	b1 1d       	adc	r27, r1
    2a0e:	93 95       	inc	r25
    2a10:	96 39       	cpi	r25, 0x96	; 150
    2a12:	c8 f3       	brcs	.-14     	; 0x2a06 <__fp_trunc+0x20>
    2a14:	08 95       	ret

00002a16 <__fp_zero>:
    2a16:	e8 94       	clt

00002a18 <__fp_szero>:
    2a18:	bb 27       	eor	r27, r27
    2a1a:	66 27       	eor	r22, r22
    2a1c:	77 27       	eor	r23, r23
    2a1e:	cb 01       	movw	r24, r22
    2a20:	97 f9       	bld	r25, 7
    2a22:	08 95       	ret

00002a24 <__mulsf3>:
    2a24:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__mulsf3x>
    2a28:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <__fp_round>
    2a2c:	0e 94 b2 14 	call	0x2964	; 0x2964 <__fp_pscA>
    2a30:	38 f0       	brcs	.+14     	; 0x2a40 <__mulsf3+0x1c>
    2a32:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fp_pscB>
    2a36:	20 f0       	brcs	.+8      	; 0x2a40 <__mulsf3+0x1c>
    2a38:	95 23       	and	r25, r21
    2a3a:	11 f0       	breq	.+4      	; 0x2a40 <__mulsf3+0x1c>
    2a3c:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__fp_inf>
    2a40:	0c 94 af 14 	jmp	0x295e	; 0x295e <__fp_nan>
    2a44:	11 24       	eor	r1, r1
    2a46:	0c 94 0c 15 	jmp	0x2a18	; 0x2a18 <__fp_szero>

00002a4a <__mulsf3x>:
    2a4a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__fp_split3>
    2a4e:	70 f3       	brcs	.-36     	; 0x2a2c <__mulsf3+0x8>

00002a50 <__mulsf3_pse>:
    2a50:	95 9f       	mul	r25, r21
    2a52:	c1 f3       	breq	.-16     	; 0x2a44 <__mulsf3+0x20>
    2a54:	95 0f       	add	r25, r21
    2a56:	50 e0       	ldi	r21, 0x00	; 0
    2a58:	55 1f       	adc	r21, r21
    2a5a:	62 9f       	mul	r22, r18
    2a5c:	f0 01       	movw	r30, r0
    2a5e:	72 9f       	mul	r23, r18
    2a60:	bb 27       	eor	r27, r27
    2a62:	f0 0d       	add	r31, r0
    2a64:	b1 1d       	adc	r27, r1
    2a66:	63 9f       	mul	r22, r19
    2a68:	aa 27       	eor	r26, r26
    2a6a:	f0 0d       	add	r31, r0
    2a6c:	b1 1d       	adc	r27, r1
    2a6e:	aa 1f       	adc	r26, r26
    2a70:	64 9f       	mul	r22, r20
    2a72:	66 27       	eor	r22, r22
    2a74:	b0 0d       	add	r27, r0
    2a76:	a1 1d       	adc	r26, r1
    2a78:	66 1f       	adc	r22, r22
    2a7a:	82 9f       	mul	r24, r18
    2a7c:	22 27       	eor	r18, r18
    2a7e:	b0 0d       	add	r27, r0
    2a80:	a1 1d       	adc	r26, r1
    2a82:	62 1f       	adc	r22, r18
    2a84:	73 9f       	mul	r23, r19
    2a86:	b0 0d       	add	r27, r0
    2a88:	a1 1d       	adc	r26, r1
    2a8a:	62 1f       	adc	r22, r18
    2a8c:	83 9f       	mul	r24, r19
    2a8e:	a0 0d       	add	r26, r0
    2a90:	61 1d       	adc	r22, r1
    2a92:	22 1f       	adc	r18, r18
    2a94:	74 9f       	mul	r23, r20
    2a96:	33 27       	eor	r19, r19
    2a98:	a0 0d       	add	r26, r0
    2a9a:	61 1d       	adc	r22, r1
    2a9c:	23 1f       	adc	r18, r19
    2a9e:	84 9f       	mul	r24, r20
    2aa0:	60 0d       	add	r22, r0
    2aa2:	21 1d       	adc	r18, r1
    2aa4:	82 2f       	mov	r24, r18
    2aa6:	76 2f       	mov	r23, r22
    2aa8:	6a 2f       	mov	r22, r26
    2aaa:	11 24       	eor	r1, r1
    2aac:	9f 57       	subi	r25, 0x7F	; 127
    2aae:	50 40       	sbci	r21, 0x00	; 0
    2ab0:	9a f0       	brmi	.+38     	; 0x2ad8 <__mulsf3_pse+0x88>
    2ab2:	f1 f0       	breq	.+60     	; 0x2af0 <__mulsf3_pse+0xa0>
    2ab4:	88 23       	and	r24, r24
    2ab6:	4a f0       	brmi	.+18     	; 0x2aca <__mulsf3_pse+0x7a>
    2ab8:	ee 0f       	add	r30, r30
    2aba:	ff 1f       	adc	r31, r31
    2abc:	bb 1f       	adc	r27, r27
    2abe:	66 1f       	adc	r22, r22
    2ac0:	77 1f       	adc	r23, r23
    2ac2:	88 1f       	adc	r24, r24
    2ac4:	91 50       	subi	r25, 0x01	; 1
    2ac6:	50 40       	sbci	r21, 0x00	; 0
    2ac8:	a9 f7       	brne	.-22     	; 0x2ab4 <__mulsf3_pse+0x64>
    2aca:	9e 3f       	cpi	r25, 0xFE	; 254
    2acc:	51 05       	cpc	r21, r1
    2ace:	80 f0       	brcs	.+32     	; 0x2af0 <__mulsf3_pse+0xa0>
    2ad0:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__fp_inf>
    2ad4:	0c 94 0c 15 	jmp	0x2a18	; 0x2a18 <__fp_szero>
    2ad8:	5f 3f       	cpi	r21, 0xFF	; 255
    2ada:	e4 f3       	brlt	.-8      	; 0x2ad4 <__mulsf3_pse+0x84>
    2adc:	98 3e       	cpi	r25, 0xE8	; 232
    2ade:	d4 f3       	brlt	.-12     	; 0x2ad4 <__mulsf3_pse+0x84>
    2ae0:	86 95       	lsr	r24
    2ae2:	77 95       	ror	r23
    2ae4:	67 95       	ror	r22
    2ae6:	b7 95       	ror	r27
    2ae8:	f7 95       	ror	r31
    2aea:	e7 95       	ror	r30
    2aec:	9f 5f       	subi	r25, 0xFF	; 255
    2aee:	c1 f7       	brne	.-16     	; 0x2ae0 <__mulsf3_pse+0x90>
    2af0:	fe 2b       	or	r31, r30
    2af2:	88 0f       	add	r24, r24
    2af4:	91 1d       	adc	r25, r1
    2af6:	96 95       	lsr	r25
    2af8:	87 95       	ror	r24
    2afa:	97 f9       	bld	r25, 7
    2afc:	08 95       	ret

00002afe <__udivmodhi4>:
    2afe:	aa 1b       	sub	r26, r26
    2b00:	bb 1b       	sub	r27, r27
    2b02:	51 e1       	ldi	r21, 0x11	; 17
    2b04:	07 c0       	rjmp	.+14     	; 0x2b14 <__udivmodhi4_ep>

00002b06 <__udivmodhi4_loop>:
    2b06:	aa 1f       	adc	r26, r26
    2b08:	bb 1f       	adc	r27, r27
    2b0a:	a6 17       	cp	r26, r22
    2b0c:	b7 07       	cpc	r27, r23
    2b0e:	10 f0       	brcs	.+4      	; 0x2b14 <__udivmodhi4_ep>
    2b10:	a6 1b       	sub	r26, r22
    2b12:	b7 0b       	sbc	r27, r23

00002b14 <__udivmodhi4_ep>:
    2b14:	88 1f       	adc	r24, r24
    2b16:	99 1f       	adc	r25, r25
    2b18:	5a 95       	dec	r21
    2b1a:	a9 f7       	brne	.-22     	; 0x2b06 <__udivmodhi4_loop>
    2b1c:	80 95       	com	r24
    2b1e:	90 95       	com	r25
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	08 95       	ret

00002b26 <__udivmodsi4>:
    2b26:	a1 e2       	ldi	r26, 0x21	; 33
    2b28:	1a 2e       	mov	r1, r26
    2b2a:	aa 1b       	sub	r26, r26
    2b2c:	bb 1b       	sub	r27, r27
    2b2e:	fd 01       	movw	r30, r26
    2b30:	0d c0       	rjmp	.+26     	; 0x2b4c <__udivmodsi4_ep>

00002b32 <__udivmodsi4_loop>:
    2b32:	aa 1f       	adc	r26, r26
    2b34:	bb 1f       	adc	r27, r27
    2b36:	ee 1f       	adc	r30, r30
    2b38:	ff 1f       	adc	r31, r31
    2b3a:	a2 17       	cp	r26, r18
    2b3c:	b3 07       	cpc	r27, r19
    2b3e:	e4 07       	cpc	r30, r20
    2b40:	f5 07       	cpc	r31, r21
    2b42:	20 f0       	brcs	.+8      	; 0x2b4c <__udivmodsi4_ep>
    2b44:	a2 1b       	sub	r26, r18
    2b46:	b3 0b       	sbc	r27, r19
    2b48:	e4 0b       	sbc	r30, r20
    2b4a:	f5 0b       	sbc	r31, r21

00002b4c <__udivmodsi4_ep>:
    2b4c:	66 1f       	adc	r22, r22
    2b4e:	77 1f       	adc	r23, r23
    2b50:	88 1f       	adc	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	1a 94       	dec	r1
    2b56:	69 f7       	brne	.-38     	; 0x2b32 <__udivmodsi4_loop>
    2b58:	60 95       	com	r22
    2b5a:	70 95       	com	r23
    2b5c:	80 95       	com	r24
    2b5e:	90 95       	com	r25
    2b60:	9b 01       	movw	r18, r22
    2b62:	ac 01       	movw	r20, r24
    2b64:	bd 01       	movw	r22, r26
    2b66:	cf 01       	movw	r24, r30
    2b68:	08 95       	ret

00002b6a <memcpy>:
    2b6a:	fb 01       	movw	r30, r22
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	02 c0       	rjmp	.+4      	; 0x2b74 <memcpy+0xa>
    2b70:	01 90       	ld	r0, Z+
    2b72:	0d 92       	st	X+, r0
    2b74:	41 50       	subi	r20, 0x01	; 1
    2b76:	50 40       	sbci	r21, 0x00	; 0
    2b78:	d8 f7       	brcc	.-10     	; 0x2b70 <memcpy+0x6>
    2b7a:	08 95       	ret

00002b7c <memset>:
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	01 c0       	rjmp	.+2      	; 0x2b82 <memset+0x6>
    2b80:	6d 93       	st	X+, r22
    2b82:	41 50       	subi	r20, 0x01	; 1
    2b84:	50 40       	sbci	r21, 0x00	; 0
    2b86:	e0 f7       	brcc	.-8      	; 0x2b80 <memset+0x4>
    2b88:	08 95       	ret

00002b8a <sprintf>:
    2b8a:	ae e0       	ldi	r26, 0x0E	; 14
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	eb ec       	ldi	r30, 0xCB	; 203
    2b90:	f5 e1       	ldi	r31, 0x15	; 21
    2b92:	0c 94 86 18 	jmp	0x310c	; 0x310c <__prologue_saves__+0x1c>
    2b96:	0d 89       	ldd	r16, Y+21	; 0x15
    2b98:	1e 89       	ldd	r17, Y+22	; 0x16
    2b9a:	86 e0       	ldi	r24, 0x06	; 6
    2b9c:	8c 83       	std	Y+4, r24	; 0x04
    2b9e:	1a 83       	std	Y+2, r17	; 0x02
    2ba0:	09 83       	std	Y+1, r16	; 0x01
    2ba2:	8f ef       	ldi	r24, 0xFF	; 255
    2ba4:	9f e7       	ldi	r25, 0x7F	; 127
    2ba6:	9e 83       	std	Y+6, r25	; 0x06
    2ba8:	8d 83       	std	Y+5, r24	; 0x05
    2baa:	ae 01       	movw	r20, r28
    2bac:	47 5e       	subi	r20, 0xE7	; 231
    2bae:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb0:	6f 89       	ldd	r22, Y+23	; 0x17
    2bb2:	78 8d       	ldd	r23, Y+24	; 0x18
    2bb4:	ce 01       	movw	r24, r28
    2bb6:	01 96       	adiw	r24, 0x01	; 1
    2bb8:	0e 94 e7 15 	call	0x2bce	; 0x2bce <vfprintf>
    2bbc:	ef 81       	ldd	r30, Y+7	; 0x07
    2bbe:	f8 85       	ldd	r31, Y+8	; 0x08
    2bc0:	e0 0f       	add	r30, r16
    2bc2:	f1 1f       	adc	r31, r17
    2bc4:	10 82       	st	Z, r1
    2bc6:	2e 96       	adiw	r28, 0x0e	; 14
    2bc8:	e4 e0       	ldi	r30, 0x04	; 4
    2bca:	0c 94 a2 18 	jmp	0x3144	; 0x3144 <__epilogue_restores__+0x1c>

00002bce <vfprintf>:
    2bce:	ab e0       	ldi	r26, 0x0B	; 11
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	ed ee       	ldi	r30, 0xED	; 237
    2bd4:	f5 e1       	ldi	r31, 0x15	; 21
    2bd6:	0c 94 78 18 	jmp	0x30f0	; 0x30f0 <__prologue_saves__>
    2bda:	6c 01       	movw	r12, r24
    2bdc:	7b 01       	movw	r14, r22
    2bde:	8a 01       	movw	r16, r20
    2be0:	fc 01       	movw	r30, r24
    2be2:	17 82       	std	Z+7, r1	; 0x07
    2be4:	16 82       	std	Z+6, r1	; 0x06
    2be6:	83 81       	ldd	r24, Z+3	; 0x03
    2be8:	81 ff       	sbrs	r24, 1
    2bea:	cc c1       	rjmp	.+920    	; 0x2f84 <vfprintf+0x3b6>
    2bec:	ce 01       	movw	r24, r28
    2bee:	01 96       	adiw	r24, 0x01	; 1
    2bf0:	3c 01       	movw	r6, r24
    2bf2:	f6 01       	movw	r30, r12
    2bf4:	93 81       	ldd	r25, Z+3	; 0x03
    2bf6:	f7 01       	movw	r30, r14
    2bf8:	93 fd       	sbrc	r25, 3
    2bfa:	85 91       	lpm	r24, Z+
    2bfc:	93 ff       	sbrs	r25, 3
    2bfe:	81 91       	ld	r24, Z+
    2c00:	7f 01       	movw	r14, r30
    2c02:	88 23       	and	r24, r24
    2c04:	09 f4       	brne	.+2      	; 0x2c08 <vfprintf+0x3a>
    2c06:	ba c1       	rjmp	.+884    	; 0x2f7c <vfprintf+0x3ae>
    2c08:	85 32       	cpi	r24, 0x25	; 37
    2c0a:	39 f4       	brne	.+14     	; 0x2c1a <vfprintf+0x4c>
    2c0c:	93 fd       	sbrc	r25, 3
    2c0e:	85 91       	lpm	r24, Z+
    2c10:	93 ff       	sbrs	r25, 3
    2c12:	81 91       	ld	r24, Z+
    2c14:	7f 01       	movw	r14, r30
    2c16:	85 32       	cpi	r24, 0x25	; 37
    2c18:	29 f4       	brne	.+10     	; 0x2c24 <vfprintf+0x56>
    2c1a:	b6 01       	movw	r22, r12
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <fputc>
    2c22:	e7 cf       	rjmp	.-50     	; 0x2bf2 <vfprintf+0x24>
    2c24:	91 2c       	mov	r9, r1
    2c26:	21 2c       	mov	r2, r1
    2c28:	31 2c       	mov	r3, r1
    2c2a:	ff e1       	ldi	r31, 0x1F	; 31
    2c2c:	f3 15       	cp	r31, r3
    2c2e:	d8 f0       	brcs	.+54     	; 0x2c66 <vfprintf+0x98>
    2c30:	8b 32       	cpi	r24, 0x2B	; 43
    2c32:	79 f0       	breq	.+30     	; 0x2c52 <vfprintf+0x84>
    2c34:	38 f4       	brcc	.+14     	; 0x2c44 <vfprintf+0x76>
    2c36:	80 32       	cpi	r24, 0x20	; 32
    2c38:	79 f0       	breq	.+30     	; 0x2c58 <vfprintf+0x8a>
    2c3a:	83 32       	cpi	r24, 0x23	; 35
    2c3c:	a1 f4       	brne	.+40     	; 0x2c66 <vfprintf+0x98>
    2c3e:	23 2d       	mov	r18, r3
    2c40:	20 61       	ori	r18, 0x10	; 16
    2c42:	1d c0       	rjmp	.+58     	; 0x2c7e <vfprintf+0xb0>
    2c44:	8d 32       	cpi	r24, 0x2D	; 45
    2c46:	61 f0       	breq	.+24     	; 0x2c60 <vfprintf+0x92>
    2c48:	80 33       	cpi	r24, 0x30	; 48
    2c4a:	69 f4       	brne	.+26     	; 0x2c66 <vfprintf+0x98>
    2c4c:	23 2d       	mov	r18, r3
    2c4e:	21 60       	ori	r18, 0x01	; 1
    2c50:	16 c0       	rjmp	.+44     	; 0x2c7e <vfprintf+0xb0>
    2c52:	83 2d       	mov	r24, r3
    2c54:	82 60       	ori	r24, 0x02	; 2
    2c56:	38 2e       	mov	r3, r24
    2c58:	e3 2d       	mov	r30, r3
    2c5a:	e4 60       	ori	r30, 0x04	; 4
    2c5c:	3e 2e       	mov	r3, r30
    2c5e:	2a c0       	rjmp	.+84     	; 0x2cb4 <vfprintf+0xe6>
    2c60:	f3 2d       	mov	r31, r3
    2c62:	f8 60       	ori	r31, 0x08	; 8
    2c64:	1d c0       	rjmp	.+58     	; 0x2ca0 <vfprintf+0xd2>
    2c66:	37 fc       	sbrc	r3, 7
    2c68:	2d c0       	rjmp	.+90     	; 0x2cc4 <vfprintf+0xf6>
    2c6a:	20 ed       	ldi	r18, 0xD0	; 208
    2c6c:	28 0f       	add	r18, r24
    2c6e:	2a 30       	cpi	r18, 0x0A	; 10
    2c70:	40 f0       	brcs	.+16     	; 0x2c82 <vfprintf+0xb4>
    2c72:	8e 32       	cpi	r24, 0x2E	; 46
    2c74:	b9 f4       	brne	.+46     	; 0x2ca4 <vfprintf+0xd6>
    2c76:	36 fc       	sbrc	r3, 6
    2c78:	81 c1       	rjmp	.+770    	; 0x2f7c <vfprintf+0x3ae>
    2c7a:	23 2d       	mov	r18, r3
    2c7c:	20 64       	ori	r18, 0x40	; 64
    2c7e:	32 2e       	mov	r3, r18
    2c80:	19 c0       	rjmp	.+50     	; 0x2cb4 <vfprintf+0xe6>
    2c82:	36 fe       	sbrs	r3, 6
    2c84:	06 c0       	rjmp	.+12     	; 0x2c92 <vfprintf+0xc4>
    2c86:	8a e0       	ldi	r24, 0x0A	; 10
    2c88:	98 9e       	mul	r9, r24
    2c8a:	20 0d       	add	r18, r0
    2c8c:	11 24       	eor	r1, r1
    2c8e:	92 2e       	mov	r9, r18
    2c90:	11 c0       	rjmp	.+34     	; 0x2cb4 <vfprintf+0xe6>
    2c92:	ea e0       	ldi	r30, 0x0A	; 10
    2c94:	2e 9e       	mul	r2, r30
    2c96:	20 0d       	add	r18, r0
    2c98:	11 24       	eor	r1, r1
    2c9a:	22 2e       	mov	r2, r18
    2c9c:	f3 2d       	mov	r31, r3
    2c9e:	f0 62       	ori	r31, 0x20	; 32
    2ca0:	3f 2e       	mov	r3, r31
    2ca2:	08 c0       	rjmp	.+16     	; 0x2cb4 <vfprintf+0xe6>
    2ca4:	8c 36       	cpi	r24, 0x6C	; 108
    2ca6:	21 f4       	brne	.+8      	; 0x2cb0 <vfprintf+0xe2>
    2ca8:	83 2d       	mov	r24, r3
    2caa:	80 68       	ori	r24, 0x80	; 128
    2cac:	38 2e       	mov	r3, r24
    2cae:	02 c0       	rjmp	.+4      	; 0x2cb4 <vfprintf+0xe6>
    2cb0:	88 36       	cpi	r24, 0x68	; 104
    2cb2:	41 f4       	brne	.+16     	; 0x2cc4 <vfprintf+0xf6>
    2cb4:	f7 01       	movw	r30, r14
    2cb6:	93 fd       	sbrc	r25, 3
    2cb8:	85 91       	lpm	r24, Z+
    2cba:	93 ff       	sbrs	r25, 3
    2cbc:	81 91       	ld	r24, Z+
    2cbe:	7f 01       	movw	r14, r30
    2cc0:	81 11       	cpse	r24, r1
    2cc2:	b3 cf       	rjmp	.-154    	; 0x2c2a <vfprintf+0x5c>
    2cc4:	98 2f       	mov	r25, r24
    2cc6:	9f 7d       	andi	r25, 0xDF	; 223
    2cc8:	95 54       	subi	r25, 0x45	; 69
    2cca:	93 30       	cpi	r25, 0x03	; 3
    2ccc:	28 f4       	brcc	.+10     	; 0x2cd8 <vfprintf+0x10a>
    2cce:	0c 5f       	subi	r16, 0xFC	; 252
    2cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd2:	9f e3       	ldi	r25, 0x3F	; 63
    2cd4:	99 83       	std	Y+1, r25	; 0x01
    2cd6:	0d c0       	rjmp	.+26     	; 0x2cf2 <vfprintf+0x124>
    2cd8:	83 36       	cpi	r24, 0x63	; 99
    2cda:	31 f0       	breq	.+12     	; 0x2ce8 <vfprintf+0x11a>
    2cdc:	83 37       	cpi	r24, 0x73	; 115
    2cde:	71 f0       	breq	.+28     	; 0x2cfc <vfprintf+0x12e>
    2ce0:	83 35       	cpi	r24, 0x53	; 83
    2ce2:	09 f0       	breq	.+2      	; 0x2ce6 <vfprintf+0x118>
    2ce4:	59 c0       	rjmp	.+178    	; 0x2d98 <vfprintf+0x1ca>
    2ce6:	21 c0       	rjmp	.+66     	; 0x2d2a <vfprintf+0x15c>
    2ce8:	f8 01       	movw	r30, r16
    2cea:	80 81       	ld	r24, Z
    2cec:	89 83       	std	Y+1, r24	; 0x01
    2cee:	0e 5f       	subi	r16, 0xFE	; 254
    2cf0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf2:	88 24       	eor	r8, r8
    2cf4:	83 94       	inc	r8
    2cf6:	91 2c       	mov	r9, r1
    2cf8:	53 01       	movw	r10, r6
    2cfa:	13 c0       	rjmp	.+38     	; 0x2d22 <vfprintf+0x154>
    2cfc:	28 01       	movw	r4, r16
    2cfe:	f2 e0       	ldi	r31, 0x02	; 2
    2d00:	4f 0e       	add	r4, r31
    2d02:	51 1c       	adc	r5, r1
    2d04:	f8 01       	movw	r30, r16
    2d06:	a0 80       	ld	r10, Z
    2d08:	b1 80       	ldd	r11, Z+1	; 0x01
    2d0a:	36 fe       	sbrs	r3, 6
    2d0c:	03 c0       	rjmp	.+6      	; 0x2d14 <vfprintf+0x146>
    2d0e:	69 2d       	mov	r22, r9
    2d10:	70 e0       	ldi	r23, 0x00	; 0
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <vfprintf+0x14a>
    2d14:	6f ef       	ldi	r22, 0xFF	; 255
    2d16:	7f ef       	ldi	r23, 0xFF	; 255
    2d18:	c5 01       	movw	r24, r10
    2d1a:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <strnlen>
    2d1e:	4c 01       	movw	r8, r24
    2d20:	82 01       	movw	r16, r4
    2d22:	f3 2d       	mov	r31, r3
    2d24:	ff 77       	andi	r31, 0x7F	; 127
    2d26:	3f 2e       	mov	r3, r31
    2d28:	16 c0       	rjmp	.+44     	; 0x2d56 <vfprintf+0x188>
    2d2a:	28 01       	movw	r4, r16
    2d2c:	22 e0       	ldi	r18, 0x02	; 2
    2d2e:	42 0e       	add	r4, r18
    2d30:	51 1c       	adc	r5, r1
    2d32:	f8 01       	movw	r30, r16
    2d34:	a0 80       	ld	r10, Z
    2d36:	b1 80       	ldd	r11, Z+1	; 0x01
    2d38:	36 fe       	sbrs	r3, 6
    2d3a:	03 c0       	rjmp	.+6      	; 0x2d42 <vfprintf+0x174>
    2d3c:	69 2d       	mov	r22, r9
    2d3e:	70 e0       	ldi	r23, 0x00	; 0
    2d40:	02 c0       	rjmp	.+4      	; 0x2d46 <vfprintf+0x178>
    2d42:	6f ef       	ldi	r22, 0xFF	; 255
    2d44:	7f ef       	ldi	r23, 0xFF	; 255
    2d46:	c5 01       	movw	r24, r10
    2d48:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <strnlen_P>
    2d4c:	4c 01       	movw	r8, r24
    2d4e:	f3 2d       	mov	r31, r3
    2d50:	f0 68       	ori	r31, 0x80	; 128
    2d52:	3f 2e       	mov	r3, r31
    2d54:	82 01       	movw	r16, r4
    2d56:	33 fc       	sbrc	r3, 3
    2d58:	1b c0       	rjmp	.+54     	; 0x2d90 <vfprintf+0x1c2>
    2d5a:	82 2d       	mov	r24, r2
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	88 16       	cp	r8, r24
    2d60:	99 06       	cpc	r9, r25
    2d62:	b0 f4       	brcc	.+44     	; 0x2d90 <vfprintf+0x1c2>
    2d64:	b6 01       	movw	r22, r12
    2d66:	80 e2       	ldi	r24, 0x20	; 32
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <fputc>
    2d6e:	2a 94       	dec	r2
    2d70:	f4 cf       	rjmp	.-24     	; 0x2d5a <vfprintf+0x18c>
    2d72:	f5 01       	movw	r30, r10
    2d74:	37 fc       	sbrc	r3, 7
    2d76:	85 91       	lpm	r24, Z+
    2d78:	37 fe       	sbrs	r3, 7
    2d7a:	81 91       	ld	r24, Z+
    2d7c:	5f 01       	movw	r10, r30
    2d7e:	b6 01       	movw	r22, r12
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <fputc>
    2d86:	21 10       	cpse	r2, r1
    2d88:	2a 94       	dec	r2
    2d8a:	21 e0       	ldi	r18, 0x01	; 1
    2d8c:	82 1a       	sub	r8, r18
    2d8e:	91 08       	sbc	r9, r1
    2d90:	81 14       	cp	r8, r1
    2d92:	91 04       	cpc	r9, r1
    2d94:	71 f7       	brne	.-36     	; 0x2d72 <vfprintf+0x1a4>
    2d96:	e8 c0       	rjmp	.+464    	; 0x2f68 <vfprintf+0x39a>
    2d98:	84 36       	cpi	r24, 0x64	; 100
    2d9a:	11 f0       	breq	.+4      	; 0x2da0 <vfprintf+0x1d2>
    2d9c:	89 36       	cpi	r24, 0x69	; 105
    2d9e:	41 f5       	brne	.+80     	; 0x2df0 <vfprintf+0x222>
    2da0:	f8 01       	movw	r30, r16
    2da2:	37 fe       	sbrs	r3, 7
    2da4:	07 c0       	rjmp	.+14     	; 0x2db4 <vfprintf+0x1e6>
    2da6:	60 81       	ld	r22, Z
    2da8:	71 81       	ldd	r23, Z+1	; 0x01
    2daa:	82 81       	ldd	r24, Z+2	; 0x02
    2dac:	93 81       	ldd	r25, Z+3	; 0x03
    2dae:	0c 5f       	subi	r16, 0xFC	; 252
    2db0:	1f 4f       	sbci	r17, 0xFF	; 255
    2db2:	08 c0       	rjmp	.+16     	; 0x2dc4 <vfprintf+0x1f6>
    2db4:	60 81       	ld	r22, Z
    2db6:	71 81       	ldd	r23, Z+1	; 0x01
    2db8:	07 2e       	mov	r0, r23
    2dba:	00 0c       	add	r0, r0
    2dbc:	88 0b       	sbc	r24, r24
    2dbe:	99 0b       	sbc	r25, r25
    2dc0:	0e 5f       	subi	r16, 0xFE	; 254
    2dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc4:	f3 2d       	mov	r31, r3
    2dc6:	ff 76       	andi	r31, 0x6F	; 111
    2dc8:	3f 2e       	mov	r3, r31
    2dca:	97 ff       	sbrs	r25, 7
    2dcc:	09 c0       	rjmp	.+18     	; 0x2de0 <vfprintf+0x212>
    2dce:	90 95       	com	r25
    2dd0:	80 95       	com	r24
    2dd2:	70 95       	com	r23
    2dd4:	61 95       	neg	r22
    2dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd8:	8f 4f       	sbci	r24, 0xFF	; 255
    2dda:	9f 4f       	sbci	r25, 0xFF	; 255
    2ddc:	f0 68       	ori	r31, 0x80	; 128
    2dde:	3f 2e       	mov	r3, r31
    2de0:	2a e0       	ldi	r18, 0x0A	; 10
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	a3 01       	movw	r20, r6
    2de6:	0e 94 1a 18 	call	0x3034	; 0x3034 <__ultoa_invert>
    2dea:	88 2e       	mov	r8, r24
    2dec:	86 18       	sub	r8, r6
    2dee:	45 c0       	rjmp	.+138    	; 0x2e7a <vfprintf+0x2ac>
    2df0:	85 37       	cpi	r24, 0x75	; 117
    2df2:	31 f4       	brne	.+12     	; 0x2e00 <vfprintf+0x232>
    2df4:	23 2d       	mov	r18, r3
    2df6:	2f 7e       	andi	r18, 0xEF	; 239
    2df8:	b2 2e       	mov	r11, r18
    2dfa:	2a e0       	ldi	r18, 0x0A	; 10
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	25 c0       	rjmp	.+74     	; 0x2e4a <vfprintf+0x27c>
    2e00:	93 2d       	mov	r25, r3
    2e02:	99 7f       	andi	r25, 0xF9	; 249
    2e04:	b9 2e       	mov	r11, r25
    2e06:	8f 36       	cpi	r24, 0x6F	; 111
    2e08:	c1 f0       	breq	.+48     	; 0x2e3a <vfprintf+0x26c>
    2e0a:	18 f4       	brcc	.+6      	; 0x2e12 <vfprintf+0x244>
    2e0c:	88 35       	cpi	r24, 0x58	; 88
    2e0e:	79 f0       	breq	.+30     	; 0x2e2e <vfprintf+0x260>
    2e10:	b5 c0       	rjmp	.+362    	; 0x2f7c <vfprintf+0x3ae>
    2e12:	80 37       	cpi	r24, 0x70	; 112
    2e14:	19 f0       	breq	.+6      	; 0x2e1c <vfprintf+0x24e>
    2e16:	88 37       	cpi	r24, 0x78	; 120
    2e18:	21 f0       	breq	.+8      	; 0x2e22 <vfprintf+0x254>
    2e1a:	b0 c0       	rjmp	.+352    	; 0x2f7c <vfprintf+0x3ae>
    2e1c:	e9 2f       	mov	r30, r25
    2e1e:	e0 61       	ori	r30, 0x10	; 16
    2e20:	be 2e       	mov	r11, r30
    2e22:	b4 fe       	sbrs	r11, 4
    2e24:	0d c0       	rjmp	.+26     	; 0x2e40 <vfprintf+0x272>
    2e26:	fb 2d       	mov	r31, r11
    2e28:	f4 60       	ori	r31, 0x04	; 4
    2e2a:	bf 2e       	mov	r11, r31
    2e2c:	09 c0       	rjmp	.+18     	; 0x2e40 <vfprintf+0x272>
    2e2e:	34 fe       	sbrs	r3, 4
    2e30:	0a c0       	rjmp	.+20     	; 0x2e46 <vfprintf+0x278>
    2e32:	29 2f       	mov	r18, r25
    2e34:	26 60       	ori	r18, 0x06	; 6
    2e36:	b2 2e       	mov	r11, r18
    2e38:	06 c0       	rjmp	.+12     	; 0x2e46 <vfprintf+0x278>
    2e3a:	28 e0       	ldi	r18, 0x08	; 8
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	05 c0       	rjmp	.+10     	; 0x2e4a <vfprintf+0x27c>
    2e40:	20 e1       	ldi	r18, 0x10	; 16
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <vfprintf+0x27c>
    2e46:	20 e1       	ldi	r18, 0x10	; 16
    2e48:	32 e0       	ldi	r19, 0x02	; 2
    2e4a:	f8 01       	movw	r30, r16
    2e4c:	b7 fe       	sbrs	r11, 7
    2e4e:	07 c0       	rjmp	.+14     	; 0x2e5e <vfprintf+0x290>
    2e50:	60 81       	ld	r22, Z
    2e52:	71 81       	ldd	r23, Z+1	; 0x01
    2e54:	82 81       	ldd	r24, Z+2	; 0x02
    2e56:	93 81       	ldd	r25, Z+3	; 0x03
    2e58:	0c 5f       	subi	r16, 0xFC	; 252
    2e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5c:	06 c0       	rjmp	.+12     	; 0x2e6a <vfprintf+0x29c>
    2e5e:	60 81       	ld	r22, Z
    2e60:	71 81       	ldd	r23, Z+1	; 0x01
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	0e 5f       	subi	r16, 0xFE	; 254
    2e68:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6a:	a3 01       	movw	r20, r6
    2e6c:	0e 94 1a 18 	call	0x3034	; 0x3034 <__ultoa_invert>
    2e70:	88 2e       	mov	r8, r24
    2e72:	86 18       	sub	r8, r6
    2e74:	fb 2d       	mov	r31, r11
    2e76:	ff 77       	andi	r31, 0x7F	; 127
    2e78:	3f 2e       	mov	r3, r31
    2e7a:	36 fe       	sbrs	r3, 6
    2e7c:	0d c0       	rjmp	.+26     	; 0x2e98 <vfprintf+0x2ca>
    2e7e:	23 2d       	mov	r18, r3
    2e80:	2e 7f       	andi	r18, 0xFE	; 254
    2e82:	a2 2e       	mov	r10, r18
    2e84:	89 14       	cp	r8, r9
    2e86:	58 f4       	brcc	.+22     	; 0x2e9e <vfprintf+0x2d0>
    2e88:	34 fe       	sbrs	r3, 4
    2e8a:	0b c0       	rjmp	.+22     	; 0x2ea2 <vfprintf+0x2d4>
    2e8c:	32 fc       	sbrc	r3, 2
    2e8e:	09 c0       	rjmp	.+18     	; 0x2ea2 <vfprintf+0x2d4>
    2e90:	83 2d       	mov	r24, r3
    2e92:	8e 7e       	andi	r24, 0xEE	; 238
    2e94:	a8 2e       	mov	r10, r24
    2e96:	05 c0       	rjmp	.+10     	; 0x2ea2 <vfprintf+0x2d4>
    2e98:	b8 2c       	mov	r11, r8
    2e9a:	a3 2c       	mov	r10, r3
    2e9c:	03 c0       	rjmp	.+6      	; 0x2ea4 <vfprintf+0x2d6>
    2e9e:	b8 2c       	mov	r11, r8
    2ea0:	01 c0       	rjmp	.+2      	; 0x2ea4 <vfprintf+0x2d6>
    2ea2:	b9 2c       	mov	r11, r9
    2ea4:	a4 fe       	sbrs	r10, 4
    2ea6:	0f c0       	rjmp	.+30     	; 0x2ec6 <vfprintf+0x2f8>
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	e8 0d       	add	r30, r8
    2eac:	f1 1d       	adc	r31, r1
    2eae:	80 81       	ld	r24, Z
    2eb0:	80 33       	cpi	r24, 0x30	; 48
    2eb2:	21 f4       	brne	.+8      	; 0x2ebc <vfprintf+0x2ee>
    2eb4:	9a 2d       	mov	r25, r10
    2eb6:	99 7e       	andi	r25, 0xE9	; 233
    2eb8:	a9 2e       	mov	r10, r25
    2eba:	09 c0       	rjmp	.+18     	; 0x2ece <vfprintf+0x300>
    2ebc:	a2 fe       	sbrs	r10, 2
    2ebe:	06 c0       	rjmp	.+12     	; 0x2ecc <vfprintf+0x2fe>
    2ec0:	b3 94       	inc	r11
    2ec2:	b3 94       	inc	r11
    2ec4:	04 c0       	rjmp	.+8      	; 0x2ece <vfprintf+0x300>
    2ec6:	8a 2d       	mov	r24, r10
    2ec8:	86 78       	andi	r24, 0x86	; 134
    2eca:	09 f0       	breq	.+2      	; 0x2ece <vfprintf+0x300>
    2ecc:	b3 94       	inc	r11
    2ece:	a3 fc       	sbrc	r10, 3
    2ed0:	11 c0       	rjmp	.+34     	; 0x2ef4 <vfprintf+0x326>
    2ed2:	a0 fe       	sbrs	r10, 0
    2ed4:	06 c0       	rjmp	.+12     	; 0x2ee2 <vfprintf+0x314>
    2ed6:	b2 14       	cp	r11, r2
    2ed8:	88 f4       	brcc	.+34     	; 0x2efc <vfprintf+0x32e>
    2eda:	28 0c       	add	r2, r8
    2edc:	92 2c       	mov	r9, r2
    2ede:	9b 18       	sub	r9, r11
    2ee0:	0e c0       	rjmp	.+28     	; 0x2efe <vfprintf+0x330>
    2ee2:	b2 14       	cp	r11, r2
    2ee4:	60 f4       	brcc	.+24     	; 0x2efe <vfprintf+0x330>
    2ee6:	b6 01       	movw	r22, r12
    2ee8:	80 e2       	ldi	r24, 0x20	; 32
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <fputc>
    2ef0:	b3 94       	inc	r11
    2ef2:	f7 cf       	rjmp	.-18     	; 0x2ee2 <vfprintf+0x314>
    2ef4:	b2 14       	cp	r11, r2
    2ef6:	18 f4       	brcc	.+6      	; 0x2efe <vfprintf+0x330>
    2ef8:	2b 18       	sub	r2, r11
    2efa:	02 c0       	rjmp	.+4      	; 0x2f00 <vfprintf+0x332>
    2efc:	98 2c       	mov	r9, r8
    2efe:	21 2c       	mov	r2, r1
    2f00:	a4 fe       	sbrs	r10, 4
    2f02:	10 c0       	rjmp	.+32     	; 0x2f24 <vfprintf+0x356>
    2f04:	b6 01       	movw	r22, r12
    2f06:	80 e3       	ldi	r24, 0x30	; 48
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <fputc>
    2f0e:	a2 fe       	sbrs	r10, 2
    2f10:	17 c0       	rjmp	.+46     	; 0x2f40 <vfprintf+0x372>
    2f12:	a1 fc       	sbrc	r10, 1
    2f14:	03 c0       	rjmp	.+6      	; 0x2f1c <vfprintf+0x34e>
    2f16:	88 e7       	ldi	r24, 0x78	; 120
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	02 c0       	rjmp	.+4      	; 0x2f20 <vfprintf+0x352>
    2f1c:	88 e5       	ldi	r24, 0x58	; 88
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	b6 01       	movw	r22, r12
    2f22:	0c c0       	rjmp	.+24     	; 0x2f3c <vfprintf+0x36e>
    2f24:	8a 2d       	mov	r24, r10
    2f26:	86 78       	andi	r24, 0x86	; 134
    2f28:	59 f0       	breq	.+22     	; 0x2f40 <vfprintf+0x372>
    2f2a:	a1 fe       	sbrs	r10, 1
    2f2c:	02 c0       	rjmp	.+4      	; 0x2f32 <vfprintf+0x364>
    2f2e:	8b e2       	ldi	r24, 0x2B	; 43
    2f30:	01 c0       	rjmp	.+2      	; 0x2f34 <vfprintf+0x366>
    2f32:	80 e2       	ldi	r24, 0x20	; 32
    2f34:	a7 fc       	sbrc	r10, 7
    2f36:	8d e2       	ldi	r24, 0x2D	; 45
    2f38:	b6 01       	movw	r22, r12
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <fputc>
    2f40:	89 14       	cp	r8, r9
    2f42:	38 f4       	brcc	.+14     	; 0x2f52 <vfprintf+0x384>
    2f44:	b6 01       	movw	r22, r12
    2f46:	80 e3       	ldi	r24, 0x30	; 48
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <fputc>
    2f4e:	9a 94       	dec	r9
    2f50:	f7 cf       	rjmp	.-18     	; 0x2f40 <vfprintf+0x372>
    2f52:	8a 94       	dec	r8
    2f54:	f3 01       	movw	r30, r6
    2f56:	e8 0d       	add	r30, r8
    2f58:	f1 1d       	adc	r31, r1
    2f5a:	80 81       	ld	r24, Z
    2f5c:	b6 01       	movw	r22, r12
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <fputc>
    2f64:	81 10       	cpse	r8, r1
    2f66:	f5 cf       	rjmp	.-22     	; 0x2f52 <vfprintf+0x384>
    2f68:	22 20       	and	r2, r2
    2f6a:	09 f4       	brne	.+2      	; 0x2f6e <vfprintf+0x3a0>
    2f6c:	42 ce       	rjmp	.-892    	; 0x2bf2 <vfprintf+0x24>
    2f6e:	b6 01       	movw	r22, r12
    2f70:	80 e2       	ldi	r24, 0x20	; 32
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <fputc>
    2f78:	2a 94       	dec	r2
    2f7a:	f6 cf       	rjmp	.-20     	; 0x2f68 <vfprintf+0x39a>
    2f7c:	f6 01       	movw	r30, r12
    2f7e:	86 81       	ldd	r24, Z+6	; 0x06
    2f80:	97 81       	ldd	r25, Z+7	; 0x07
    2f82:	02 c0       	rjmp	.+4      	; 0x2f88 <vfprintf+0x3ba>
    2f84:	8f ef       	ldi	r24, 0xFF	; 255
    2f86:	9f ef       	ldi	r25, 0xFF	; 255
    2f88:	2b 96       	adiw	r28, 0x0b	; 11
    2f8a:	e2 e1       	ldi	r30, 0x12	; 18
    2f8c:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__epilogue_restores__>

00002f90 <strnlen_P>:
    2f90:	fc 01       	movw	r30, r24
    2f92:	05 90       	lpm	r0, Z+
    2f94:	61 50       	subi	r22, 0x01	; 1
    2f96:	70 40       	sbci	r23, 0x00	; 0
    2f98:	01 10       	cpse	r0, r1
    2f9a:	d8 f7       	brcc	.-10     	; 0x2f92 <strnlen_P+0x2>
    2f9c:	80 95       	com	r24
    2f9e:	90 95       	com	r25
    2fa0:	8e 0f       	add	r24, r30
    2fa2:	9f 1f       	adc	r25, r31
    2fa4:	08 95       	ret

00002fa6 <strnlen>:
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	61 50       	subi	r22, 0x01	; 1
    2faa:	70 40       	sbci	r23, 0x00	; 0
    2fac:	01 90       	ld	r0, Z+
    2fae:	01 10       	cpse	r0, r1
    2fb0:	d8 f7       	brcc	.-10     	; 0x2fa8 <strnlen+0x2>
    2fb2:	80 95       	com	r24
    2fb4:	90 95       	com	r25
    2fb6:	8e 0f       	add	r24, r30
    2fb8:	9f 1f       	adc	r25, r31
    2fba:	08 95       	ret

00002fbc <fputc>:
    2fbc:	0f 93       	push	r16
    2fbe:	1f 93       	push	r17
    2fc0:	cf 93       	push	r28
    2fc2:	df 93       	push	r29
    2fc4:	fb 01       	movw	r30, r22
    2fc6:	23 81       	ldd	r18, Z+3	; 0x03
    2fc8:	21 fd       	sbrc	r18, 1
    2fca:	03 c0       	rjmp	.+6      	; 0x2fd2 <fputc+0x16>
    2fcc:	8f ef       	ldi	r24, 0xFF	; 255
    2fce:	9f ef       	ldi	r25, 0xFF	; 255
    2fd0:	2c c0       	rjmp	.+88     	; 0x302a <fputc+0x6e>
    2fd2:	22 ff       	sbrs	r18, 2
    2fd4:	16 c0       	rjmp	.+44     	; 0x3002 <fputc+0x46>
    2fd6:	46 81       	ldd	r20, Z+6	; 0x06
    2fd8:	57 81       	ldd	r21, Z+7	; 0x07
    2fda:	24 81       	ldd	r18, Z+4	; 0x04
    2fdc:	35 81       	ldd	r19, Z+5	; 0x05
    2fde:	42 17       	cp	r20, r18
    2fe0:	53 07       	cpc	r21, r19
    2fe2:	44 f4       	brge	.+16     	; 0x2ff4 <fputc+0x38>
    2fe4:	a0 81       	ld	r26, Z
    2fe6:	b1 81       	ldd	r27, Z+1	; 0x01
    2fe8:	9d 01       	movw	r18, r26
    2fea:	2f 5f       	subi	r18, 0xFF	; 255
    2fec:	3f 4f       	sbci	r19, 0xFF	; 255
    2fee:	31 83       	std	Z+1, r19	; 0x01
    2ff0:	20 83       	st	Z, r18
    2ff2:	8c 93       	st	X, r24
    2ff4:	26 81       	ldd	r18, Z+6	; 0x06
    2ff6:	37 81       	ldd	r19, Z+7	; 0x07
    2ff8:	2f 5f       	subi	r18, 0xFF	; 255
    2ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    2ffc:	37 83       	std	Z+7, r19	; 0x07
    2ffe:	26 83       	std	Z+6, r18	; 0x06
    3000:	14 c0       	rjmp	.+40     	; 0x302a <fputc+0x6e>
    3002:	8b 01       	movw	r16, r22
    3004:	ec 01       	movw	r28, r24
    3006:	fb 01       	movw	r30, r22
    3008:	00 84       	ldd	r0, Z+8	; 0x08
    300a:	f1 85       	ldd	r31, Z+9	; 0x09
    300c:	e0 2d       	mov	r30, r0
    300e:	09 95       	icall
    3010:	89 2b       	or	r24, r25
    3012:	e1 f6       	brne	.-72     	; 0x2fcc <fputc+0x10>
    3014:	d8 01       	movw	r26, r16
    3016:	16 96       	adiw	r26, 0x06	; 6
    3018:	8d 91       	ld	r24, X+
    301a:	9c 91       	ld	r25, X
    301c:	17 97       	sbiw	r26, 0x07	; 7
    301e:	01 96       	adiw	r24, 0x01	; 1
    3020:	17 96       	adiw	r26, 0x07	; 7
    3022:	9c 93       	st	X, r25
    3024:	8e 93       	st	-X, r24
    3026:	16 97       	sbiw	r26, 0x06	; 6
    3028:	ce 01       	movw	r24, r28
    302a:	df 91       	pop	r29
    302c:	cf 91       	pop	r28
    302e:	1f 91       	pop	r17
    3030:	0f 91       	pop	r16
    3032:	08 95       	ret

00003034 <__ultoa_invert>:
    3034:	fa 01       	movw	r30, r20
    3036:	aa 27       	eor	r26, r26
    3038:	28 30       	cpi	r18, 0x08	; 8
    303a:	51 f1       	breq	.+84     	; 0x3090 <__ultoa_invert+0x5c>
    303c:	20 31       	cpi	r18, 0x10	; 16
    303e:	81 f1       	breq	.+96     	; 0x30a0 <__ultoa_invert+0x6c>
    3040:	e8 94       	clt
    3042:	6f 93       	push	r22
    3044:	6e 7f       	andi	r22, 0xFE	; 254
    3046:	6e 5f       	subi	r22, 0xFE	; 254
    3048:	7f 4f       	sbci	r23, 0xFF	; 255
    304a:	8f 4f       	sbci	r24, 0xFF	; 255
    304c:	9f 4f       	sbci	r25, 0xFF	; 255
    304e:	af 4f       	sbci	r26, 0xFF	; 255
    3050:	b1 e0       	ldi	r27, 0x01	; 1
    3052:	3e d0       	rcall	.+124    	; 0x30d0 <__ultoa_invert+0x9c>
    3054:	b4 e0       	ldi	r27, 0x04	; 4
    3056:	3c d0       	rcall	.+120    	; 0x30d0 <__ultoa_invert+0x9c>
    3058:	67 0f       	add	r22, r23
    305a:	78 1f       	adc	r23, r24
    305c:	89 1f       	adc	r24, r25
    305e:	9a 1f       	adc	r25, r26
    3060:	a1 1d       	adc	r26, r1
    3062:	68 0f       	add	r22, r24
    3064:	79 1f       	adc	r23, r25
    3066:	8a 1f       	adc	r24, r26
    3068:	91 1d       	adc	r25, r1
    306a:	a1 1d       	adc	r26, r1
    306c:	6a 0f       	add	r22, r26
    306e:	71 1d       	adc	r23, r1
    3070:	81 1d       	adc	r24, r1
    3072:	91 1d       	adc	r25, r1
    3074:	a1 1d       	adc	r26, r1
    3076:	20 d0       	rcall	.+64     	; 0x30b8 <__ultoa_invert+0x84>
    3078:	09 f4       	brne	.+2      	; 0x307c <__ultoa_invert+0x48>
    307a:	68 94       	set
    307c:	3f 91       	pop	r19
    307e:	2a e0       	ldi	r18, 0x0A	; 10
    3080:	26 9f       	mul	r18, r22
    3082:	11 24       	eor	r1, r1
    3084:	30 19       	sub	r19, r0
    3086:	30 5d       	subi	r19, 0xD0	; 208
    3088:	31 93       	st	Z+, r19
    308a:	de f6       	brtc	.-74     	; 0x3042 <__ultoa_invert+0xe>
    308c:	cf 01       	movw	r24, r30
    308e:	08 95       	ret
    3090:	46 2f       	mov	r20, r22
    3092:	47 70       	andi	r20, 0x07	; 7
    3094:	40 5d       	subi	r20, 0xD0	; 208
    3096:	41 93       	st	Z+, r20
    3098:	b3 e0       	ldi	r27, 0x03	; 3
    309a:	0f d0       	rcall	.+30     	; 0x30ba <__ultoa_invert+0x86>
    309c:	c9 f7       	brne	.-14     	; 0x3090 <__ultoa_invert+0x5c>
    309e:	f6 cf       	rjmp	.-20     	; 0x308c <__ultoa_invert+0x58>
    30a0:	46 2f       	mov	r20, r22
    30a2:	4f 70       	andi	r20, 0x0F	; 15
    30a4:	40 5d       	subi	r20, 0xD0	; 208
    30a6:	4a 33       	cpi	r20, 0x3A	; 58
    30a8:	18 f0       	brcs	.+6      	; 0x30b0 <__ultoa_invert+0x7c>
    30aa:	49 5d       	subi	r20, 0xD9	; 217
    30ac:	31 fd       	sbrc	r19, 1
    30ae:	40 52       	subi	r20, 0x20	; 32
    30b0:	41 93       	st	Z+, r20
    30b2:	02 d0       	rcall	.+4      	; 0x30b8 <__ultoa_invert+0x84>
    30b4:	a9 f7       	brne	.-22     	; 0x30a0 <__ultoa_invert+0x6c>
    30b6:	ea cf       	rjmp	.-44     	; 0x308c <__ultoa_invert+0x58>
    30b8:	b4 e0       	ldi	r27, 0x04	; 4
    30ba:	a6 95       	lsr	r26
    30bc:	97 95       	ror	r25
    30be:	87 95       	ror	r24
    30c0:	77 95       	ror	r23
    30c2:	67 95       	ror	r22
    30c4:	ba 95       	dec	r27
    30c6:	c9 f7       	brne	.-14     	; 0x30ba <__ultoa_invert+0x86>
    30c8:	00 97       	sbiw	r24, 0x00	; 0
    30ca:	61 05       	cpc	r22, r1
    30cc:	71 05       	cpc	r23, r1
    30ce:	08 95       	ret
    30d0:	9b 01       	movw	r18, r22
    30d2:	ac 01       	movw	r20, r24
    30d4:	0a 2e       	mov	r0, r26
    30d6:	06 94       	lsr	r0
    30d8:	57 95       	ror	r21
    30da:	47 95       	ror	r20
    30dc:	37 95       	ror	r19
    30de:	27 95       	ror	r18
    30e0:	ba 95       	dec	r27
    30e2:	c9 f7       	brne	.-14     	; 0x30d6 <__ultoa_invert+0xa2>
    30e4:	62 0f       	add	r22, r18
    30e6:	73 1f       	adc	r23, r19
    30e8:	84 1f       	adc	r24, r20
    30ea:	95 1f       	adc	r25, r21
    30ec:	a0 1d       	adc	r26, r0
    30ee:	08 95       	ret

000030f0 <__prologue_saves__>:
    30f0:	2f 92       	push	r2
    30f2:	3f 92       	push	r3
    30f4:	4f 92       	push	r4
    30f6:	5f 92       	push	r5
    30f8:	6f 92       	push	r6
    30fa:	7f 92       	push	r7
    30fc:	8f 92       	push	r8
    30fe:	9f 92       	push	r9
    3100:	af 92       	push	r10
    3102:	bf 92       	push	r11
    3104:	cf 92       	push	r12
    3106:	df 92       	push	r13
    3108:	ef 92       	push	r14
    310a:	ff 92       	push	r15
    310c:	0f 93       	push	r16
    310e:	1f 93       	push	r17
    3110:	cf 93       	push	r28
    3112:	df 93       	push	r29
    3114:	cd b7       	in	r28, 0x3d	; 61
    3116:	de b7       	in	r29, 0x3e	; 62
    3118:	ca 1b       	sub	r28, r26
    311a:	db 0b       	sbc	r29, r27
    311c:	0f b6       	in	r0, 0x3f	; 63
    311e:	f8 94       	cli
    3120:	de bf       	out	0x3e, r29	; 62
    3122:	0f be       	out	0x3f, r0	; 63
    3124:	cd bf       	out	0x3d, r28	; 61
    3126:	09 94       	ijmp

00003128 <__epilogue_restores__>:
    3128:	2a 88       	ldd	r2, Y+18	; 0x12
    312a:	39 88       	ldd	r3, Y+17	; 0x11
    312c:	48 88       	ldd	r4, Y+16	; 0x10
    312e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3130:	6e 84       	ldd	r6, Y+14	; 0x0e
    3132:	7d 84       	ldd	r7, Y+13	; 0x0d
    3134:	8c 84       	ldd	r8, Y+12	; 0x0c
    3136:	9b 84       	ldd	r9, Y+11	; 0x0b
    3138:	aa 84       	ldd	r10, Y+10	; 0x0a
    313a:	b9 84       	ldd	r11, Y+9	; 0x09
    313c:	c8 84       	ldd	r12, Y+8	; 0x08
    313e:	df 80       	ldd	r13, Y+7	; 0x07
    3140:	ee 80       	ldd	r14, Y+6	; 0x06
    3142:	fd 80       	ldd	r15, Y+5	; 0x05
    3144:	0c 81       	ldd	r16, Y+4	; 0x04
    3146:	1b 81       	ldd	r17, Y+3	; 0x03
    3148:	aa 81       	ldd	r26, Y+2	; 0x02
    314a:	b9 81       	ldd	r27, Y+1	; 0x01
    314c:	ce 0f       	add	r28, r30
    314e:	d1 1d       	adc	r29, r1
    3150:	0f b6       	in	r0, 0x3f	; 63
    3152:	f8 94       	cli
    3154:	de bf       	out	0x3e, r29	; 62
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	cd bf       	out	0x3d, r28	; 61
    315a:	ed 01       	movw	r28, r26
    315c:	08 95       	ret

0000315e <_exit>:
    315e:	f8 94       	cli

00003160 <__stop_program>:
    3160:	ff cf       	rjmp	.-2      	; 0x3160 <__stop_program>
