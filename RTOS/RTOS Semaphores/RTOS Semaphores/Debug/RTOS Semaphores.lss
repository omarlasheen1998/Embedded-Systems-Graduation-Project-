
RTOS Semaphores.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002344  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002344  000023d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003ab  00800074  00800074  000023ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000241c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d8  00000000  00000000  00002458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000553d  00000000  00000000  00002930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000116e  00000000  00000000  00007e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000035cd  00000000  00000000  00008fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010a8  00000000  00000000  0000c5a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b27  00000000  00000000  0000d650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000635c  00000000  00000000  0000f177  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000518  00000000  00000000  000154d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__vector_1>
       8:	0c 94 96 03 	jmp	0x72c	; 0x72c <__vector_2>
       c:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__vector_13>
      38:	0c 94 0b 04 	jmp	0x816	; 0x816 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	24 e0       	ldi	r18, 0x04	; 4
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 31       	cpi	r26, 0x1F	; 31
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <main>
      8a:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pinMode>:

}

void Interrupts(void){
	
	sei();
      92:	88 30       	cpi	r24, 0x08	; 8
      94:	08 f0       	brcs	.+2      	; 0x98 <pinMode+0x6>
      96:	5e c0       	rjmp	.+188    	; 0x154 <pinMode+0xc2>
      98:	69 32       	cpi	r22, 0x29	; 41
      9a:	d1 f4       	brne	.+52     	; 0xd0 <pinMode+0x3e>
      9c:	4a b3       	in	r20, 0x1a	; 26
      9e:	9d ec       	ldi	r25, 0xCD	; 205
      a0:	89 9f       	mul	r24, r25
      a2:	91 2d       	mov	r25, r1
      a4:	11 24       	eor	r1, r1
      a6:	96 95       	lsr	r25
      a8:	96 95       	lsr	r25
      aa:	96 95       	lsr	r25
      ac:	99 0f       	add	r25, r25
      ae:	29 2f       	mov	r18, r25
      b0:	22 0f       	add	r18, r18
      b2:	22 0f       	add	r18, r18
      b4:	92 0f       	add	r25, r18
      b6:	89 1b       	sub	r24, r25
      b8:	21 e0       	ldi	r18, 0x01	; 1
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	b9 01       	movw	r22, r18
      be:	02 c0       	rjmp	.+4      	; 0xc4 <pinMode+0x32>
      c0:	66 0f       	add	r22, r22
      c2:	77 1f       	adc	r23, r23
      c4:	8a 95       	dec	r24
      c6:	e2 f7       	brpl	.-8      	; 0xc0 <pinMode+0x2e>
      c8:	cb 01       	movw	r24, r22
      ca:	84 2b       	or	r24, r20
      cc:	8a bb       	out	0x1a, r24	; 26
      ce:	08 95       	ret
      d0:	68 32       	cpi	r22, 0x28	; 40
      d2:	d9 f4       	brne	.+54     	; 0x10a <pinMode+0x78>
      d4:	4a b3       	in	r20, 0x1a	; 26
      d6:	9d ec       	ldi	r25, 0xCD	; 205
      d8:	89 9f       	mul	r24, r25
      da:	91 2d       	mov	r25, r1
      dc:	11 24       	eor	r1, r1
      de:	96 95       	lsr	r25
      e0:	96 95       	lsr	r25
      e2:	96 95       	lsr	r25
      e4:	99 0f       	add	r25, r25
      e6:	29 2f       	mov	r18, r25
      e8:	22 0f       	add	r18, r18
      ea:	22 0f       	add	r18, r18
      ec:	92 0f       	add	r25, r18
      ee:	89 1b       	sub	r24, r25
      f0:	21 e0       	ldi	r18, 0x01	; 1
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	b9 01       	movw	r22, r18
      f6:	02 c0       	rjmp	.+4      	; 0xfc <pinMode+0x6a>
      f8:	66 0f       	add	r22, r22
      fa:	77 1f       	adc	r23, r23
      fc:	8a 95       	dec	r24
      fe:	e2 f7       	brpl	.-8      	; 0xf8 <pinMode+0x66>
     100:	cb 01       	movw	r24, r22
     102:	80 95       	com	r24
     104:	84 23       	and	r24, r20
     106:	8a bb       	out	0x1a, r24	; 26
     108:	08 95       	ret
     10a:	6a 32       	cpi	r22, 0x2A	; 42
     10c:	09 f0       	breq	.+2      	; 0x110 <pinMode+0x7e>
     10e:	49 c1       	rjmp	.+658    	; 0x3a2 <pinMode+0x310>
     110:	4a b3       	in	r20, 0x1a	; 26
     112:	9d ec       	ldi	r25, 0xCD	; 205
     114:	89 9f       	mul	r24, r25
     116:	91 2d       	mov	r25, r1
     118:	11 24       	eor	r1, r1
     11a:	96 95       	lsr	r25
     11c:	96 95       	lsr	r25
     11e:	96 95       	lsr	r25
     120:	99 0f       	add	r25, r25
     122:	29 2f       	mov	r18, r25
     124:	22 0f       	add	r18, r18
     126:	22 0f       	add	r18, r18
     128:	92 0f       	add	r25, r18
     12a:	89 1b       	sub	r24, r25
     12c:	21 e0       	ldi	r18, 0x01	; 1
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	b9 01       	movw	r22, r18
     132:	02 c0       	rjmp	.+4      	; 0x138 <pinMode+0xa6>
     134:	66 0f       	add	r22, r22
     136:	77 1f       	adc	r23, r23
     138:	8a 95       	dec	r24
     13a:	e2 f7       	brpl	.-8      	; 0x134 <pinMode+0xa2>
     13c:	cb 01       	movw	r24, r22
     13e:	96 2f       	mov	r25, r22
     140:	90 95       	com	r25
     142:	94 23       	and	r25, r20
     144:	9a bb       	out	0x1a, r25	; 26
     146:	90 b7       	in	r25, 0x30	; 48
     148:	9b 7f       	andi	r25, 0xFB	; 251
     14a:	90 bf       	out	0x30, r25	; 48
     14c:	9b b3       	in	r25, 0x1b	; 27
     14e:	89 2b       	or	r24, r25
     150:	8b bb       	out	0x1b, r24	; 27
     152:	08 95       	ret
     154:	96 ef       	ldi	r25, 0xF6	; 246
     156:	98 0f       	add	r25, r24
     158:	98 30       	cpi	r25, 0x08	; 8
     15a:	08 f0       	brcs	.+2      	; 0x15e <pinMode+0xcc>
     15c:	5e c0       	rjmp	.+188    	; 0x21a <pinMode+0x188>
     15e:	69 32       	cpi	r22, 0x29	; 41
     160:	d1 f4       	brne	.+52     	; 0x196 <pinMode+0x104>
     162:	47 b3       	in	r20, 0x17	; 23
     164:	9d ec       	ldi	r25, 0xCD	; 205
     166:	89 9f       	mul	r24, r25
     168:	91 2d       	mov	r25, r1
     16a:	11 24       	eor	r1, r1
     16c:	96 95       	lsr	r25
     16e:	96 95       	lsr	r25
     170:	96 95       	lsr	r25
     172:	99 0f       	add	r25, r25
     174:	29 2f       	mov	r18, r25
     176:	22 0f       	add	r18, r18
     178:	22 0f       	add	r18, r18
     17a:	92 0f       	add	r25, r18
     17c:	89 1b       	sub	r24, r25
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	b9 01       	movw	r22, r18
     184:	02 c0       	rjmp	.+4      	; 0x18a <pinMode+0xf8>
     186:	66 0f       	add	r22, r22
     188:	77 1f       	adc	r23, r23
     18a:	8a 95       	dec	r24
     18c:	e2 f7       	brpl	.-8      	; 0x186 <pinMode+0xf4>
     18e:	cb 01       	movw	r24, r22
     190:	84 2b       	or	r24, r20
     192:	87 bb       	out	0x17, r24	; 23
     194:	08 95       	ret
     196:	68 32       	cpi	r22, 0x28	; 40
     198:	d9 f4       	brne	.+54     	; 0x1d0 <pinMode+0x13e>
     19a:	47 b3       	in	r20, 0x17	; 23
     19c:	9d ec       	ldi	r25, 0xCD	; 205
     19e:	89 9f       	mul	r24, r25
     1a0:	91 2d       	mov	r25, r1
     1a2:	11 24       	eor	r1, r1
     1a4:	96 95       	lsr	r25
     1a6:	96 95       	lsr	r25
     1a8:	96 95       	lsr	r25
     1aa:	99 0f       	add	r25, r25
     1ac:	29 2f       	mov	r18, r25
     1ae:	22 0f       	add	r18, r18
     1b0:	22 0f       	add	r18, r18
     1b2:	92 0f       	add	r25, r18
     1b4:	89 1b       	sub	r24, r25
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	b9 01       	movw	r22, r18
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <pinMode+0x130>
     1be:	66 0f       	add	r22, r22
     1c0:	77 1f       	adc	r23, r23
     1c2:	8a 95       	dec	r24
     1c4:	e2 f7       	brpl	.-8      	; 0x1be <pinMode+0x12c>
     1c6:	cb 01       	movw	r24, r22
     1c8:	80 95       	com	r24
     1ca:	84 23       	and	r24, r20
     1cc:	87 bb       	out	0x17, r24	; 23
     1ce:	08 95       	ret
     1d0:	6a 32       	cpi	r22, 0x2A	; 42
     1d2:	09 f0       	breq	.+2      	; 0x1d6 <pinMode+0x144>
     1d4:	e6 c0       	rjmp	.+460    	; 0x3a2 <pinMode+0x310>
     1d6:	47 b3       	in	r20, 0x17	; 23
     1d8:	9d ec       	ldi	r25, 0xCD	; 205
     1da:	89 9f       	mul	r24, r25
     1dc:	91 2d       	mov	r25, r1
     1de:	11 24       	eor	r1, r1
     1e0:	96 95       	lsr	r25
     1e2:	96 95       	lsr	r25
     1e4:	96 95       	lsr	r25
     1e6:	99 0f       	add	r25, r25
     1e8:	29 2f       	mov	r18, r25
     1ea:	22 0f       	add	r18, r18
     1ec:	22 0f       	add	r18, r18
     1ee:	92 0f       	add	r25, r18
     1f0:	89 1b       	sub	r24, r25
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	b9 01       	movw	r22, r18
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <pinMode+0x16c>
     1fa:	66 0f       	add	r22, r22
     1fc:	77 1f       	adc	r23, r23
     1fe:	8a 95       	dec	r24
     200:	e2 f7       	brpl	.-8      	; 0x1fa <pinMode+0x168>
     202:	cb 01       	movw	r24, r22
     204:	96 2f       	mov	r25, r22
     206:	90 95       	com	r25
     208:	94 23       	and	r25, r20
     20a:	97 bb       	out	0x17, r25	; 23
     20c:	90 b7       	in	r25, 0x30	; 48
     20e:	9b 7f       	andi	r25, 0xFB	; 251
     210:	90 bf       	out	0x30, r25	; 48
     212:	98 b3       	in	r25, 0x18	; 24
     214:	89 2b       	or	r24, r25
     216:	88 bb       	out	0x18, r24	; 24
     218:	08 95       	ret
     21a:	9c ee       	ldi	r25, 0xEC	; 236
     21c:	98 0f       	add	r25, r24
     21e:	98 30       	cpi	r25, 0x08	; 8
     220:	08 f0       	brcs	.+2      	; 0x224 <pinMode+0x192>
     222:	5e c0       	rjmp	.+188    	; 0x2e0 <pinMode+0x24e>
     224:	69 32       	cpi	r22, 0x29	; 41
     226:	d1 f4       	brne	.+52     	; 0x25c <pinMode+0x1ca>
     228:	44 b3       	in	r20, 0x14	; 20
     22a:	9d ec       	ldi	r25, 0xCD	; 205
     22c:	89 9f       	mul	r24, r25
     22e:	91 2d       	mov	r25, r1
     230:	11 24       	eor	r1, r1
     232:	96 95       	lsr	r25
     234:	96 95       	lsr	r25
     236:	96 95       	lsr	r25
     238:	99 0f       	add	r25, r25
     23a:	29 2f       	mov	r18, r25
     23c:	22 0f       	add	r18, r18
     23e:	22 0f       	add	r18, r18
     240:	92 0f       	add	r25, r18
     242:	89 1b       	sub	r24, r25
     244:	21 e0       	ldi	r18, 0x01	; 1
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	b9 01       	movw	r22, r18
     24a:	02 c0       	rjmp	.+4      	; 0x250 <pinMode+0x1be>
     24c:	66 0f       	add	r22, r22
     24e:	77 1f       	adc	r23, r23
     250:	8a 95       	dec	r24
     252:	e2 f7       	brpl	.-8      	; 0x24c <pinMode+0x1ba>
     254:	cb 01       	movw	r24, r22
     256:	84 2b       	or	r24, r20
     258:	84 bb       	out	0x14, r24	; 20
     25a:	08 95       	ret
     25c:	68 32       	cpi	r22, 0x28	; 40
     25e:	d9 f4       	brne	.+54     	; 0x296 <pinMode+0x204>
     260:	44 b3       	in	r20, 0x14	; 20
     262:	9d ec       	ldi	r25, 0xCD	; 205
     264:	89 9f       	mul	r24, r25
     266:	91 2d       	mov	r25, r1
     268:	11 24       	eor	r1, r1
     26a:	96 95       	lsr	r25
     26c:	96 95       	lsr	r25
     26e:	96 95       	lsr	r25
     270:	99 0f       	add	r25, r25
     272:	29 2f       	mov	r18, r25
     274:	22 0f       	add	r18, r18
     276:	22 0f       	add	r18, r18
     278:	92 0f       	add	r25, r18
     27a:	89 1b       	sub	r24, r25
     27c:	21 e0       	ldi	r18, 0x01	; 1
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	b9 01       	movw	r22, r18
     282:	02 c0       	rjmp	.+4      	; 0x288 <pinMode+0x1f6>
     284:	66 0f       	add	r22, r22
     286:	77 1f       	adc	r23, r23
     288:	8a 95       	dec	r24
     28a:	e2 f7       	brpl	.-8      	; 0x284 <pinMode+0x1f2>
     28c:	cb 01       	movw	r24, r22
     28e:	80 95       	com	r24
     290:	84 23       	and	r24, r20
     292:	84 bb       	out	0x14, r24	; 20
     294:	08 95       	ret
     296:	6a 32       	cpi	r22, 0x2A	; 42
     298:	09 f0       	breq	.+2      	; 0x29c <pinMode+0x20a>
     29a:	83 c0       	rjmp	.+262    	; 0x3a2 <pinMode+0x310>
     29c:	44 b3       	in	r20, 0x14	; 20
     29e:	9d ec       	ldi	r25, 0xCD	; 205
     2a0:	89 9f       	mul	r24, r25
     2a2:	91 2d       	mov	r25, r1
     2a4:	11 24       	eor	r1, r1
     2a6:	96 95       	lsr	r25
     2a8:	96 95       	lsr	r25
     2aa:	96 95       	lsr	r25
     2ac:	99 0f       	add	r25, r25
     2ae:	29 2f       	mov	r18, r25
     2b0:	22 0f       	add	r18, r18
     2b2:	22 0f       	add	r18, r18
     2b4:	92 0f       	add	r25, r18
     2b6:	89 1b       	sub	r24, r25
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	b9 01       	movw	r22, r18
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <pinMode+0x232>
     2c0:	66 0f       	add	r22, r22
     2c2:	77 1f       	adc	r23, r23
     2c4:	8a 95       	dec	r24
     2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <pinMode+0x22e>
     2c8:	cb 01       	movw	r24, r22
     2ca:	96 2f       	mov	r25, r22
     2cc:	90 95       	com	r25
     2ce:	94 23       	and	r25, r20
     2d0:	94 bb       	out	0x14, r25	; 20
     2d2:	90 b7       	in	r25, 0x30	; 48
     2d4:	9b 7f       	andi	r25, 0xFB	; 251
     2d6:	90 bf       	out	0x30, r25	; 48
     2d8:	95 b3       	in	r25, 0x15	; 21
     2da:	89 2b       	or	r24, r25
     2dc:	85 bb       	out	0x15, r24	; 21
     2de:	08 95       	ret
     2e0:	92 ee       	ldi	r25, 0xE2	; 226
     2e2:	98 0f       	add	r25, r24
     2e4:	98 30       	cpi	r25, 0x08	; 8
     2e6:	08 f0       	brcs	.+2      	; 0x2ea <pinMode+0x258>
     2e8:	5c c0       	rjmp	.+184    	; 0x3a2 <pinMode+0x310>
     2ea:	69 32       	cpi	r22, 0x29	; 41
     2ec:	d1 f4       	brne	.+52     	; 0x322 <pinMode+0x290>
     2ee:	41 b3       	in	r20, 0x11	; 17
     2f0:	9d ec       	ldi	r25, 0xCD	; 205
     2f2:	89 9f       	mul	r24, r25
     2f4:	91 2d       	mov	r25, r1
     2f6:	11 24       	eor	r1, r1
     2f8:	96 95       	lsr	r25
     2fa:	96 95       	lsr	r25
     2fc:	96 95       	lsr	r25
     2fe:	99 0f       	add	r25, r25
     300:	29 2f       	mov	r18, r25
     302:	22 0f       	add	r18, r18
     304:	22 0f       	add	r18, r18
     306:	92 0f       	add	r25, r18
     308:	89 1b       	sub	r24, r25
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	b9 01       	movw	r22, r18
     310:	02 c0       	rjmp	.+4      	; 0x316 <pinMode+0x284>
     312:	66 0f       	add	r22, r22
     314:	77 1f       	adc	r23, r23
     316:	8a 95       	dec	r24
     318:	e2 f7       	brpl	.-8      	; 0x312 <pinMode+0x280>
     31a:	cb 01       	movw	r24, r22
     31c:	84 2b       	or	r24, r20
     31e:	81 bb       	out	0x11, r24	; 17
     320:	08 95       	ret
     322:	68 32       	cpi	r22, 0x28	; 40
     324:	d9 f4       	brne	.+54     	; 0x35c <pinMode+0x2ca>
     326:	41 b3       	in	r20, 0x11	; 17
     328:	9d ec       	ldi	r25, 0xCD	; 205
     32a:	89 9f       	mul	r24, r25
     32c:	91 2d       	mov	r25, r1
     32e:	11 24       	eor	r1, r1
     330:	96 95       	lsr	r25
     332:	96 95       	lsr	r25
     334:	96 95       	lsr	r25
     336:	99 0f       	add	r25, r25
     338:	29 2f       	mov	r18, r25
     33a:	22 0f       	add	r18, r18
     33c:	22 0f       	add	r18, r18
     33e:	92 0f       	add	r25, r18
     340:	89 1b       	sub	r24, r25
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	b9 01       	movw	r22, r18
     348:	02 c0       	rjmp	.+4      	; 0x34e <pinMode+0x2bc>
     34a:	66 0f       	add	r22, r22
     34c:	77 1f       	adc	r23, r23
     34e:	8a 95       	dec	r24
     350:	e2 f7       	brpl	.-8      	; 0x34a <pinMode+0x2b8>
     352:	cb 01       	movw	r24, r22
     354:	80 95       	com	r24
     356:	84 23       	and	r24, r20
     358:	81 bb       	out	0x11, r24	; 17
     35a:	08 95       	ret
     35c:	6a 32       	cpi	r22, 0x2A	; 42
     35e:	09 f5       	brne	.+66     	; 0x3a2 <pinMode+0x310>
     360:	41 b3       	in	r20, 0x11	; 17
     362:	9d ec       	ldi	r25, 0xCD	; 205
     364:	89 9f       	mul	r24, r25
     366:	91 2d       	mov	r25, r1
     368:	11 24       	eor	r1, r1
     36a:	96 95       	lsr	r25
     36c:	96 95       	lsr	r25
     36e:	96 95       	lsr	r25
     370:	99 0f       	add	r25, r25
     372:	29 2f       	mov	r18, r25
     374:	22 0f       	add	r18, r18
     376:	22 0f       	add	r18, r18
     378:	92 0f       	add	r25, r18
     37a:	89 1b       	sub	r24, r25
     37c:	21 e0       	ldi	r18, 0x01	; 1
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	b9 01       	movw	r22, r18
     382:	02 c0       	rjmp	.+4      	; 0x388 <pinMode+0x2f6>
     384:	66 0f       	add	r22, r22
     386:	77 1f       	adc	r23, r23
     388:	8a 95       	dec	r24
     38a:	e2 f7       	brpl	.-8      	; 0x384 <pinMode+0x2f2>
     38c:	cb 01       	movw	r24, r22
     38e:	96 2f       	mov	r25, r22
     390:	90 95       	com	r25
     392:	94 23       	and	r25, r20
     394:	91 bb       	out	0x11, r25	; 17
     396:	90 b7       	in	r25, 0x30	; 48
     398:	9b 7f       	andi	r25, 0xFB	; 251
     39a:	90 bf       	out	0x30, r25	; 48
     39c:	92 b3       	in	r25, 0x12	; 18
     39e:	89 2b       	or	r24, r25
     3a0:	82 bb       	out	0x12, r24	; 18
     3a2:	08 95       	ret

000003a4 <digitalWrite>:
     3a4:	88 30       	cpi	r24, 0x08	; 8
     3a6:	08 f0       	brcs	.+2      	; 0x3aa <digitalWrite+0x6>
     3a8:	46 c0       	rjmp	.+140    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     3aa:	9d ec       	ldi	r25, 0xCD	; 205
     3ac:	69 9f       	mul	r22, r25
     3ae:	91 2d       	mov	r25, r1
     3b0:	11 24       	eor	r1, r1
     3b2:	96 95       	lsr	r25
     3b4:	96 95       	lsr	r25
     3b6:	96 95       	lsr	r25
     3b8:	99 0f       	add	r25, r25
     3ba:	29 2f       	mov	r18, r25
     3bc:	22 0f       	add	r18, r18
     3be:	22 0f       	add	r18, r18
     3c0:	92 0f       	add	r25, r18
     3c2:	69 1b       	sub	r22, r25
     3c4:	61 30       	cpi	r22, 0x01	; 1
     3c6:	d1 f4       	brne	.+52     	; 0x3fc <digitalWrite+0x58>
     3c8:	4b b3       	in	r20, 0x1b	; 27
     3ca:	9d ec       	ldi	r25, 0xCD	; 205
     3cc:	89 9f       	mul	r24, r25
     3ce:	91 2d       	mov	r25, r1
     3d0:	11 24       	eor	r1, r1
     3d2:	96 95       	lsr	r25
     3d4:	96 95       	lsr	r25
     3d6:	96 95       	lsr	r25
     3d8:	99 0f       	add	r25, r25
     3da:	29 2f       	mov	r18, r25
     3dc:	22 0f       	add	r18, r18
     3de:	22 0f       	add	r18, r18
     3e0:	92 0f       	add	r25, r18
     3e2:	89 1b       	sub	r24, r25
     3e4:	21 e0       	ldi	r18, 0x01	; 1
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	b9 01       	movw	r22, r18
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <digitalWrite+0x4c>
     3ec:	66 0f       	add	r22, r22
     3ee:	77 1f       	adc	r23, r23
     3f0:	8a 95       	dec	r24
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <digitalWrite+0x48>
     3f4:	cb 01       	movw	r24, r22
     3f6:	84 2b       	or	r24, r20
     3f8:	8b bb       	out	0x1b, r24	; 27
     3fa:	08 95       	ret
     3fc:	61 11       	cpse	r22, r1
     3fe:	fb c0       	rjmp	.+502    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     400:	4b b3       	in	r20, 0x1b	; 27
     402:	9d ec       	ldi	r25, 0xCD	; 205
     404:	89 9f       	mul	r24, r25
     406:	91 2d       	mov	r25, r1
     408:	11 24       	eor	r1, r1
     40a:	96 95       	lsr	r25
     40c:	96 95       	lsr	r25
     40e:	96 95       	lsr	r25
     410:	99 0f       	add	r25, r25
     412:	29 2f       	mov	r18, r25
     414:	22 0f       	add	r18, r18
     416:	22 0f       	add	r18, r18
     418:	92 0f       	add	r25, r18
     41a:	89 1b       	sub	r24, r25
     41c:	21 e0       	ldi	r18, 0x01	; 1
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	b9 01       	movw	r22, r18
     422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     424:	66 0f       	add	r22, r22
     426:	77 1f       	adc	r23, r23
     428:	8a 95       	dec	r24
     42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     42c:	cb 01       	movw	r24, r22
     42e:	80 95       	com	r24
     430:	84 23       	and	r24, r20
     432:	8b bb       	out	0x1b, r24	; 27
     434:	08 95       	ret
     436:	96 ef       	ldi	r25, 0xF6	; 246
     438:	98 0f       	add	r25, r24
     43a:	98 30       	cpi	r25, 0x08	; 8
     43c:	08 f0       	brcs	.+2      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     43e:	46 c0       	rjmp	.+140    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
     440:	9d ec       	ldi	r25, 0xCD	; 205
     442:	69 9f       	mul	r22, r25
     444:	91 2d       	mov	r25, r1
     446:	11 24       	eor	r1, r1
     448:	96 95       	lsr	r25
     44a:	96 95       	lsr	r25
     44c:	96 95       	lsr	r25
     44e:	99 0f       	add	r25, r25
     450:	29 2f       	mov	r18, r25
     452:	22 0f       	add	r18, r18
     454:	22 0f       	add	r18, r18
     456:	92 0f       	add	r25, r18
     458:	69 1b       	sub	r22, r25
     45a:	61 30       	cpi	r22, 0x01	; 1
     45c:	d1 f4       	brne	.+52     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     45e:	48 b3       	in	r20, 0x18	; 24
     460:	9d ec       	ldi	r25, 0xCD	; 205
     462:	89 9f       	mul	r24, r25
     464:	91 2d       	mov	r25, r1
     466:	11 24       	eor	r1, r1
     468:	96 95       	lsr	r25
     46a:	96 95       	lsr	r25
     46c:	96 95       	lsr	r25
     46e:	99 0f       	add	r25, r25
     470:	29 2f       	mov	r18, r25
     472:	22 0f       	add	r18, r18
     474:	22 0f       	add	r18, r18
     476:	92 0f       	add	r25, r18
     478:	89 1b       	sub	r24, r25
     47a:	21 e0       	ldi	r18, 0x01	; 1
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	b9 01       	movw	r22, r18
     480:	02 c0       	rjmp	.+4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     482:	66 0f       	add	r22, r22
     484:	77 1f       	adc	r23, r23
     486:	8a 95       	dec	r24
     488:	e2 f7       	brpl	.-8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     48a:	cb 01       	movw	r24, r22
     48c:	84 2b       	or	r24, r20
     48e:	88 bb       	out	0x18, r24	; 24
     490:	08 95       	ret
     492:	61 11       	cpse	r22, r1
     494:	b0 c0       	rjmp	.+352    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     496:	48 b3       	in	r20, 0x18	; 24
     498:	9d ec       	ldi	r25, 0xCD	; 205
     49a:	89 9f       	mul	r24, r25
     49c:	91 2d       	mov	r25, r1
     49e:	11 24       	eor	r1, r1
     4a0:	96 95       	lsr	r25
     4a2:	96 95       	lsr	r25
     4a4:	96 95       	lsr	r25
     4a6:	99 0f       	add	r25, r25
     4a8:	29 2f       	mov	r18, r25
     4aa:	22 0f       	add	r18, r18
     4ac:	22 0f       	add	r18, r18
     4ae:	92 0f       	add	r25, r18
     4b0:	89 1b       	sub	r24, r25
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	b9 01       	movw	r22, r18
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     4ba:	66 0f       	add	r22, r22
     4bc:	77 1f       	adc	r23, r23
     4be:	8a 95       	dec	r24
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
     4c2:	cb 01       	movw	r24, r22
     4c4:	80 95       	com	r24
     4c6:	84 23       	and	r24, r20
     4c8:	88 bb       	out	0x18, r24	; 24
     4ca:	08 95       	ret
     4cc:	9c ee       	ldi	r25, 0xEC	; 236
     4ce:	98 0f       	add	r25, r24
     4d0:	98 30       	cpi	r25, 0x08	; 8
     4d2:	08 f0       	brcs	.+2      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
     4d4:	46 c0       	rjmp	.+140    	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
     4d6:	9d ec       	ldi	r25, 0xCD	; 205
     4d8:	69 9f       	mul	r22, r25
     4da:	91 2d       	mov	r25, r1
     4dc:	11 24       	eor	r1, r1
     4de:	96 95       	lsr	r25
     4e0:	96 95       	lsr	r25
     4e2:	96 95       	lsr	r25
     4e4:	99 0f       	add	r25, r25
     4e6:	29 2f       	mov	r18, r25
     4e8:	22 0f       	add	r18, r18
     4ea:	22 0f       	add	r18, r18
     4ec:	92 0f       	add	r25, r18
     4ee:	69 1b       	sub	r22, r25
     4f0:	61 30       	cpi	r22, 0x01	; 1
     4f2:	d1 f4       	brne	.+52     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
     4f4:	45 b3       	in	r20, 0x15	; 21
     4f6:	9d ec       	ldi	r25, 0xCD	; 205
     4f8:	89 9f       	mul	r24, r25
     4fa:	91 2d       	mov	r25, r1
     4fc:	11 24       	eor	r1, r1
     4fe:	96 95       	lsr	r25
     500:	96 95       	lsr	r25
     502:	96 95       	lsr	r25
     504:	99 0f       	add	r25, r25
     506:	29 2f       	mov	r18, r25
     508:	22 0f       	add	r18, r18
     50a:	22 0f       	add	r18, r18
     50c:	92 0f       	add	r25, r18
     50e:	89 1b       	sub	r24, r25
     510:	21 e0       	ldi	r18, 0x01	; 1
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	b9 01       	movw	r22, r18
     516:	02 c0       	rjmp	.+4      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
     518:	66 0f       	add	r22, r22
     51a:	77 1f       	adc	r23, r23
     51c:	8a 95       	dec	r24
     51e:	e2 f7       	brpl	.-8      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
     520:	cb 01       	movw	r24, r22
     522:	84 2b       	or	r24, r20
     524:	85 bb       	out	0x15, r24	; 21
     526:	08 95       	ret
     528:	61 11       	cpse	r22, r1
     52a:	65 c0       	rjmp	.+202    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     52c:	45 b3       	in	r20, 0x15	; 21
     52e:	9d ec       	ldi	r25, 0xCD	; 205
     530:	89 9f       	mul	r24, r25
     532:	91 2d       	mov	r25, r1
     534:	11 24       	eor	r1, r1
     536:	96 95       	lsr	r25
     538:	96 95       	lsr	r25
     53a:	96 95       	lsr	r25
     53c:	99 0f       	add	r25, r25
     53e:	29 2f       	mov	r18, r25
     540:	22 0f       	add	r18, r18
     542:	22 0f       	add	r18, r18
     544:	92 0f       	add	r25, r18
     546:	89 1b       	sub	r24, r25
     548:	21 e0       	ldi	r18, 0x01	; 1
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	b9 01       	movw	r22, r18
     54e:	02 c0       	rjmp	.+4      	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
     550:	66 0f       	add	r22, r22
     552:	77 1f       	adc	r23, r23
     554:	8a 95       	dec	r24
     556:	e2 f7       	brpl	.-8      	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
     558:	cb 01       	movw	r24, r22
     55a:	80 95       	com	r24
     55c:	84 23       	and	r24, r20
     55e:	85 bb       	out	0x15, r24	; 21
     560:	08 95       	ret
     562:	92 ee       	ldi	r25, 0xE2	; 226
     564:	98 0f       	add	r25, r24
     566:	98 30       	cpi	r25, 0x08	; 8
     568:	08 f0       	brcs	.+2      	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
     56a:	45 c0       	rjmp	.+138    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     56c:	9d ec       	ldi	r25, 0xCD	; 205
     56e:	69 9f       	mul	r22, r25
     570:	91 2d       	mov	r25, r1
     572:	11 24       	eor	r1, r1
     574:	96 95       	lsr	r25
     576:	96 95       	lsr	r25
     578:	96 95       	lsr	r25
     57a:	99 0f       	add	r25, r25
     57c:	29 2f       	mov	r18, r25
     57e:	22 0f       	add	r18, r18
     580:	22 0f       	add	r18, r18
     582:	92 0f       	add	r25, r18
     584:	69 1b       	sub	r22, r25
     586:	61 30       	cpi	r22, 0x01	; 1
     588:	d1 f4       	brne	.+52     	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
     58a:	42 b3       	in	r20, 0x12	; 18
     58c:	9d ec       	ldi	r25, 0xCD	; 205
     58e:	89 9f       	mul	r24, r25
     590:	91 2d       	mov	r25, r1
     592:	11 24       	eor	r1, r1
     594:	96 95       	lsr	r25
     596:	96 95       	lsr	r25
     598:	96 95       	lsr	r25
     59a:	99 0f       	add	r25, r25
     59c:	29 2f       	mov	r18, r25
     59e:	22 0f       	add	r18, r18
     5a0:	22 0f       	add	r18, r18
     5a2:	92 0f       	add	r25, r18
     5a4:	89 1b       	sub	r24, r25
     5a6:	21 e0       	ldi	r18, 0x01	; 1
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	b9 01       	movw	r22, r18
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <__EEPROM_REGION_LENGTH__+0x1b2>
     5ae:	66 0f       	add	r22, r22
     5b0:	77 1f       	adc	r23, r23
     5b2:	8a 95       	dec	r24
     5b4:	e2 f7       	brpl	.-8      	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
     5b6:	cb 01       	movw	r24, r22
     5b8:	84 2b       	or	r24, r20
     5ba:	82 bb       	out	0x12, r24	; 18
     5bc:	08 95       	ret
     5be:	61 11       	cpse	r22, r1
     5c0:	1a c0       	rjmp	.+52     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     5c2:	42 b3       	in	r20, 0x12	; 18
     5c4:	9d ec       	ldi	r25, 0xCD	; 205
     5c6:	89 9f       	mul	r24, r25
     5c8:	91 2d       	mov	r25, r1
     5ca:	11 24       	eor	r1, r1
     5cc:	96 95       	lsr	r25
     5ce:	96 95       	lsr	r25
     5d0:	96 95       	lsr	r25
     5d2:	99 0f       	add	r25, r25
     5d4:	29 2f       	mov	r18, r25
     5d6:	22 0f       	add	r18, r18
     5d8:	22 0f       	add	r18, r18
     5da:	92 0f       	add	r25, r18
     5dc:	89 1b       	sub	r24, r25
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	b9 01       	movw	r22, r18
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <__EEPROM_REGION_LENGTH__+0x1ea>
     5e6:	66 0f       	add	r22, r22
     5e8:	77 1f       	adc	r23, r23
     5ea:	8a 95       	dec	r24
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
     5ee:	cb 01       	movw	r24, r22
     5f0:	80 95       	com	r24
     5f2:	84 23       	and	r24, r20
     5f4:	82 bb       	out	0x12, r24	; 18
     5f6:	08 95       	ret

000005f8 <digitalRead>:
     5f8:	88 30       	cpi	r24, 0x08	; 8
     5fa:	c8 f4       	brcc	.+50     	; 0x62e <digitalRead+0x36>
     5fc:	29 b3       	in	r18, 0x19	; 25
     5fe:	9d ec       	ldi	r25, 0xCD	; 205
     600:	89 9f       	mul	r24, r25
     602:	91 2d       	mov	r25, r1
     604:	11 24       	eor	r1, r1
     606:	96 95       	lsr	r25
     608:	96 95       	lsr	r25
     60a:	96 95       	lsr	r25
     60c:	99 0f       	add	r25, r25
     60e:	39 2f       	mov	r19, r25
     610:	33 0f       	add	r19, r19
     612:	33 0f       	add	r19, r19
     614:	93 0f       	add	r25, r19
     616:	89 1b       	sub	r24, r25
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	02 c0       	rjmp	.+4      	; 0x620 <digitalRead+0x28>
     61c:	35 95       	asr	r19
     61e:	27 95       	ror	r18
     620:	8a 95       	dec	r24
     622:	e2 f7       	brpl	.-8      	; 0x61c <digitalRead+0x24>
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	20 fd       	sbrc	r18, 0
     628:	59 c0       	rjmp	.+178    	; 0x6dc <digitalRead+0xe4>
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	08 95       	ret
     62e:	96 ef       	ldi	r25, 0xF6	; 246
     630:	98 0f       	add	r25, r24
     632:	98 30       	cpi	r25, 0x08	; 8
     634:	c8 f4       	brcc	.+50     	; 0x668 <digitalRead+0x70>
     636:	26 b3       	in	r18, 0x16	; 22
     638:	9d ec       	ldi	r25, 0xCD	; 205
     63a:	89 9f       	mul	r24, r25
     63c:	91 2d       	mov	r25, r1
     63e:	11 24       	eor	r1, r1
     640:	96 95       	lsr	r25
     642:	96 95       	lsr	r25
     644:	96 95       	lsr	r25
     646:	99 0f       	add	r25, r25
     648:	39 2f       	mov	r19, r25
     64a:	33 0f       	add	r19, r19
     64c:	33 0f       	add	r19, r19
     64e:	93 0f       	add	r25, r19
     650:	89 1b       	sub	r24, r25
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	02 c0       	rjmp	.+4      	; 0x65a <digitalRead+0x62>
     656:	35 95       	asr	r19
     658:	27 95       	ror	r18
     65a:	8a 95       	dec	r24
     65c:	e2 f7       	brpl	.-8      	; 0x656 <digitalRead+0x5e>
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	20 fd       	sbrc	r18, 0
     662:	3c c0       	rjmp	.+120    	; 0x6dc <digitalRead+0xe4>
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	08 95       	ret
     668:	9c ee       	ldi	r25, 0xEC	; 236
     66a:	98 0f       	add	r25, r24
     66c:	98 30       	cpi	r25, 0x08	; 8
     66e:	c8 f4       	brcc	.+50     	; 0x6a2 <digitalRead+0xaa>
     670:	23 b3       	in	r18, 0x13	; 19
     672:	9d ec       	ldi	r25, 0xCD	; 205
     674:	89 9f       	mul	r24, r25
     676:	91 2d       	mov	r25, r1
     678:	11 24       	eor	r1, r1
     67a:	96 95       	lsr	r25
     67c:	96 95       	lsr	r25
     67e:	96 95       	lsr	r25
     680:	99 0f       	add	r25, r25
     682:	39 2f       	mov	r19, r25
     684:	33 0f       	add	r19, r19
     686:	33 0f       	add	r19, r19
     688:	93 0f       	add	r25, r19
     68a:	89 1b       	sub	r24, r25
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	02 c0       	rjmp	.+4      	; 0x694 <digitalRead+0x9c>
     690:	35 95       	asr	r19
     692:	27 95       	ror	r18
     694:	8a 95       	dec	r24
     696:	e2 f7       	brpl	.-8      	; 0x690 <digitalRead+0x98>
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	20 fd       	sbrc	r18, 0
     69c:	1f c0       	rjmp	.+62     	; 0x6dc <digitalRead+0xe4>
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	08 95       	ret
     6a2:	92 ee       	ldi	r25, 0xE2	; 226
     6a4:	98 0f       	add	r25, r24
     6a6:	98 30       	cpi	r25, 0x08	; 8
     6a8:	c8 f4       	brcc	.+50     	; 0x6dc <digitalRead+0xe4>
     6aa:	20 b3       	in	r18, 0x10	; 16
     6ac:	9d ec       	ldi	r25, 0xCD	; 205
     6ae:	89 9f       	mul	r24, r25
     6b0:	91 2d       	mov	r25, r1
     6b2:	11 24       	eor	r1, r1
     6b4:	96 95       	lsr	r25
     6b6:	96 95       	lsr	r25
     6b8:	96 95       	lsr	r25
     6ba:	99 0f       	add	r25, r25
     6bc:	39 2f       	mov	r19, r25
     6be:	33 0f       	add	r19, r19
     6c0:	33 0f       	add	r19, r19
     6c2:	93 0f       	add	r25, r19
     6c4:	89 1b       	sub	r24, r25
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <digitalRead+0xd6>
     6ca:	35 95       	asr	r19
     6cc:	27 95       	ror	r18
     6ce:	8a 95       	dec	r24
     6d0:	e2 f7       	brpl	.-8      	; 0x6ca <digitalRead+0xd2>
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	20 fd       	sbrc	r18, 0
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <digitalRead+0xe4>
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	08 95       	ret
     6dc:	08 95       	ret

000006de <__vector_1>:
}


ISR(INT0_vect)
{
     6de:	1f 92       	push	r1
     6e0:	0f 92       	push	r0
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	0f 92       	push	r0
     6e6:	11 24       	eor	r1, r1
     6e8:	2f 93       	push	r18
     6ea:	3f 93       	push	r19
     6ec:	4f 93       	push	r20
     6ee:	5f 93       	push	r21
     6f0:	6f 93       	push	r22
     6f2:	7f 93       	push	r23
     6f4:	8f 93       	push	r24
     6f6:	9f 93       	push	r25
     6f8:	af 93       	push	r26
     6fa:	bf 93       	push	r27
     6fc:	ef 93       	push	r30
     6fe:	ff 93       	push	r31
	ISR0();
     700:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <ISR0>
     704:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <ISR0+0x1>
     708:	09 95       	icall
}
     70a:	ff 91       	pop	r31
     70c:	ef 91       	pop	r30
     70e:	bf 91       	pop	r27
     710:	af 91       	pop	r26
     712:	9f 91       	pop	r25
     714:	8f 91       	pop	r24
     716:	7f 91       	pop	r23
     718:	6f 91       	pop	r22
     71a:	5f 91       	pop	r21
     71c:	4f 91       	pop	r20
     71e:	3f 91       	pop	r19
     720:	2f 91       	pop	r18
     722:	0f 90       	pop	r0
     724:	0f be       	out	0x3f, r0	; 63
     726:	0f 90       	pop	r0
     728:	1f 90       	pop	r1
     72a:	18 95       	reti

0000072c <__vector_2>:

ISR(INT1_vect)
{
     72c:	1f 92       	push	r1
     72e:	0f 92       	push	r0
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	0f 92       	push	r0
     734:	11 24       	eor	r1, r1
     736:	2f 93       	push	r18
     738:	3f 93       	push	r19
     73a:	4f 93       	push	r20
     73c:	5f 93       	push	r21
     73e:	6f 93       	push	r22
     740:	7f 93       	push	r23
     742:	8f 93       	push	r24
     744:	9f 93       	push	r25
     746:	af 93       	push	r26
     748:	bf 93       	push	r27
     74a:	ef 93       	push	r30
     74c:	ff 93       	push	r31
	ISR1();
     74e:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <ISR1>
     752:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <ISR1+0x1>
     756:	09 95       	icall
}
     758:	ff 91       	pop	r31
     75a:	ef 91       	pop	r30
     75c:	bf 91       	pop	r27
     75e:	af 91       	pop	r26
     760:	9f 91       	pop	r25
     762:	8f 91       	pop	r24
     764:	7f 91       	pop	r23
     766:	6f 91       	pop	r22
     768:	5f 91       	pop	r21
     76a:	4f 91       	pop	r20
     76c:	3f 91       	pop	r19
     76e:	2f 91       	pop	r18
     770:	0f 90       	pop	r0
     772:	0f be       	out	0x3f, r0	; 63
     774:	0f 90       	pop	r0
     776:	1f 90       	pop	r1
     778:	18 95       	reti

0000077a <__vector_3>:

ISR(INT2_vect)
{
     77a:	1f 92       	push	r1
     77c:	0f 92       	push	r0
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1
     784:	2f 93       	push	r18
     786:	3f 93       	push	r19
     788:	4f 93       	push	r20
     78a:	5f 93       	push	r21
     78c:	6f 93       	push	r22
     78e:	7f 93       	push	r23
     790:	8f 93       	push	r24
     792:	9f 93       	push	r25
     794:	af 93       	push	r26
     796:	bf 93       	push	r27
     798:	ef 93       	push	r30
     79a:	ff 93       	push	r31
	ISR2();
     79c:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
     7a0:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
     7a4:	09 95       	icall
}
     7a6:	ff 91       	pop	r31
     7a8:	ef 91       	pop	r30
     7aa:	bf 91       	pop	r27
     7ac:	af 91       	pop	r26
     7ae:	9f 91       	pop	r25
     7b0:	8f 91       	pop	r24
     7b2:	7f 91       	pop	r23
     7b4:	6f 91       	pop	r22
     7b6:	5f 91       	pop	r21
     7b8:	4f 91       	pop	r20
     7ba:	3f 91       	pop	r19
     7bc:	2f 91       	pop	r18
     7be:	0f 90       	pop	r0
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	0f 90       	pop	r0
     7c4:	1f 90       	pop	r1
     7c6:	18 95       	reti

000007c8 <__vector_13>:
	x[i] = '\0';                           // ensure string is null terminated
	
	
}

ISR(USART_RXC_vect){
     7c8:	1f 92       	push	r1
     7ca:	0f 92       	push	r0
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	0f 92       	push	r0
     7d0:	11 24       	eor	r1, r1
     7d2:	2f 93       	push	r18
     7d4:	3f 93       	push	r19
     7d6:	4f 93       	push	r20
     7d8:	5f 93       	push	r21
     7da:	6f 93       	push	r22
     7dc:	7f 93       	push	r23
     7de:	8f 93       	push	r24
     7e0:	9f 93       	push	r25
     7e2:	af 93       	push	r26
     7e4:	bf 93       	push	r27
     7e6:	ef 93       	push	r30
     7e8:	ff 93       	push	r31
RXC_ISR();		
     7ea:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <RXC_ISR>
     7ee:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <RXC_ISR+0x1>
     7f2:	09 95       	icall
}
     7f4:	ff 91       	pop	r31
     7f6:	ef 91       	pop	r30
     7f8:	bf 91       	pop	r27
     7fa:	af 91       	pop	r26
     7fc:	9f 91       	pop	r25
     7fe:	8f 91       	pop	r24
     800:	7f 91       	pop	r23
     802:	6f 91       	pop	r22
     804:	5f 91       	pop	r21
     806:	4f 91       	pop	r20
     808:	3f 91       	pop	r19
     80a:	2f 91       	pop	r18
     80c:	0f 90       	pop	r0
     80e:	0f be       	out	0x3f, r0	; 63
     810:	0f 90       	pop	r0
     812:	1f 90       	pop	r1
     814:	18 95       	reti

00000816 <__vector_14>:
ISR(USART_UDRE_vect){
     816:	1f 92       	push	r1
     818:	0f 92       	push	r0
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	0f 92       	push	r0
     81e:	11 24       	eor	r1, r1
     820:	2f 93       	push	r18
     822:	3f 93       	push	r19
     824:	4f 93       	push	r20
     826:	5f 93       	push	r21
     828:	6f 93       	push	r22
     82a:	7f 93       	push	r23
     82c:	8f 93       	push	r24
     82e:	9f 93       	push	r25
     830:	af 93       	push	r26
     832:	bf 93       	push	r27
     834:	ef 93       	push	r30
     836:	ff 93       	push	r31
TXC_ISR();	
     838:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <TXC_ISR>
     83c:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <TXC_ISR+0x1>
     840:	09 95       	icall
     842:	ff 91       	pop	r31
     844:	ef 91       	pop	r30
     846:	bf 91       	pop	r27
     848:	af 91       	pop	r26
     84a:	9f 91       	pop	r25
     84c:	8f 91       	pop	r24
     84e:	7f 91       	pop	r23
     850:	6f 91       	pop	r22
     852:	5f 91       	pop	r21
     854:	4f 91       	pop	r20
     856:	3f 91       	pop	r19
     858:	2f 91       	pop	r18
     85a:	0f 90       	pop	r0
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	0f 90       	pop	r0
     860:	1f 90       	pop	r1
     862:	18 95       	reti

00000864 <read_button>:

void read_button(void* ptr)
{
	while(1)
	{	
		if(digitalRead(A0) == 0 && flag1==0)
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <digitalRead>
     86a:	81 11       	cpse	r24, r1
     86c:	13 c0       	rjmp	.+38     	; 0x894 <read_button+0x30>
     86e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <flag1>
     872:	81 11       	cpse	r24, r1
     874:	0f c0       	rjmp	.+30     	; 0x894 <read_button+0x30>
		{
			flag1 = 1;
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <flag1>
			xSemaphoreGive(led);
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <led>
     88a:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <led+0x1>
     88e:	0e 94 cf 08 	call	0x119e	; 0x119e <xQueueGenericSend>
     892:	e8 cf       	rjmp	.-48     	; 0x864 <read_button>
		}
		else if(digitalRead(A0) == 1 && flag1==1)
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <digitalRead>
     89a:	88 23       	and	r24, r24
     89c:	19 f3       	breq	.-58     	; 0x864 <read_button>
     89e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <flag1>
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	f9 f6       	brne	.-66     	; 0x864 <read_button>
		{
				flag1 = 0;
     8a6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <flag1>
     8aa:	dc cf       	rjmp	.-72     	; 0x864 <read_button>

000008ac <led_toggle>:
	}
}

void led_toggle(void* ptr)
{
	led = xSemaphoreCreateBinary();
     8ac:	43 e0       	ldi	r20, 0x03	; 3
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	0e 94 8e 08 	call	0x111c	; 0x111c <xQueueGenericCreate>
     8b6:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <led+0x1>
     8ba:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <led>
	while(1)
	{
		xSemaphoreTake(led, portMAX_DELAY);
     8be:	6f ef       	ldi	r22, 0xFF	; 255
     8c0:	7f ef       	ldi	r23, 0xFF	; 255
     8c2:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <led>
     8c6:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <led+0x1>
     8ca:	0e 94 61 09 	call	0x12c2	; 0x12c2 <xQueueSemaphoreTake>
		
		if(flag == 0)
     8ce:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <flag>
     8d2:	81 11       	cpse	r24, r1
     8d4:	08 c0       	rjmp	.+16     	; 0x8e6 <led_toggle+0x3a>
		{
			digitalWrite(A1, HIGH);
     8d6:	63 e3       	ldi	r22, 0x33	; 51
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
			flag = 1;
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <flag>
     8e4:	ec cf       	rjmp	.-40     	; 0x8be <led_toggle+0x12>
		}
		else if(flag == 1)
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	51 f7       	brne	.-44     	; 0x8be <led_toggle+0x12>
		{
			digitalWrite(A1, LOW);
     8ea:	62 e3       	ldi	r22, 0x32	; 50
     8ec:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
			flag = 0;
     8f0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <flag>
     8f4:	e4 cf       	rjmp	.-56     	; 0x8be <led_toggle+0x12>

000008f6 <main>:

void led_toggle(void* ptr);
TaskHandle_t led_handle = NULL;

int main(void)
{
     8f6:	ef 92       	push	r14
     8f8:	ff 92       	push	r15
     8fa:	0f 93       	push	r16
	pinMode(A0, INPUT_PULLUP);
     8fc:	6a e2       	ldi	r22, 0x2A	; 42
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	0e 94 49 00 	call	0x92	; 0x92 <pinMode>
	pinMode(A1, OUTPUT);
     904:	69 e2       	ldi	r22, 0x29	; 41
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	0e 94 49 00 	call	0x92	; 0x92 <pinMode>
	
	xTaskCreate(read_button, "omar", 100, NULL, 1, read_handle);
     90c:	e0 90 80 00 	lds	r14, 0x0080	; 0x800080 <read_handle>
     910:	f0 90 81 00 	lds	r15, 0x0081	; 0x800081 <read_handle+0x1>
     914:	01 e0       	ldi	r16, 0x01	; 1
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	44 e6       	ldi	r20, 0x64	; 100
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	63 e6       	ldi	r22, 0x63	; 99
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	82 e3       	ldi	r24, 0x32	; 50
     924:	94 e0       	ldi	r25, 0x04	; 4
     926:	0e 94 30 0c 	call	0x1860	; 0x1860 <xTaskCreate>
	xTaskCreate(led_toggle, "ahmed", 100, NULL, 2, led_handle);
     92a:	e0 90 7e 00 	lds	r14, 0x007E	; 0x80007e <led_handle>
     92e:	f0 90 7f 00 	lds	r15, 0x007F	; 0x80007f <led_handle+0x1>
     932:	02 e0       	ldi	r16, 0x02	; 2
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	44 e6       	ldi	r20, 0x64	; 100
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	68 e6       	ldi	r22, 0x68	; 104
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	86 e5       	ldi	r24, 0x56	; 86
     942:	94 e0       	ldi	r25, 0x04	; 4
     944:	0e 94 30 0c 	call	0x1860	; 0x1860 <xTaskCreate>
	
	vTaskStartScheduler();
     948:	0e 94 84 0c 	call	0x1908	; 0x1908 <vTaskStartScheduler>
}
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	08 95       	ret

00000958 <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     958:	ab e8       	ldi	r26, 0x8B	; 139
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	ef e8       	ldi	r30, 0x8F	; 143
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	11 96       	adiw	r26, 0x01	; 1
     962:	fc 93       	st	X, r31
     964:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
     966:	13 96       	adiw	r26, 0x03	; 3
     968:	1c 92       	st	X, r1
     96a:	1e 92       	st	-X, r1
     96c:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     96e:	a7 e8       	ldi	r26, 0x87	; 135
     970:	b0 e0       	ldi	r27, 0x00	; 0
     972:	8f e1       	ldi	r24, 0x1F	; 31
     974:	93 e0       	ldi	r25, 0x03	; 3
     976:	13 96       	adiw	r26, 0x03	; 3
     978:	9c 93       	st	X, r25
     97a:	8e 93       	st	-X, r24
     97c:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
     97e:	11 96       	adiw	r26, 0x01	; 1
     980:	1c 92       	st	X, r1
     982:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     984:	93 83       	std	Z+3, r25	; 0x03
     986:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     988:	b1 83       	std	Z+1, r27	; 0x01
     98a:	a0 83       	st	Z, r26
     98c:	08 95       	ret

0000098e <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     98e:	ef 92       	push	r14
     990:	ff 92       	push	r15
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     99c:	0e 94 b0 0c 	call	0x1960	; 0x1960 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     9a0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <xHeapHasBeenInitialised.2121>
     9a4:	81 11       	cpse	r24, r1
     9a6:	05 c0       	rjmp	.+10     	; 0x9b2 <pvPortMalloc+0x24>
        {
            prvHeapInit();
     9a8:	0e 94 ac 04 	call	0x958	; 0x958 <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <xHeapHasBeenInitialised.2121>
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     9b2:	20 97       	sbiw	r28, 0x00	; 0
     9b4:	71 f0       	breq	.+28     	; 0x9d2 <pvPortMalloc+0x44>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
     9b6:	ce 01       	movw	r24, r28
     9b8:	04 96       	adiw	r24, 0x04	; 4
            xHeapHasBeenInitialised = pdTRUE;
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     9ba:	c8 17       	cp	r28, r24
     9bc:	d9 07       	cpc	r29, r25
     9be:	38 f4       	brcc	.+14     	; 0x9ce <pvPortMalloc+0x40>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
        {
            xWantedSize += heapSTRUCT_SIZE;

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
     9c0:	25 96       	adiw	r28, 0x05	; 5
     9c2:	8c 17       	cp	r24, r28
     9c4:	9d 07       	cpc	r25, r29
     9c6:	28 f0       	brcs	.+10     	; 0x9d2 <pvPortMalloc+0x44>
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
            }
            else
            {
                xWantedSize = 0;
     9c8:	c0 e0       	ldi	r28, 0x00	; 0
     9ca:	d0 e0       	ldi	r29, 0x00	; 0
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <pvPortMalloc+0x44>
            }
        }
        else
        {
            xWantedSize = 0;
     9ce:	c0 e0       	ldi	r28, 0x00	; 0
     9d0:	d0 e0       	ldi	r29, 0x00	; 0
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     9d2:	20 97       	sbiw	r28, 0x00	; 0
     9d4:	09 f4       	brne	.+2      	; 0x9d8 <pvPortMalloc+0x4a>
     9d6:	5e c0       	rjmp	.+188    	; 0xa94 <pvPortMalloc+0x106>
     9d8:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     9dc:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     9e0:	2c 17       	cp	r18, r28
     9e2:	3d 07       	cpc	r19, r29
     9e4:	08 f4       	brcc	.+2      	; 0x9e8 <pvPortMalloc+0x5a>
     9e6:	59 c0       	rjmp	.+178    	; 0xa9a <pvPortMalloc+0x10c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;
     9e8:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <xStart>
     9ec:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <xStart+0x1>

        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
     9f0:	ab e8       	ldi	r26, 0x8B	; 139
     9f2:	b0 e0       	ldi	r27, 0x00	; 0
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <pvPortMalloc+0x6c>
            {
                pxPreviousBlock = pxBlock;
     9f6:	df 01       	movw	r26, r30
                pxBlock = pxBlock->pxNextFreeBlock;
     9f8:	fc 01       	movw	r30, r24
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     9fa:	82 81       	ldd	r24, Z+2	; 0x02
     9fc:	93 81       	ldd	r25, Z+3	; 0x03
     9fe:	8c 17       	cp	r24, r28
     a00:	9d 07       	cpc	r25, r29
     a02:	20 f4       	brcc	.+8      	; 0xa0c <pvPortMalloc+0x7e>
     a04:	80 81       	ld	r24, Z
     a06:	91 81       	ldd	r25, Z+1	; 0x01
     a08:	00 97       	sbiw	r24, 0x00	; 0
     a0a:	a9 f7       	brne	.-22     	; 0x9f6 <pvPortMalloc+0x68>
                pxPreviousBlock = pxBlock;
                pxBlock = pxBlock->pxNextFreeBlock;
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	e7 38       	cpi	r30, 0x87	; 135
     a10:	f8 07       	cpc	r31, r24
     a12:	09 f4       	brne	.+2      	; 0xa16 <pvPortMalloc+0x88>
     a14:	45 c0       	rjmp	.+138    	; 0xaa0 <pvPortMalloc+0x112>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     a16:	0d 91       	ld	r16, X+
     a18:	1c 91       	ld	r17, X
     a1a:	11 97       	sbiw	r26, 0x01	; 1
     a1c:	0c 5f       	subi	r16, 0xFC	; 252
     a1e:	1f 4f       	sbci	r17, 0xFF	; 255

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     a20:	80 81       	ld	r24, Z
     a22:	91 81       	ldd	r25, Z+1	; 0x01
     a24:	8d 93       	st	X+, r24
     a26:	9c 93       	st	X, r25

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     a28:	82 81       	ldd	r24, Z+2	; 0x02
     a2a:	93 81       	ldd	r25, Z+3	; 0x03
     a2c:	8c 1b       	sub	r24, r28
     a2e:	9d 0b       	sbc	r25, r29
     a30:	89 30       	cpi	r24, 0x09	; 9
     a32:	91 05       	cpc	r25, r1
     a34:	30 f1       	brcs	.+76     	; 0xa82 <pvPortMalloc+0xf4>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     a36:	bf 01       	movw	r22, r30
     a38:	6c 0f       	add	r22, r28
     a3a:	7d 1f       	adc	r23, r29

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     a3c:	db 01       	movw	r26, r22
     a3e:	13 96       	adiw	r26, 0x03	; 3
     a40:	9c 93       	st	X, r25
     a42:	8e 93       	st	-X, r24
     a44:	12 97       	sbiw	r26, 0x02	; 2
                    pxBlock->xBlockSize = xWantedSize;
     a46:	d3 83       	std	Z+3, r29	; 0x03
     a48:	c2 83       	std	Z+2, r28	; 0x02

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     a4a:	12 96       	adiw	r26, 0x02	; 2
     a4c:	4d 91       	ld	r20, X+
     a4e:	5c 91       	ld	r21, X
     a50:	13 97       	sbiw	r26, 0x03	; 3
     a52:	0f 2e       	mov	r0, r31
     a54:	fb e8       	ldi	r31, 0x8B	; 139
     a56:	ef 2e       	mov	r14, r31
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	ff 2e       	mov	r15, r31
     a5c:	f0 2d       	mov	r31, r0
     a5e:	01 c0       	rjmp	.+2      	; 0xa62 <pvPortMalloc+0xd4>
     a60:	7d 01       	movw	r14, r26
     a62:	e7 01       	movw	r28, r14
     a64:	a8 81       	ld	r26, Y
     a66:	b9 81       	ldd	r27, Y+1	; 0x01
     a68:	12 96       	adiw	r26, 0x02	; 2
     a6a:	8d 91       	ld	r24, X+
     a6c:	9c 91       	ld	r25, X
     a6e:	13 97       	sbiw	r26, 0x03	; 3
     a70:	84 17       	cp	r24, r20
     a72:	95 07       	cpc	r25, r21
     a74:	a8 f3       	brcs	.-22     	; 0xa60 <pvPortMalloc+0xd2>
     a76:	eb 01       	movw	r28, r22
     a78:	b9 83       	std	Y+1, r27	; 0x01
     a7a:	a8 83       	st	Y, r26
     a7c:	d7 01       	movw	r26, r14
     a7e:	6d 93       	st	X+, r22
     a80:	7c 93       	st	X, r23
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
     a82:	82 81       	ldd	r24, Z+2	; 0x02
     a84:	93 81       	ldd	r25, Z+3	; 0x03
     a86:	28 1b       	sub	r18, r24
     a88:	39 0b       	sbc	r19, r25
     a8a:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     a8e:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
     a92:	08 c0       	rjmp	.+16     	; 0xaa4 <pvPortMalloc+0x116>

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     a94:	00 e0       	ldi	r16, 0x00	; 0
     a96:	10 e0       	ldi	r17, 0x00	; 0
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <pvPortMalloc+0x116>
     a9a:	00 e0       	ldi	r16, 0x00	; 0
     a9c:	10 e0       	ldi	r17, 0x00	; 0
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <pvPortMalloc+0x116>
     aa0:	00 e0       	ldi	r16, 0x00	; 0
     aa2:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     aa4:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     aa8:	c8 01       	movw	r24, r16
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	08 95       	ret

00000ab8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     ac0:	00 97       	sbiw	r24, 0x00	; 0
     ac2:	41 f1       	breq	.+80     	; 0xb14 <vPortFree+0x5c>
     ac4:	ec 01       	movw	r28, r24
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     ac6:	8c 01       	movw	r16, r24
     ac8:	04 50       	subi	r16, 0x04	; 4
     aca:	11 09       	sbc	r17, r1

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;

        vTaskSuspendAll();
     acc:	0e 94 b0 0c 	call	0x1960	; 0x1960 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     ad0:	f8 01       	movw	r30, r16
     ad2:	42 81       	ldd	r20, Z+2	; 0x02
     ad4:	53 81       	ldd	r21, Z+3	; 0x03
     ad6:	ab e8       	ldi	r26, 0x8B	; 139
     ad8:	b0 e0       	ldi	r27, 0x00	; 0
     ada:	01 c0       	rjmp	.+2      	; 0xade <vPortFree+0x26>
     adc:	df 01       	movw	r26, r30
     ade:	ed 91       	ld	r30, X+
     ae0:	fc 91       	ld	r31, X
     ae2:	11 97       	sbiw	r26, 0x01	; 1
     ae4:	22 81       	ldd	r18, Z+2	; 0x02
     ae6:	33 81       	ldd	r19, Z+3	; 0x03
     ae8:	24 17       	cp	r18, r20
     aea:	35 07       	cpc	r19, r21
     aec:	b8 f3       	brcs	.-18     	; 0xadc <vPortFree+0x24>
     aee:	24 97       	sbiw	r28, 0x04	; 4
     af0:	f9 83       	std	Y+1, r31	; 0x01
     af2:	e8 83       	st	Y, r30
     af4:	0d 93       	st	X+, r16
     af6:	1c 93       	st	X, r17
            xFreeBytesRemaining += pxLink->xBlockSize;
     af8:	8a 81       	ldd	r24, Y+2	; 0x02
     afa:	9b 81       	ldd	r25, Y+3	; 0x03
     afc:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b00:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     b04:	82 0f       	add	r24, r18
     b06:	93 1f       	adc	r25, r19
     b08:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     b0c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
     b10:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xTaskResumeAll>
    }
}
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	08 95       	ret

00000b1e <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     b1e:	fc 01       	movw	r30, r24
     b20:	03 96       	adiw	r24, 0x03	; 3
     b22:	92 83       	std	Z+2, r25	; 0x02
     b24:	81 83       	std	Z+1, r24	; 0x01
     b26:	2f ef       	ldi	r18, 0xFF	; 255
     b28:	3f ef       	ldi	r19, 0xFF	; 255
     b2a:	34 83       	std	Z+4, r19	; 0x04
     b2c:	23 83       	std	Z+3, r18	; 0x03
     b2e:	96 83       	std	Z+6, r25	; 0x06
     b30:	85 83       	std	Z+5, r24	; 0x05
     b32:	90 87       	std	Z+8, r25	; 0x08
     b34:	87 83       	std	Z+7, r24	; 0x07
     b36:	10 82       	st	Z, r1
     b38:	08 95       	ret

00000b3a <vListInitialiseItem>:
     b3a:	fc 01       	movw	r30, r24
     b3c:	11 86       	std	Z+9, r1	; 0x09
     b3e:	10 86       	std	Z+8, r1	; 0x08
     b40:	08 95       	ret

00000b42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     b48:	48 81       	ld	r20, Y
     b4a:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     b4c:	4f 3f       	cpi	r20, 0xFF	; 255
     b4e:	2f ef       	ldi	r18, 0xFF	; 255
     b50:	52 07       	cpc	r21, r18
     b52:	21 f4       	brne	.+8      	; 0xb5c <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     b54:	fc 01       	movw	r30, r24
     b56:	a7 81       	ldd	r26, Z+7	; 0x07
     b58:	b0 85       	ldd	r27, Z+8	; 0x08
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     b5c:	dc 01       	movw	r26, r24
     b5e:	13 96       	adiw	r26, 0x03	; 3
     b60:	01 c0       	rjmp	.+2      	; 0xb64 <vListInsert+0x22>
     b62:	df 01       	movw	r26, r30
     b64:	12 96       	adiw	r26, 0x02	; 2
     b66:	ed 91       	ld	r30, X+
     b68:	fc 91       	ld	r31, X
     b6a:	13 97       	sbiw	r26, 0x03	; 3
     b6c:	20 81       	ld	r18, Z
     b6e:	31 81       	ldd	r19, Z+1	; 0x01
     b70:	42 17       	cp	r20, r18
     b72:	53 07       	cpc	r21, r19
     b74:	b0 f7       	brcc	.-20     	; 0xb62 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     b76:	12 96       	adiw	r26, 0x02	; 2
     b78:	ed 91       	ld	r30, X+
     b7a:	fc 91       	ld	r31, X
     b7c:	13 97       	sbiw	r26, 0x03	; 3
     b7e:	fb 83       	std	Y+3, r31	; 0x03
     b80:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     b82:	d5 83       	std	Z+5, r29	; 0x05
     b84:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     b86:	bd 83       	std	Y+5, r27	; 0x05
     b88:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     b8a:	13 96       	adiw	r26, 0x03	; 3
     b8c:	dc 93       	st	X, r29
     b8e:	ce 93       	st	-X, r28
     b90:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     b92:	99 87       	std	Y+9, r25	; 0x09
     b94:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     b96:	fc 01       	movw	r30, r24
     b98:	20 81       	ld	r18, Z
     b9a:	2f 5f       	subi	r18, 0xFF	; 255
     b9c:	20 83       	st	Z, r18
}
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	08 95       	ret

00000ba4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     baa:	a0 85       	ldd	r26, Z+8	; 0x08
     bac:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     bae:	c2 81       	ldd	r28, Z+2	; 0x02
     bb0:	d3 81       	ldd	r29, Z+3	; 0x03
     bb2:	84 81       	ldd	r24, Z+4	; 0x04
     bb4:	95 81       	ldd	r25, Z+5	; 0x05
     bb6:	9d 83       	std	Y+5, r25	; 0x05
     bb8:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     bba:	c4 81       	ldd	r28, Z+4	; 0x04
     bbc:	d5 81       	ldd	r29, Z+5	; 0x05
     bbe:	82 81       	ldd	r24, Z+2	; 0x02
     bc0:	93 81       	ldd	r25, Z+3	; 0x03
     bc2:	9b 83       	std	Y+3, r25	; 0x03
     bc4:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     bc6:	11 96       	adiw	r26, 0x01	; 1
     bc8:	8d 91       	ld	r24, X+
     bca:	9c 91       	ld	r25, X
     bcc:	12 97       	sbiw	r26, 0x02	; 2
     bce:	e8 17       	cp	r30, r24
     bd0:	f9 07       	cpc	r31, r25
     bd2:	31 f4       	brne	.+12     	; 0xbe0 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     bd4:	84 81       	ldd	r24, Z+4	; 0x04
     bd6:	95 81       	ldd	r25, Z+5	; 0x05
     bd8:	12 96       	adiw	r26, 0x02	; 2
     bda:	9c 93       	st	X, r25
     bdc:	8e 93       	st	-X, r24
     bde:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     be0:	11 86       	std	Z+9, r1	; 0x09
     be2:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     be4:	8c 91       	ld	r24, X
     be6:	81 50       	subi	r24, 0x01	; 1
     be8:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     bea:	8c 91       	ld	r24, X
}
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     bf2:	1b bc       	out	0x2b, r1	; 43
     bf4:	8c e7       	ldi	r24, 0x7C	; 124
     bf6:	8a bd       	out	0x2a, r24	; 42
     bf8:	8b e0       	ldi	r24, 0x0B	; 11
     bfa:	8e bd       	out	0x2e, r24	; 46
     bfc:	89 b7       	in	r24, 0x39	; 57
     bfe:	80 61       	ori	r24, 0x10	; 16
     c00:	89 bf       	out	0x39, r24	; 57
     c02:	08 95       	ret

00000c04 <pxPortInitialiseStack>:
     c04:	31 e1       	ldi	r19, 0x11	; 17
     c06:	fc 01       	movw	r30, r24
     c08:	30 83       	st	Z, r19
     c0a:	31 97       	sbiw	r30, 0x01	; 1
     c0c:	22 e2       	ldi	r18, 0x22	; 34
     c0e:	20 83       	st	Z, r18
     c10:	31 97       	sbiw	r30, 0x01	; 1
     c12:	a3 e3       	ldi	r26, 0x33	; 51
     c14:	a0 83       	st	Z, r26
     c16:	31 97       	sbiw	r30, 0x01	; 1
     c18:	60 83       	st	Z, r22
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	70 83       	st	Z, r23
     c1e:	31 97       	sbiw	r30, 0x01	; 1
     c20:	10 82       	st	Z, r1
     c22:	31 97       	sbiw	r30, 0x01	; 1
     c24:	60 e8       	ldi	r22, 0x80	; 128
     c26:	60 83       	st	Z, r22
     c28:	31 97       	sbiw	r30, 0x01	; 1
     c2a:	10 82       	st	Z, r1
     c2c:	31 97       	sbiw	r30, 0x01	; 1
     c2e:	62 e0       	ldi	r22, 0x02	; 2
     c30:	60 83       	st	Z, r22
     c32:	31 97       	sbiw	r30, 0x01	; 1
     c34:	63 e0       	ldi	r22, 0x03	; 3
     c36:	60 83       	st	Z, r22
     c38:	31 97       	sbiw	r30, 0x01	; 1
     c3a:	64 e0       	ldi	r22, 0x04	; 4
     c3c:	60 83       	st	Z, r22
     c3e:	31 97       	sbiw	r30, 0x01	; 1
     c40:	65 e0       	ldi	r22, 0x05	; 5
     c42:	60 83       	st	Z, r22
     c44:	31 97       	sbiw	r30, 0x01	; 1
     c46:	66 e0       	ldi	r22, 0x06	; 6
     c48:	60 83       	st	Z, r22
     c4a:	31 97       	sbiw	r30, 0x01	; 1
     c4c:	67 e0       	ldi	r22, 0x07	; 7
     c4e:	60 83       	st	Z, r22
     c50:	31 97       	sbiw	r30, 0x01	; 1
     c52:	68 e0       	ldi	r22, 0x08	; 8
     c54:	60 83       	st	Z, r22
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	69 e0       	ldi	r22, 0x09	; 9
     c5a:	60 83       	st	Z, r22
     c5c:	31 97       	sbiw	r30, 0x01	; 1
     c5e:	60 e1       	ldi	r22, 0x10	; 16
     c60:	60 83       	st	Z, r22
     c62:	31 97       	sbiw	r30, 0x01	; 1
     c64:	30 83       	st	Z, r19
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	32 e1       	ldi	r19, 0x12	; 18
     c6a:	30 83       	st	Z, r19
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	33 e1       	ldi	r19, 0x13	; 19
     c70:	30 83       	st	Z, r19
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	34 e1       	ldi	r19, 0x14	; 20
     c76:	30 83       	st	Z, r19
     c78:	31 97       	sbiw	r30, 0x01	; 1
     c7a:	35 e1       	ldi	r19, 0x15	; 21
     c7c:	30 83       	st	Z, r19
     c7e:	31 97       	sbiw	r30, 0x01	; 1
     c80:	36 e1       	ldi	r19, 0x16	; 22
     c82:	30 83       	st	Z, r19
     c84:	31 97       	sbiw	r30, 0x01	; 1
     c86:	37 e1       	ldi	r19, 0x17	; 23
     c88:	30 83       	st	Z, r19
     c8a:	31 97       	sbiw	r30, 0x01	; 1
     c8c:	38 e1       	ldi	r19, 0x18	; 24
     c8e:	30 83       	st	Z, r19
     c90:	31 97       	sbiw	r30, 0x01	; 1
     c92:	39 e1       	ldi	r19, 0x19	; 25
     c94:	30 83       	st	Z, r19
     c96:	31 97       	sbiw	r30, 0x01	; 1
     c98:	30 e2       	ldi	r19, 0x20	; 32
     c9a:	30 83       	st	Z, r19
     c9c:	31 97       	sbiw	r30, 0x01	; 1
     c9e:	31 e2       	ldi	r19, 0x21	; 33
     ca0:	30 83       	st	Z, r19
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	20 83       	st	Z, r18
     ca6:	31 97       	sbiw	r30, 0x01	; 1
     ca8:	23 e2       	ldi	r18, 0x23	; 35
     caa:	20 83       	st	Z, r18
     cac:	31 97       	sbiw	r30, 0x01	; 1
     cae:	40 83       	st	Z, r20
     cb0:	31 97       	sbiw	r30, 0x01	; 1
     cb2:	50 83       	st	Z, r21
     cb4:	31 97       	sbiw	r30, 0x01	; 1
     cb6:	26 e2       	ldi	r18, 0x26	; 38
     cb8:	20 83       	st	Z, r18
     cba:	31 97       	sbiw	r30, 0x01	; 1
     cbc:	27 e2       	ldi	r18, 0x27	; 39
     cbe:	20 83       	st	Z, r18
     cc0:	31 97       	sbiw	r30, 0x01	; 1
     cc2:	28 e2       	ldi	r18, 0x28	; 40
     cc4:	20 83       	st	Z, r18
     cc6:	31 97       	sbiw	r30, 0x01	; 1
     cc8:	29 e2       	ldi	r18, 0x29	; 41
     cca:	20 83       	st	Z, r18
     ccc:	31 97       	sbiw	r30, 0x01	; 1
     cce:	20 e3       	ldi	r18, 0x30	; 48
     cd0:	20 83       	st	Z, r18
     cd2:	31 97       	sbiw	r30, 0x01	; 1
     cd4:	21 e3       	ldi	r18, 0x31	; 49
     cd6:	20 83       	st	Z, r18
     cd8:	86 97       	sbiw	r24, 0x26	; 38
     cda:	08 95       	ret

00000cdc <xPortStartScheduler>:
     cdc:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <prvSetupTimerInterrupt>
     ce0:	a0 91 1d 04 	lds	r26, 0x041D	; 0x80041d <pxCurrentTCB>
     ce4:	b0 91 1e 04 	lds	r27, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
     ce8:	cd 91       	ld	r28, X+
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	dd 91       	ld	r29, X+
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	ff 91       	pop	r31
     cf2:	ef 91       	pop	r30
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	bf 91       	pop	r27
     cfa:	af 91       	pop	r26
     cfc:	9f 91       	pop	r25
     cfe:	8f 91       	pop	r24
     d00:	7f 91       	pop	r23
     d02:	6f 91       	pop	r22
     d04:	5f 91       	pop	r21
     d06:	4f 91       	pop	r20
     d08:	3f 91       	pop	r19
     d0a:	2f 91       	pop	r18
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	ff 90       	pop	r15
     d12:	ef 90       	pop	r14
     d14:	df 90       	pop	r13
     d16:	cf 90       	pop	r12
     d18:	bf 90       	pop	r11
     d1a:	af 90       	pop	r10
     d1c:	9f 90       	pop	r9
     d1e:	8f 90       	pop	r8
     d20:	7f 90       	pop	r7
     d22:	6f 90       	pop	r6
     d24:	5f 90       	pop	r5
     d26:	4f 90       	pop	r4
     d28:	3f 90       	pop	r3
     d2a:	2f 90       	pop	r2
     d2c:	1f 90       	pop	r1
     d2e:	0f 90       	pop	r0
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	0f 90       	pop	r0
     d34:	08 95       	ret
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	08 95       	ret

00000d3a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d3a:	0f 92       	push	r0
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	0f 92       	push	r0
     d42:	1f 92       	push	r1
     d44:	11 24       	eor	r1, r1
     d46:	2f 92       	push	r2
     d48:	3f 92       	push	r3
     d4a:	4f 92       	push	r4
     d4c:	5f 92       	push	r5
     d4e:	6f 92       	push	r6
     d50:	7f 92       	push	r7
     d52:	8f 92       	push	r8
     d54:	9f 92       	push	r9
     d56:	af 92       	push	r10
     d58:	bf 92       	push	r11
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	2f 93       	push	r18
     d68:	3f 93       	push	r19
     d6a:	4f 93       	push	r20
     d6c:	5f 93       	push	r21
     d6e:	6f 93       	push	r22
     d70:	7f 93       	push	r23
     d72:	8f 93       	push	r24
     d74:	9f 93       	push	r25
     d76:	af 93       	push	r26
     d78:	bf 93       	push	r27
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	ef 93       	push	r30
     d80:	ff 93       	push	r31
     d82:	a0 91 1d 04 	lds	r26, 0x041D	; 0x80041d <pxCurrentTCB>
     d86:	b0 91 1e 04 	lds	r27, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
     d8a:	0d b6       	in	r0, 0x3d	; 61
     d8c:	0d 92       	st	X+, r0
     d8e:	0e b6       	in	r0, 0x3e	; 62
     d90:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     d92:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     d96:	a0 91 1d 04 	lds	r26, 0x041D	; 0x80041d <pxCurrentTCB>
     d9a:	b0 91 1e 04 	lds	r27, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
     d9e:	cd 91       	ld	r28, X+
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	dd 91       	ld	r29, X+
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	ff 91       	pop	r31
     da8:	ef 91       	pop	r30
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	bf 91       	pop	r27
     db0:	af 91       	pop	r26
     db2:	9f 91       	pop	r25
     db4:	8f 91       	pop	r24
     db6:	7f 91       	pop	r23
     db8:	6f 91       	pop	r22
     dba:	5f 91       	pop	r21
     dbc:	4f 91       	pop	r20
     dbe:	3f 91       	pop	r19
     dc0:	2f 91       	pop	r18
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	bf 90       	pop	r11
     dd0:	af 90       	pop	r10
     dd2:	9f 90       	pop	r9
     dd4:	8f 90       	pop	r8
     dd6:	7f 90       	pop	r7
     dd8:	6f 90       	pop	r6
     dda:	5f 90       	pop	r5
     ddc:	4f 90       	pop	r4
     dde:	3f 90       	pop	r3
     de0:	2f 90       	pop	r2
     de2:	1f 90       	pop	r1
     de4:	0f 90       	pop	r0
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	0f 90       	pop	r0

	asm volatile ( "ret" );
     dea:	08 95       	ret

00000dec <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     dec:	0f 92       	push	r0
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	0f 92       	push	r0
     df4:	1f 92       	push	r1
     df6:	11 24       	eor	r1, r1
     df8:	2f 92       	push	r2
     dfa:	3f 92       	push	r3
     dfc:	4f 92       	push	r4
     dfe:	5f 92       	push	r5
     e00:	6f 92       	push	r6
     e02:	7f 92       	push	r7
     e04:	8f 92       	push	r8
     e06:	9f 92       	push	r9
     e08:	af 92       	push	r10
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	2f 93       	push	r18
     e1a:	3f 93       	push	r19
     e1c:	4f 93       	push	r20
     e1e:	5f 93       	push	r21
     e20:	6f 93       	push	r22
     e22:	7f 93       	push	r23
     e24:	8f 93       	push	r24
     e26:	9f 93       	push	r25
     e28:	af 93       	push	r26
     e2a:	bf 93       	push	r27
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	ef 93       	push	r30
     e32:	ff 93       	push	r31
     e34:	a0 91 1d 04 	lds	r26, 0x041D	; 0x80041d <pxCurrentTCB>
     e38:	b0 91 1e 04 	lds	r27, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
     e3c:	0d b6       	in	r0, 0x3d	; 61
     e3e:	0d 92       	st	X+, r0
     e40:	0e b6       	in	r0, 0x3e	; 62
     e42:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     e44:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskIncrementTick>
     e48:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     e4a:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     e4e:	a0 91 1d 04 	lds	r26, 0x041D	; 0x80041d <pxCurrentTCB>
     e52:	b0 91 1e 04 	lds	r27, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
     e56:	cd 91       	ld	r28, X+
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	dd 91       	ld	r29, X+
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	ff 91       	pop	r31
     e60:	ef 91       	pop	r30
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	bf 91       	pop	r27
     e68:	af 91       	pop	r26
     e6a:	9f 91       	pop	r25
     e6c:	8f 91       	pop	r24
     e6e:	7f 91       	pop	r23
     e70:	6f 91       	pop	r22
     e72:	5f 91       	pop	r21
     e74:	4f 91       	pop	r20
     e76:	3f 91       	pop	r19
     e78:	2f 91       	pop	r18
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	ff 90       	pop	r15
     e80:	ef 90       	pop	r14
     e82:	df 90       	pop	r13
     e84:	cf 90       	pop	r12
     e86:	bf 90       	pop	r11
     e88:	af 90       	pop	r10
     e8a:	9f 90       	pop	r9
     e8c:	8f 90       	pop	r8
     e8e:	7f 90       	pop	r7
     e90:	6f 90       	pop	r6
     e92:	5f 90       	pop	r5
     e94:	4f 90       	pop	r4
     e96:	3f 90       	pop	r3
     e98:	2f 90       	pop	r2
     e9a:	1f 90       	pop	r1
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f 90       	pop	r0

	asm volatile ( "ret" );
     ea2:	08 95       	ret

00000ea4 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     ea4:	0e 94 f6 06 	call	0xdec	; 0xdec <vPortYieldFromTick>
		asm volatile ( "reti" );
     ea8:	18 95       	reti

00000eaa <prvGetDisinheritPriorityAfterTimeout>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     eaa:	dc 01       	movw	r26, r24
     eac:	51 96       	adiw	r26, 0x11	; 17
     eae:	2c 91       	ld	r18, X
     eb0:	51 97       	sbiw	r26, 0x11	; 17
     eb2:	22 23       	and	r18, r18
     eb4:	41 f0       	breq	.+16     	; 0xec6 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     eb6:	56 96       	adiw	r26, 0x16	; 22
     eb8:	ed 91       	ld	r30, X+
     eba:	fc 91       	ld	r31, X
     ebc:	57 97       	sbiw	r26, 0x17	; 23
     ebe:	90 81       	ld	r25, Z
     ec0:	85 e0       	ldi	r24, 0x05	; 5
     ec2:	89 1b       	sub	r24, r25
     ec4:	08 95       	ret
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	08 95       	ret

00000eca <prvIsQueueEmpty>:
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	0f 92       	push	r0
     ed0:	fc 01       	movw	r30, r24
     ed2:	82 8d       	ldd	r24, Z+26	; 0x1a
     ed4:	81 11       	cpse	r24, r1
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <prvIsQueueEmpty+0x12>
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	01 c0       	rjmp	.+2      	; 0xede <prvIsQueueEmpty+0x14>
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	0f 90       	pop	r0
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	08 95       	ret

00000ee4 <prvIsQueueFull>:
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	0f 92       	push	r0
     eea:	fc 01       	movw	r30, r24
     eec:	22 8d       	ldd	r18, Z+26	; 0x1a
     eee:	83 8d       	ldd	r24, Z+27	; 0x1b
     ef0:	28 13       	cpse	r18, r24
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <prvIsQueueFull+0x14>
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	01 c0       	rjmp	.+2      	; 0xefa <prvIsQueueFull+0x16>
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	0f 90       	pop	r0
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	08 95       	ret

00000f00 <prvCopyDataToQueue>:
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	ec 01       	movw	r28, r24
     f0a:	04 2f       	mov	r16, r20
     f0c:	1a 8d       	ldd	r17, Y+26	; 0x1a
     f0e:	4c 8d       	ldd	r20, Y+28	; 0x1c
     f10:	41 11       	cpse	r20, r1
     f12:	0c c0       	rjmp	.+24     	; 0xf2c <prvCopyDataToQueue+0x2c>
     f14:	88 81       	ld	r24, Y
     f16:	99 81       	ldd	r25, Y+1	; 0x01
     f18:	89 2b       	or	r24, r25
     f1a:	09 f0       	breq	.+2      	; 0xf1e <prvCopyDataToQueue+0x1e>
     f1c:	42 c0       	rjmp	.+132    	; 0xfa2 <prvCopyDataToQueue+0xa2>
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	9d 81       	ldd	r25, Y+5	; 0x05
     f22:	0e 94 94 10 	call	0x2128	; 0x2128 <xTaskPriorityDisinherit>
     f26:	1d 82       	std	Y+5, r1	; 0x05
     f28:	1c 82       	std	Y+4, r1	; 0x04
     f2a:	42 c0       	rjmp	.+132    	; 0xfb0 <prvCopyDataToQueue+0xb0>
     f2c:	01 11       	cpse	r16, r1
     f2e:	17 c0       	rjmp	.+46     	; 0xf5e <prvCopyDataToQueue+0x5e>
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	9b 81       	ldd	r25, Y+3	; 0x03
     f36:	0e 94 90 11 	call	0x2320	; 0x2320 <memcpy>
     f3a:	2c 8d       	ldd	r18, Y+28	; 0x1c
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	9b 81       	ldd	r25, Y+3	; 0x03
     f40:	82 0f       	add	r24, r18
     f42:	91 1d       	adc	r25, r1
     f44:	9b 83       	std	Y+3, r25	; 0x03
     f46:	8a 83       	std	Y+2, r24	; 0x02
     f48:	2c 81       	ldd	r18, Y+4	; 0x04
     f4a:	3d 81       	ldd	r19, Y+5	; 0x05
     f4c:	82 17       	cp	r24, r18
     f4e:	93 07       	cpc	r25, r19
     f50:	50 f1       	brcs	.+84     	; 0xfa6 <prvCopyDataToQueue+0xa6>
     f52:	88 81       	ld	r24, Y
     f54:	99 81       	ldd	r25, Y+1	; 0x01
     f56:	9b 83       	std	Y+3, r25	; 0x03
     f58:	8a 83       	std	Y+2, r24	; 0x02
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	29 c0       	rjmp	.+82     	; 0xfb0 <prvCopyDataToQueue+0xb0>
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	8e 81       	ldd	r24, Y+6	; 0x06
     f62:	9f 81       	ldd	r25, Y+7	; 0x07
     f64:	0e 94 90 11 	call	0x2320	; 0x2320 <memcpy>
     f68:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	91 95       	neg	r25
     f6e:	81 95       	neg	r24
     f70:	91 09       	sbc	r25, r1
     f72:	2e 81       	ldd	r18, Y+6	; 0x06
     f74:	3f 81       	ldd	r19, Y+7	; 0x07
     f76:	28 0f       	add	r18, r24
     f78:	39 1f       	adc	r19, r25
     f7a:	3f 83       	std	Y+7, r19	; 0x07
     f7c:	2e 83       	std	Y+6, r18	; 0x06
     f7e:	48 81       	ld	r20, Y
     f80:	59 81       	ldd	r21, Y+1	; 0x01
     f82:	24 17       	cp	r18, r20
     f84:	35 07       	cpc	r19, r21
     f86:	30 f4       	brcc	.+12     	; 0xf94 <prvCopyDataToQueue+0x94>
     f88:	2c 81       	ldd	r18, Y+4	; 0x04
     f8a:	3d 81       	ldd	r19, Y+5	; 0x05
     f8c:	82 0f       	add	r24, r18
     f8e:	93 1f       	adc	r25, r19
     f90:	9f 83       	std	Y+7, r25	; 0x07
     f92:	8e 83       	std	Y+6, r24	; 0x06
     f94:	02 30       	cpi	r16, 0x02	; 2
     f96:	49 f4       	brne	.+18     	; 0xfaa <prvCopyDataToQueue+0xaa>
     f98:	11 23       	and	r17, r17
     f9a:	49 f0       	breq	.+18     	; 0xfae <prvCopyDataToQueue+0xae>
     f9c:	11 50       	subi	r17, 0x01	; 1
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	07 c0       	rjmp	.+14     	; 0xfb0 <prvCopyDataToQueue+0xb0>
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	05 c0       	rjmp	.+10     	; 0xfb0 <prvCopyDataToQueue+0xb0>
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	03 c0       	rjmp	.+6      	; 0xfb0 <prvCopyDataToQueue+0xb0>
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	01 c0       	rjmp	.+2      	; 0xfb0 <prvCopyDataToQueue+0xb0>
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	1f 5f       	subi	r17, 0xFF	; 255
     fb2:	1a 8f       	std	Y+26, r17	; 0x1a
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <prvUnlockQueue>:
     fbe:	1f 93       	push	r17
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	ec 01       	movw	r28, r24
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	0f 92       	push	r0
     fcc:	1e 8d       	ldd	r17, Y+30	; 0x1e
     fce:	0b c0       	rjmp	.+22     	; 0xfe6 <prvUnlockQueue+0x28>
     fd0:	89 89       	ldd	r24, Y+17	; 0x11
     fd2:	88 23       	and	r24, r24
     fd4:	51 f0       	breq	.+20     	; 0xfea <prvUnlockQueue+0x2c>
     fd6:	ce 01       	movw	r24, r28
     fd8:	41 96       	adiw	r24, 0x11	; 17
     fda:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <xTaskRemoveFromEventList>
     fde:	81 11       	cpse	r24, r1
     fe0:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <vTaskMissedYield>
     fe4:	11 50       	subi	r17, 0x01	; 1
     fe6:	11 16       	cp	r1, r17
     fe8:	9c f3       	brlt	.-26     	; 0xfd0 <prvUnlockQueue+0x12>
     fea:	8f ef       	ldi	r24, 0xFF	; 255
     fec:	8e 8f       	std	Y+30, r24	; 0x1e
     fee:	0f 90       	pop	r0
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	0f 92       	push	r0
     ff8:	1d 8d       	ldd	r17, Y+29	; 0x1d
     ffa:	0b c0       	rjmp	.+22     	; 0x1012 <prvUnlockQueue+0x54>
     ffc:	88 85       	ldd	r24, Y+8	; 0x08
     ffe:	88 23       	and	r24, r24
    1000:	51 f0       	breq	.+20     	; 0x1016 <prvUnlockQueue+0x58>
    1002:	ce 01       	movw	r24, r28
    1004:	08 96       	adiw	r24, 0x08	; 8
    1006:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <xTaskRemoveFromEventList>
    100a:	81 11       	cpse	r24, r1
    100c:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <vTaskMissedYield>
    1010:	11 50       	subi	r17, 0x01	; 1
    1012:	11 16       	cp	r1, r17
    1014:	9c f3       	brlt	.-26     	; 0xffc <prvUnlockQueue+0x3e>
    1016:	8f ef       	ldi	r24, 0xFF	; 255
    1018:	8d 8f       	std	Y+29, r24	; 0x1d
    101a:	0f 90       	pop	r0
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	08 95       	ret

00001026 <xQueueGenericReset>:
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	fc 01       	movw	r30, r24
    1030:	36 2f       	mov	r19, r22
    1032:	89 2b       	or	r24, r25
    1034:	09 f4       	brne	.+2      	; 0x1038 <xQueueGenericReset+0x12>
    1036:	4d c0       	rjmp	.+154    	; 0x10d2 <xQueueGenericReset+0xac>
    1038:	23 8d       	ldd	r18, Z+27	; 0x1b
    103a:	22 23       	and	r18, r18
    103c:	09 f4       	brne	.+2      	; 0x1040 <xQueueGenericReset+0x1a>
    103e:	4b c0       	rjmp	.+150    	; 0x10d6 <xQueueGenericReset+0xb0>
    1040:	02 2f       	mov	r16, r18
    1042:	10 e0       	ldi	r17, 0x00	; 0
    1044:	8f ef       	ldi	r24, 0xFF	; 255
    1046:	9f ef       	ldi	r25, 0xFF	; 255
    1048:	b8 01       	movw	r22, r16
    104a:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__udivmodhi4>
    104e:	44 8d       	ldd	r20, Z+28	; 0x1c
    1050:	84 2f       	mov	r24, r20
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	68 17       	cp	r22, r24
    1056:	79 07       	cpc	r23, r25
    1058:	08 f4       	brcc	.+2      	; 0x105c <xQueueGenericReset+0x36>
    105a:	3f c0       	rjmp	.+126    	; 0x10da <xQueueGenericReset+0xb4>
    105c:	ef 01       	movw	r28, r30
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	0f 92       	push	r0
    1064:	60 81       	ld	r22, Z
    1066:	71 81       	ldd	r23, Z+1	; 0x01
    1068:	fb 01       	movw	r30, r22
    106a:	24 9f       	mul	r18, r20
    106c:	e0 0d       	add	r30, r0
    106e:	f1 1d       	adc	r31, r1
    1070:	11 24       	eor	r1, r1
    1072:	fd 83       	std	Y+5, r31	; 0x05
    1074:	ec 83       	std	Y+4, r30	; 0x04
    1076:	1a 8e       	std	Y+26, r1	; 0x1a
    1078:	7b 83       	std	Y+3, r23	; 0x03
    107a:	6a 83       	std	Y+2, r22	; 0x02
    107c:	01 50       	subi	r16, 0x01	; 1
    107e:	11 09       	sbc	r17, r1
    1080:	80 9f       	mul	r24, r16
    1082:	a0 01       	movw	r20, r0
    1084:	81 9f       	mul	r24, r17
    1086:	50 0d       	add	r21, r0
    1088:	90 9f       	mul	r25, r16
    108a:	50 0d       	add	r21, r0
    108c:	11 24       	eor	r1, r1
    108e:	cb 01       	movw	r24, r22
    1090:	84 0f       	add	r24, r20
    1092:	95 1f       	adc	r25, r21
    1094:	9f 83       	std	Y+7, r25	; 0x07
    1096:	8e 83       	std	Y+6, r24	; 0x06
    1098:	8f ef       	ldi	r24, 0xFF	; 255
    109a:	8d 8f       	std	Y+29, r24	; 0x1d
    109c:	8e 8f       	std	Y+30, r24	; 0x1e
    109e:	31 11       	cpse	r19, r1
    10a0:	0c c0       	rjmp	.+24     	; 0x10ba <xQueueGenericReset+0x94>
    10a2:	88 85       	ldd	r24, Y+8	; 0x08
    10a4:	88 23       	and	r24, r24
    10a6:	89 f0       	breq	.+34     	; 0x10ca <xQueueGenericReset+0xa4>
    10a8:	ce 01       	movw	r24, r28
    10aa:	08 96       	adiw	r24, 0x08	; 8
    10ac:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <xTaskRemoveFromEventList>
    10b0:	88 23       	and	r24, r24
    10b2:	59 f0       	breq	.+22     	; 0x10ca <xQueueGenericReset+0xa4>
    10b4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <vPortYield>
    10b8:	08 c0       	rjmp	.+16     	; 0x10ca <xQueueGenericReset+0xa4>
    10ba:	ce 01       	movw	r24, r28
    10bc:	08 96       	adiw	r24, 0x08	; 8
    10be:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vListInitialise>
    10c2:	ce 01       	movw	r24, r28
    10c4:	41 96       	adiw	r24, 0x11	; 17
    10c6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vListInitialise>
    10ca:	0f 90       	pop	r0
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	05 c0       	rjmp	.+10     	; 0x10dc <xQueueGenericReset+0xb6>
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	03 c0       	rjmp	.+6      	; 0x10dc <xQueueGenericReset+0xb6>
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	01 c0       	rjmp	.+2      	; 0x10dc <xQueueGenericReset+0xb6>
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	08 95       	ret

000010e6 <prvInitialiseNewQueue>:
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	f2 2e       	mov	r15, r18
    10f2:	e8 01       	movw	r28, r16
    10f4:	61 11       	cpse	r22, r1
    10f6:	03 c0       	rjmp	.+6      	; 0x10fe <prvInitialiseNewQueue+0x18>
    10f8:	19 83       	std	Y+1, r17	; 0x01
    10fa:	08 83       	st	Y, r16
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <prvInitialiseNewQueue+0x1c>
    10fe:	59 83       	std	Y+1, r21	; 0x01
    1100:	48 83       	st	Y, r20
    1102:	8b 8f       	std	Y+27, r24	; 0x1b
    1104:	6c 8f       	std	Y+28, r22	; 0x1c
    1106:	61 e0       	ldi	r22, 0x01	; 1
    1108:	ce 01       	movw	r24, r28
    110a:	0e 94 13 08 	call	0x1026	; 0x1026 <xQueueGenericReset>
    110e:	f8 a2       	std	Y+32, r15	; 0x20
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	ff 90       	pop	r15
    111a:	08 95       	ret

0000111c <xQueueGenericCreate>:
    111c:	df 92       	push	r13
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	38 2f       	mov	r19, r24
    112c:	e6 2f       	mov	r30, r22
    112e:	88 23       	and	r24, r24
    1130:	29 f1       	breq	.+74     	; 0x117c <xQueueGenericCreate+0x60>
    1132:	68 2f       	mov	r22, r24
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	8f ef       	ldi	r24, 0xFF	; 255
    1138:	9f ef       	ldi	r25, 0xFF	; 255
    113a:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__udivmodhi4>
    113e:	8e 2f       	mov	r24, r30
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	68 17       	cp	r22, r24
    1144:	79 07       	cpc	r23, r25
    1146:	e8 f0       	brcs	.+58     	; 0x1182 <xQueueGenericCreate+0x66>
    1148:	3e 9f       	mul	r19, r30
    114a:	c0 01       	movw	r24, r0
    114c:	11 24       	eor	r1, r1
    114e:	8f 3d       	cpi	r24, 0xDF	; 223
    1150:	2f ef       	ldi	r18, 0xFF	; 255
    1152:	92 07       	cpc	r25, r18
    1154:	c8 f4       	brcc	.+50     	; 0x1188 <xQueueGenericCreate+0x6c>
    1156:	d4 2e       	mov	r13, r20
    1158:	de 2f       	mov	r29, r30
    115a:	c3 2f       	mov	r28, r19
    115c:	81 96       	adiw	r24, 0x21	; 33
    115e:	0e 94 c7 04 	call	0x98e	; 0x98e <pvPortMalloc>
    1162:	7c 01       	movw	r14, r24
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	91 f0       	breq	.+36     	; 0x118c <xQueueGenericCreate+0x70>
    1168:	8c 01       	movw	r16, r24
    116a:	2d 2d       	mov	r18, r13
    116c:	ac 01       	movw	r20, r24
    116e:	4f 5d       	subi	r20, 0xDF	; 223
    1170:	5f 4f       	sbci	r21, 0xFF	; 255
    1172:	6d 2f       	mov	r22, r29
    1174:	8c 2f       	mov	r24, r28
    1176:	0e 94 73 08 	call	0x10e6	; 0x10e6 <prvInitialiseNewQueue>
    117a:	08 c0       	rjmp	.+16     	; 0x118c <xQueueGenericCreate+0x70>
    117c:	e1 2c       	mov	r14, r1
    117e:	f1 2c       	mov	r15, r1
    1180:	05 c0       	rjmp	.+10     	; 0x118c <xQueueGenericCreate+0x70>
    1182:	e1 2c       	mov	r14, r1
    1184:	f1 2c       	mov	r15, r1
    1186:	02 c0       	rjmp	.+4      	; 0x118c <xQueueGenericCreate+0x70>
    1188:	e1 2c       	mov	r14, r1
    118a:	f1 2c       	mov	r15, r1
    118c:	c7 01       	movw	r24, r14
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	ff 90       	pop	r15
    1198:	ef 90       	pop	r14
    119a:	df 90       	pop	r13
    119c:	08 95       	ret

0000119e <xQueueGenericSend>:
    119e:	cf 92       	push	r12
    11a0:	df 92       	push	r13
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <xQueueGenericSend+0x12>
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <xQueueGenericSend+0x14>
    11b2:	1f 92       	push	r1
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	8c 01       	movw	r16, r24
    11ba:	7b 01       	movw	r14, r22
    11bc:	5d 83       	std	Y+5, r21	; 0x05
    11be:	4c 83       	std	Y+4, r20	; 0x04
    11c0:	c2 2e       	mov	r12, r18
    11c2:	d1 2c       	mov	r13, r1
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	0f 92       	push	r0
    11ca:	f8 01       	movw	r30, r16
    11cc:	92 8d       	ldd	r25, Z+26	; 0x1a
    11ce:	83 8d       	ldd	r24, Z+27	; 0x1b
    11d0:	98 17       	cp	r25, r24
    11d2:	18 f0       	brcs	.+6      	; 0x11da <xQueueGenericSend+0x3c>
    11d4:	f2 e0       	ldi	r31, 0x02	; 2
    11d6:	cf 12       	cpse	r12, r31
    11d8:	19 c0       	rjmp	.+50     	; 0x120c <xQueueGenericSend+0x6e>
    11da:	4c 2d       	mov	r20, r12
    11dc:	b7 01       	movw	r22, r14
    11de:	c8 01       	movw	r24, r16
    11e0:	0e 94 80 07 	call	0xf00	; 0xf00 <prvCopyDataToQueue>
    11e4:	f8 01       	movw	r30, r16
    11e6:	91 89       	ldd	r25, Z+17	; 0x11
    11e8:	99 23       	and	r25, r25
    11ea:	49 f0       	breq	.+18     	; 0x11fe <xQueueGenericSend+0x60>
    11ec:	c8 01       	movw	r24, r16
    11ee:	41 96       	adiw	r24, 0x11	; 17
    11f0:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <xTaskRemoveFromEventList>
    11f4:	88 23       	and	r24, r24
    11f6:	31 f0       	breq	.+12     	; 0x1204 <xQueueGenericSend+0x66>
    11f8:	0e 94 9d 06 	call	0xd3a	; 0xd3a <vPortYield>
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <xQueueGenericSend+0x66>
    11fe:	81 11       	cpse	r24, r1
    1200:	0e 94 9d 06 	call	0xd3a	; 0xd3a <vPortYield>
    1204:	0f 90       	pop	r0
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	4d c0       	rjmp	.+154    	; 0x12a6 <xQueueGenericSend+0x108>
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
    120e:	9d 81       	ldd	r25, Y+5	; 0x05
    1210:	89 2b       	or	r24, r25
    1212:	21 f4       	brne	.+8      	; 0x121c <xQueueGenericSend+0x7e>
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	45 c0       	rjmp	.+138    	; 0x12a6 <xQueueGenericSend+0x108>
    121c:	d1 10       	cpse	r13, r1
    121e:	06 c0       	rjmp	.+12     	; 0x122c <xQueueGenericSend+0x8e>
    1220:	ce 01       	movw	r24, r28
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <vTaskInternalSetTimeOutState>
    1228:	dd 24       	eor	r13, r13
    122a:	d3 94       	inc	r13
    122c:	0f 90       	pop	r0
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	0e 94 b0 0c 	call	0x1960	; 0x1960 <vTaskSuspendAll>
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	0f 92       	push	r0
    123a:	f8 01       	movw	r30, r16
    123c:	85 8d       	ldd	r24, Z+29	; 0x1d
    123e:	8f 3f       	cpi	r24, 0xFF	; 255
    1240:	09 f4       	brne	.+2      	; 0x1244 <xQueueGenericSend+0xa6>
    1242:	15 8e       	std	Z+29, r1	; 0x1d
    1244:	f8 01       	movw	r30, r16
    1246:	86 8d       	ldd	r24, Z+30	; 0x1e
    1248:	8f 3f       	cpi	r24, 0xFF	; 255
    124a:	09 f4       	brne	.+2      	; 0x124e <xQueueGenericSend+0xb0>
    124c:	16 8e       	std	Z+30, r1	; 0x1e
    124e:	0f 90       	pop	r0
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	be 01       	movw	r22, r28
    1254:	6c 5f       	subi	r22, 0xFC	; 252
    1256:	7f 4f       	sbci	r23, 0xFF	; 255
    1258:	ce 01       	movw	r24, r28
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <xTaskCheckForTimeOut>
    1260:	81 11       	cpse	r24, r1
    1262:	1b c0       	rjmp	.+54     	; 0x129a <xQueueGenericSend+0xfc>
    1264:	c8 01       	movw	r24, r16
    1266:	0e 94 72 07 	call	0xee4	; 0xee4 <prvIsQueueFull>
    126a:	88 23       	and	r24, r24
    126c:	81 f0       	breq	.+32     	; 0x128e <xQueueGenericSend+0xf0>
    126e:	6c 81       	ldd	r22, Y+4	; 0x04
    1270:	7d 81       	ldd	r23, Y+5	; 0x05
    1272:	c8 01       	movw	r24, r16
    1274:	08 96       	adiw	r24, 0x08	; 8
    1276:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <vTaskPlaceOnEventList>
    127a:	c8 01       	movw	r24, r16
    127c:	0e 94 df 07 	call	0xfbe	; 0xfbe <prvUnlockQueue>
    1280:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xTaskResumeAll>
    1284:	81 11       	cpse	r24, r1
    1286:	9e cf       	rjmp	.-196    	; 0x11c4 <xQueueGenericSend+0x26>
    1288:	0e 94 9d 06 	call	0xd3a	; 0xd3a <vPortYield>
    128c:	9b cf       	rjmp	.-202    	; 0x11c4 <xQueueGenericSend+0x26>
    128e:	c8 01       	movw	r24, r16
    1290:	0e 94 df 07 	call	0xfbe	; 0xfbe <prvUnlockQueue>
    1294:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xTaskResumeAll>
    1298:	95 cf       	rjmp	.-214    	; 0x11c4 <xQueueGenericSend+0x26>
    129a:	c8 01       	movw	r24, r16
    129c:	0e 94 df 07 	call	0xfbe	; 0xfbe <prvUnlockQueue>
    12a0:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xTaskResumeAll>
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	ff 90       	pop	r15
    12ba:	ef 90       	pop	r14
    12bc:	df 90       	pop	r13
    12be:	cf 90       	pop	r12
    12c0:	08 95       	ret

000012c2 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <xQueueSemaphoreTake+0xe>
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <xQueueSemaphoreTake+0x10>
    12d2:	1f 92       	push	r1
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	8c 01       	movw	r16, r24
    12da:	7d 83       	std	Y+5, r23	; 0x05
    12dc:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
    12de:	e1 2c       	mov	r14, r1
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    BaseType_t xEntryTimeSet = pdFALSE;
    12e0:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    12e8:	f8 01       	movw	r30, r16
    12ea:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    12ec:	88 23       	and	r24, r24
    12ee:	d1 f0       	breq	.+52     	; 0x1324 <xQueueSemaphoreTake+0x62>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    12f0:	81 50       	subi	r24, 0x01	; 1
    12f2:	82 8f       	std	Z+26, r24	; 0x1a

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    12f4:	80 81       	ld	r24, Z
    12f6:	91 81       	ldd	r25, Z+1	; 0x01
    12f8:	89 2b       	or	r24, r25
    12fa:	29 f4       	brne	.+10     	; 0x1306 <xQueueSemaphoreTake+0x44>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
    12fc:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <pvTaskIncrementMutexHeldCount>
    1300:	f8 01       	movw	r30, r16
    1302:	95 83       	std	Z+5, r25	; 0x05
    1304:	84 83       	std	Z+4, r24	; 0x04
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1306:	f8 01       	movw	r30, r16
    1308:	80 85       	ldd	r24, Z+8	; 0x08
    130a:	88 23       	and	r24, r24
    130c:	39 f0       	breq	.+14     	; 0x131c <xQueueSemaphoreTake+0x5a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    130e:	c8 01       	movw	r24, r16
    1310:	08 96       	adiw	r24, 0x08	; 8
    1312:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <xTaskRemoveFromEventList>
    1316:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    1318:	0e 94 9d 06 	call	0xd3a	; 0xd3a <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	74 c0       	rjmp	.+232    	; 0x140c <xQueueSemaphoreTake+0x14a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    1324:	8c 81       	ldd	r24, Y+4	; 0x04
    1326:	9d 81       	ldd	r25, Y+5	; 0x05
    1328:	89 2b       	or	r24, r25
    132a:	21 f4       	brne	.+8      	; 0x1334 <xQueueSemaphoreTake+0x72>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	6c c0       	rjmp	.+216    	; 0x140c <xQueueSemaphoreTake+0x14a>
                }
                else if( xEntryTimeSet == pdFALSE )
    1334:	f1 10       	cpse	r15, r1
    1336:	06 c0       	rjmp	.+12     	; 0x1344 <xQueueSemaphoreTake+0x82>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    1338:	ce 01       	movw	r24, r28
    133a:	01 96       	adiw	r24, 0x01	; 1
    133c:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
    1340:	ff 24       	eor	r15, r15
    1342:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
    1348:	0e 94 b0 0c 	call	0x1960	; 0x1960 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	0f 92       	push	r0
    1352:	f8 01       	movw	r30, r16
    1354:	85 8d       	ldd	r24, Z+29	; 0x1d
    1356:	8f 3f       	cpi	r24, 0xFF	; 255
    1358:	09 f4       	brne	.+2      	; 0x135c <xQueueSemaphoreTake+0x9a>
    135a:	15 8e       	std	Z+29, r1	; 0x1d
    135c:	f8 01       	movw	r30, r16
    135e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1360:	8f 3f       	cpi	r24, 0xFF	; 255
    1362:	09 f4       	brne	.+2      	; 0x1366 <xQueueSemaphoreTake+0xa4>
    1364:	16 8e       	std	Z+30, r1	; 0x1e
    1366:	0f 90       	pop	r0
    1368:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    136a:	be 01       	movw	r22, r28
    136c:	6c 5f       	subi	r22, 0xFC	; 252
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	ce 01       	movw	r24, r28
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <xTaskCheckForTimeOut>
    1378:	81 11       	cpse	r24, r1
    137a:	2a c0       	rjmp	.+84     	; 0x13d0 <xQueueSemaphoreTake+0x10e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    137c:	c8 01       	movw	r24, r16
    137e:	0e 94 65 07 	call	0xeca	; 0xeca <prvIsQueueEmpty>
    1382:	88 23       	and	r24, r24
    1384:	f9 f0       	breq	.+62     	; 0x13c4 <xQueueSemaphoreTake+0x102>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1386:	f8 01       	movw	r30, r16
    1388:	80 81       	ld	r24, Z
    138a:	91 81       	ldd	r25, Z+1	; 0x01
    138c:	89 2b       	or	r24, r25
    138e:	51 f4       	brne	.+20     	; 0x13a4 <xQueueSemaphoreTake+0xe2>
                        {
                            taskENTER_CRITICAL();
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	0f 92       	push	r0
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
    1396:	84 81       	ldd	r24, Z+4	; 0x04
    1398:	95 81       	ldd	r25, Z+5	; 0x05
    139a:	0e 94 00 10 	call	0x2000	; 0x2000 <xTaskPriorityInherit>
    139e:	e8 2e       	mov	r14, r24
                            }
                            taskEXIT_CRITICAL();
    13a0:	0f 90       	pop	r0
    13a2:	0f be       	out	0x3f, r0	; 63
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    13a4:	6c 81       	ldd	r22, Y+4	; 0x04
    13a6:	7d 81       	ldd	r23, Y+5	; 0x05
    13a8:	c8 01       	movw	r24, r16
    13aa:	41 96       	adiw	r24, 0x11	; 17
    13ac:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    13b0:	c8 01       	movw	r24, r16
    13b2:	0e 94 df 07 	call	0xfbe	; 0xfbe <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    13b6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xTaskResumeAll>
    13ba:	81 11       	cpse	r24, r1
    13bc:	92 cf       	rjmp	.-220    	; 0x12e2 <xQueueSemaphoreTake+0x20>
                {
                    portYIELD_WITHIN_API();
    13be:	0e 94 9d 06 	call	0xd3a	; 0xd3a <vPortYield>
    13c2:	8f cf       	rjmp	.-226    	; 0x12e2 <xQueueSemaphoreTake+0x20>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
    13c4:	c8 01       	movw	r24, r16
    13c6:	0e 94 df 07 	call	0xfbe	; 0xfbe <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    13ca:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xTaskResumeAll>
    13ce:	89 cf       	rjmp	.-238    	; 0x12e2 <xQueueSemaphoreTake+0x20>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
    13d0:	c8 01       	movw	r24, r16
    13d2:	0e 94 df 07 	call	0xfbe	; 0xfbe <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    13d6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    13da:	c8 01       	movw	r24, r16
    13dc:	0e 94 65 07 	call	0xeca	; 0xeca <prvIsQueueEmpty>
    13e0:	88 23       	and	r24, r24
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <xQueueSemaphoreTake+0x124>
    13e4:	7e cf       	rjmp	.-260    	; 0x12e2 <xQueueSemaphoreTake+0x20>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
    13e6:	ee 20       	and	r14, r14
    13e8:	81 f0       	breq	.+32     	; 0x140a <xQueueSemaphoreTake+0x148>
                        {
                            taskENTER_CRITICAL();
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	0f 92       	push	r0
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    13f0:	c8 01       	movw	r24, r16
    13f2:	0e 94 55 07 	call	0xeaa	; 0xeaa <prvGetDisinheritPriorityAfterTimeout>
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
    13f6:	68 2f       	mov	r22, r24
    13f8:	f8 01       	movw	r30, r16
    13fa:	84 81       	ldd	r24, Z+4	; 0x04
    13fc:	95 81       	ldd	r25, Z+5	; 0x05
    13fe:	0e 94 f7 10 	call	0x21ee	; 0x21ee <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
    1402:	0f 90       	pop	r0
    1404:	0f be       	out	0x3f, r0	; 63
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	01 c0       	rjmp	.+2      	; 0x140c <xQueueSemaphoreTake+0x14a>
    140a:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	ff 90       	pop	r15
    1420:	ef 90       	pop	r14
    1422:	08 95       	ret

00001424 <prvResetNextTaskUnblockTime>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
    1424:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <pxDelayedTaskList>
    1428:	f0 91 dd 03 	lds	r31, 0x03DD	; 0x8003dd <pxDelayedTaskList+0x1>
    142c:	80 81       	ld	r24, Z
    142e:	81 11       	cpse	r24, r1
    1430:	07 c0       	rjmp	.+14     	; 0x1440 <prvResetNextTaskUnblockTime+0x1c>
    1432:	8f ef       	ldi	r24, 0xFF	; 255
    1434:	9f ef       	ldi	r25, 0xFF	; 255
    1436:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <xNextTaskUnblockTime+0x1>
    143a:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <xNextTaskUnblockTime>
    143e:	08 95       	ret
    1440:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <pxDelayedTaskList>
    1444:	f0 91 dd 03 	lds	r31, 0x03DD	; 0x8003dd <pxDelayedTaskList+0x1>
    1448:	05 80       	ldd	r0, Z+5	; 0x05
    144a:	f6 81       	ldd	r31, Z+6	; 0x06
    144c:	e0 2d       	mov	r30, r0
    144e:	80 81       	ld	r24, Z
    1450:	91 81       	ldd	r25, Z+1	; 0x01
    1452:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <xNextTaskUnblockTime+0x1>
    1456:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <xNextTaskUnblockTime>
    145a:	08 95       	ret

0000145c <prvDeleteTCB>:
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	ec 01       	movw	r28, r24
    1462:	8f 89       	ldd	r24, Y+23	; 0x17
    1464:	98 8d       	ldd	r25, Y+24	; 0x18
    1466:	0e 94 5c 05 	call	0xab8	; 0xab8 <vPortFree>
    146a:	ce 01       	movw	r24, r28
    146c:	0e 94 5c 05 	call	0xab8	; 0xab8 <vPortFree>
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	08 95       	ret

00001476 <prvInitialiseNewTask>:
    1476:	2f 92       	push	r2
    1478:	3f 92       	push	r3
    147a:	4f 92       	push	r4
    147c:	5f 92       	push	r5
    147e:	6f 92       	push	r6
    1480:	7f 92       	push	r7
    1482:	8f 92       	push	r8
    1484:	9f 92       	push	r9
    1486:	af 92       	push	r10
    1488:	bf 92       	push	r11
    148a:	cf 92       	push	r12
    148c:	df 92       	push	r13
    148e:	ef 92       	push	r14
    1490:	0f 93       	push	r16
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	1c 01       	movw	r2, r24
    149e:	4b 01       	movw	r8, r22
    14a0:	29 01       	movw	r4, r18
    14a2:	3a 01       	movw	r6, r20
    14a4:	a9 01       	movw	r20, r18
    14a6:	65 ea       	ldi	r22, 0xA5	; 165
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	d5 01       	movw	r26, r10
    14ac:	57 96       	adiw	r26, 0x17	; 23
    14ae:	8d 91       	ld	r24, X+
    14b0:	9c 91       	ld	r25, X
    14b2:	58 97       	sbiw	r26, 0x18	; 24
    14b4:	0e 94 99 11 	call	0x2332	; 0x2332 <memset>
    14b8:	f5 01       	movw	r30, r10
    14ba:	87 89       	ldd	r24, Z+23	; 0x17
    14bc:	90 8d       	ldd	r25, Z+24	; 0x18
    14be:	f1 e0       	ldi	r31, 0x01	; 1
    14c0:	4f 1a       	sub	r4, r31
    14c2:	51 08       	sbc	r5, r1
    14c4:	48 0e       	add	r4, r24
    14c6:	59 1e       	adc	r5, r25
    14c8:	81 14       	cp	r8, r1
    14ca:	91 04       	cpc	r9, r1
    14cc:	89 f4       	brne	.+34     	; 0x14f0 <prvInitialiseNewTask+0x7a>
    14ce:	17 c0       	rjmp	.+46     	; 0x14fe <prvInitialiseNewTask+0x88>
    14d0:	82 2f       	mov	r24, r18
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	f4 01       	movw	r30, r8
    14d6:	e8 0f       	add	r30, r24
    14d8:	f9 1f       	adc	r31, r25
    14da:	30 81       	ld	r19, Z
    14dc:	d5 01       	movw	r26, r10
    14de:	a8 0f       	add	r26, r24
    14e0:	b9 1f       	adc	r27, r25
    14e2:	59 96       	adiw	r26, 0x19	; 25
    14e4:	3c 93       	st	X, r19
    14e6:	80 81       	ld	r24, Z
    14e8:	88 23       	and	r24, r24
    14ea:	29 f0       	breq	.+10     	; 0x14f6 <prvInitialiseNewTask+0x80>
    14ec:	2f 5f       	subi	r18, 0xFF	; 255
    14ee:	01 c0       	rjmp	.+2      	; 0x14f2 <prvInitialiseNewTask+0x7c>
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	2a 30       	cpi	r18, 0x0A	; 10
    14f4:	68 f3       	brcs	.-38     	; 0x14d0 <prvInitialiseNewTask+0x5a>
    14f6:	d5 01       	movw	r26, r10
    14f8:	92 96       	adiw	r26, 0x22	; 34
    14fa:	1c 92       	st	X, r1
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <prvInitialiseNewTask+0x8c>
    14fe:	f5 01       	movw	r30, r10
    1500:	11 8e       	std	Z+25, r1	; 0x19
    1502:	f4 e0       	ldi	r31, 0x04	; 4
    1504:	fe 15       	cp	r31, r14
    1506:	18 f4       	brcc	.+6      	; 0x150e <prvInitialiseNewTask+0x98>
    1508:	68 94       	set
    150a:	ee 24       	eor	r14, r14
    150c:	e2 f8       	bld	r14, 2
    150e:	d5 01       	movw	r26, r10
    1510:	56 96       	adiw	r26, 0x16	; 22
    1512:	ec 92       	st	X, r14
    1514:	56 97       	sbiw	r26, 0x16	; 22
    1516:	95 96       	adiw	r26, 0x25	; 37
    1518:	ec 92       	st	X, r14
    151a:	95 97       	sbiw	r26, 0x25	; 37
    151c:	96 96       	adiw	r26, 0x26	; 38
    151e:	1c 92       	st	X, r1
    1520:	c5 01       	movw	r24, r10
    1522:	02 96       	adiw	r24, 0x02	; 2
    1524:	0e 94 9d 05 	call	0xb3a	; 0xb3a <vListInitialiseItem>
    1528:	c5 01       	movw	r24, r10
    152a:	0c 96       	adiw	r24, 0x0c	; 12
    152c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <vListInitialiseItem>
    1530:	f5 01       	movw	r30, r10
    1532:	b1 86       	std	Z+9, r11	; 0x09
    1534:	a0 86       	std	Z+8, r10	; 0x08
    1536:	85 e0       	ldi	r24, 0x05	; 5
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	8e 19       	sub	r24, r14
    153c:	91 09       	sbc	r25, r1
    153e:	95 87       	std	Z+13, r25	; 0x0d
    1540:	84 87       	std	Z+12, r24	; 0x0c
    1542:	b3 8a       	std	Z+19, r11	; 0x13
    1544:	a2 8a       	std	Z+18, r10	; 0x12
    1546:	84 e0       	ldi	r24, 0x04	; 4
    1548:	b7 96       	adiw	r30, 0x27	; 39
    154a:	df 01       	movw	r26, r30
    154c:	1d 92       	st	X+, r1
    154e:	8a 95       	dec	r24
    1550:	e9 f7       	brne	.-6      	; 0x154c <prvInitialiseNewTask+0xd6>
    1552:	f5 01       	movw	r30, r10
    1554:	13 a6       	std	Z+43, r1	; 0x2b
    1556:	a8 01       	movw	r20, r16
    1558:	b1 01       	movw	r22, r2
    155a:	c2 01       	movw	r24, r4
    155c:	0e 94 02 06 	call	0xc04	; 0xc04 <pxPortInitialiseStack>
    1560:	d5 01       	movw	r26, r10
    1562:	8d 93       	st	X+, r24
    1564:	9c 93       	st	X, r25
    1566:	c1 14       	cp	r12, r1
    1568:	d1 04       	cpc	r13, r1
    156a:	19 f0       	breq	.+6      	; 0x1572 <prvInitialiseNewTask+0xfc>
    156c:	f6 01       	movw	r30, r12
    156e:	b1 82       	std	Z+1, r11	; 0x01
    1570:	a0 82       	st	Z, r10
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	ef 90       	pop	r14
    157c:	df 90       	pop	r13
    157e:	cf 90       	pop	r12
    1580:	bf 90       	pop	r11
    1582:	af 90       	pop	r10
    1584:	9f 90       	pop	r9
    1586:	8f 90       	pop	r8
    1588:	7f 90       	pop	r7
    158a:	6f 90       	pop	r6
    158c:	5f 90       	pop	r5
    158e:	4f 90       	pop	r4
    1590:	3f 90       	pop	r3
    1592:	2f 90       	pop	r2
    1594:	08 95       	ret

00001596 <prvInitialiseTaskLists>:
    1596:	cf 93       	push	r28
    1598:	c0 e0       	ldi	r28, 0x00	; 0
    159a:	10 c0       	rjmp	.+32     	; 0x15bc <prvInitialiseTaskLists+0x26>
    159c:	8c 2f       	mov	r24, r28
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	9c 01       	movw	r18, r24
    15a2:	22 0f       	add	r18, r18
    15a4:	33 1f       	adc	r19, r19
    15a6:	22 0f       	add	r18, r18
    15a8:	33 1f       	adc	r19, r19
    15aa:	22 0f       	add	r18, r18
    15ac:	33 1f       	adc	r19, r19
    15ae:	82 0f       	add	r24, r18
    15b0:	93 1f       	adc	r25, r19
    15b2:	80 51       	subi	r24, 0x10	; 16
    15b4:	9c 4f       	sbci	r25, 0xFC	; 252
    15b6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vListInitialise>
    15ba:	cf 5f       	subi	r28, 0xFF	; 255
    15bc:	c5 30       	cpi	r28, 0x05	; 5
    15be:	70 f3       	brcs	.-36     	; 0x159c <prvInitialiseTaskLists+0x6>
    15c0:	87 ee       	ldi	r24, 0xE7	; 231
    15c2:	93 e0       	ldi	r25, 0x03	; 3
    15c4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vListInitialise>
    15c8:	8e ed       	ldi	r24, 0xDE	; 222
    15ca:	93 e0       	ldi	r25, 0x03	; 3
    15cc:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vListInitialise>
    15d0:	81 ed       	ldi	r24, 0xD1	; 209
    15d2:	93 e0       	ldi	r25, 0x03	; 3
    15d4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vListInitialise>
    15d8:	88 ec       	ldi	r24, 0xC8	; 200
    15da:	93 e0       	ldi	r25, 0x03	; 3
    15dc:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vListInitialise>
    15e0:	8e eb       	ldi	r24, 0xBE	; 190
    15e2:	93 e0       	ldi	r25, 0x03	; 3
    15e4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vListInitialise>
    15e8:	87 ee       	ldi	r24, 0xE7	; 231
    15ea:	93 e0       	ldi	r25, 0x03	; 3
    15ec:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <pxDelayedTaskList+0x1>
    15f0:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <pxDelayedTaskList>
    15f4:	8e ed       	ldi	r24, 0xDE	; 222
    15f6:	93 e0       	ldi	r25, 0x03	; 3
    15f8:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <pxOverflowDelayedTaskList+0x1>
    15fc:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <pxOverflowDelayedTaskList>
    1600:	cf 91       	pop	r28
    1602:	08 95       	ret

00001604 <prvAddNewTaskToReadyList>:
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	ec 01       	movw	r28, r24
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	0f 92       	push	r0
    1610:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <uxCurrentNumberOfTasks>
    1614:	8f 5f       	subi	r24, 0xFF	; 255
    1616:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <uxCurrentNumberOfTasks>
    161a:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <pxCurrentTCB>
    161e:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    1622:	89 2b       	or	r24, r25
    1624:	59 f4       	brne	.+22     	; 0x163c <prvAddNewTaskToReadyList+0x38>
    1626:	d0 93 1e 04 	sts	0x041E, r29	; 0x80041e <pxCurrentTCB+0x1>
    162a:	c0 93 1d 04 	sts	0x041D, r28	; 0x80041d <pxCurrentTCB>
    162e:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <uxCurrentNumberOfTasks>
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	99 f4       	brne	.+38     	; 0x165c <prvAddNewTaskToReadyList+0x58>
    1636:	0e 94 cb 0a 	call	0x1596	; 0x1596 <prvInitialiseTaskLists>
    163a:	10 c0       	rjmp	.+32     	; 0x165c <prvAddNewTaskToReadyList+0x58>
    163c:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <xSchedulerRunning>
    1640:	81 11       	cpse	r24, r1
    1642:	0c c0       	rjmp	.+24     	; 0x165c <prvAddNewTaskToReadyList+0x58>
    1644:	e0 91 1d 04 	lds	r30, 0x041D	; 0x80041d <pxCurrentTCB>
    1648:	f0 91 1e 04 	lds	r31, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    164c:	96 89       	ldd	r25, Z+22	; 0x16
    164e:	8e 89       	ldd	r24, Y+22	; 0x16
    1650:	89 17       	cp	r24, r25
    1652:	20 f0       	brcs	.+8      	; 0x165c <prvAddNewTaskToReadyList+0x58>
    1654:	d0 93 1e 04 	sts	0x041E, r29	; 0x80041e <pxCurrentTCB+0x1>
    1658:	c0 93 1d 04 	sts	0x041D, r28	; 0x80041d <pxCurrentTCB>
    165c:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <uxTaskNumber>
    1660:	8f 5f       	subi	r24, 0xFF	; 255
    1662:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <uxTaskNumber>
    1666:	8b a3       	std	Y+35, r24	; 0x23
    1668:	8e 89       	ldd	r24, Y+22	; 0x16
    166a:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <uxTopReadyPriority>
    166e:	98 17       	cp	r25, r24
    1670:	10 f4       	brcc	.+4      	; 0x1676 <prvAddNewTaskToReadyList+0x72>
    1672:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <uxTopReadyPriority>
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	fc 01       	movw	r30, r24
    167a:	ee 0f       	add	r30, r30
    167c:	ff 1f       	adc	r31, r31
    167e:	ee 0f       	add	r30, r30
    1680:	ff 1f       	adc	r31, r31
    1682:	ee 0f       	add	r30, r30
    1684:	ff 1f       	adc	r31, r31
    1686:	8e 0f       	add	r24, r30
    1688:	9f 1f       	adc	r25, r31
    168a:	fc 01       	movw	r30, r24
    168c:	e0 51       	subi	r30, 0x10	; 16
    168e:	fc 4f       	sbci	r31, 0xFC	; 252
    1690:	01 80       	ldd	r0, Z+1	; 0x01
    1692:	f2 81       	ldd	r31, Z+2	; 0x02
    1694:	e0 2d       	mov	r30, r0
    1696:	fd 83       	std	Y+5, r31	; 0x05
    1698:	ec 83       	std	Y+4, r30	; 0x04
    169a:	84 81       	ldd	r24, Z+4	; 0x04
    169c:	95 81       	ldd	r25, Z+5	; 0x05
    169e:	9f 83       	std	Y+7, r25	; 0x07
    16a0:	8e 83       	std	Y+6, r24	; 0x06
    16a2:	a4 81       	ldd	r26, Z+4	; 0x04
    16a4:	b5 81       	ldd	r27, Z+5	; 0x05
    16a6:	ce 01       	movw	r24, r28
    16a8:	02 96       	adiw	r24, 0x02	; 2
    16aa:	13 96       	adiw	r26, 0x03	; 3
    16ac:	9c 93       	st	X, r25
    16ae:	8e 93       	st	-X, r24
    16b0:	12 97       	sbiw	r26, 0x02	; 2
    16b2:	95 83       	std	Z+5, r25	; 0x05
    16b4:	84 83       	std	Z+4, r24	; 0x04
    16b6:	ee 89       	ldd	r30, Y+22	; 0x16
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	cf 01       	movw	r24, r30
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	e8 0f       	add	r30, r24
    16ca:	f9 1f       	adc	r31, r25
    16cc:	e0 51       	subi	r30, 0x10	; 16
    16ce:	fc 4f       	sbci	r31, 0xFC	; 252
    16d0:	fb 87       	std	Y+11, r31	; 0x0b
    16d2:	ea 87       	std	Y+10, r30	; 0x0a
    16d4:	80 81       	ld	r24, Z
    16d6:	8f 5f       	subi	r24, 0xFF	; 255
    16d8:	80 83       	st	Z, r24
    16da:	0f 90       	pop	r0
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <xSchedulerRunning>
    16e2:	88 23       	and	r24, r24
    16e4:	51 f0       	breq	.+20     	; 0x16fa <prvAddNewTaskToReadyList+0xf6>
    16e6:	e0 91 1d 04 	lds	r30, 0x041D	; 0x80041d <pxCurrentTCB>
    16ea:	f0 91 1e 04 	lds	r31, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    16ee:	96 89       	ldd	r25, Z+22	; 0x16
    16f0:	8e 89       	ldd	r24, Y+22	; 0x16
    16f2:	98 17       	cp	r25, r24
    16f4:	10 f4       	brcc	.+4      	; 0x16fa <prvAddNewTaskToReadyList+0xf6>
    16f6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <vPortYield>
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	08 95       	ret

00001700 <prvCheckTasksWaitingTermination>:
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	1c c0       	rjmp	.+56     	; 0x173e <prvCheckTasksWaitingTermination+0x3e>
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	0f 92       	push	r0
    170c:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <xTasksWaitingTermination+0x5>
    1710:	f0 91 ce 03 	lds	r31, 0x03CE	; 0x8003ce <xTasksWaitingTermination+0x6>
    1714:	c6 81       	ldd	r28, Z+6	; 0x06
    1716:	d7 81       	ldd	r29, Z+7	; 0x07
    1718:	ce 01       	movw	r24, r28
    171a:	02 96       	adiw	r24, 0x02	; 2
    171c:	0e 94 d2 05 	call	0xba4	; 0xba4 <uxListRemove>
    1720:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <uxCurrentNumberOfTasks>
    1724:	81 50       	subi	r24, 0x01	; 1
    1726:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <uxCurrentNumberOfTasks>
    172a:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <uxDeletedTasksWaitingCleanUp>
    172e:	81 50       	subi	r24, 0x01	; 1
    1730:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <uxDeletedTasksWaitingCleanUp>
    1734:	0f 90       	pop	r0
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	ce 01       	movw	r24, r28
    173a:	0e 94 2e 0a 	call	0x145c	; 0x145c <prvDeleteTCB>
    173e:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <uxDeletedTasksWaitingCleanUp>
    1742:	81 11       	cpse	r24, r1
    1744:	e0 cf       	rjmp	.-64     	; 0x1706 <prvCheckTasksWaitingTermination+0x6>
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	08 95       	ret

0000174c <prvIdleTask>:
    174c:	0e 94 80 0b 	call	0x1700	; 0x1700 <prvCheckTasksWaitingTermination>
    1750:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <pxReadyTasksLists>
    1754:	82 30       	cpi	r24, 0x02	; 2
    1756:	d0 f3       	brcs	.-12     	; 0x174c <prvIdleTask>
    1758:	0e 94 9d 06 	call	0xd3a	; 0xd3a <vPortYield>
    175c:	f7 cf       	rjmp	.-18     	; 0x174c <prvIdleTask>

0000175e <prvAddCurrentTaskToDelayedList>:
    175e:	ff 92       	push	r15
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	ec 01       	movw	r28, r24
    176a:	f6 2e       	mov	r15, r22
    176c:	00 91 bb 03 	lds	r16, 0x03BB	; 0x8003bb <xTickCount>
    1770:	10 91 bc 03 	lds	r17, 0x03BC	; 0x8003bc <xTickCount+0x1>
    1774:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <pxCurrentTCB>
    1778:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    177c:	02 96       	adiw	r24, 0x02	; 2
    177e:	0e 94 d2 05 	call	0xba4	; 0xba4 <uxListRemove>
    1782:	cf 3f       	cpi	r28, 0xFF	; 255
    1784:	8f ef       	ldi	r24, 0xFF	; 255
    1786:	d8 07       	cpc	r29, r24
    1788:	b1 f5       	brne	.+108    	; 0x17f6 <prvAddCurrentTaskToDelayedList+0x98>
    178a:	ff 20       	and	r15, r15
    178c:	a1 f1       	breq	.+104    	; 0x17f6 <prvAddCurrentTaskToDelayedList+0x98>
    178e:	ee eb       	ldi	r30, 0xBE	; 190
    1790:	f3 e0       	ldi	r31, 0x03	; 3
    1792:	a1 81       	ldd	r26, Z+1	; 0x01
    1794:	b2 81       	ldd	r27, Z+2	; 0x02
    1796:	c0 91 1d 04 	lds	r28, 0x041D	; 0x80041d <pxCurrentTCB>
    179a:	d0 91 1e 04 	lds	r29, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    179e:	bd 83       	std	Y+5, r27	; 0x05
    17a0:	ac 83       	std	Y+4, r26	; 0x04
    17a2:	c0 91 1d 04 	lds	r28, 0x041D	; 0x80041d <pxCurrentTCB>
    17a6:	d0 91 1e 04 	lds	r29, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    17aa:	14 96       	adiw	r26, 0x04	; 4
    17ac:	8d 91       	ld	r24, X+
    17ae:	9c 91       	ld	r25, X
    17b0:	15 97       	sbiw	r26, 0x05	; 5
    17b2:	9f 83       	std	Y+7, r25	; 0x07
    17b4:	8e 83       	std	Y+6, r24	; 0x06
    17b6:	14 96       	adiw	r26, 0x04	; 4
    17b8:	cd 91       	ld	r28, X+
    17ba:	dc 91       	ld	r29, X
    17bc:	15 97       	sbiw	r26, 0x05	; 5
    17be:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <pxCurrentTCB>
    17c2:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    17c6:	02 96       	adiw	r24, 0x02	; 2
    17c8:	9b 83       	std	Y+3, r25	; 0x03
    17ca:	8a 83       	std	Y+2, r24	; 0x02
    17cc:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <pxCurrentTCB>
    17d0:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    17d4:	02 96       	adiw	r24, 0x02	; 2
    17d6:	15 96       	adiw	r26, 0x05	; 5
    17d8:	9c 93       	st	X, r25
    17da:	8e 93       	st	-X, r24
    17dc:	14 97       	sbiw	r26, 0x04	; 4
    17de:	a0 91 1d 04 	lds	r26, 0x041D	; 0x80041d <pxCurrentTCB>
    17e2:	b0 91 1e 04 	lds	r27, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    17e6:	1b 96       	adiw	r26, 0x0b	; 11
    17e8:	fc 93       	st	X, r31
    17ea:	ee 93       	st	-X, r30
    17ec:	1a 97       	sbiw	r26, 0x0a	; 10
    17ee:	80 81       	ld	r24, Z
    17f0:	8f 5f       	subi	r24, 0xFF	; 255
    17f2:	80 83       	st	Z, r24
    17f4:	2f c0       	rjmp	.+94     	; 0x1854 <prvAddCurrentTaskToDelayedList+0xf6>
    17f6:	c0 0f       	add	r28, r16
    17f8:	d1 1f       	adc	r29, r17
    17fa:	e0 91 1d 04 	lds	r30, 0x041D	; 0x80041d <pxCurrentTCB>
    17fe:	f0 91 1e 04 	lds	r31, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    1802:	d3 83       	std	Z+3, r29	; 0x03
    1804:	c2 83       	std	Z+2, r28	; 0x02
    1806:	c0 17       	cp	r28, r16
    1808:	d1 07       	cpc	r29, r17
    180a:	68 f4       	brcc	.+26     	; 0x1826 <prvAddCurrentTaskToDelayedList+0xc8>
    180c:	60 91 1d 04 	lds	r22, 0x041D	; 0x80041d <pxCurrentTCB>
    1810:	70 91 1e 04 	lds	r23, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    1814:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <pxOverflowDelayedTaskList>
    1818:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <pxOverflowDelayedTaskList+0x1>
    181c:	6e 5f       	subi	r22, 0xFE	; 254
    181e:	7f 4f       	sbci	r23, 0xFF	; 255
    1820:	0e 94 a1 05 	call	0xb42	; 0xb42 <vListInsert>
    1824:	17 c0       	rjmp	.+46     	; 0x1854 <prvAddCurrentTaskToDelayedList+0xf6>
    1826:	60 91 1d 04 	lds	r22, 0x041D	; 0x80041d <pxCurrentTCB>
    182a:	70 91 1e 04 	lds	r23, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    182e:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <pxDelayedTaskList>
    1832:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <pxDelayedTaskList+0x1>
    1836:	6e 5f       	subi	r22, 0xFE	; 254
    1838:	7f 4f       	sbci	r23, 0xFF	; 255
    183a:	0e 94 a1 05 	call	0xb42	; 0xb42 <vListInsert>
    183e:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <xNextTaskUnblockTime>
    1842:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <xNextTaskUnblockTime+0x1>
    1846:	c8 17       	cp	r28, r24
    1848:	d9 07       	cpc	r29, r25
    184a:	20 f4       	brcc	.+8      	; 0x1854 <prvAddCurrentTaskToDelayedList+0xf6>
    184c:	d0 93 b3 03 	sts	0x03B3, r29	; 0x8003b3 <xNextTaskUnblockTime+0x1>
    1850:	c0 93 b2 03 	sts	0x03B2, r28	; 0x8003b2 <xNextTaskUnblockTime>
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
    185c:	ff 90       	pop	r15
    185e:	08 95       	ret

00001860 <xTaskCreate>:
    1860:	2f 92       	push	r2
    1862:	3f 92       	push	r3
    1864:	4f 92       	push	r4
    1866:	5f 92       	push	r5
    1868:	6f 92       	push	r6
    186a:	7f 92       	push	r7
    186c:	8f 92       	push	r8
    186e:	9f 92       	push	r9
    1870:	af 92       	push	r10
    1872:	bf 92       	push	r11
    1874:	cf 92       	push	r12
    1876:	df 92       	push	r13
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	3c 01       	movw	r6, r24
    1886:	1b 01       	movw	r2, r22
    1888:	5a 01       	movw	r10, r20
    188a:	29 01       	movw	r4, r18
    188c:	ca 01       	movw	r24, r20
    188e:	0e 94 c7 04 	call	0x98e	; 0x98e <pvPortMalloc>
    1892:	6c 01       	movw	r12, r24
    1894:	89 2b       	or	r24, r25
    1896:	71 f0       	breq	.+28     	; 0x18b4 <xTaskCreate+0x54>
    1898:	8c e2       	ldi	r24, 0x2C	; 44
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	0e 94 c7 04 	call	0x98e	; 0x98e <pvPortMalloc>
    18a0:	ec 01       	movw	r28, r24
    18a2:	89 2b       	or	r24, r25
    18a4:	19 f0       	breq	.+6      	; 0x18ac <xTaskCreate+0x4c>
    18a6:	d8 8e       	std	Y+24, r13	; 0x18
    18a8:	cf 8a       	std	Y+23, r12	; 0x17
    18aa:	06 c0       	rjmp	.+12     	; 0x18b8 <xTaskCreate+0x58>
    18ac:	c6 01       	movw	r24, r12
    18ae:	0e 94 5c 05 	call	0xab8	; 0xab8 <vPortFree>
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <xTaskCreate+0x58>
    18b4:	c0 e0       	ldi	r28, 0x00	; 0
    18b6:	d0 e0       	ldi	r29, 0x00	; 0
    18b8:	20 97       	sbiw	r28, 0x00	; 0
    18ba:	91 f0       	breq	.+36     	; 0x18e0 <xTaskCreate+0x80>
    18bc:	95 01       	movw	r18, r10
    18be:	40 e0       	ldi	r20, 0x00	; 0
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	81 2c       	mov	r8, r1
    18c4:	91 2c       	mov	r9, r1
    18c6:	5e 01       	movw	r10, r28
    18c8:	67 01       	movw	r12, r14
    18ca:	e0 2e       	mov	r14, r16
    18cc:	82 01       	movw	r16, r4
    18ce:	b1 01       	movw	r22, r2
    18d0:	c3 01       	movw	r24, r6
    18d2:	0e 94 3b 0a 	call	0x1476	; 0x1476 <prvInitialiseNewTask>
    18d6:	ce 01       	movw	r24, r28
    18d8:	0e 94 02 0b 	call	0x1604	; 0x1604 <prvAddNewTaskToReadyList>
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	01 c0       	rjmp	.+2      	; 0x18e2 <xTaskCreate+0x82>
    18e0:	8f ef       	ldi	r24, 0xFF	; 255
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	df 90       	pop	r13
    18f0:	cf 90       	pop	r12
    18f2:	bf 90       	pop	r11
    18f4:	af 90       	pop	r10
    18f6:	9f 90       	pop	r9
    18f8:	8f 90       	pop	r8
    18fa:	7f 90       	pop	r7
    18fc:	6f 90       	pop	r6
    18fe:	5f 90       	pop	r5
    1900:	4f 90       	pop	r4
    1902:	3f 90       	pop	r3
    1904:	2f 90       	pop	r2
    1906:	08 95       	ret

00001908 <vTaskStartScheduler>:
    1908:	ef 92       	push	r14
    190a:	ff 92       	push	r15
    190c:	0f 93       	push	r16
    190e:	0f 2e       	mov	r0, r31
    1910:	f0 eb       	ldi	r31, 0xB0	; 176
    1912:	ef 2e       	mov	r14, r31
    1914:	f3 e0       	ldi	r31, 0x03	; 3
    1916:	ff 2e       	mov	r15, r31
    1918:	f0 2d       	mov	r31, r0
    191a:	00 e0       	ldi	r16, 0x00	; 0
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	48 ec       	ldi	r20, 0xC8	; 200
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	6e e6       	ldi	r22, 0x6E	; 110
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	86 ea       	ldi	r24, 0xA6	; 166
    192a:	9b e0       	ldi	r25, 0x0B	; 11
    192c:	0e 94 30 0c 	call	0x1860	; 0x1860 <xTaskCreate>
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	81 f4       	brne	.+32     	; 0x1954 <vTaskStartScheduler+0x4c>
    1934:	f8 94       	cli
    1936:	8f ef       	ldi	r24, 0xFF	; 255
    1938:	9f ef       	ldi	r25, 0xFF	; 255
    193a:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <xNextTaskUnblockTime+0x1>
    193e:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <xNextTaskUnblockTime>
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <xSchedulerRunning>
    1948:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <xTickCount+0x1>
    194c:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <xTickCount>
    1950:	0e 94 6e 06 	call	0xcdc	; 0xcdc <xPortStartScheduler>
    1954:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <uxTopUsedPriority>
    1958:	0f 91       	pop	r16
    195a:	ff 90       	pop	r15
    195c:	ef 90       	pop	r14
    195e:	08 95       	ret

00001960 <vTaskSuspendAll>:
    1960:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <uxSchedulerSuspended>
    1964:	8f 5f       	subi	r24, 0xFF	; 255
    1966:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <uxSchedulerSuspended>
    196a:	08 95       	ret

0000196c <xTaskIncrementTick>:
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <uxSchedulerSuspended>
    1978:	81 11       	cpse	r24, r1
    197a:	eb c0       	rjmp	.+470    	; 0x1b52 <xTaskIncrementTick+0x1e6>
    197c:	c0 91 bb 03 	lds	r28, 0x03BB	; 0x8003bb <xTickCount>
    1980:	d0 91 bc 03 	lds	r29, 0x03BC	; 0x8003bc <xTickCount+0x1>
    1984:	8e 01       	movw	r16, r28
    1986:	0f 5f       	subi	r16, 0xFF	; 255
    1988:	1f 4f       	sbci	r17, 0xFF	; 255
    198a:	10 93 bc 03 	sts	0x03BC, r17	; 0x8003bc <xTickCount+0x1>
    198e:	00 93 bb 03 	sts	0x03BB, r16	; 0x8003bb <xTickCount>
    1992:	01 15       	cp	r16, r1
    1994:	11 05       	cpc	r17, r1
    1996:	b9 f4       	brne	.+46     	; 0x19c6 <xTaskIncrementTick+0x5a>
    1998:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <pxDelayedTaskList>
    199c:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <pxDelayedTaskList+0x1>
    19a0:	20 91 da 03 	lds	r18, 0x03DA	; 0x8003da <pxOverflowDelayedTaskList>
    19a4:	30 91 db 03 	lds	r19, 0x03DB	; 0x8003db <pxOverflowDelayedTaskList+0x1>
    19a8:	30 93 dd 03 	sts	0x03DD, r19	; 0x8003dd <pxDelayedTaskList+0x1>
    19ac:	20 93 dc 03 	sts	0x03DC, r18	; 0x8003dc <pxDelayedTaskList>
    19b0:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <pxOverflowDelayedTaskList+0x1>
    19b4:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <pxOverflowDelayedTaskList>
    19b8:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <xNumOfOverflows>
    19bc:	8f 5f       	subi	r24, 0xFF	; 255
    19be:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <xNumOfOverflows>
    19c2:	0e 94 12 0a 	call	0x1424	; 0x1424 <prvResetNextTaskUnblockTime>
    19c6:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <xNextTaskUnblockTime>
    19ca:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <xNextTaskUnblockTime+0x1>
    19ce:	08 17       	cp	r16, r24
    19d0:	19 07       	cpc	r17, r25
    19d2:	20 f4       	brcc	.+8      	; 0x19dc <xTaskIncrementTick+0x70>
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	b8 c0       	rjmp	.+368    	; 0x1b48 <xTaskIncrementTick+0x1dc>
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	01 c0       	rjmp	.+2      	; 0x19de <xTaskIncrementTick+0x72>
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <pxDelayedTaskList>
    19e2:	f0 91 dd 03 	lds	r31, 0x03DD	; 0x8003dd <pxDelayedTaskList+0x1>
    19e6:	90 81       	ld	r25, Z
    19e8:	91 11       	cpse	r25, r1
    19ea:	07 c0       	rjmp	.+14     	; 0x19fa <xTaskIncrementTick+0x8e>
    19ec:	2f ef       	ldi	r18, 0xFF	; 255
    19ee:	3f ef       	ldi	r19, 0xFF	; 255
    19f0:	30 93 b3 03 	sts	0x03B3, r19	; 0x8003b3 <xNextTaskUnblockTime+0x1>
    19f4:	20 93 b2 03 	sts	0x03B2, r18	; 0x8003b2 <xNextTaskUnblockTime>
    19f8:	a7 c0       	rjmp	.+334    	; 0x1b48 <xTaskIncrementTick+0x1dc>
    19fa:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <pxDelayedTaskList>
    19fe:	f0 91 dd 03 	lds	r31, 0x03DD	; 0x8003dd <pxDelayedTaskList+0x1>
    1a02:	05 80       	ldd	r0, Z+5	; 0x05
    1a04:	f6 81       	ldd	r31, Z+6	; 0x06
    1a06:	e0 2d       	mov	r30, r0
    1a08:	06 80       	ldd	r0, Z+6	; 0x06
    1a0a:	f7 81       	ldd	r31, Z+7	; 0x07
    1a0c:	e0 2d       	mov	r30, r0
    1a0e:	22 81       	ldd	r18, Z+2	; 0x02
    1a10:	33 81       	ldd	r19, Z+3	; 0x03
    1a12:	02 17       	cp	r16, r18
    1a14:	13 07       	cpc	r17, r19
    1a16:	28 f4       	brcc	.+10     	; 0x1a22 <xTaskIncrementTick+0xb6>
    1a18:	30 93 b3 03 	sts	0x03B3, r19	; 0x8003b3 <xNextTaskUnblockTime+0x1>
    1a1c:	20 93 b2 03 	sts	0x03B2, r18	; 0x8003b2 <xNextTaskUnblockTime>
    1a20:	93 c0       	rjmp	.+294    	; 0x1b48 <xTaskIncrementTick+0x1dc>
    1a22:	a2 85       	ldd	r26, Z+10	; 0x0a
    1a24:	b3 85       	ldd	r27, Z+11	; 0x0b
    1a26:	24 81       	ldd	r18, Z+4	; 0x04
    1a28:	35 81       	ldd	r19, Z+5	; 0x05
    1a2a:	46 81       	ldd	r20, Z+6	; 0x06
    1a2c:	57 81       	ldd	r21, Z+7	; 0x07
    1a2e:	e9 01       	movw	r28, r18
    1a30:	5d 83       	std	Y+5, r21	; 0x05
    1a32:	4c 83       	std	Y+4, r20	; 0x04
    1a34:	26 81       	ldd	r18, Z+6	; 0x06
    1a36:	37 81       	ldd	r19, Z+7	; 0x07
    1a38:	44 81       	ldd	r20, Z+4	; 0x04
    1a3a:	55 81       	ldd	r21, Z+5	; 0x05
    1a3c:	e9 01       	movw	r28, r18
    1a3e:	5b 83       	std	Y+3, r21	; 0x03
    1a40:	4a 83       	std	Y+2, r20	; 0x02
    1a42:	11 96       	adiw	r26, 0x01	; 1
    1a44:	2d 91       	ld	r18, X+
    1a46:	3c 91       	ld	r19, X
    1a48:	12 97       	sbiw	r26, 0x02	; 2
    1a4a:	af 01       	movw	r20, r30
    1a4c:	4e 5f       	subi	r20, 0xFE	; 254
    1a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a50:	24 17       	cp	r18, r20
    1a52:	35 07       	cpc	r19, r21
    1a54:	31 f4       	brne	.+12     	; 0x1a62 <xTaskIncrementTick+0xf6>
    1a56:	26 81       	ldd	r18, Z+6	; 0x06
    1a58:	37 81       	ldd	r19, Z+7	; 0x07
    1a5a:	12 96       	adiw	r26, 0x02	; 2
    1a5c:	3c 93       	st	X, r19
    1a5e:	2e 93       	st	-X, r18
    1a60:	11 97       	sbiw	r26, 0x01	; 1
    1a62:	13 86       	std	Z+11, r1	; 0x0b
    1a64:	12 86       	std	Z+10, r1	; 0x0a
    1a66:	9c 91       	ld	r25, X
    1a68:	91 50       	subi	r25, 0x01	; 1
    1a6a:	9c 93       	st	X, r25
    1a6c:	a4 89       	ldd	r26, Z+20	; 0x14
    1a6e:	b5 89       	ldd	r27, Z+21	; 0x15
    1a70:	10 97       	sbiw	r26, 0x00	; 0
    1a72:	19 f1       	breq	.+70     	; 0x1aba <xTaskIncrementTick+0x14e>
    1a74:	26 85       	ldd	r18, Z+14	; 0x0e
    1a76:	37 85       	ldd	r19, Z+15	; 0x0f
    1a78:	60 89       	ldd	r22, Z+16	; 0x10
    1a7a:	71 89       	ldd	r23, Z+17	; 0x11
    1a7c:	e9 01       	movw	r28, r18
    1a7e:	7d 83       	std	Y+5, r23	; 0x05
    1a80:	6c 83       	std	Y+4, r22	; 0x04
    1a82:	20 89       	ldd	r18, Z+16	; 0x10
    1a84:	31 89       	ldd	r19, Z+17	; 0x11
    1a86:	66 85       	ldd	r22, Z+14	; 0x0e
    1a88:	77 85       	ldd	r23, Z+15	; 0x0f
    1a8a:	e9 01       	movw	r28, r18
    1a8c:	7b 83       	std	Y+3, r23	; 0x03
    1a8e:	6a 83       	std	Y+2, r22	; 0x02
    1a90:	11 96       	adiw	r26, 0x01	; 1
    1a92:	6d 91       	ld	r22, X+
    1a94:	7c 91       	ld	r23, X
    1a96:	12 97       	sbiw	r26, 0x02	; 2
    1a98:	9f 01       	movw	r18, r30
    1a9a:	24 5f       	subi	r18, 0xF4	; 244
    1a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9e:	62 17       	cp	r22, r18
    1aa0:	73 07       	cpc	r23, r19
    1aa2:	31 f4       	brne	.+12     	; 0x1ab0 <xTaskIncrementTick+0x144>
    1aa4:	20 89       	ldd	r18, Z+16	; 0x10
    1aa6:	31 89       	ldd	r19, Z+17	; 0x11
    1aa8:	12 96       	adiw	r26, 0x02	; 2
    1aaa:	3c 93       	st	X, r19
    1aac:	2e 93       	st	-X, r18
    1aae:	11 97       	sbiw	r26, 0x01	; 1
    1ab0:	15 8a       	std	Z+21, r1	; 0x15
    1ab2:	14 8a       	std	Z+20, r1	; 0x14
    1ab4:	9c 91       	ld	r25, X
    1ab6:	91 50       	subi	r25, 0x01	; 1
    1ab8:	9c 93       	st	X, r25
    1aba:	26 89       	ldd	r18, Z+22	; 0x16
    1abc:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <uxTopReadyPriority>
    1ac0:	92 17       	cp	r25, r18
    1ac2:	10 f4       	brcc	.+4      	; 0x1ac8 <xTaskIncrementTick+0x15c>
    1ac4:	20 93 ba 03 	sts	0x03BA, r18	; 0x8003ba <uxTopReadyPriority>
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	d9 01       	movw	r26, r18
    1acc:	aa 0f       	add	r26, r26
    1ace:	bb 1f       	adc	r27, r27
    1ad0:	aa 0f       	add	r26, r26
    1ad2:	bb 1f       	adc	r27, r27
    1ad4:	aa 0f       	add	r26, r26
    1ad6:	bb 1f       	adc	r27, r27
    1ad8:	2a 0f       	add	r18, r26
    1ada:	3b 1f       	adc	r19, r27
    1adc:	d9 01       	movw	r26, r18
    1ade:	a0 51       	subi	r26, 0x10	; 16
    1ae0:	bc 4f       	sbci	r27, 0xFC	; 252
    1ae2:	11 96       	adiw	r26, 0x01	; 1
    1ae4:	0d 90       	ld	r0, X+
    1ae6:	bc 91       	ld	r27, X
    1ae8:	a0 2d       	mov	r26, r0
    1aea:	b5 83       	std	Z+5, r27	; 0x05
    1aec:	a4 83       	std	Z+4, r26	; 0x04
    1aee:	14 96       	adiw	r26, 0x04	; 4
    1af0:	2d 91       	ld	r18, X+
    1af2:	3c 91       	ld	r19, X
    1af4:	15 97       	sbiw	r26, 0x05	; 5
    1af6:	37 83       	std	Z+7, r19	; 0x07
    1af8:	26 83       	std	Z+6, r18	; 0x06
    1afa:	14 96       	adiw	r26, 0x04	; 4
    1afc:	2d 91       	ld	r18, X+
    1afe:	3c 91       	ld	r19, X
    1b00:	15 97       	sbiw	r26, 0x05	; 5
    1b02:	e9 01       	movw	r28, r18
    1b04:	5b 83       	std	Y+3, r21	; 0x03
    1b06:	4a 83       	std	Y+2, r20	; 0x02
    1b08:	15 96       	adiw	r26, 0x05	; 5
    1b0a:	5c 93       	st	X, r21
    1b0c:	4e 93       	st	-X, r20
    1b0e:	14 97       	sbiw	r26, 0x04	; 4
    1b10:	a6 89       	ldd	r26, Z+22	; 0x16
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	9d 01       	movw	r18, r26
    1b16:	22 0f       	add	r18, r18
    1b18:	33 1f       	adc	r19, r19
    1b1a:	22 0f       	add	r18, r18
    1b1c:	33 1f       	adc	r19, r19
    1b1e:	22 0f       	add	r18, r18
    1b20:	33 1f       	adc	r19, r19
    1b22:	a2 0f       	add	r26, r18
    1b24:	b3 1f       	adc	r27, r19
    1b26:	a0 51       	subi	r26, 0x10	; 16
    1b28:	bc 4f       	sbci	r27, 0xFC	; 252
    1b2a:	b3 87       	std	Z+11, r27	; 0x0b
    1b2c:	a2 87       	std	Z+10, r26	; 0x0a
    1b2e:	9c 91       	ld	r25, X
    1b30:	9f 5f       	subi	r25, 0xFF	; 255
    1b32:	9c 93       	st	X, r25
    1b34:	26 89       	ldd	r18, Z+22	; 0x16
    1b36:	e0 91 1d 04 	lds	r30, 0x041D	; 0x80041d <pxCurrentTCB>
    1b3a:	f0 91 1e 04 	lds	r31, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    1b3e:	96 89       	ldd	r25, Z+22	; 0x16
    1b40:	29 17       	cp	r18, r25
    1b42:	08 f0       	brcs	.+2      	; 0x1b46 <xTaskIncrementTick+0x1da>
    1b44:	49 cf       	rjmp	.-366    	; 0x19d8 <xTaskIncrementTick+0x6c>
    1b46:	4b cf       	rjmp	.-362    	; 0x19de <xTaskIncrementTick+0x72>
    1b48:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <xYieldPending>
    1b4c:	91 11       	cpse	r25, r1
    1b4e:	0c c0       	rjmp	.+24     	; 0x1b68 <xTaskIncrementTick+0x1fc>
    1b50:	0c c0       	rjmp	.+24     	; 0x1b6a <xTaskIncrementTick+0x1fe>
    1b52:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <xPendedTicks>
    1b56:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <xPendedTicks+0x1>
    1b5a:	01 96       	adiw	r24, 0x01	; 1
    1b5c:	90 93 b8 03 	sts	0x03B8, r25	; 0x8003b8 <xPendedTicks+0x1>
    1b60:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <xPendedTicks>
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <xTaskIncrementTick+0x1fe>
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	1f 91       	pop	r17
    1b70:	0f 91       	pop	r16
    1b72:	08 95       	ret

00001b74 <xTaskResumeAll>:
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	0f 92       	push	r0
    1b7e:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <uxSchedulerSuspended>
    1b82:	81 50       	subi	r24, 0x01	; 1
    1b84:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <uxSchedulerSuspended>
    1b88:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <uxSchedulerSuspended>
    1b8c:	81 11       	cpse	r24, r1
    1b8e:	bf c0       	rjmp	.+382    	; 0x1d0e <xTaskResumeAll+0x19a>
    1b90:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <uxCurrentNumberOfTasks>
    1b94:	81 11       	cpse	r24, r1
    1b96:	96 c0       	rjmp	.+300    	; 0x1cc4 <xTaskResumeAll+0x150>
    1b98:	bd c0       	rjmp	.+378    	; 0x1d14 <xTaskResumeAll+0x1a0>
    1b9a:	e0 91 d6 03 	lds	r30, 0x03D6	; 0x8003d6 <xPendingReadyList+0x5>
    1b9e:	f0 91 d7 03 	lds	r31, 0x03D7	; 0x8003d7 <xPendingReadyList+0x6>
    1ba2:	06 80       	ldd	r0, Z+6	; 0x06
    1ba4:	f7 81       	ldd	r31, Z+7	; 0x07
    1ba6:	e0 2d       	mov	r30, r0
    1ba8:	a4 89       	ldd	r26, Z+20	; 0x14
    1baa:	b5 89       	ldd	r27, Z+21	; 0x15
    1bac:	c6 85       	ldd	r28, Z+14	; 0x0e
    1bae:	d7 85       	ldd	r29, Z+15	; 0x0f
    1bb0:	80 89       	ldd	r24, Z+16	; 0x10
    1bb2:	91 89       	ldd	r25, Z+17	; 0x11
    1bb4:	9d 83       	std	Y+5, r25	; 0x05
    1bb6:	8c 83       	std	Y+4, r24	; 0x04
    1bb8:	c0 89       	ldd	r28, Z+16	; 0x10
    1bba:	d1 89       	ldd	r29, Z+17	; 0x11
    1bbc:	86 85       	ldd	r24, Z+14	; 0x0e
    1bbe:	97 85       	ldd	r25, Z+15	; 0x0f
    1bc0:	9b 83       	std	Y+3, r25	; 0x03
    1bc2:	8a 83       	std	Y+2, r24	; 0x02
    1bc4:	11 96       	adiw	r26, 0x01	; 1
    1bc6:	2d 91       	ld	r18, X+
    1bc8:	3c 91       	ld	r19, X
    1bca:	12 97       	sbiw	r26, 0x02	; 2
    1bcc:	cf 01       	movw	r24, r30
    1bce:	0c 96       	adiw	r24, 0x0c	; 12
    1bd0:	28 17       	cp	r18, r24
    1bd2:	39 07       	cpc	r19, r25
    1bd4:	31 f4       	brne	.+12     	; 0x1be2 <xTaskResumeAll+0x6e>
    1bd6:	80 89       	ldd	r24, Z+16	; 0x10
    1bd8:	91 89       	ldd	r25, Z+17	; 0x11
    1bda:	12 96       	adiw	r26, 0x02	; 2
    1bdc:	9c 93       	st	X, r25
    1bde:	8e 93       	st	-X, r24
    1be0:	11 97       	sbiw	r26, 0x01	; 1
    1be2:	15 8a       	std	Z+21, r1	; 0x15
    1be4:	14 8a       	std	Z+20, r1	; 0x14
    1be6:	8c 91       	ld	r24, X
    1be8:	81 50       	subi	r24, 0x01	; 1
    1bea:	8c 93       	st	X, r24
    1bec:	a2 85       	ldd	r26, Z+10	; 0x0a
    1bee:	b3 85       	ldd	r27, Z+11	; 0x0b
    1bf0:	c4 81       	ldd	r28, Z+4	; 0x04
    1bf2:	d5 81       	ldd	r29, Z+5	; 0x05
    1bf4:	86 81       	ldd	r24, Z+6	; 0x06
    1bf6:	97 81       	ldd	r25, Z+7	; 0x07
    1bf8:	9d 83       	std	Y+5, r25	; 0x05
    1bfa:	8c 83       	std	Y+4, r24	; 0x04
    1bfc:	c6 81       	ldd	r28, Z+6	; 0x06
    1bfe:	d7 81       	ldd	r29, Z+7	; 0x07
    1c00:	84 81       	ldd	r24, Z+4	; 0x04
    1c02:	95 81       	ldd	r25, Z+5	; 0x05
    1c04:	9b 83       	std	Y+3, r25	; 0x03
    1c06:	8a 83       	std	Y+2, r24	; 0x02
    1c08:	11 96       	adiw	r26, 0x01	; 1
    1c0a:	8d 91       	ld	r24, X+
    1c0c:	9c 91       	ld	r25, X
    1c0e:	12 97       	sbiw	r26, 0x02	; 2
    1c10:	9f 01       	movw	r18, r30
    1c12:	2e 5f       	subi	r18, 0xFE	; 254
    1c14:	3f 4f       	sbci	r19, 0xFF	; 255
    1c16:	82 17       	cp	r24, r18
    1c18:	93 07       	cpc	r25, r19
    1c1a:	31 f4       	brne	.+12     	; 0x1c28 <xTaskResumeAll+0xb4>
    1c1c:	86 81       	ldd	r24, Z+6	; 0x06
    1c1e:	97 81       	ldd	r25, Z+7	; 0x07
    1c20:	12 96       	adiw	r26, 0x02	; 2
    1c22:	9c 93       	st	X, r25
    1c24:	8e 93       	st	-X, r24
    1c26:	11 97       	sbiw	r26, 0x01	; 1
    1c28:	13 86       	std	Z+11, r1	; 0x0b
    1c2a:	12 86       	std	Z+10, r1	; 0x0a
    1c2c:	8c 91       	ld	r24, X
    1c2e:	81 50       	subi	r24, 0x01	; 1
    1c30:	8c 93       	st	X, r24
    1c32:	86 89       	ldd	r24, Z+22	; 0x16
    1c34:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <uxTopReadyPriority>
    1c38:	98 17       	cp	r25, r24
    1c3a:	10 f4       	brcc	.+4      	; 0x1c40 <xTaskResumeAll+0xcc>
    1c3c:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <uxTopReadyPriority>
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	dc 01       	movw	r26, r24
    1c44:	aa 0f       	add	r26, r26
    1c46:	bb 1f       	adc	r27, r27
    1c48:	aa 0f       	add	r26, r26
    1c4a:	bb 1f       	adc	r27, r27
    1c4c:	aa 0f       	add	r26, r26
    1c4e:	bb 1f       	adc	r27, r27
    1c50:	8a 0f       	add	r24, r26
    1c52:	9b 1f       	adc	r25, r27
    1c54:	dc 01       	movw	r26, r24
    1c56:	a0 51       	subi	r26, 0x10	; 16
    1c58:	bc 4f       	sbci	r27, 0xFC	; 252
    1c5a:	11 96       	adiw	r26, 0x01	; 1
    1c5c:	0d 90       	ld	r0, X+
    1c5e:	bc 91       	ld	r27, X
    1c60:	a0 2d       	mov	r26, r0
    1c62:	b5 83       	std	Z+5, r27	; 0x05
    1c64:	a4 83       	std	Z+4, r26	; 0x04
    1c66:	14 96       	adiw	r26, 0x04	; 4
    1c68:	8d 91       	ld	r24, X+
    1c6a:	9c 91       	ld	r25, X
    1c6c:	15 97       	sbiw	r26, 0x05	; 5
    1c6e:	97 83       	std	Z+7, r25	; 0x07
    1c70:	86 83       	std	Z+6, r24	; 0x06
    1c72:	14 96       	adiw	r26, 0x04	; 4
    1c74:	cd 91       	ld	r28, X+
    1c76:	dc 91       	ld	r29, X
    1c78:	15 97       	sbiw	r26, 0x05	; 5
    1c7a:	3b 83       	std	Y+3, r19	; 0x03
    1c7c:	2a 83       	std	Y+2, r18	; 0x02
    1c7e:	15 96       	adiw	r26, 0x05	; 5
    1c80:	3c 93       	st	X, r19
    1c82:	2e 93       	st	-X, r18
    1c84:	14 97       	sbiw	r26, 0x04	; 4
    1c86:	a6 89       	ldd	r26, Z+22	; 0x16
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	cd 01       	movw	r24, r26
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	a8 0f       	add	r26, r24
    1c9a:	b9 1f       	adc	r27, r25
    1c9c:	a0 51       	subi	r26, 0x10	; 16
    1c9e:	bc 4f       	sbci	r27, 0xFC	; 252
    1ca0:	b3 87       	std	Z+11, r27	; 0x0b
    1ca2:	a2 87       	std	Z+10, r26	; 0x0a
    1ca4:	8c 91       	ld	r24, X
    1ca6:	8f 5f       	subi	r24, 0xFF	; 255
    1ca8:	8c 93       	st	X, r24
    1caa:	96 89       	ldd	r25, Z+22	; 0x16
    1cac:	a0 91 1d 04 	lds	r26, 0x041D	; 0x80041d <pxCurrentTCB>
    1cb0:	b0 91 1e 04 	lds	r27, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    1cb4:	56 96       	adiw	r26, 0x16	; 22
    1cb6:	8c 91       	ld	r24, X
    1cb8:	98 17       	cp	r25, r24
    1cba:	30 f0       	brcs	.+12     	; 0x1cc8 <xTaskResumeAll+0x154>
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <xYieldPending>
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <xTaskResumeAll+0x154>
    1cc4:	e0 e0       	ldi	r30, 0x00	; 0
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <xPendingReadyList>
    1ccc:	81 11       	cpse	r24, r1
    1cce:	65 cf       	rjmp	.-310    	; 0x1b9a <xTaskResumeAll+0x26>
    1cd0:	ef 2b       	or	r30, r31
    1cd2:	11 f0       	breq	.+4      	; 0x1cd8 <xTaskResumeAll+0x164>
    1cd4:	0e 94 12 0a 	call	0x1424	; 0x1424 <prvResetNextTaskUnblockTime>
    1cd8:	c0 91 b7 03 	lds	r28, 0x03B7	; 0x8003b7 <xPendedTicks>
    1cdc:	d0 91 b8 03 	lds	r29, 0x03B8	; 0x8003b8 <xPendedTicks+0x1>
    1ce0:	20 97       	sbiw	r28, 0x00	; 0
    1ce2:	69 f0       	breq	.+26     	; 0x1cfe <xTaskResumeAll+0x18a>
    1ce4:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskIncrementTick>
    1ce8:	88 23       	and	r24, r24
    1cea:	19 f0       	breq	.+6      	; 0x1cf2 <xTaskResumeAll+0x17e>
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <xYieldPending>
    1cf2:	21 97       	sbiw	r28, 0x01	; 1
    1cf4:	b9 f7       	brne	.-18     	; 0x1ce4 <xTaskResumeAll+0x170>
    1cf6:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <xPendedTicks+0x1>
    1cfa:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <xPendedTicks>
    1cfe:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <xYieldPending>
    1d02:	88 23       	and	r24, r24
    1d04:	31 f0       	breq	.+12     	; 0x1d12 <xTaskResumeAll+0x19e>
    1d06:	0e 94 9d 06 	call	0xd3a	; 0xd3a <vPortYield>
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	03 c0       	rjmp	.+6      	; 0x1d14 <xTaskResumeAll+0x1a0>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	01 c0       	rjmp	.+2      	; 0x1d14 <xTaskResumeAll+0x1a0>
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	0f 90       	pop	r0
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	08 95       	ret

00001d1e <vTaskSwitchContext>:
    1d1e:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <uxSchedulerSuspended>
    1d22:	88 23       	and	r24, r24
    1d24:	21 f0       	breq	.+8      	; 0x1d2e <vTaskSwitchContext+0x10>
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <xYieldPending>
    1d2c:	08 95       	ret
    1d2e:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <xYieldPending>
    1d32:	20 91 ba 03 	lds	r18, 0x03BA	; 0x8003ba <uxTopReadyPriority>
    1d36:	01 c0       	rjmp	.+2      	; 0x1d3a <vTaskSwitchContext+0x1c>
    1d38:	21 50       	subi	r18, 0x01	; 1
    1d3a:	82 2f       	mov	r24, r18
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	fc 01       	movw	r30, r24
    1d40:	ee 0f       	add	r30, r30
    1d42:	ff 1f       	adc	r31, r31
    1d44:	ee 0f       	add	r30, r30
    1d46:	ff 1f       	adc	r31, r31
    1d48:	ee 0f       	add	r30, r30
    1d4a:	ff 1f       	adc	r31, r31
    1d4c:	e8 0f       	add	r30, r24
    1d4e:	f9 1f       	adc	r31, r25
    1d50:	e0 51       	subi	r30, 0x10	; 16
    1d52:	fc 4f       	sbci	r31, 0xFC	; 252
    1d54:	30 81       	ld	r19, Z
    1d56:	33 23       	and	r19, r19
    1d58:	79 f3       	breq	.-34     	; 0x1d38 <vTaskSwitchContext+0x1a>
    1d5a:	ac 01       	movw	r20, r24
    1d5c:	44 0f       	add	r20, r20
    1d5e:	55 1f       	adc	r21, r21
    1d60:	44 0f       	add	r20, r20
    1d62:	55 1f       	adc	r21, r21
    1d64:	44 0f       	add	r20, r20
    1d66:	55 1f       	adc	r21, r21
    1d68:	48 0f       	add	r20, r24
    1d6a:	59 1f       	adc	r21, r25
    1d6c:	df 01       	movw	r26, r30
    1d6e:	01 80       	ldd	r0, Z+1	; 0x01
    1d70:	f2 81       	ldd	r31, Z+2	; 0x02
    1d72:	e0 2d       	mov	r30, r0
    1d74:	02 80       	ldd	r0, Z+2	; 0x02
    1d76:	f3 81       	ldd	r31, Z+3	; 0x03
    1d78:	e0 2d       	mov	r30, r0
    1d7a:	12 96       	adiw	r26, 0x02	; 2
    1d7c:	fc 93       	st	X, r31
    1d7e:	ee 93       	st	-X, r30
    1d80:	11 97       	sbiw	r26, 0x01	; 1
    1d82:	4d 50       	subi	r20, 0x0D	; 13
    1d84:	5c 4f       	sbci	r21, 0xFC	; 252
    1d86:	e4 17       	cp	r30, r20
    1d88:	f5 07       	cpc	r31, r21
    1d8a:	29 f4       	brne	.+10     	; 0x1d96 <vTaskSwitchContext+0x78>
    1d8c:	42 81       	ldd	r20, Z+2	; 0x02
    1d8e:	53 81       	ldd	r21, Z+3	; 0x03
    1d90:	fd 01       	movw	r30, r26
    1d92:	52 83       	std	Z+2, r21	; 0x02
    1d94:	41 83       	std	Z+1, r20	; 0x01
    1d96:	fc 01       	movw	r30, r24
    1d98:	ee 0f       	add	r30, r30
    1d9a:	ff 1f       	adc	r31, r31
    1d9c:	ee 0f       	add	r30, r30
    1d9e:	ff 1f       	adc	r31, r31
    1da0:	ee 0f       	add	r30, r30
    1da2:	ff 1f       	adc	r31, r31
    1da4:	8e 0f       	add	r24, r30
    1da6:	9f 1f       	adc	r25, r31
    1da8:	fc 01       	movw	r30, r24
    1daa:	e0 51       	subi	r30, 0x10	; 16
    1dac:	fc 4f       	sbci	r31, 0xFC	; 252
    1dae:	01 80       	ldd	r0, Z+1	; 0x01
    1db0:	f2 81       	ldd	r31, Z+2	; 0x02
    1db2:	e0 2d       	mov	r30, r0
    1db4:	86 81       	ldd	r24, Z+6	; 0x06
    1db6:	97 81       	ldd	r25, Z+7	; 0x07
    1db8:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <pxCurrentTCB+0x1>
    1dbc:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <pxCurrentTCB>
    1dc0:	20 93 ba 03 	sts	0x03BA, r18	; 0x8003ba <uxTopReadyPriority>
    1dc4:	08 95       	ret

00001dc6 <vTaskPlaceOnEventList>:
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	eb 01       	movw	r28, r22
    1dcc:	60 91 1d 04 	lds	r22, 0x041D	; 0x80041d <pxCurrentTCB>
    1dd0:	70 91 1e 04 	lds	r23, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    1dd4:	64 5f       	subi	r22, 0xF4	; 244
    1dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd8:	0e 94 a1 05 	call	0xb42	; 0xb42 <vListInsert>
    1ddc:	61 e0       	ldi	r22, 0x01	; 1
    1dde:	ce 01       	movw	r24, r28
    1de0:	0e 94 af 0b 	call	0x175e	; 0x175e <prvAddCurrentTaskToDelayedList>
    1de4:	df 91       	pop	r29
    1de6:	cf 91       	pop	r28
    1de8:	08 95       	ret

00001dea <xTaskRemoveFromEventList>:
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	dc 01       	movw	r26, r24
    1df0:	15 96       	adiw	r26, 0x05	; 5
    1df2:	ed 91       	ld	r30, X+
    1df4:	fc 91       	ld	r31, X
    1df6:	16 97       	sbiw	r26, 0x06	; 6
    1df8:	06 80       	ldd	r0, Z+6	; 0x06
    1dfa:	f7 81       	ldd	r31, Z+7	; 0x07
    1dfc:	e0 2d       	mov	r30, r0
    1dfe:	a4 89       	ldd	r26, Z+20	; 0x14
    1e00:	b5 89       	ldd	r27, Z+21	; 0x15
    1e02:	c6 85       	ldd	r28, Z+14	; 0x0e
    1e04:	d7 85       	ldd	r29, Z+15	; 0x0f
    1e06:	80 89       	ldd	r24, Z+16	; 0x10
    1e08:	91 89       	ldd	r25, Z+17	; 0x11
    1e0a:	9d 83       	std	Y+5, r25	; 0x05
    1e0c:	8c 83       	std	Y+4, r24	; 0x04
    1e0e:	c0 89       	ldd	r28, Z+16	; 0x10
    1e10:	d1 89       	ldd	r29, Z+17	; 0x11
    1e12:	86 85       	ldd	r24, Z+14	; 0x0e
    1e14:	97 85       	ldd	r25, Z+15	; 0x0f
    1e16:	9b 83       	std	Y+3, r25	; 0x03
    1e18:	8a 83       	std	Y+2, r24	; 0x02
    1e1a:	11 96       	adiw	r26, 0x01	; 1
    1e1c:	8d 91       	ld	r24, X+
    1e1e:	9c 91       	ld	r25, X
    1e20:	12 97       	sbiw	r26, 0x02	; 2
    1e22:	9f 01       	movw	r18, r30
    1e24:	24 5f       	subi	r18, 0xF4	; 244
    1e26:	3f 4f       	sbci	r19, 0xFF	; 255
    1e28:	82 17       	cp	r24, r18
    1e2a:	93 07       	cpc	r25, r19
    1e2c:	31 f4       	brne	.+12     	; 0x1e3a <xTaskRemoveFromEventList+0x50>
    1e2e:	80 89       	ldd	r24, Z+16	; 0x10
    1e30:	91 89       	ldd	r25, Z+17	; 0x11
    1e32:	12 96       	adiw	r26, 0x02	; 2
    1e34:	9c 93       	st	X, r25
    1e36:	8e 93       	st	-X, r24
    1e38:	11 97       	sbiw	r26, 0x01	; 1
    1e3a:	15 8a       	std	Z+21, r1	; 0x15
    1e3c:	14 8a       	std	Z+20, r1	; 0x14
    1e3e:	8c 91       	ld	r24, X
    1e40:	81 50       	subi	r24, 0x01	; 1
    1e42:	8c 93       	st	X, r24
    1e44:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <uxSchedulerSuspended>
    1e48:	81 11       	cpse	r24, r1
    1e4a:	60 c0       	rjmp	.+192    	; 0x1f0c <xTaskRemoveFromEventList+0x122>
    1e4c:	a2 85       	ldd	r26, Z+10	; 0x0a
    1e4e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1e50:	c4 81       	ldd	r28, Z+4	; 0x04
    1e52:	d5 81       	ldd	r29, Z+5	; 0x05
    1e54:	86 81       	ldd	r24, Z+6	; 0x06
    1e56:	97 81       	ldd	r25, Z+7	; 0x07
    1e58:	9d 83       	std	Y+5, r25	; 0x05
    1e5a:	8c 83       	std	Y+4, r24	; 0x04
    1e5c:	c6 81       	ldd	r28, Z+6	; 0x06
    1e5e:	d7 81       	ldd	r29, Z+7	; 0x07
    1e60:	84 81       	ldd	r24, Z+4	; 0x04
    1e62:	95 81       	ldd	r25, Z+5	; 0x05
    1e64:	9b 83       	std	Y+3, r25	; 0x03
    1e66:	8a 83       	std	Y+2, r24	; 0x02
    1e68:	11 96       	adiw	r26, 0x01	; 1
    1e6a:	8d 91       	ld	r24, X+
    1e6c:	9c 91       	ld	r25, X
    1e6e:	12 97       	sbiw	r26, 0x02	; 2
    1e70:	9f 01       	movw	r18, r30
    1e72:	2e 5f       	subi	r18, 0xFE	; 254
    1e74:	3f 4f       	sbci	r19, 0xFF	; 255
    1e76:	82 17       	cp	r24, r18
    1e78:	93 07       	cpc	r25, r19
    1e7a:	31 f4       	brne	.+12     	; 0x1e88 <xTaskRemoveFromEventList+0x9e>
    1e7c:	86 81       	ldd	r24, Z+6	; 0x06
    1e7e:	97 81       	ldd	r25, Z+7	; 0x07
    1e80:	12 96       	adiw	r26, 0x02	; 2
    1e82:	9c 93       	st	X, r25
    1e84:	8e 93       	st	-X, r24
    1e86:	11 97       	sbiw	r26, 0x01	; 1
    1e88:	13 86       	std	Z+11, r1	; 0x0b
    1e8a:	12 86       	std	Z+10, r1	; 0x0a
    1e8c:	8c 91       	ld	r24, X
    1e8e:	81 50       	subi	r24, 0x01	; 1
    1e90:	8c 93       	st	X, r24
    1e92:	86 89       	ldd	r24, Z+22	; 0x16
    1e94:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <uxTopReadyPriority>
    1e98:	98 17       	cp	r25, r24
    1e9a:	10 f4       	brcc	.+4      	; 0x1ea0 <xTaskRemoveFromEventList+0xb6>
    1e9c:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <uxTopReadyPriority>
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	aa 0f       	add	r26, r26
    1ea6:	bb 1f       	adc	r27, r27
    1ea8:	aa 0f       	add	r26, r26
    1eaa:	bb 1f       	adc	r27, r27
    1eac:	aa 0f       	add	r26, r26
    1eae:	bb 1f       	adc	r27, r27
    1eb0:	8a 0f       	add	r24, r26
    1eb2:	9b 1f       	adc	r25, r27
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	a0 51       	subi	r26, 0x10	; 16
    1eb8:	bc 4f       	sbci	r27, 0xFC	; 252
    1eba:	11 96       	adiw	r26, 0x01	; 1
    1ebc:	0d 90       	ld	r0, X+
    1ebe:	bc 91       	ld	r27, X
    1ec0:	a0 2d       	mov	r26, r0
    1ec2:	b5 83       	std	Z+5, r27	; 0x05
    1ec4:	a4 83       	std	Z+4, r26	; 0x04
    1ec6:	14 96       	adiw	r26, 0x04	; 4
    1ec8:	8d 91       	ld	r24, X+
    1eca:	9c 91       	ld	r25, X
    1ecc:	15 97       	sbiw	r26, 0x05	; 5
    1ece:	97 83       	std	Z+7, r25	; 0x07
    1ed0:	86 83       	std	Z+6, r24	; 0x06
    1ed2:	14 96       	adiw	r26, 0x04	; 4
    1ed4:	cd 91       	ld	r28, X+
    1ed6:	dc 91       	ld	r29, X
    1ed8:	15 97       	sbiw	r26, 0x05	; 5
    1eda:	3b 83       	std	Y+3, r19	; 0x03
    1edc:	2a 83       	std	Y+2, r18	; 0x02
    1ede:	15 96       	adiw	r26, 0x05	; 5
    1ee0:	3c 93       	st	X, r19
    1ee2:	2e 93       	st	-X, r18
    1ee4:	14 97       	sbiw	r26, 0x04	; 4
    1ee6:	a6 89       	ldd	r26, Z+22	; 0x16
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	cd 01       	movw	r24, r26
    1eec:	88 0f       	add	r24, r24
    1eee:	99 1f       	adc	r25, r25
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	88 0f       	add	r24, r24
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	a8 0f       	add	r26, r24
    1efa:	b9 1f       	adc	r27, r25
    1efc:	a0 51       	subi	r26, 0x10	; 16
    1efe:	bc 4f       	sbci	r27, 0xFC	; 252
    1f00:	b3 87       	std	Z+11, r27	; 0x0b
    1f02:	a2 87       	std	Z+10, r26	; 0x0a
    1f04:	8c 91       	ld	r24, X
    1f06:	8f 5f       	subi	r24, 0xFF	; 255
    1f08:	8c 93       	st	X, r24
    1f0a:	1c c0       	rjmp	.+56     	; 0x1f44 <xTaskRemoveFromEventList+0x15a>
    1f0c:	41 ed       	ldi	r20, 0xD1	; 209
    1f0e:	53 e0       	ldi	r21, 0x03	; 3
    1f10:	da 01       	movw	r26, r20
    1f12:	11 96       	adiw	r26, 0x01	; 1
    1f14:	cd 91       	ld	r28, X+
    1f16:	dc 91       	ld	r29, X
    1f18:	12 97       	sbiw	r26, 0x02	; 2
    1f1a:	d7 87       	std	Z+15, r29	; 0x0f
    1f1c:	c6 87       	std	Z+14, r28	; 0x0e
    1f1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f20:	9d 81       	ldd	r25, Y+5	; 0x05
    1f22:	91 8b       	std	Z+17, r25	; 0x11
    1f24:	80 8b       	std	Z+16, r24	; 0x10
    1f26:	8c 81       	ldd	r24, Y+4	; 0x04
    1f28:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	13 96       	adiw	r26, 0x03	; 3
    1f2e:	3c 93       	st	X, r19
    1f30:	2e 93       	st	-X, r18
    1f32:	12 97       	sbiw	r26, 0x02	; 2
    1f34:	3d 83       	std	Y+5, r19	; 0x05
    1f36:	2c 83       	std	Y+4, r18	; 0x04
    1f38:	55 8b       	std	Z+21, r21	; 0x15
    1f3a:	44 8b       	std	Z+20, r20	; 0x14
    1f3c:	da 01       	movw	r26, r20
    1f3e:	8c 91       	ld	r24, X
    1f40:	8f 5f       	subi	r24, 0xFF	; 255
    1f42:	8c 93       	st	X, r24
    1f44:	96 89       	ldd	r25, Z+22	; 0x16
    1f46:	e0 91 1d 04 	lds	r30, 0x041D	; 0x80041d <pxCurrentTCB>
    1f4a:	f0 91 1e 04 	lds	r31, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    1f4e:	86 89       	ldd	r24, Z+22	; 0x16
    1f50:	89 17       	cp	r24, r25
    1f52:	20 f4       	brcc	.+8      	; 0x1f5c <xTaskRemoveFromEventList+0x172>
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <xYieldPending>
    1f5a:	01 c0       	rjmp	.+2      	; 0x1f5e <xTaskRemoveFromEventList+0x174>
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	08 95       	ret

00001f64 <vTaskInternalSetTimeOutState>:
    1f64:	20 91 b5 03 	lds	r18, 0x03B5	; 0x8003b5 <xNumOfOverflows>
    1f68:	fc 01       	movw	r30, r24
    1f6a:	20 83       	st	Z, r18
    1f6c:	20 91 bb 03 	lds	r18, 0x03BB	; 0x8003bb <xTickCount>
    1f70:	30 91 bc 03 	lds	r19, 0x03BC	; 0x8003bc <xTickCount+0x1>
    1f74:	32 83       	std	Z+2, r19	; 0x02
    1f76:	21 83       	std	Z+1, r18	; 0x01
    1f78:	08 95       	ret

00001f7a <xTaskCheckForTimeOut>:
    1f7a:	1f 93       	push	r17
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	0f 92       	push	r0
    1f86:	e0 91 bb 03 	lds	r30, 0x03BB	; 0x8003bb <xTickCount>
    1f8a:	f0 91 bc 03 	lds	r31, 0x03BC	; 0x8003bc <xTickCount+0x1>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	11 96       	adiw	r26, 0x01	; 1
    1f92:	4d 91       	ld	r20, X+
    1f94:	5c 91       	ld	r21, X
    1f96:	12 97       	sbiw	r26, 0x02	; 2
    1f98:	df 01       	movw	r26, r30
    1f9a:	a4 1b       	sub	r26, r20
    1f9c:	b5 0b       	sbc	r27, r21
    1f9e:	eb 01       	movw	r28, r22
    1fa0:	28 81       	ld	r18, Y
    1fa2:	39 81       	ldd	r19, Y+1	; 0x01
    1fa4:	2f 3f       	cpi	r18, 0xFF	; 255
    1fa6:	df ef       	ldi	r29, 0xFF	; 255
    1fa8:	3d 07       	cpc	r19, r29
    1faa:	f9 f0       	breq	.+62     	; 0x1fea <xTaskCheckForTimeOut+0x70>
    1fac:	ec 01       	movw	r28, r24
    1fae:	18 81       	ld	r17, Y
    1fb0:	c0 91 b5 03 	lds	r28, 0x03B5	; 0x8003b5 <xNumOfOverflows>
    1fb4:	1c 17       	cp	r17, r28
    1fb6:	41 f0       	breq	.+16     	; 0x1fc8 <xTaskCheckForTimeOut+0x4e>
    1fb8:	e4 17       	cp	r30, r20
    1fba:	f5 07       	cpc	r31, r21
    1fbc:	28 f0       	brcs	.+10     	; 0x1fc8 <xTaskCheckForTimeOut+0x4e>
    1fbe:	fb 01       	movw	r30, r22
    1fc0:	11 82       	std	Z+1, r1	; 0x01
    1fc2:	10 82       	st	Z, r1
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	12 c0       	rjmp	.+36     	; 0x1fec <xTaskCheckForTimeOut+0x72>
    1fc8:	a2 17       	cp	r26, r18
    1fca:	b3 07       	cpc	r27, r19
    1fcc:	48 f4       	brcc	.+18     	; 0x1fe0 <xTaskCheckForTimeOut+0x66>
    1fce:	fb 01       	movw	r30, r22
    1fd0:	2a 1b       	sub	r18, r26
    1fd2:	3b 0b       	sbc	r19, r27
    1fd4:	31 83       	std	Z+1, r19	; 0x01
    1fd6:	20 83       	st	Z, r18
    1fd8:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <vTaskInternalSetTimeOutState>
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	06 c0       	rjmp	.+12     	; 0x1fec <xTaskCheckForTimeOut+0x72>
    1fe0:	db 01       	movw	r26, r22
    1fe2:	1d 92       	st	X+, r1
    1fe4:	1c 92       	st	X, r1
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	01 c0       	rjmp	.+2      	; 0x1fec <xTaskCheckForTimeOut+0x72>
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	0f 90       	pop	r0
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	df 91       	pop	r29
    1ff2:	cf 91       	pop	r28
    1ff4:	1f 91       	pop	r17
    1ff6:	08 95       	ret

00001ff8 <vTaskMissedYield>:
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <xYieldPending>
    1ffe:	08 95       	ret

00002000 <xTaskPriorityInherit>:
    2000:	0f 93       	push	r16
    2002:	1f 93       	push	r17
    2004:	cf 93       	push	r28
    2006:	df 93       	push	r29
    2008:	fc 01       	movw	r30, r24
    200a:	89 2b       	or	r24, r25
    200c:	09 f4       	brne	.+2      	; 0x2010 <xTaskPriorityInherit+0x10>
    200e:	84 c0       	rjmp	.+264    	; 0x2118 <xTaskPriorityInherit+0x118>
    2010:	26 89       	ldd	r18, Z+22	; 0x16
    2012:	a0 91 1d 04 	lds	r26, 0x041D	; 0x80041d <pxCurrentTCB>
    2016:	b0 91 1e 04 	lds	r27, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    201a:	56 96       	adiw	r26, 0x16	; 22
    201c:	8c 91       	ld	r24, X
    201e:	28 17       	cp	r18, r24
    2020:	08 f0       	brcs	.+2      	; 0x2024 <xTaskPriorityInherit+0x24>
    2022:	70 c0       	rjmp	.+224    	; 0x2104 <xTaskPriorityInherit+0x104>
    2024:	84 85       	ldd	r24, Z+12	; 0x0c
    2026:	95 85       	ldd	r25, Z+13	; 0x0d
    2028:	99 23       	and	r25, r25
    202a:	64 f0       	brlt	.+24     	; 0x2044 <xTaskPriorityInherit+0x44>
    202c:	a0 91 1d 04 	lds	r26, 0x041D	; 0x80041d <pxCurrentTCB>
    2030:	b0 91 1e 04 	lds	r27, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    2034:	56 96       	adiw	r26, 0x16	; 22
    2036:	3c 91       	ld	r19, X
    2038:	85 e0       	ldi	r24, 0x05	; 5
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	83 1b       	sub	r24, r19
    203e:	91 09       	sbc	r25, r1
    2040:	95 87       	std	Z+13, r25	; 0x0d
    2042:	84 87       	std	Z+12, r24	; 0x0c
    2044:	82 85       	ldd	r24, Z+10	; 0x0a
    2046:	93 85       	ldd	r25, Z+11	; 0x0b
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	a9 01       	movw	r20, r18
    204c:	44 0f       	add	r20, r20
    204e:	55 1f       	adc	r21, r21
    2050:	44 0f       	add	r20, r20
    2052:	55 1f       	adc	r21, r21
    2054:	44 0f       	add	r20, r20
    2056:	55 1f       	adc	r21, r21
    2058:	24 0f       	add	r18, r20
    205a:	35 1f       	adc	r19, r21
    205c:	20 51       	subi	r18, 0x10	; 16
    205e:	3c 4f       	sbci	r19, 0xFC	; 252
    2060:	82 17       	cp	r24, r18
    2062:	93 07       	cpc	r25, r19
    2064:	09 f0       	breq	.+2      	; 0x2068 <xTaskPriorityInherit+0x68>
    2066:	45 c0       	rjmp	.+138    	; 0x20f2 <xTaskPriorityInherit+0xf2>
    2068:	ef 01       	movw	r28, r30
    206a:	8f 01       	movw	r16, r30
    206c:	0e 5f       	subi	r16, 0xFE	; 254
    206e:	1f 4f       	sbci	r17, 0xFF	; 255
    2070:	c8 01       	movw	r24, r16
    2072:	0e 94 d2 05 	call	0xba4	; 0xba4 <uxListRemove>
    2076:	e0 91 1d 04 	lds	r30, 0x041D	; 0x80041d <pxCurrentTCB>
    207a:	f0 91 1e 04 	lds	r31, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    207e:	86 89       	ldd	r24, Z+22	; 0x16
    2080:	8e 8b       	std	Y+22, r24	; 0x16
    2082:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <uxTopReadyPriority>
    2086:	98 17       	cp	r25, r24
    2088:	10 f4       	brcc	.+4      	; 0x208e <xTaskPriorityInherit+0x8e>
    208a:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <uxTopReadyPriority>
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	fc 01       	movw	r30, r24
    2092:	ee 0f       	add	r30, r30
    2094:	ff 1f       	adc	r31, r31
    2096:	ee 0f       	add	r30, r30
    2098:	ff 1f       	adc	r31, r31
    209a:	ee 0f       	add	r30, r30
    209c:	ff 1f       	adc	r31, r31
    209e:	8e 0f       	add	r24, r30
    20a0:	9f 1f       	adc	r25, r31
    20a2:	fc 01       	movw	r30, r24
    20a4:	e0 51       	subi	r30, 0x10	; 16
    20a6:	fc 4f       	sbci	r31, 0xFC	; 252
    20a8:	01 80       	ldd	r0, Z+1	; 0x01
    20aa:	f2 81       	ldd	r31, Z+2	; 0x02
    20ac:	e0 2d       	mov	r30, r0
    20ae:	fd 83       	std	Y+5, r31	; 0x05
    20b0:	ec 83       	std	Y+4, r30	; 0x04
    20b2:	84 81       	ldd	r24, Z+4	; 0x04
    20b4:	95 81       	ldd	r25, Z+5	; 0x05
    20b6:	9f 83       	std	Y+7, r25	; 0x07
    20b8:	8e 83       	std	Y+6, r24	; 0x06
    20ba:	a4 81       	ldd	r26, Z+4	; 0x04
    20bc:	b5 81       	ldd	r27, Z+5	; 0x05
    20be:	13 96       	adiw	r26, 0x03	; 3
    20c0:	1c 93       	st	X, r17
    20c2:	0e 93       	st	-X, r16
    20c4:	12 97       	sbiw	r26, 0x02	; 2
    20c6:	15 83       	std	Z+5, r17	; 0x05
    20c8:	04 83       	std	Z+4, r16	; 0x04
    20ca:	8e 89       	ldd	r24, Y+22	; 0x16
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	fc 01       	movw	r30, r24
    20d0:	ee 0f       	add	r30, r30
    20d2:	ff 1f       	adc	r31, r31
    20d4:	ee 0f       	add	r30, r30
    20d6:	ff 1f       	adc	r31, r31
    20d8:	ee 0f       	add	r30, r30
    20da:	ff 1f       	adc	r31, r31
    20dc:	e8 0f       	add	r30, r24
    20de:	f9 1f       	adc	r31, r25
    20e0:	e0 51       	subi	r30, 0x10	; 16
    20e2:	fc 4f       	sbci	r31, 0xFC	; 252
    20e4:	fb 87       	std	Y+11, r31	; 0x0b
    20e6:	ea 87       	std	Y+10, r30	; 0x0a
    20e8:	80 81       	ld	r24, Z
    20ea:	8f 5f       	subi	r24, 0xFF	; 255
    20ec:	80 83       	st	Z, r24
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	16 c0       	rjmp	.+44     	; 0x211e <xTaskPriorityInherit+0x11e>
    20f2:	a0 91 1d 04 	lds	r26, 0x041D	; 0x80041d <pxCurrentTCB>
    20f6:	b0 91 1e 04 	lds	r27, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    20fa:	56 96       	adiw	r26, 0x16	; 22
    20fc:	8c 91       	ld	r24, X
    20fe:	86 8b       	std	Z+22, r24	; 0x16
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	0d c0       	rjmp	.+26     	; 0x211e <xTaskPriorityInherit+0x11e>
    2104:	95 a1       	ldd	r25, Z+37	; 0x25
    2106:	e0 91 1d 04 	lds	r30, 0x041D	; 0x80041d <pxCurrentTCB>
    210a:	f0 91 1e 04 	lds	r31, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    210e:	86 89       	ldd	r24, Z+22	; 0x16
    2110:	98 17       	cp	r25, r24
    2112:	20 f0       	brcs	.+8      	; 0x211c <xTaskPriorityInherit+0x11c>
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	03 c0       	rjmp	.+6      	; 0x211e <xTaskPriorityInherit+0x11e>
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	01 c0       	rjmp	.+2      	; 0x211e <xTaskPriorityInherit+0x11e>
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	1f 91       	pop	r17
    2124:	0f 91       	pop	r16
    2126:	08 95       	ret

00002128 <xTaskPriorityDisinherit>:
    2128:	0f 93       	push	r16
    212a:	1f 93       	push	r17
    212c:	cf 93       	push	r28
    212e:	df 93       	push	r29
    2130:	fc 01       	movw	r30, r24
    2132:	89 2b       	or	r24, r25
    2134:	09 f4       	brne	.+2      	; 0x2138 <xTaskPriorityDisinherit+0x10>
    2136:	51 c0       	rjmp	.+162    	; 0x21da <xTaskPriorityDisinherit+0xb2>
    2138:	86 a1       	ldd	r24, Z+38	; 0x26
    213a:	81 50       	subi	r24, 0x01	; 1
    213c:	86 a3       	std	Z+38, r24	; 0x26
    213e:	26 89       	ldd	r18, Z+22	; 0x16
    2140:	95 a1       	ldd	r25, Z+37	; 0x25
    2142:	29 17       	cp	r18, r25
    2144:	09 f4       	brne	.+2      	; 0x2148 <xTaskPriorityDisinherit+0x20>
    2146:	4b c0       	rjmp	.+150    	; 0x21de <xTaskPriorityDisinherit+0xb6>
    2148:	81 11       	cpse	r24, r1
    214a:	4b c0       	rjmp	.+150    	; 0x21e2 <xTaskPriorityDisinherit+0xba>
    214c:	ef 01       	movw	r28, r30
    214e:	8f 01       	movw	r16, r30
    2150:	0e 5f       	subi	r16, 0xFE	; 254
    2152:	1f 4f       	sbci	r17, 0xFF	; 255
    2154:	c8 01       	movw	r24, r16
    2156:	0e 94 d2 05 	call	0xba4	; 0xba4 <uxListRemove>
    215a:	8d a1       	ldd	r24, Y+37	; 0x25
    215c:	8e 8b       	std	Y+22, r24	; 0x16
    215e:	25 e0       	ldi	r18, 0x05	; 5
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	28 1b       	sub	r18, r24
    2164:	31 09       	sbc	r19, r1
    2166:	3d 87       	std	Y+13, r19	; 0x0d
    2168:	2c 87       	std	Y+12, r18	; 0x0c
    216a:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <uxTopReadyPriority>
    216e:	98 17       	cp	r25, r24
    2170:	10 f4       	brcc	.+4      	; 0x2176 <xTaskPriorityDisinherit+0x4e>
    2172:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <uxTopReadyPriority>
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	fc 01       	movw	r30, r24
    217a:	ee 0f       	add	r30, r30
    217c:	ff 1f       	adc	r31, r31
    217e:	ee 0f       	add	r30, r30
    2180:	ff 1f       	adc	r31, r31
    2182:	ee 0f       	add	r30, r30
    2184:	ff 1f       	adc	r31, r31
    2186:	8e 0f       	add	r24, r30
    2188:	9f 1f       	adc	r25, r31
    218a:	fc 01       	movw	r30, r24
    218c:	e0 51       	subi	r30, 0x10	; 16
    218e:	fc 4f       	sbci	r31, 0xFC	; 252
    2190:	01 80       	ldd	r0, Z+1	; 0x01
    2192:	f2 81       	ldd	r31, Z+2	; 0x02
    2194:	e0 2d       	mov	r30, r0
    2196:	fd 83       	std	Y+5, r31	; 0x05
    2198:	ec 83       	std	Y+4, r30	; 0x04
    219a:	84 81       	ldd	r24, Z+4	; 0x04
    219c:	95 81       	ldd	r25, Z+5	; 0x05
    219e:	9f 83       	std	Y+7, r25	; 0x07
    21a0:	8e 83       	std	Y+6, r24	; 0x06
    21a2:	a4 81       	ldd	r26, Z+4	; 0x04
    21a4:	b5 81       	ldd	r27, Z+5	; 0x05
    21a6:	13 96       	adiw	r26, 0x03	; 3
    21a8:	1c 93       	st	X, r17
    21aa:	0e 93       	st	-X, r16
    21ac:	12 97       	sbiw	r26, 0x02	; 2
    21ae:	15 83       	std	Z+5, r17	; 0x05
    21b0:	04 83       	std	Z+4, r16	; 0x04
    21b2:	ee 89       	ldd	r30, Y+22	; 0x16
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	cf 01       	movw	r24, r30
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	88 0f       	add	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	e8 0f       	add	r30, r24
    21c6:	f9 1f       	adc	r31, r25
    21c8:	e0 51       	subi	r30, 0x10	; 16
    21ca:	fc 4f       	sbci	r31, 0xFC	; 252
    21cc:	fb 87       	std	Y+11, r31	; 0x0b
    21ce:	ea 87       	std	Y+10, r30	; 0x0a
    21d0:	80 81       	ld	r24, Z
    21d2:	8f 5f       	subi	r24, 0xFF	; 255
    21d4:	80 83       	st	Z, r24
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	05 c0       	rjmp	.+10     	; 0x21e4 <xTaskPriorityDisinherit+0xbc>
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	03 c0       	rjmp	.+6      	; 0x21e4 <xTaskPriorityDisinherit+0xbc>
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	01 c0       	rjmp	.+2      	; 0x21e4 <xTaskPriorityDisinherit+0xbc>
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    21e8:	1f 91       	pop	r17
    21ea:	0f 91       	pop	r16
    21ec:	08 95       	ret

000021ee <vTaskPriorityDisinheritAfterTimeout>:
    21ee:	0f 93       	push	r16
    21f0:	1f 93       	push	r17
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	fc 01       	movw	r30, r24
    21f8:	89 2b       	or	r24, r25
    21fa:	09 f4       	brne	.+2      	; 0x21fe <vTaskPriorityDisinheritAfterTimeout+0x10>
    21fc:	66 c0       	rjmp	.+204    	; 0x22ca <vTaskPriorityDisinheritAfterTimeout+0xdc>
    21fe:	95 a1       	ldd	r25, Z+37	; 0x25
    2200:	96 17       	cp	r25, r22
    2202:	08 f4       	brcc	.+2      	; 0x2206 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2204:	96 2f       	mov	r25, r22
    2206:	86 89       	ldd	r24, Z+22	; 0x16
    2208:	98 17       	cp	r25, r24
    220a:	09 f4       	brne	.+2      	; 0x220e <vTaskPriorityDisinheritAfterTimeout+0x20>
    220c:	5e c0       	rjmp	.+188    	; 0x22ca <vTaskPriorityDisinheritAfterTimeout+0xdc>
    220e:	26 a1       	ldd	r18, Z+38	; 0x26
    2210:	21 30       	cpi	r18, 0x01	; 1
    2212:	09 f0       	breq	.+2      	; 0x2216 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2214:	5a c0       	rjmp	.+180    	; 0x22ca <vTaskPriorityDisinheritAfterTimeout+0xdc>
    2216:	96 8b       	std	Z+22, r25	; 0x16
    2218:	24 85       	ldd	r18, Z+12	; 0x0c
    221a:	35 85       	ldd	r19, Z+13	; 0x0d
    221c:	33 23       	and	r19, r19
    221e:	34 f0       	brlt	.+12     	; 0x222c <vTaskPriorityDisinheritAfterTimeout+0x3e>
    2220:	25 e0       	ldi	r18, 0x05	; 5
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	29 1b       	sub	r18, r25
    2226:	31 09       	sbc	r19, r1
    2228:	35 87       	std	Z+13, r19	; 0x0d
    222a:	24 87       	std	Z+12, r18	; 0x0c
    222c:	22 85       	ldd	r18, Z+10	; 0x0a
    222e:	33 85       	ldd	r19, Z+11	; 0x0b
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	ac 01       	movw	r20, r24
    2234:	44 0f       	add	r20, r20
    2236:	55 1f       	adc	r21, r21
    2238:	44 0f       	add	r20, r20
    223a:	55 1f       	adc	r21, r21
    223c:	44 0f       	add	r20, r20
    223e:	55 1f       	adc	r21, r21
    2240:	84 0f       	add	r24, r20
    2242:	95 1f       	adc	r25, r21
    2244:	80 51       	subi	r24, 0x10	; 16
    2246:	9c 4f       	sbci	r25, 0xFC	; 252
    2248:	28 17       	cp	r18, r24
    224a:	39 07       	cpc	r19, r25
    224c:	f1 f5       	brne	.+124    	; 0x22ca <vTaskPriorityDisinheritAfterTimeout+0xdc>
    224e:	ef 01       	movw	r28, r30
    2250:	8f 01       	movw	r16, r30
    2252:	0e 5f       	subi	r16, 0xFE	; 254
    2254:	1f 4f       	sbci	r17, 0xFF	; 255
    2256:	c8 01       	movw	r24, r16
    2258:	0e 94 d2 05 	call	0xba4	; 0xba4 <uxListRemove>
    225c:	8e 89       	ldd	r24, Y+22	; 0x16
    225e:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <uxTopReadyPriority>
    2262:	98 17       	cp	r25, r24
    2264:	10 f4       	brcc	.+4      	; 0x226a <vTaskPriorityDisinheritAfterTimeout+0x7c>
    2266:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <uxTopReadyPriority>
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	fc 01       	movw	r30, r24
    226e:	ee 0f       	add	r30, r30
    2270:	ff 1f       	adc	r31, r31
    2272:	ee 0f       	add	r30, r30
    2274:	ff 1f       	adc	r31, r31
    2276:	ee 0f       	add	r30, r30
    2278:	ff 1f       	adc	r31, r31
    227a:	8e 0f       	add	r24, r30
    227c:	9f 1f       	adc	r25, r31
    227e:	fc 01       	movw	r30, r24
    2280:	e0 51       	subi	r30, 0x10	; 16
    2282:	fc 4f       	sbci	r31, 0xFC	; 252
    2284:	01 80       	ldd	r0, Z+1	; 0x01
    2286:	f2 81       	ldd	r31, Z+2	; 0x02
    2288:	e0 2d       	mov	r30, r0
    228a:	fd 83       	std	Y+5, r31	; 0x05
    228c:	ec 83       	std	Y+4, r30	; 0x04
    228e:	84 81       	ldd	r24, Z+4	; 0x04
    2290:	95 81       	ldd	r25, Z+5	; 0x05
    2292:	9f 83       	std	Y+7, r25	; 0x07
    2294:	8e 83       	std	Y+6, r24	; 0x06
    2296:	a4 81       	ldd	r26, Z+4	; 0x04
    2298:	b5 81       	ldd	r27, Z+5	; 0x05
    229a:	13 96       	adiw	r26, 0x03	; 3
    229c:	1c 93       	st	X, r17
    229e:	0e 93       	st	-X, r16
    22a0:	12 97       	sbiw	r26, 0x02	; 2
    22a2:	15 83       	std	Z+5, r17	; 0x05
    22a4:	04 83       	std	Z+4, r16	; 0x04
    22a6:	8e 89       	ldd	r24, Y+22	; 0x16
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	fc 01       	movw	r30, r24
    22ac:	ee 0f       	add	r30, r30
    22ae:	ff 1f       	adc	r31, r31
    22b0:	ee 0f       	add	r30, r30
    22b2:	ff 1f       	adc	r31, r31
    22b4:	ee 0f       	add	r30, r30
    22b6:	ff 1f       	adc	r31, r31
    22b8:	e8 0f       	add	r30, r24
    22ba:	f9 1f       	adc	r31, r25
    22bc:	e0 51       	subi	r30, 0x10	; 16
    22be:	fc 4f       	sbci	r31, 0xFC	; 252
    22c0:	fb 87       	std	Y+11, r31	; 0x0b
    22c2:	ea 87       	std	Y+10, r30	; 0x0a
    22c4:	80 81       	ld	r24, Z
    22c6:	8f 5f       	subi	r24, 0xFF	; 255
    22c8:	80 83       	st	Z, r24
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	1f 91       	pop	r17
    22d0:	0f 91       	pop	r16
    22d2:	08 95       	ret

000022d4 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    22d4:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <pxCurrentTCB>
    22d8:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    22dc:	89 2b       	or	r24, r25
    22de:	39 f0       	breq	.+14     	; 0x22ee <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    22e0:	e0 91 1d 04 	lds	r30, 0x041D	; 0x80041d <pxCurrentTCB>
    22e4:	f0 91 1e 04 	lds	r31, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    22e8:	86 a1       	ldd	r24, Z+38	; 0x26
    22ea:	8f 5f       	subi	r24, 0xFF	; 255
    22ec:	86 a3       	std	Z+38, r24	; 0x26
        }

        return pxCurrentTCB;
    22ee:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <pxCurrentTCB>
    22f2:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <pxCurrentTCB+0x1>
    }
    22f6:	08 95       	ret

000022f8 <__udivmodhi4>:
    22f8:	aa 1b       	sub	r26, r26
    22fa:	bb 1b       	sub	r27, r27
    22fc:	51 e1       	ldi	r21, 0x11	; 17
    22fe:	07 c0       	rjmp	.+14     	; 0x230e <__udivmodhi4_ep>

00002300 <__udivmodhi4_loop>:
    2300:	aa 1f       	adc	r26, r26
    2302:	bb 1f       	adc	r27, r27
    2304:	a6 17       	cp	r26, r22
    2306:	b7 07       	cpc	r27, r23
    2308:	10 f0       	brcs	.+4      	; 0x230e <__udivmodhi4_ep>
    230a:	a6 1b       	sub	r26, r22
    230c:	b7 0b       	sbc	r27, r23

0000230e <__udivmodhi4_ep>:
    230e:	88 1f       	adc	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	5a 95       	dec	r21
    2314:	a9 f7       	brne	.-22     	; 0x2300 <__udivmodhi4_loop>
    2316:	80 95       	com	r24
    2318:	90 95       	com	r25
    231a:	bc 01       	movw	r22, r24
    231c:	cd 01       	movw	r24, r26
    231e:	08 95       	ret

00002320 <memcpy>:
    2320:	fb 01       	movw	r30, r22
    2322:	dc 01       	movw	r26, r24
    2324:	02 c0       	rjmp	.+4      	; 0x232a <memcpy+0xa>
    2326:	01 90       	ld	r0, Z+
    2328:	0d 92       	st	X+, r0
    232a:	41 50       	subi	r20, 0x01	; 1
    232c:	50 40       	sbci	r21, 0x00	; 0
    232e:	d8 f7       	brcc	.-10     	; 0x2326 <memcpy+0x6>
    2330:	08 95       	ret

00002332 <memset>:
    2332:	dc 01       	movw	r26, r24
    2334:	01 c0       	rjmp	.+2      	; 0x2338 <memset+0x6>
    2336:	6d 93       	st	X+, r22
    2338:	41 50       	subi	r20, 0x01	; 1
    233a:	50 40       	sbci	r21, 0x00	; 0
    233c:	e0 f7       	brcc	.-8      	; 0x2336 <memset+0x4>
    233e:	08 95       	ret

00002340 <_exit>:
    2340:	f8 94       	cli

00002342 <__stop_program>:
    2342:	ff cf       	rjmp	.-2      	; 0x2342 <__stop_program>
