
RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b0  00800060  000026e2  00002776  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003ab  00800210  00800210  00002926  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002926  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002984  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  000029c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000420d  00000000  00000000  00002d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f27  00000000  00000000  00006f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029eb  00000000  00000000  00007ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d1c  00000000  00000000  0000a8a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015d7  00000000  00000000  0000b5c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000479a  00000000  00000000  0000cb9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d0  00000000  00000000  00011335  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__vector_1>
       8:	0c 94 23 03 	jmp	0x646	; 0x646 <__vector_2>
       c:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 84 04 	jmp	0x908	; 0x908 <__vector_13>
      38:	0c 94 ab 04 	jmp	0x956	; 0x956 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 31       	cpi	r26, 0x10	; 16
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	25 e0       	ldi	r18, 0x05	; 5
      78:	a0 e1       	ldi	r26, 0x10	; 16
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3b       	cpi	r26, 0xBB	; 187
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ef 05 	call	0xbde	; 0xbde <main>
      8a:	0c 94 6f 13 	jmp	0x26de	; 0x26de <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pinMode>:

}

void Interrupts(void){
	
	sei();
      92:	88 30       	cpi	r24, 0x08	; 8
      94:	08 f0       	brcs	.+2      	; 0x98 <pinMode+0x6>
      96:	5e c0       	rjmp	.+188    	; 0x154 <pinMode+0xc2>
      98:	69 32       	cpi	r22, 0x29	; 41
      9a:	d1 f4       	brne	.+52     	; 0xd0 <pinMode+0x3e>
      9c:	4a b3       	in	r20, 0x1a	; 26
      9e:	9d ec       	ldi	r25, 0xCD	; 205
      a0:	89 9f       	mul	r24, r25
      a2:	91 2d       	mov	r25, r1
      a4:	11 24       	eor	r1, r1
      a6:	96 95       	lsr	r25
      a8:	96 95       	lsr	r25
      aa:	96 95       	lsr	r25
      ac:	99 0f       	add	r25, r25
      ae:	29 2f       	mov	r18, r25
      b0:	22 0f       	add	r18, r18
      b2:	22 0f       	add	r18, r18
      b4:	92 0f       	add	r25, r18
      b6:	89 1b       	sub	r24, r25
      b8:	21 e0       	ldi	r18, 0x01	; 1
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	b9 01       	movw	r22, r18
      be:	02 c0       	rjmp	.+4      	; 0xc4 <pinMode+0x32>
      c0:	66 0f       	add	r22, r22
      c2:	77 1f       	adc	r23, r23
      c4:	8a 95       	dec	r24
      c6:	e2 f7       	brpl	.-8      	; 0xc0 <pinMode+0x2e>
      c8:	cb 01       	movw	r24, r22
      ca:	84 2b       	or	r24, r20
      cc:	8a bb       	out	0x1a, r24	; 26
      ce:	08 95       	ret
      d0:	68 32       	cpi	r22, 0x28	; 40
      d2:	d9 f4       	brne	.+54     	; 0x10a <pinMode+0x78>
      d4:	4a b3       	in	r20, 0x1a	; 26
      d6:	9d ec       	ldi	r25, 0xCD	; 205
      d8:	89 9f       	mul	r24, r25
      da:	91 2d       	mov	r25, r1
      dc:	11 24       	eor	r1, r1
      de:	96 95       	lsr	r25
      e0:	96 95       	lsr	r25
      e2:	96 95       	lsr	r25
      e4:	99 0f       	add	r25, r25
      e6:	29 2f       	mov	r18, r25
      e8:	22 0f       	add	r18, r18
      ea:	22 0f       	add	r18, r18
      ec:	92 0f       	add	r25, r18
      ee:	89 1b       	sub	r24, r25
      f0:	21 e0       	ldi	r18, 0x01	; 1
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	b9 01       	movw	r22, r18
      f6:	02 c0       	rjmp	.+4      	; 0xfc <pinMode+0x6a>
      f8:	66 0f       	add	r22, r22
      fa:	77 1f       	adc	r23, r23
      fc:	8a 95       	dec	r24
      fe:	e2 f7       	brpl	.-8      	; 0xf8 <pinMode+0x66>
     100:	cb 01       	movw	r24, r22
     102:	80 95       	com	r24
     104:	84 23       	and	r24, r20
     106:	8a bb       	out	0x1a, r24	; 26
     108:	08 95       	ret
     10a:	6a 32       	cpi	r22, 0x2A	; 42
     10c:	09 f0       	breq	.+2      	; 0x110 <pinMode+0x7e>
     10e:	49 c1       	rjmp	.+658    	; 0x3a2 <pinMode+0x310>
     110:	4a b3       	in	r20, 0x1a	; 26
     112:	9d ec       	ldi	r25, 0xCD	; 205
     114:	89 9f       	mul	r24, r25
     116:	91 2d       	mov	r25, r1
     118:	11 24       	eor	r1, r1
     11a:	96 95       	lsr	r25
     11c:	96 95       	lsr	r25
     11e:	96 95       	lsr	r25
     120:	99 0f       	add	r25, r25
     122:	29 2f       	mov	r18, r25
     124:	22 0f       	add	r18, r18
     126:	22 0f       	add	r18, r18
     128:	92 0f       	add	r25, r18
     12a:	89 1b       	sub	r24, r25
     12c:	21 e0       	ldi	r18, 0x01	; 1
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	b9 01       	movw	r22, r18
     132:	02 c0       	rjmp	.+4      	; 0x138 <pinMode+0xa6>
     134:	66 0f       	add	r22, r22
     136:	77 1f       	adc	r23, r23
     138:	8a 95       	dec	r24
     13a:	e2 f7       	brpl	.-8      	; 0x134 <pinMode+0xa2>
     13c:	cb 01       	movw	r24, r22
     13e:	96 2f       	mov	r25, r22
     140:	90 95       	com	r25
     142:	94 23       	and	r25, r20
     144:	9a bb       	out	0x1a, r25	; 26
     146:	90 b7       	in	r25, 0x30	; 48
     148:	9b 7f       	andi	r25, 0xFB	; 251
     14a:	90 bf       	out	0x30, r25	; 48
     14c:	9b b3       	in	r25, 0x1b	; 27
     14e:	89 2b       	or	r24, r25
     150:	8b bb       	out	0x1b, r24	; 27
     152:	08 95       	ret
     154:	96 ef       	ldi	r25, 0xF6	; 246
     156:	98 0f       	add	r25, r24
     158:	98 30       	cpi	r25, 0x08	; 8
     15a:	08 f0       	brcs	.+2      	; 0x15e <pinMode+0xcc>
     15c:	5e c0       	rjmp	.+188    	; 0x21a <pinMode+0x188>
     15e:	69 32       	cpi	r22, 0x29	; 41
     160:	d1 f4       	brne	.+52     	; 0x196 <pinMode+0x104>
     162:	47 b3       	in	r20, 0x17	; 23
     164:	9d ec       	ldi	r25, 0xCD	; 205
     166:	89 9f       	mul	r24, r25
     168:	91 2d       	mov	r25, r1
     16a:	11 24       	eor	r1, r1
     16c:	96 95       	lsr	r25
     16e:	96 95       	lsr	r25
     170:	96 95       	lsr	r25
     172:	99 0f       	add	r25, r25
     174:	29 2f       	mov	r18, r25
     176:	22 0f       	add	r18, r18
     178:	22 0f       	add	r18, r18
     17a:	92 0f       	add	r25, r18
     17c:	89 1b       	sub	r24, r25
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	b9 01       	movw	r22, r18
     184:	02 c0       	rjmp	.+4      	; 0x18a <pinMode+0xf8>
     186:	66 0f       	add	r22, r22
     188:	77 1f       	adc	r23, r23
     18a:	8a 95       	dec	r24
     18c:	e2 f7       	brpl	.-8      	; 0x186 <pinMode+0xf4>
     18e:	cb 01       	movw	r24, r22
     190:	84 2b       	or	r24, r20
     192:	87 bb       	out	0x17, r24	; 23
     194:	08 95       	ret
     196:	68 32       	cpi	r22, 0x28	; 40
     198:	d9 f4       	brne	.+54     	; 0x1d0 <pinMode+0x13e>
     19a:	47 b3       	in	r20, 0x17	; 23
     19c:	9d ec       	ldi	r25, 0xCD	; 205
     19e:	89 9f       	mul	r24, r25
     1a0:	91 2d       	mov	r25, r1
     1a2:	11 24       	eor	r1, r1
     1a4:	96 95       	lsr	r25
     1a6:	96 95       	lsr	r25
     1a8:	96 95       	lsr	r25
     1aa:	99 0f       	add	r25, r25
     1ac:	29 2f       	mov	r18, r25
     1ae:	22 0f       	add	r18, r18
     1b0:	22 0f       	add	r18, r18
     1b2:	92 0f       	add	r25, r18
     1b4:	89 1b       	sub	r24, r25
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	b9 01       	movw	r22, r18
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <pinMode+0x130>
     1be:	66 0f       	add	r22, r22
     1c0:	77 1f       	adc	r23, r23
     1c2:	8a 95       	dec	r24
     1c4:	e2 f7       	brpl	.-8      	; 0x1be <pinMode+0x12c>
     1c6:	cb 01       	movw	r24, r22
     1c8:	80 95       	com	r24
     1ca:	84 23       	and	r24, r20
     1cc:	87 bb       	out	0x17, r24	; 23
     1ce:	08 95       	ret
     1d0:	6a 32       	cpi	r22, 0x2A	; 42
     1d2:	09 f0       	breq	.+2      	; 0x1d6 <pinMode+0x144>
     1d4:	e6 c0       	rjmp	.+460    	; 0x3a2 <pinMode+0x310>
     1d6:	47 b3       	in	r20, 0x17	; 23
     1d8:	9d ec       	ldi	r25, 0xCD	; 205
     1da:	89 9f       	mul	r24, r25
     1dc:	91 2d       	mov	r25, r1
     1de:	11 24       	eor	r1, r1
     1e0:	96 95       	lsr	r25
     1e2:	96 95       	lsr	r25
     1e4:	96 95       	lsr	r25
     1e6:	99 0f       	add	r25, r25
     1e8:	29 2f       	mov	r18, r25
     1ea:	22 0f       	add	r18, r18
     1ec:	22 0f       	add	r18, r18
     1ee:	92 0f       	add	r25, r18
     1f0:	89 1b       	sub	r24, r25
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	b9 01       	movw	r22, r18
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <pinMode+0x16c>
     1fa:	66 0f       	add	r22, r22
     1fc:	77 1f       	adc	r23, r23
     1fe:	8a 95       	dec	r24
     200:	e2 f7       	brpl	.-8      	; 0x1fa <pinMode+0x168>
     202:	cb 01       	movw	r24, r22
     204:	96 2f       	mov	r25, r22
     206:	90 95       	com	r25
     208:	94 23       	and	r25, r20
     20a:	97 bb       	out	0x17, r25	; 23
     20c:	90 b7       	in	r25, 0x30	; 48
     20e:	9b 7f       	andi	r25, 0xFB	; 251
     210:	90 bf       	out	0x30, r25	; 48
     212:	98 b3       	in	r25, 0x18	; 24
     214:	89 2b       	or	r24, r25
     216:	88 bb       	out	0x18, r24	; 24
     218:	08 95       	ret
     21a:	9c ee       	ldi	r25, 0xEC	; 236
     21c:	98 0f       	add	r25, r24
     21e:	98 30       	cpi	r25, 0x08	; 8
     220:	08 f0       	brcs	.+2      	; 0x224 <pinMode+0x192>
     222:	5e c0       	rjmp	.+188    	; 0x2e0 <pinMode+0x24e>
     224:	69 32       	cpi	r22, 0x29	; 41
     226:	d1 f4       	brne	.+52     	; 0x25c <pinMode+0x1ca>
     228:	44 b3       	in	r20, 0x14	; 20
     22a:	9d ec       	ldi	r25, 0xCD	; 205
     22c:	89 9f       	mul	r24, r25
     22e:	91 2d       	mov	r25, r1
     230:	11 24       	eor	r1, r1
     232:	96 95       	lsr	r25
     234:	96 95       	lsr	r25
     236:	96 95       	lsr	r25
     238:	99 0f       	add	r25, r25
     23a:	29 2f       	mov	r18, r25
     23c:	22 0f       	add	r18, r18
     23e:	22 0f       	add	r18, r18
     240:	92 0f       	add	r25, r18
     242:	89 1b       	sub	r24, r25
     244:	21 e0       	ldi	r18, 0x01	; 1
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	b9 01       	movw	r22, r18
     24a:	02 c0       	rjmp	.+4      	; 0x250 <pinMode+0x1be>
     24c:	66 0f       	add	r22, r22
     24e:	77 1f       	adc	r23, r23
     250:	8a 95       	dec	r24
     252:	e2 f7       	brpl	.-8      	; 0x24c <pinMode+0x1ba>
     254:	cb 01       	movw	r24, r22
     256:	84 2b       	or	r24, r20
     258:	84 bb       	out	0x14, r24	; 20
     25a:	08 95       	ret
     25c:	68 32       	cpi	r22, 0x28	; 40
     25e:	d9 f4       	brne	.+54     	; 0x296 <pinMode+0x204>
     260:	44 b3       	in	r20, 0x14	; 20
     262:	9d ec       	ldi	r25, 0xCD	; 205
     264:	89 9f       	mul	r24, r25
     266:	91 2d       	mov	r25, r1
     268:	11 24       	eor	r1, r1
     26a:	96 95       	lsr	r25
     26c:	96 95       	lsr	r25
     26e:	96 95       	lsr	r25
     270:	99 0f       	add	r25, r25
     272:	29 2f       	mov	r18, r25
     274:	22 0f       	add	r18, r18
     276:	22 0f       	add	r18, r18
     278:	92 0f       	add	r25, r18
     27a:	89 1b       	sub	r24, r25
     27c:	21 e0       	ldi	r18, 0x01	; 1
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	b9 01       	movw	r22, r18
     282:	02 c0       	rjmp	.+4      	; 0x288 <pinMode+0x1f6>
     284:	66 0f       	add	r22, r22
     286:	77 1f       	adc	r23, r23
     288:	8a 95       	dec	r24
     28a:	e2 f7       	brpl	.-8      	; 0x284 <pinMode+0x1f2>
     28c:	cb 01       	movw	r24, r22
     28e:	80 95       	com	r24
     290:	84 23       	and	r24, r20
     292:	84 bb       	out	0x14, r24	; 20
     294:	08 95       	ret
     296:	6a 32       	cpi	r22, 0x2A	; 42
     298:	09 f0       	breq	.+2      	; 0x29c <pinMode+0x20a>
     29a:	83 c0       	rjmp	.+262    	; 0x3a2 <pinMode+0x310>
     29c:	44 b3       	in	r20, 0x14	; 20
     29e:	9d ec       	ldi	r25, 0xCD	; 205
     2a0:	89 9f       	mul	r24, r25
     2a2:	91 2d       	mov	r25, r1
     2a4:	11 24       	eor	r1, r1
     2a6:	96 95       	lsr	r25
     2a8:	96 95       	lsr	r25
     2aa:	96 95       	lsr	r25
     2ac:	99 0f       	add	r25, r25
     2ae:	29 2f       	mov	r18, r25
     2b0:	22 0f       	add	r18, r18
     2b2:	22 0f       	add	r18, r18
     2b4:	92 0f       	add	r25, r18
     2b6:	89 1b       	sub	r24, r25
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	b9 01       	movw	r22, r18
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <pinMode+0x232>
     2c0:	66 0f       	add	r22, r22
     2c2:	77 1f       	adc	r23, r23
     2c4:	8a 95       	dec	r24
     2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <pinMode+0x22e>
     2c8:	cb 01       	movw	r24, r22
     2ca:	96 2f       	mov	r25, r22
     2cc:	90 95       	com	r25
     2ce:	94 23       	and	r25, r20
     2d0:	94 bb       	out	0x14, r25	; 20
     2d2:	90 b7       	in	r25, 0x30	; 48
     2d4:	9b 7f       	andi	r25, 0xFB	; 251
     2d6:	90 bf       	out	0x30, r25	; 48
     2d8:	95 b3       	in	r25, 0x15	; 21
     2da:	89 2b       	or	r24, r25
     2dc:	85 bb       	out	0x15, r24	; 21
     2de:	08 95       	ret
     2e0:	92 ee       	ldi	r25, 0xE2	; 226
     2e2:	98 0f       	add	r25, r24
     2e4:	98 30       	cpi	r25, 0x08	; 8
     2e6:	08 f0       	brcs	.+2      	; 0x2ea <pinMode+0x258>
     2e8:	5c c0       	rjmp	.+184    	; 0x3a2 <pinMode+0x310>
     2ea:	69 32       	cpi	r22, 0x29	; 41
     2ec:	d1 f4       	brne	.+52     	; 0x322 <pinMode+0x290>
     2ee:	41 b3       	in	r20, 0x11	; 17
     2f0:	9d ec       	ldi	r25, 0xCD	; 205
     2f2:	89 9f       	mul	r24, r25
     2f4:	91 2d       	mov	r25, r1
     2f6:	11 24       	eor	r1, r1
     2f8:	96 95       	lsr	r25
     2fa:	96 95       	lsr	r25
     2fc:	96 95       	lsr	r25
     2fe:	99 0f       	add	r25, r25
     300:	29 2f       	mov	r18, r25
     302:	22 0f       	add	r18, r18
     304:	22 0f       	add	r18, r18
     306:	92 0f       	add	r25, r18
     308:	89 1b       	sub	r24, r25
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	b9 01       	movw	r22, r18
     310:	02 c0       	rjmp	.+4      	; 0x316 <pinMode+0x284>
     312:	66 0f       	add	r22, r22
     314:	77 1f       	adc	r23, r23
     316:	8a 95       	dec	r24
     318:	e2 f7       	brpl	.-8      	; 0x312 <pinMode+0x280>
     31a:	cb 01       	movw	r24, r22
     31c:	84 2b       	or	r24, r20
     31e:	81 bb       	out	0x11, r24	; 17
     320:	08 95       	ret
     322:	68 32       	cpi	r22, 0x28	; 40
     324:	d9 f4       	brne	.+54     	; 0x35c <pinMode+0x2ca>
     326:	41 b3       	in	r20, 0x11	; 17
     328:	9d ec       	ldi	r25, 0xCD	; 205
     32a:	89 9f       	mul	r24, r25
     32c:	91 2d       	mov	r25, r1
     32e:	11 24       	eor	r1, r1
     330:	96 95       	lsr	r25
     332:	96 95       	lsr	r25
     334:	96 95       	lsr	r25
     336:	99 0f       	add	r25, r25
     338:	29 2f       	mov	r18, r25
     33a:	22 0f       	add	r18, r18
     33c:	22 0f       	add	r18, r18
     33e:	92 0f       	add	r25, r18
     340:	89 1b       	sub	r24, r25
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	b9 01       	movw	r22, r18
     348:	02 c0       	rjmp	.+4      	; 0x34e <pinMode+0x2bc>
     34a:	66 0f       	add	r22, r22
     34c:	77 1f       	adc	r23, r23
     34e:	8a 95       	dec	r24
     350:	e2 f7       	brpl	.-8      	; 0x34a <pinMode+0x2b8>
     352:	cb 01       	movw	r24, r22
     354:	80 95       	com	r24
     356:	84 23       	and	r24, r20
     358:	81 bb       	out	0x11, r24	; 17
     35a:	08 95       	ret
     35c:	6a 32       	cpi	r22, 0x2A	; 42
     35e:	09 f5       	brne	.+66     	; 0x3a2 <pinMode+0x310>
     360:	41 b3       	in	r20, 0x11	; 17
     362:	9d ec       	ldi	r25, 0xCD	; 205
     364:	89 9f       	mul	r24, r25
     366:	91 2d       	mov	r25, r1
     368:	11 24       	eor	r1, r1
     36a:	96 95       	lsr	r25
     36c:	96 95       	lsr	r25
     36e:	96 95       	lsr	r25
     370:	99 0f       	add	r25, r25
     372:	29 2f       	mov	r18, r25
     374:	22 0f       	add	r18, r18
     376:	22 0f       	add	r18, r18
     378:	92 0f       	add	r25, r18
     37a:	89 1b       	sub	r24, r25
     37c:	21 e0       	ldi	r18, 0x01	; 1
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	b9 01       	movw	r22, r18
     382:	02 c0       	rjmp	.+4      	; 0x388 <pinMode+0x2f6>
     384:	66 0f       	add	r22, r22
     386:	77 1f       	adc	r23, r23
     388:	8a 95       	dec	r24
     38a:	e2 f7       	brpl	.-8      	; 0x384 <pinMode+0x2f2>
     38c:	cb 01       	movw	r24, r22
     38e:	96 2f       	mov	r25, r22
     390:	90 95       	com	r25
     392:	94 23       	and	r25, r20
     394:	91 bb       	out	0x11, r25	; 17
     396:	90 b7       	in	r25, 0x30	; 48
     398:	9b 7f       	andi	r25, 0xFB	; 251
     39a:	90 bf       	out	0x30, r25	; 48
     39c:	92 b3       	in	r25, 0x12	; 18
     39e:	89 2b       	or	r24, r25
     3a0:	82 bb       	out	0x12, r24	; 18
     3a2:	08 95       	ret

000003a4 <digitalWrite>:
     3a4:	88 30       	cpi	r24, 0x08	; 8
     3a6:	08 f0       	brcs	.+2      	; 0x3aa <digitalWrite+0x6>
     3a8:	46 c0       	rjmp	.+140    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     3aa:	9d ec       	ldi	r25, 0xCD	; 205
     3ac:	69 9f       	mul	r22, r25
     3ae:	91 2d       	mov	r25, r1
     3b0:	11 24       	eor	r1, r1
     3b2:	96 95       	lsr	r25
     3b4:	96 95       	lsr	r25
     3b6:	96 95       	lsr	r25
     3b8:	99 0f       	add	r25, r25
     3ba:	29 2f       	mov	r18, r25
     3bc:	22 0f       	add	r18, r18
     3be:	22 0f       	add	r18, r18
     3c0:	92 0f       	add	r25, r18
     3c2:	69 1b       	sub	r22, r25
     3c4:	61 30       	cpi	r22, 0x01	; 1
     3c6:	d1 f4       	brne	.+52     	; 0x3fc <digitalWrite+0x58>
     3c8:	4b b3       	in	r20, 0x1b	; 27
     3ca:	9d ec       	ldi	r25, 0xCD	; 205
     3cc:	89 9f       	mul	r24, r25
     3ce:	91 2d       	mov	r25, r1
     3d0:	11 24       	eor	r1, r1
     3d2:	96 95       	lsr	r25
     3d4:	96 95       	lsr	r25
     3d6:	96 95       	lsr	r25
     3d8:	99 0f       	add	r25, r25
     3da:	29 2f       	mov	r18, r25
     3dc:	22 0f       	add	r18, r18
     3de:	22 0f       	add	r18, r18
     3e0:	92 0f       	add	r25, r18
     3e2:	89 1b       	sub	r24, r25
     3e4:	21 e0       	ldi	r18, 0x01	; 1
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	b9 01       	movw	r22, r18
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <digitalWrite+0x4c>
     3ec:	66 0f       	add	r22, r22
     3ee:	77 1f       	adc	r23, r23
     3f0:	8a 95       	dec	r24
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <digitalWrite+0x48>
     3f4:	cb 01       	movw	r24, r22
     3f6:	84 2b       	or	r24, r20
     3f8:	8b bb       	out	0x1b, r24	; 27
     3fa:	08 95       	ret
     3fc:	61 11       	cpse	r22, r1
     3fe:	fb c0       	rjmp	.+502    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     400:	4b b3       	in	r20, 0x1b	; 27
     402:	9d ec       	ldi	r25, 0xCD	; 205
     404:	89 9f       	mul	r24, r25
     406:	91 2d       	mov	r25, r1
     408:	11 24       	eor	r1, r1
     40a:	96 95       	lsr	r25
     40c:	96 95       	lsr	r25
     40e:	96 95       	lsr	r25
     410:	99 0f       	add	r25, r25
     412:	29 2f       	mov	r18, r25
     414:	22 0f       	add	r18, r18
     416:	22 0f       	add	r18, r18
     418:	92 0f       	add	r25, r18
     41a:	89 1b       	sub	r24, r25
     41c:	21 e0       	ldi	r18, 0x01	; 1
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	b9 01       	movw	r22, r18
     422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     424:	66 0f       	add	r22, r22
     426:	77 1f       	adc	r23, r23
     428:	8a 95       	dec	r24
     42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     42c:	cb 01       	movw	r24, r22
     42e:	80 95       	com	r24
     430:	84 23       	and	r24, r20
     432:	8b bb       	out	0x1b, r24	; 27
     434:	08 95       	ret
     436:	96 ef       	ldi	r25, 0xF6	; 246
     438:	98 0f       	add	r25, r24
     43a:	98 30       	cpi	r25, 0x08	; 8
     43c:	08 f0       	brcs	.+2      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     43e:	46 c0       	rjmp	.+140    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
     440:	9d ec       	ldi	r25, 0xCD	; 205
     442:	69 9f       	mul	r22, r25
     444:	91 2d       	mov	r25, r1
     446:	11 24       	eor	r1, r1
     448:	96 95       	lsr	r25
     44a:	96 95       	lsr	r25
     44c:	96 95       	lsr	r25
     44e:	99 0f       	add	r25, r25
     450:	29 2f       	mov	r18, r25
     452:	22 0f       	add	r18, r18
     454:	22 0f       	add	r18, r18
     456:	92 0f       	add	r25, r18
     458:	69 1b       	sub	r22, r25
     45a:	61 30       	cpi	r22, 0x01	; 1
     45c:	d1 f4       	brne	.+52     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     45e:	48 b3       	in	r20, 0x18	; 24
     460:	9d ec       	ldi	r25, 0xCD	; 205
     462:	89 9f       	mul	r24, r25
     464:	91 2d       	mov	r25, r1
     466:	11 24       	eor	r1, r1
     468:	96 95       	lsr	r25
     46a:	96 95       	lsr	r25
     46c:	96 95       	lsr	r25
     46e:	99 0f       	add	r25, r25
     470:	29 2f       	mov	r18, r25
     472:	22 0f       	add	r18, r18
     474:	22 0f       	add	r18, r18
     476:	92 0f       	add	r25, r18
     478:	89 1b       	sub	r24, r25
     47a:	21 e0       	ldi	r18, 0x01	; 1
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	b9 01       	movw	r22, r18
     480:	02 c0       	rjmp	.+4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     482:	66 0f       	add	r22, r22
     484:	77 1f       	adc	r23, r23
     486:	8a 95       	dec	r24
     488:	e2 f7       	brpl	.-8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     48a:	cb 01       	movw	r24, r22
     48c:	84 2b       	or	r24, r20
     48e:	88 bb       	out	0x18, r24	; 24
     490:	08 95       	ret
     492:	61 11       	cpse	r22, r1
     494:	b0 c0       	rjmp	.+352    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     496:	48 b3       	in	r20, 0x18	; 24
     498:	9d ec       	ldi	r25, 0xCD	; 205
     49a:	89 9f       	mul	r24, r25
     49c:	91 2d       	mov	r25, r1
     49e:	11 24       	eor	r1, r1
     4a0:	96 95       	lsr	r25
     4a2:	96 95       	lsr	r25
     4a4:	96 95       	lsr	r25
     4a6:	99 0f       	add	r25, r25
     4a8:	29 2f       	mov	r18, r25
     4aa:	22 0f       	add	r18, r18
     4ac:	22 0f       	add	r18, r18
     4ae:	92 0f       	add	r25, r18
     4b0:	89 1b       	sub	r24, r25
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	b9 01       	movw	r22, r18
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     4ba:	66 0f       	add	r22, r22
     4bc:	77 1f       	adc	r23, r23
     4be:	8a 95       	dec	r24
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
     4c2:	cb 01       	movw	r24, r22
     4c4:	80 95       	com	r24
     4c6:	84 23       	and	r24, r20
     4c8:	88 bb       	out	0x18, r24	; 24
     4ca:	08 95       	ret
     4cc:	9c ee       	ldi	r25, 0xEC	; 236
     4ce:	98 0f       	add	r25, r24
     4d0:	98 30       	cpi	r25, 0x08	; 8
     4d2:	08 f0       	brcs	.+2      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
     4d4:	46 c0       	rjmp	.+140    	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
     4d6:	9d ec       	ldi	r25, 0xCD	; 205
     4d8:	69 9f       	mul	r22, r25
     4da:	91 2d       	mov	r25, r1
     4dc:	11 24       	eor	r1, r1
     4de:	96 95       	lsr	r25
     4e0:	96 95       	lsr	r25
     4e2:	96 95       	lsr	r25
     4e4:	99 0f       	add	r25, r25
     4e6:	29 2f       	mov	r18, r25
     4e8:	22 0f       	add	r18, r18
     4ea:	22 0f       	add	r18, r18
     4ec:	92 0f       	add	r25, r18
     4ee:	69 1b       	sub	r22, r25
     4f0:	61 30       	cpi	r22, 0x01	; 1
     4f2:	d1 f4       	brne	.+52     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
     4f4:	45 b3       	in	r20, 0x15	; 21
     4f6:	9d ec       	ldi	r25, 0xCD	; 205
     4f8:	89 9f       	mul	r24, r25
     4fa:	91 2d       	mov	r25, r1
     4fc:	11 24       	eor	r1, r1
     4fe:	96 95       	lsr	r25
     500:	96 95       	lsr	r25
     502:	96 95       	lsr	r25
     504:	99 0f       	add	r25, r25
     506:	29 2f       	mov	r18, r25
     508:	22 0f       	add	r18, r18
     50a:	22 0f       	add	r18, r18
     50c:	92 0f       	add	r25, r18
     50e:	89 1b       	sub	r24, r25
     510:	21 e0       	ldi	r18, 0x01	; 1
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	b9 01       	movw	r22, r18
     516:	02 c0       	rjmp	.+4      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
     518:	66 0f       	add	r22, r22
     51a:	77 1f       	adc	r23, r23
     51c:	8a 95       	dec	r24
     51e:	e2 f7       	brpl	.-8      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
     520:	cb 01       	movw	r24, r22
     522:	84 2b       	or	r24, r20
     524:	85 bb       	out	0x15, r24	; 21
     526:	08 95       	ret
     528:	61 11       	cpse	r22, r1
     52a:	65 c0       	rjmp	.+202    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     52c:	45 b3       	in	r20, 0x15	; 21
     52e:	9d ec       	ldi	r25, 0xCD	; 205
     530:	89 9f       	mul	r24, r25
     532:	91 2d       	mov	r25, r1
     534:	11 24       	eor	r1, r1
     536:	96 95       	lsr	r25
     538:	96 95       	lsr	r25
     53a:	96 95       	lsr	r25
     53c:	99 0f       	add	r25, r25
     53e:	29 2f       	mov	r18, r25
     540:	22 0f       	add	r18, r18
     542:	22 0f       	add	r18, r18
     544:	92 0f       	add	r25, r18
     546:	89 1b       	sub	r24, r25
     548:	21 e0       	ldi	r18, 0x01	; 1
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	b9 01       	movw	r22, r18
     54e:	02 c0       	rjmp	.+4      	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
     550:	66 0f       	add	r22, r22
     552:	77 1f       	adc	r23, r23
     554:	8a 95       	dec	r24
     556:	e2 f7       	brpl	.-8      	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
     558:	cb 01       	movw	r24, r22
     55a:	80 95       	com	r24
     55c:	84 23       	and	r24, r20
     55e:	85 bb       	out	0x15, r24	; 21
     560:	08 95       	ret
     562:	92 ee       	ldi	r25, 0xE2	; 226
     564:	98 0f       	add	r25, r24
     566:	98 30       	cpi	r25, 0x08	; 8
     568:	08 f0       	brcs	.+2      	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
     56a:	45 c0       	rjmp	.+138    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     56c:	9d ec       	ldi	r25, 0xCD	; 205
     56e:	69 9f       	mul	r22, r25
     570:	91 2d       	mov	r25, r1
     572:	11 24       	eor	r1, r1
     574:	96 95       	lsr	r25
     576:	96 95       	lsr	r25
     578:	96 95       	lsr	r25
     57a:	99 0f       	add	r25, r25
     57c:	29 2f       	mov	r18, r25
     57e:	22 0f       	add	r18, r18
     580:	22 0f       	add	r18, r18
     582:	92 0f       	add	r25, r18
     584:	69 1b       	sub	r22, r25
     586:	61 30       	cpi	r22, 0x01	; 1
     588:	d1 f4       	brne	.+52     	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
     58a:	42 b3       	in	r20, 0x12	; 18
     58c:	9d ec       	ldi	r25, 0xCD	; 205
     58e:	89 9f       	mul	r24, r25
     590:	91 2d       	mov	r25, r1
     592:	11 24       	eor	r1, r1
     594:	96 95       	lsr	r25
     596:	96 95       	lsr	r25
     598:	96 95       	lsr	r25
     59a:	99 0f       	add	r25, r25
     59c:	29 2f       	mov	r18, r25
     59e:	22 0f       	add	r18, r18
     5a0:	22 0f       	add	r18, r18
     5a2:	92 0f       	add	r25, r18
     5a4:	89 1b       	sub	r24, r25
     5a6:	21 e0       	ldi	r18, 0x01	; 1
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	b9 01       	movw	r22, r18
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <__EEPROM_REGION_LENGTH__+0x1b2>
     5ae:	66 0f       	add	r22, r22
     5b0:	77 1f       	adc	r23, r23
     5b2:	8a 95       	dec	r24
     5b4:	e2 f7       	brpl	.-8      	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
     5b6:	cb 01       	movw	r24, r22
     5b8:	84 2b       	or	r24, r20
     5ba:	82 bb       	out	0x12, r24	; 18
     5bc:	08 95       	ret
     5be:	61 11       	cpse	r22, r1
     5c0:	1a c0       	rjmp	.+52     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     5c2:	42 b3       	in	r20, 0x12	; 18
     5c4:	9d ec       	ldi	r25, 0xCD	; 205
     5c6:	89 9f       	mul	r24, r25
     5c8:	91 2d       	mov	r25, r1
     5ca:	11 24       	eor	r1, r1
     5cc:	96 95       	lsr	r25
     5ce:	96 95       	lsr	r25
     5d0:	96 95       	lsr	r25
     5d2:	99 0f       	add	r25, r25
     5d4:	29 2f       	mov	r18, r25
     5d6:	22 0f       	add	r18, r18
     5d8:	22 0f       	add	r18, r18
     5da:	92 0f       	add	r25, r18
     5dc:	89 1b       	sub	r24, r25
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	b9 01       	movw	r22, r18
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <__EEPROM_REGION_LENGTH__+0x1ea>
     5e6:	66 0f       	add	r22, r22
     5e8:	77 1f       	adc	r23, r23
     5ea:	8a 95       	dec	r24
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
     5ee:	cb 01       	movw	r24, r22
     5f0:	80 95       	com	r24
     5f2:	84 23       	and	r24, r20
     5f4:	82 bb       	out	0x12, r24	; 18
     5f6:	08 95       	ret

000005f8 <__vector_1>:
}


ISR(INT0_vect)
{
     5f8:	1f 92       	push	r1
     5fa:	0f 92       	push	r0
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	0f 92       	push	r0
     600:	11 24       	eor	r1, r1
     602:	2f 93       	push	r18
     604:	3f 93       	push	r19
     606:	4f 93       	push	r20
     608:	5f 93       	push	r21
     60a:	6f 93       	push	r22
     60c:	7f 93       	push	r23
     60e:	8f 93       	push	r24
     610:	9f 93       	push	r25
     612:	af 93       	push	r26
     614:	bf 93       	push	r27
     616:	ef 93       	push	r30
     618:	ff 93       	push	r31
	ISR0();
     61a:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <ISR0>
     61e:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <ISR0+0x1>
     622:	09 95       	icall
}
     624:	ff 91       	pop	r31
     626:	ef 91       	pop	r30
     628:	bf 91       	pop	r27
     62a:	af 91       	pop	r26
     62c:	9f 91       	pop	r25
     62e:	8f 91       	pop	r24
     630:	7f 91       	pop	r23
     632:	6f 91       	pop	r22
     634:	5f 91       	pop	r21
     636:	4f 91       	pop	r20
     638:	3f 91       	pop	r19
     63a:	2f 91       	pop	r18
     63c:	0f 90       	pop	r0
     63e:	0f be       	out	0x3f, r0	; 63
     640:	0f 90       	pop	r0
     642:	1f 90       	pop	r1
     644:	18 95       	reti

00000646 <__vector_2>:

ISR(INT1_vect)
{
     646:	1f 92       	push	r1
     648:	0f 92       	push	r0
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	0f 92       	push	r0
     64e:	11 24       	eor	r1, r1
     650:	2f 93       	push	r18
     652:	3f 93       	push	r19
     654:	4f 93       	push	r20
     656:	5f 93       	push	r21
     658:	6f 93       	push	r22
     65a:	7f 93       	push	r23
     65c:	8f 93       	push	r24
     65e:	9f 93       	push	r25
     660:	af 93       	push	r26
     662:	bf 93       	push	r27
     664:	ef 93       	push	r30
     666:	ff 93       	push	r31
	ISR1();
     668:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <ISR1>
     66c:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <ISR1+0x1>
     670:	09 95       	icall
}
     672:	ff 91       	pop	r31
     674:	ef 91       	pop	r30
     676:	bf 91       	pop	r27
     678:	af 91       	pop	r26
     67a:	9f 91       	pop	r25
     67c:	8f 91       	pop	r24
     67e:	7f 91       	pop	r23
     680:	6f 91       	pop	r22
     682:	5f 91       	pop	r21
     684:	4f 91       	pop	r20
     686:	3f 91       	pop	r19
     688:	2f 91       	pop	r18
     68a:	0f 90       	pop	r0
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	0f 90       	pop	r0
     690:	1f 90       	pop	r1
     692:	18 95       	reti

00000694 <__vector_3>:

ISR(INT2_vect)
{
     694:	1f 92       	push	r1
     696:	0f 92       	push	r0
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	0f 92       	push	r0
     69c:	11 24       	eor	r1, r1
     69e:	2f 93       	push	r18
     6a0:	3f 93       	push	r19
     6a2:	4f 93       	push	r20
     6a4:	5f 93       	push	r21
     6a6:	6f 93       	push	r22
     6a8:	7f 93       	push	r23
     6aa:	8f 93       	push	r24
     6ac:	9f 93       	push	r25
     6ae:	af 93       	push	r26
     6b0:	bf 93       	push	r27
     6b2:	ef 93       	push	r30
     6b4:	ff 93       	push	r31
	ISR2();
     6b6:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <__data_end>
     6ba:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <__data_end+0x1>
     6be:	09 95       	icall
}
     6c0:	ff 91       	pop	r31
     6c2:	ef 91       	pop	r30
     6c4:	bf 91       	pop	r27
     6c6:	af 91       	pop	r26
     6c8:	9f 91       	pop	r25
     6ca:	8f 91       	pop	r24
     6cc:	7f 91       	pop	r23
     6ce:	6f 91       	pop	r22
     6d0:	5f 91       	pop	r21
     6d2:	4f 91       	pop	r20
     6d4:	3f 91       	pop	r19
     6d6:	2f 91       	pop	r18
     6d8:	0f 90       	pop	r0
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	0f 90       	pop	r0
     6de:	1f 90       	pop	r1
     6e0:	18 95       	reti

000006e2 <Serial_print>:
	
	}
	x[i] = '\0';                           // ensure string is null terminated
	
	
}
     6e2:	4f 92       	push	r4
     6e4:	5f 92       	push	r5
     6e6:	6f 92       	push	r6
     6e8:	7f 92       	push	r7
     6ea:	8f 92       	push	r8
     6ec:	9f 92       	push	r9
     6ee:	af 92       	push	r10
     6f0:	bf 92       	push	r11
     6f2:	cf 92       	push	r12
     6f4:	df 92       	push	r13
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	60 97       	sbiw	r28, 0x10	; 16
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	f8 94       	cli
     708:	de bf       	out	0x3e, r29	; 62
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	cd bf       	out	0x3d, r28	; 61
     70e:	dc 01       	movw	r26, r24
     710:	69 32       	cpi	r22, 0x29	; 41
     712:	39 f5       	brne	.+78     	; 0x762 <Serial_print+0x80>
     714:	11 96       	adiw	r26, 0x01	; 1
     716:	8c 91       	ld	r24, X
     718:	11 97       	sbiw	r26, 0x01	; 1
     71a:	8f 93       	push	r24
     71c:	8c 91       	ld	r24, X
     71e:	8f 93       	push	r24
     720:	86 e6       	ldi	r24, 0x66	; 102
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	9f 93       	push	r25
     726:	8f 93       	push	r24
     728:	ce 01       	movw	r24, r28
     72a:	01 96       	adiw	r24, 0x01	; 1
     72c:	9f 93       	push	r25
     72e:	8f 93       	push	r24
     730:	0e 94 85 10 	call	0x210a	; 0x210a <sprintf>
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	04 c0       	rjmp	.+8      	; 0x74e <Serial_print+0x6c>
     746:	5d 9b       	sbis	0x0b, 5	; 11
     748:	fe cf       	rjmp	.-4      	; 0x746 <Serial_print+0x64>
     74a:	2c b9       	out	0x0c, r18	; 12
     74c:	01 96       	adiw	r24, 0x01	; 1
     74e:	e1 e0       	ldi	r30, 0x01	; 1
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	ec 0f       	add	r30, r28
     754:	fd 1f       	adc	r31, r29
     756:	e8 0f       	add	r30, r24
     758:	f9 1f       	adc	r31, r25
     75a:	20 81       	ld	r18, Z
     75c:	21 11       	cpse	r18, r1
     75e:	f3 cf       	rjmp	.-26     	; 0x746 <Serial_print+0x64>
     760:	5f c0       	rjmp	.+190    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     762:	68 32       	cpi	r22, 0x28	; 40
     764:	09 f0       	breq	.+2      	; 0x768 <Serial_print+0x86>
     766:	46 c0       	rjmp	.+140    	; 0x7f4 <Serial_print+0x112>
     768:	cd 90       	ld	r12, X+
     76a:	dd 90       	ld	r13, X+
     76c:	ed 90       	ld	r14, X+
     76e:	fc 90       	ld	r15, X
     770:	c7 01       	movw	r24, r14
     772:	b6 01       	movw	r22, r12
     774:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <floor>
     778:	2b 01       	movw	r4, r22
     77a:	3c 01       	movw	r6, r24
     77c:	9b 01       	movw	r18, r22
     77e:	ac 01       	movw	r20, r24
     780:	c7 01       	movw	r24, r14
     782:	b6 01       	movw	r22, r12
     784:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
     788:	4b 01       	movw	r8, r22
     78a:	5c 01       	movw	r10, r24
     78c:	c3 01       	movw	r24, r6
     78e:	b2 01       	movw	r22, r4
     790:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__fixsfsi>
     794:	f6 2e       	mov	r15, r22
     796:	e7 2e       	mov	r14, r23
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	4a e7       	ldi	r20, 0x7A	; 122
     79e:	54 e4       	ldi	r21, 0x44	; 68
     7a0:	c5 01       	movw	r24, r10
     7a2:	b4 01       	movw	r22, r8
     7a4:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <__mulsf3>
     7a8:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__fixsfsi>
     7ac:	7f 93       	push	r23
     7ae:	6f 93       	push	r22
     7b0:	ef 92       	push	r14
     7b2:	ff 92       	push	r15
     7b4:	83 e6       	ldi	r24, 0x63	; 99
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	9f 93       	push	r25
     7ba:	8f 93       	push	r24
     7bc:	ce 01       	movw	r24, r28
     7be:	01 96       	adiw	r24, 0x01	; 1
     7c0:	9f 93       	push	r25
     7c2:	8f 93       	push	r24
     7c4:	0e 94 85 10 	call	0x210a	; 0x210a <sprintf>
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <Serial_print+0xfe>
     7d8:	5d 9b       	sbis	0x0b, 5	; 11
     7da:	fe cf       	rjmp	.-4      	; 0x7d8 <Serial_print+0xf6>
     7dc:	2c b9       	out	0x0c, r18	; 12
     7de:	01 96       	adiw	r24, 0x01	; 1
     7e0:	e1 e0       	ldi	r30, 0x01	; 1
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	ec 0f       	add	r30, r28
     7e6:	fd 1f       	adc	r31, r29
     7e8:	e8 0f       	add	r30, r24
     7ea:	f9 1f       	adc	r31, r25
     7ec:	20 81       	ld	r18, Z
     7ee:	21 11       	cpse	r18, r1
     7f0:	f3 cf       	rjmp	.-26     	; 0x7d8 <Serial_print+0xf6>
     7f2:	16 c0       	rjmp	.+44     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     7f4:	6a 32       	cpi	r22, 0x2A	; 42
     7f6:	19 f4       	brne	.+6      	; 0x7fe <Serial_print+0x11c>
     7f8:	8c 91       	ld	r24, X
     7fa:	8c b9       	out	0x0c, r24	; 12
     7fc:	11 c0       	rjmp	.+34     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     7fe:	6b 32       	cpi	r22, 0x2B	; 43
     800:	79 f4       	brne	.+30     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     802:	06 c0       	rjmp	.+12     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     804:	5d 9b       	sbis	0x0b, 5	; 11
     806:	fe cf       	rjmp	.-4      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     808:	9c b9       	out	0x0c, r25	; 12
     80a:	2f 5f       	subi	r18, 0xFF	; 255
     80c:	3f 4f       	sbci	r19, 0xFF	; 255
     80e:	02 c0       	rjmp	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	fd 01       	movw	r30, r26
     816:	e2 0f       	add	r30, r18
     818:	f3 1f       	adc	r31, r19
     81a:	90 81       	ld	r25, Z
     81c:	91 11       	cpse	r25, r1
     81e:	f2 cf       	rjmp	.-28     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     820:	60 96       	adiw	r28, 0x10	; 16
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	ff 90       	pop	r15
     832:	ef 90       	pop	r14
     834:	df 90       	pop	r13
     836:	cf 90       	pop	r12
     838:	bf 90       	pop	r11
     83a:	af 90       	pop	r10
     83c:	9f 90       	pop	r9
     83e:	8f 90       	pop	r8
     840:	7f 90       	pop	r7
     842:	6f 90       	pop	r6
     844:	5f 90       	pop	r5
     846:	4f 90       	pop	r4
     848:	08 95       	ret

0000084a <Serial_begin>:
     84a:	cf 92       	push	r12
     84c:	df 92       	push	r13
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	90 93 ba 05 	sts	0x05BA, r25	; 0x8005ba <baud+0x1>
     856:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <baud>
     85a:	09 2e       	mov	r0, r25
     85c:	00 0c       	add	r0, r0
     85e:	aa 0b       	sbc	r26, r26
     860:	bb 0b       	sbc	r27, r27
     862:	88 0f       	add	r24, r24
     864:	99 1f       	adc	r25, r25
     866:	aa 1f       	adc	r26, r26
     868:	bb 1f       	adc	r27, r27
     86a:	88 0f       	add	r24, r24
     86c:	99 1f       	adc	r25, r25
     86e:	aa 1f       	adc	r26, r26
     870:	bb 1f       	adc	r27, r27
     872:	9c 01       	movw	r18, r24
     874:	ad 01       	movw	r20, r26
     876:	22 0f       	add	r18, r18
     878:	33 1f       	adc	r19, r19
     87a:	44 1f       	adc	r20, r20
     87c:	55 1f       	adc	r21, r21
     87e:	22 0f       	add	r18, r18
     880:	33 1f       	adc	r19, r19
     882:	44 1f       	adc	r20, r20
     884:	55 1f       	adc	r21, r21
     886:	0f 2e       	mov	r0, r31
     888:	c1 2c       	mov	r12, r1
     88a:	f2 e1       	ldi	r31, 0x12	; 18
     88c:	df 2e       	mov	r13, r31
     88e:	fa e7       	ldi	r31, 0x7A	; 122
     890:	ef 2e       	mov	r14, r31
     892:	f1 2c       	mov	r15, r1
     894:	f0 2d       	mov	r31, r0
     896:	c7 01       	movw	r24, r14
     898:	b6 01       	movw	r22, r12
     89a:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__udivmodsi4>
     89e:	da 01       	movw	r26, r20
     8a0:	c9 01       	movw	r24, r18
     8a2:	01 97       	sbiw	r24, 0x01	; 1
     8a4:	a1 09       	sbc	r26, r1
     8a6:	b1 09       	sbc	r27, r1
     8a8:	89 2f       	mov	r24, r25
     8aa:	9a 2f       	mov	r25, r26
     8ac:	ab 2f       	mov	r26, r27
     8ae:	bb 27       	eor	r27, r27
     8b0:	80 bd       	out	0x20, r24	; 32
     8b2:	20 91 b9 05 	lds	r18, 0x05B9	; 0x8005b9 <baud>
     8b6:	30 91 ba 05 	lds	r19, 0x05BA	; 0x8005ba <baud+0x1>
     8ba:	c9 01       	movw	r24, r18
     8bc:	33 0f       	add	r19, r19
     8be:	aa 0b       	sbc	r26, r26
     8c0:	bb 0b       	sbc	r27, r27
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	aa 1f       	adc	r26, r26
     8c8:	bb 1f       	adc	r27, r27
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	aa 1f       	adc	r26, r26
     8d0:	bb 1f       	adc	r27, r27
     8d2:	9c 01       	movw	r18, r24
     8d4:	ad 01       	movw	r20, r26
     8d6:	22 0f       	add	r18, r18
     8d8:	33 1f       	adc	r19, r19
     8da:	44 1f       	adc	r20, r20
     8dc:	55 1f       	adc	r21, r21
     8de:	22 0f       	add	r18, r18
     8e0:	33 1f       	adc	r19, r19
     8e2:	44 1f       	adc	r20, r20
     8e4:	55 1f       	adc	r21, r21
     8e6:	c7 01       	movw	r24, r14
     8e8:	b6 01       	movw	r22, r12
     8ea:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__udivmodsi4>
     8ee:	21 50       	subi	r18, 0x01	; 1
     8f0:	29 b9       	out	0x09, r18	; 9
     8f2:	8a b1       	in	r24, 0x0a	; 10
     8f4:	88 61       	ori	r24, 0x18	; 24
     8f6:	8a b9       	out	0x0a, r24	; 10
     8f8:	80 b5       	in	r24, 0x20	; 32
     8fa:	86 68       	ori	r24, 0x86	; 134
     8fc:	80 bd       	out	0x20, r24	; 32
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	df 90       	pop	r13
     904:	cf 90       	pop	r12
     906:	08 95       	ret

00000908 <__vector_13>:

ISR(USART_RXC_vect){
     908:	1f 92       	push	r1
     90a:	0f 92       	push	r0
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	0f 92       	push	r0
     910:	11 24       	eor	r1, r1
     912:	2f 93       	push	r18
     914:	3f 93       	push	r19
     916:	4f 93       	push	r20
     918:	5f 93       	push	r21
     91a:	6f 93       	push	r22
     91c:	7f 93       	push	r23
     91e:	8f 93       	push	r24
     920:	9f 93       	push	r25
     922:	af 93       	push	r26
     924:	bf 93       	push	r27
     926:	ef 93       	push	r30
     928:	ff 93       	push	r31
RXC_ISR();		
     92a:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <RXC_ISR>
     92e:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <RXC_ISR+0x1>
     932:	09 95       	icall
}
     934:	ff 91       	pop	r31
     936:	ef 91       	pop	r30
     938:	bf 91       	pop	r27
     93a:	af 91       	pop	r26
     93c:	9f 91       	pop	r25
     93e:	8f 91       	pop	r24
     940:	7f 91       	pop	r23
     942:	6f 91       	pop	r22
     944:	5f 91       	pop	r21
     946:	4f 91       	pop	r20
     948:	3f 91       	pop	r19
     94a:	2f 91       	pop	r18
     94c:	0f 90       	pop	r0
     94e:	0f be       	out	0x3f, r0	; 63
     950:	0f 90       	pop	r0
     952:	1f 90       	pop	r1
     954:	18 95       	reti

00000956 <__vector_14>:
ISR(USART_UDRE_vect){
     956:	1f 92       	push	r1
     958:	0f 92       	push	r0
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	0f 92       	push	r0
     95e:	11 24       	eor	r1, r1
     960:	2f 93       	push	r18
     962:	3f 93       	push	r19
     964:	4f 93       	push	r20
     966:	5f 93       	push	r21
     968:	6f 93       	push	r22
     96a:	7f 93       	push	r23
     96c:	8f 93       	push	r24
     96e:	9f 93       	push	r25
     970:	af 93       	push	r26
     972:	bf 93       	push	r27
     974:	ef 93       	push	r30
     976:	ff 93       	push	r31
TXC_ISR();	
     978:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <TXC_ISR>
     97c:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <TXC_ISR+0x1>
     980:	09 95       	icall
     982:	ff 91       	pop	r31
     984:	ef 91       	pop	r30
     986:	bf 91       	pop	r27
     988:	af 91       	pop	r26
     98a:	9f 91       	pop	r25
     98c:	8f 91       	pop	r24
     98e:	7f 91       	pop	r23
     990:	6f 91       	pop	r22
     992:	5f 91       	pop	r21
     994:	4f 91       	pop	r20
     996:	3f 91       	pop	r19
     998:	2f 91       	pop	r18
     99a:	0f 90       	pop	r0
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	0f 90       	pop	r0
     9a0:	1f 90       	pop	r1
     9a2:	18 95       	reti

000009a4 <led1_blink>:
	xTaskCreate(lcd_task_status, "lcd", 150, NULL, 3, &lcd_print);
	vTaskStartScheduler();
}

void led1_blink(void *ptr)
{
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	00 d0       	rcall	.+0      	; 0x9aa <led1_blink+0x6>
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
	char x=0;
	pinMode(A0, OUTPUT);
     9ae:	69 e2       	ldi	r22, 0x29	; 41
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	0e 94 49 00 	call	0x92	; 0x92 <pinMode>
	const TickType_t start_count_1 = xTaskGetTickCount();
     9b6:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <xTaskGetTickCount>
     9ba:	9a 83       	std	Y+2, r25	; 0x02
     9bc:	89 83       	std	Y+1, r24	; 0x01
	vTaskStartScheduler();
}

void led1_blink(void *ptr)
{
	char x=0;
     9be:	10 e0       	ldi	r17, 0x00	; 0
	pinMode(A0, OUTPUT);
	const TickType_t start_count_1 = xTaskGetTickCount();
	while(1)
	{
		if(x==0)
     9c0:	11 11       	cpse	r17, r1
     9c2:	06 c0       	rjmp	.+12     	; 0x9d0 <led1_blink+0x2c>
		{
			digitalWrite(A0, HIGH);
     9c4:	63 e3       	ldi	r22, 0x33	; 51
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
			x=1;
     9cc:	11 e0       	ldi	r17, 0x01	; 1
     9ce:	05 c0       	rjmp	.+10     	; 0x9da <led1_blink+0x36>
		}
		else
		{
			digitalWrite(A0, LOW);
     9d0:	62 e3       	ldi	r22, 0x32	; 50
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
			x=0;
     9d8:	10 e0       	ldi	r17, 0x00	; 0
		}
		vTaskDelayUntil(&start_count_1, pdMS_TO_TICKS(100));
     9da:	64 e6       	ldi	r22, 0x64	; 100
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	ce 01       	movw	r24, r28
     9e0:	01 96       	adiw	r24, 0x01	; 1
     9e2:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xTaskDelayUntil>
		//vTaskSuspend(NULL);
	}
     9e6:	ec cf       	rjmp	.-40     	; 0x9c0 <led1_blink+0x1c>

000009e8 <led2_blink>:
}

void led2_blink(void *ptr)
{
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <led2_blink+0x6>
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
	char x=0;
	pinMode(A1, OUTPUT);
     9f2:	69 e2       	ldi	r22, 0x29	; 41
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	0e 94 49 00 	call	0x92	; 0x92 <pinMode>
	const TickType_t start_count_2 = xTaskGetTickCount();
     9fa:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <xTaskGetTickCount>
     9fe:	9a 83       	std	Y+2, r25	; 0x02
     a00:	89 83       	std	Y+1, r24	; 0x01
	}
}

void led2_blink(void *ptr)
{
	char x=0;
     a02:	10 e0       	ldi	r17, 0x00	; 0
	pinMode(A1, OUTPUT);
	const TickType_t start_count_2 = xTaskGetTickCount();
	while(1)
	{
		if(x==0)
     a04:	11 11       	cpse	r17, r1
     a06:	06 c0       	rjmp	.+12     	; 0xa14 <led2_blink+0x2c>
		{
			digitalWrite(A1, HIGH);
     a08:	63 e3       	ldi	r22, 0x33	; 51
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
			x=1;
     a10:	11 e0       	ldi	r17, 0x01	; 1
     a12:	05 c0       	rjmp	.+10     	; 0xa1e <led2_blink+0x36>
		}
		else
		{
			digitalWrite(A1, LOW);
     a14:	62 e3       	ldi	r22, 0x32	; 50
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <digitalWrite>
			x=0;
     a1c:	10 e0       	ldi	r17, 0x00	; 0
		}
		vTaskDelayUntil(&start_count_2, pdMS_TO_TICKS(500));
     a1e:	64 ef       	ldi	r22, 0xF4	; 244
     a20:	71 e0       	ldi	r23, 0x01	; 1
     a22:	ce 01       	movw	r24, r28
     a24:	01 96       	adiw	r24, 0x01	; 1
     a26:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xTaskDelayUntil>
		//vTaskResume(omar);
	}
     a2a:	ec cf       	rjmp	.-40     	; 0xa04 <led2_blink+0x1c>

00000a2c <lcd_task_status>:
}

void lcd_task_status(void *ptr)
{
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	e2 97       	sbiw	r28, 0x32	; 50
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
	TaskStatus_t task_1_details;
	TaskStatus_t task_2_details;
	TaskStatus_t task_3_details;
	
	const TickType_t start_count_3 = xTaskGetTickCount();
     a40:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <xTaskGetTickCount>
     a44:	9a ab       	std	Y+50, r25	; 0x32
     a46:	89 ab       	std	Y+49, r24	; 0x31
	
	while(1)
	{
		vTaskGetInfo(omar, &task_1_details, pdTRUE, eInvalid);
     a48:	25 e0       	ldi	r18, 0x05	; 5
     a4a:	41 e0       	ldi	r20, 0x01	; 1
     a4c:	be 01       	movw	r22, r28
     a4e:	6f 5f       	subi	r22, 0xFF	; 255
     a50:	7f 4f       	sbci	r23, 0xFF	; 255
     a52:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <omar>
     a56:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <omar+0x1>
     a5a:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <vTaskGetInfo>
		vTaskGetInfo(lasheen, &task_2_details, pdTRUE, eInvalid);
     a5e:	25 e0       	ldi	r18, 0x05	; 5
     a60:	41 e0       	ldi	r20, 0x01	; 1
     a62:	be 01       	movw	r22, r28
     a64:	6f 5e       	subi	r22, 0xEF	; 239
     a66:	7f 4f       	sbci	r23, 0xFF	; 255
     a68:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <lasheen>
     a6c:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <lasheen+0x1>
     a70:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <vTaskGetInfo>
		vTaskGetInfo(NULL, &task_3_details, pdTRUE, eInvalid);
     a74:	25 e0       	ldi	r18, 0x05	; 5
     a76:	41 e0       	ldi	r20, 0x01	; 1
     a78:	be 01       	movw	r22, r28
     a7a:	6f 5d       	subi	r22, 0xDF	; 223
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <vTaskGetInfo>
		
		Serial_print("...Task_1: ", STRING);
     a86:	6b e2       	ldi	r22, 0x2B	; 43
     a88:	89 e6       	ldi	r24, 0x69	; 105
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
		Serial_print((int*)&task_1_details.usStackHighWaterMark,INT);
     a90:	69 e2       	ldi	r22, 0x29	; 41
     a92:	ce 01       	movw	r24, r28
     a94:	0f 96       	adiw	r24, 0x0f	; 15
     a96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
		Serial_print("...", STRING);
     a9a:	6b e2       	ldi	r22, 0x2B	; 43
     a9c:	8e e7       	ldi	r24, 0x7E	; 126
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
	    
		if (task_1_details.eCurrentState == eRunning)
     aa4:	8e 81       	ldd	r24, Y+6	; 0x06
     aa6:	81 11       	cpse	r24, r1
     aa8:	06 c0       	rjmp	.+12     	; 0xab6 <lcd_task_status+0x8a>
		{
			Serial_print("...Task 1 is running...", STRING);
     aaa:	6b e2       	ldi	r22, 0x2B	; 43
     aac:	85 e7       	ldi	r24, 0x75	; 117
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
     ab4:	1f c0       	rjmp	.+62     	; 0xaf4 <lcd_task_status+0xc8>
		}
		else if (task_1_details.eCurrentState == eReady)
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	31 f4       	brne	.+12     	; 0xac6 <lcd_task_status+0x9a>
		{
			Serial_print("...Task 1 is ready...", STRING); //for testing task starvation
     aba:	6b e2       	ldi	r22, 0x2B	; 43
     abc:	8d e8       	ldi	r24, 0x8D	; 141
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
     ac4:	17 c0       	rjmp	.+46     	; 0xaf4 <lcd_task_status+0xc8>
		}
		else if (task_1_details.eCurrentState == eBlocked)
     ac6:	82 30       	cpi	r24, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <lcd_task_status+0xaa>
		{
			Serial_print("...Task 1 is blocked...", STRING);
     aca:	6b e2       	ldi	r22, 0x2B	; 43
     acc:	83 ea       	ldi	r24, 0xA3	; 163
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
     ad4:	0f c0       	rjmp	.+30     	; 0xaf4 <lcd_task_status+0xc8>
		}
		else if (task_1_details.eCurrentState == eSuspended)
     ad6:	83 30       	cpi	r24, 0x03	; 3
     ad8:	31 f4       	brne	.+12     	; 0xae6 <lcd_task_status+0xba>
		{
			Serial_print("...Task 1 is suspended...", STRING);
     ada:	6b e2       	ldi	r22, 0x2B	; 43
     adc:	8b eb       	ldi	r24, 0xBB	; 187
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
     ae4:	07 c0       	rjmp	.+14     	; 0xaf4 <lcd_task_status+0xc8>
		}
		else if (task_1_details.eCurrentState == eDeleted)
     ae6:	84 30       	cpi	r24, 0x04	; 4
     ae8:	29 f4       	brne	.+10     	; 0xaf4 <lcd_task_status+0xc8>
		{
			Serial_print("...Task 1 is deleted...", STRING);
     aea:	6b e2       	ldi	r22, 0x2B	; 43
     aec:	85 ed       	ldi	r24, 0xD5	; 213
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
		}
		
		Serial_print("...Task_2: ", STRING);
     af4:	6b e2       	ldi	r22, 0x2B	; 43
     af6:	8d ee       	ldi	r24, 0xED	; 237
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
		Serial_print((int*)&task_2_details.usStackHighWaterMark,INT);
     afe:	69 e2       	ldi	r22, 0x29	; 41
     b00:	ce 01       	movw	r24, r28
     b02:	4f 96       	adiw	r24, 0x1f	; 31
     b04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
		Serial_print("...", STRING);
     b08:	6b e2       	ldi	r22, 0x2B	; 43
     b0a:	8e e7       	ldi	r24, 0x7E	; 126
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
		if (task_2_details.eCurrentState == eRunning)
     b12:	8e 89       	ldd	r24, Y+22	; 0x16
     b14:	81 11       	cpse	r24, r1
     b16:	06 c0       	rjmp	.+12     	; 0xb24 <lcd_task_status+0xf8>
		{
			Serial_print("...Task 2 is running...", STRING);
     b18:	6b e2       	ldi	r22, 0x2B	; 43
     b1a:	89 ef       	ldi	r24, 0xF9	; 249
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
     b22:	1f c0       	rjmp	.+62     	; 0xb62 <lcd_task_status+0x136>
		}
		else if (task_2_details.eCurrentState == eReady)
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	31 f4       	brne	.+12     	; 0xb34 <lcd_task_status+0x108>
		{
			Serial_print("...Task 2 is ready...", STRING); //for testing task starvation
     b28:	6b e2       	ldi	r22, 0x2B	; 43
     b2a:	81 e1       	ldi	r24, 0x11	; 17
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
     b32:	17 c0       	rjmp	.+46     	; 0xb62 <lcd_task_status+0x136>
		}
		else if (task_2_details.eCurrentState == eBlocked)
     b34:	82 30       	cpi	r24, 0x02	; 2
     b36:	31 f4       	brne	.+12     	; 0xb44 <lcd_task_status+0x118>
		{
			Serial_print("...Task 2 is blocked...", STRING);
     b38:	6b e2       	ldi	r22, 0x2B	; 43
     b3a:	87 e2       	ldi	r24, 0x27	; 39
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
     b42:	0f c0       	rjmp	.+30     	; 0xb62 <lcd_task_status+0x136>
		}
		else if (task_2_details.eCurrentState == eSuspended)
     b44:	83 30       	cpi	r24, 0x03	; 3
     b46:	31 f4       	brne	.+12     	; 0xb54 <lcd_task_status+0x128>
		{
			Serial_print("...Task 2 is suspended...", STRING);
     b48:	6b e2       	ldi	r22, 0x2B	; 43
     b4a:	8f e3       	ldi	r24, 0x3F	; 63
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
     b52:	07 c0       	rjmp	.+14     	; 0xb62 <lcd_task_status+0x136>
		}
		else if (task_2_details.eCurrentState == eDeleted)
     b54:	84 30       	cpi	r24, 0x04	; 4
     b56:	29 f4       	brne	.+10     	; 0xb62 <lcd_task_status+0x136>
		{
			Serial_print("...Task 2 is deleted...", STRING);
     b58:	6b e2       	ldi	r22, 0x2B	; 43
     b5a:	89 e5       	ldi	r24, 0x59	; 89
     b5c:	91 e0       	ldi	r25, 0x01	; 1
     b5e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
		}
		
		Serial_print("...Task_3: ", STRING);
     b62:	6b e2       	ldi	r22, 0x2B	; 43
     b64:	81 e7       	ldi	r24, 0x71	; 113
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
		Serial_print((int*)&task_3_details.usStackHighWaterMark,INT);
     b6c:	69 e2       	ldi	r22, 0x29	; 41
     b6e:	ce 01       	movw	r24, r28
     b70:	8f 96       	adiw	r24, 0x2f	; 47
     b72:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
		Serial_print(" ...", STRING);
     b76:	6b e2       	ldi	r22, 0x2B	; 43
     b78:	8d e7       	ldi	r24, 0x7D	; 125
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
		
		if (task_3_details.eCurrentState == eRunning)
     b80:	8e a1       	ldd	r24, Y+38	; 0x26
     b82:	81 11       	cpse	r24, r1
     b84:	06 c0       	rjmp	.+12     	; 0xb92 <lcd_task_status+0x166>
		{
			Serial_print("...Task 3 is running...", STRING);
     b86:	6b e2       	ldi	r22, 0x2B	; 43
     b88:	82 e8       	ldi	r24, 0x82	; 130
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
     b90:	1f c0       	rjmp	.+62     	; 0xbd0 <lcd_task_status+0x1a4>
		}
		else if (task_3_details.eCurrentState == eReady)
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	31 f4       	brne	.+12     	; 0xba2 <lcd_task_status+0x176>
		{
			Serial_print("...Task 3 is ready...", STRING); //for testing task starvation
     b96:	6b e2       	ldi	r22, 0x2B	; 43
     b98:	8a e9       	ldi	r24, 0x9A	; 154
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
     ba0:	17 c0       	rjmp	.+46     	; 0xbd0 <lcd_task_status+0x1a4>
		}
		else if (task_3_details.eCurrentState == eBlocked)
     ba2:	82 30       	cpi	r24, 0x02	; 2
     ba4:	31 f4       	brne	.+12     	; 0xbb2 <lcd_task_status+0x186>
		{
			Serial_print("...Task 3 is blocked...", STRING);
     ba6:	6b e2       	ldi	r22, 0x2B	; 43
     ba8:	80 eb       	ldi	r24, 0xB0	; 176
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
     bb0:	0f c0       	rjmp	.+30     	; 0xbd0 <lcd_task_status+0x1a4>
		}
		else if (task_3_details.eCurrentState == eSuspended)
     bb2:	83 30       	cpi	r24, 0x03	; 3
     bb4:	31 f4       	brne	.+12     	; 0xbc2 <lcd_task_status+0x196>
		{
			Serial_print("...Task 3 is suspended...", STRING);
     bb6:	6b e2       	ldi	r22, 0x2B	; 43
     bb8:	88 ec       	ldi	r24, 0xC8	; 200
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
     bc0:	07 c0       	rjmp	.+14     	; 0xbd0 <lcd_task_status+0x1a4>
		}
		else if (task_3_details.eCurrentState == eDeleted)
     bc2:	84 30       	cpi	r24, 0x04	; 4
     bc4:	29 f4       	brne	.+10     	; 0xbd0 <lcd_task_status+0x1a4>
		{
			Serial_print("...Task 3 is deleted...", STRING);
     bc6:	6b e2       	ldi	r22, 0x2B	; 43
     bc8:	82 ee       	ldi	r24, 0xE2	; 226
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Serial_print>
		}
			
		vTaskDelayUntil(&start_count_3, pdMS_TO_TICKS(1000));
     bd0:	68 ee       	ldi	r22, 0xE8	; 232
     bd2:	73 e0       	ldi	r23, 0x03	; 3
     bd4:	ce 01       	movw	r24, r28
     bd6:	c1 96       	adiw	r24, 0x31	; 49
     bd8:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <xTaskDelayUntil>
	}
     bdc:	35 cf       	rjmp	.-406    	; 0xa48 <lcd_task_status+0x1c>

00000bde <main>:

TaskHandle_t lcd_print = NULL;
void lcd_task_status(void *ptr);

int main(void)
{
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
	Serial_begin(9600);
     be4:	80 e8       	ldi	r24, 0x80	; 128
     be6:	95 e2       	ldi	r25, 0x25	; 37
     be8:	0e 94 25 04 	call	0x84a	; 0x84a <Serial_begin>
	xTaskCreate(led1_blink, "Ahmed", 50, NULL, 2, &omar);
     bec:	0f 2e       	mov	r0, r31
     bee:	fe e1       	ldi	r31, 0x1E	; 30
     bf0:	ef 2e       	mov	r14, r31
     bf2:	f2 e0       	ldi	r31, 0x02	; 2
     bf4:	ff 2e       	mov	r15, r31
     bf6:	f0 2d       	mov	r31, r0
     bf8:	02 e0       	ldi	r16, 0x02	; 2
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	42 e3       	ldi	r20, 0x32	; 50
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	6a ef       	ldi	r22, 0xFA	; 250
     c04:	71 e0       	ldi	r23, 0x01	; 1
     c06:	82 ed       	ldi	r24, 0xD2	; 210
     c08:	94 e0       	ldi	r25, 0x04	; 4
     c0a:	0e 94 05 0b 	call	0x160a	; 0x160a <xTaskCreate>
	xTaskCreate(led2_blink, "Tarek", 50, NULL, 1, &lasheen);
     c0e:	0f 2e       	mov	r0, r31
     c10:	fc e1       	ldi	r31, 0x1C	; 28
     c12:	ef 2e       	mov	r14, r31
     c14:	f2 e0       	ldi	r31, 0x02	; 2
     c16:	ff 2e       	mov	r15, r31
     c18:	f0 2d       	mov	r31, r0
     c1a:	01 e0       	ldi	r16, 0x01	; 1
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	42 e3       	ldi	r20, 0x32	; 50
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	72 e0       	ldi	r23, 0x02	; 2
     c28:	84 ef       	ldi	r24, 0xF4	; 244
     c2a:	94 e0       	ldi	r25, 0x04	; 4
     c2c:	0e 94 05 0b 	call	0x160a	; 0x160a <xTaskCreate>
	xTaskCreate(lcd_task_status, "lcd", 150, NULL, 3, &lcd_print);
     c30:	0f 2e       	mov	r0, r31
     c32:	fa e1       	ldi	r31, 0x1A	; 26
     c34:	ef 2e       	mov	r14, r31
     c36:	f2 e0       	ldi	r31, 0x02	; 2
     c38:	ff 2e       	mov	r15, r31
     c3a:	f0 2d       	mov	r31, r0
     c3c:	03 e0       	ldi	r16, 0x03	; 3
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	46 e9       	ldi	r20, 0x96	; 150
     c44:	50 e0       	ldi	r21, 0x00	; 0
     c46:	66 e0       	ldi	r22, 0x06	; 6
     c48:	72 e0       	ldi	r23, 0x02	; 2
     c4a:	86 e1       	ldi	r24, 0x16	; 22
     c4c:	95 e0       	ldi	r25, 0x05	; 5
     c4e:	0e 94 05 0b 	call	0x160a	; 0x160a <xTaskCreate>
	vTaskStartScheduler();
     c52:	0e 94 a5 0b 	call	0x174a	; 0x174a <vTaskStartScheduler>
}
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0f 91       	pop	r16
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	08 95       	ret

00000c62 <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     c62:	a5 e2       	ldi	r26, 0x25	; 37
     c64:	b2 e0       	ldi	r27, 0x02	; 2
     c66:	e9 e2       	ldi	r30, 0x29	; 41
     c68:	f2 e0       	ldi	r31, 0x02	; 2
     c6a:	11 96       	adiw	r26, 0x01	; 1
     c6c:	fc 93       	st	X, r31
     c6e:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
     c70:	13 96       	adiw	r26, 0x03	; 3
     c72:	1c 92       	st	X, r1
     c74:	1e 92       	st	-X, r1
     c76:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     c78:	a1 e2       	ldi	r26, 0x21	; 33
     c7a:	b2 e0       	ldi	r27, 0x02	; 2
     c7c:	8f e1       	ldi	r24, 0x1F	; 31
     c7e:	93 e0       	ldi	r25, 0x03	; 3
     c80:	13 96       	adiw	r26, 0x03	; 3
     c82:	9c 93       	st	X, r25
     c84:	8e 93       	st	-X, r24
     c86:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
     c88:	11 96       	adiw	r26, 0x01	; 1
     c8a:	1c 92       	st	X, r1
     c8c:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     c8e:	93 83       	std	Z+3, r25	; 0x03
     c90:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     c92:	b1 83       	std	Z+1, r27	; 0x01
     c94:	a0 83       	st	Z, r26
     c96:	08 95       	ret

00000c98 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     c98:	ef 92       	push	r14
     c9a:	ff 92       	push	r15
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     ca6:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     caa:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <xHeapHasBeenInitialised.2121>
     cae:	81 11       	cpse	r24, r1
     cb0:	05 c0       	rjmp	.+10     	; 0xcbc <pvPortMalloc+0x24>
        {
            prvHeapInit();
     cb2:	0e 94 31 06 	call	0xc62	; 0xc62 <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <xHeapHasBeenInitialised.2121>
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     cbc:	20 97       	sbiw	r28, 0x00	; 0
     cbe:	71 f0       	breq	.+28     	; 0xcdc <pvPortMalloc+0x44>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
     cc0:	ce 01       	movw	r24, r28
     cc2:	04 96       	adiw	r24, 0x04	; 4
            xHeapHasBeenInitialised = pdTRUE;
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     cc4:	c8 17       	cp	r28, r24
     cc6:	d9 07       	cpc	r29, r25
     cc8:	38 f4       	brcc	.+14     	; 0xcd8 <pvPortMalloc+0x40>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
        {
            xWantedSize += heapSTRUCT_SIZE;

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
     cca:	25 96       	adiw	r28, 0x05	; 5
     ccc:	8c 17       	cp	r24, r28
     cce:	9d 07       	cpc	r25, r29
     cd0:	28 f0       	brcs	.+10     	; 0xcdc <pvPortMalloc+0x44>
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
            }
            else
            {
                xWantedSize = 0;
     cd2:	c0 e0       	ldi	r28, 0x00	; 0
     cd4:	d0 e0       	ldi	r29, 0x00	; 0
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <pvPortMalloc+0x44>
            }
        }
        else
        {
            xWantedSize = 0;
     cd8:	c0 e0       	ldi	r28, 0x00	; 0
     cda:	d0 e0       	ldi	r29, 0x00	; 0
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     cdc:	20 97       	sbiw	r28, 0x00	; 0
     cde:	09 f4       	brne	.+2      	; 0xce2 <pvPortMalloc+0x4a>
     ce0:	5e c0       	rjmp	.+188    	; 0xd9e <pvPortMalloc+0x106>
     ce2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     ce6:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     cea:	2c 17       	cp	r18, r28
     cec:	3d 07       	cpc	r19, r29
     cee:	08 f4       	brcc	.+2      	; 0xcf2 <pvPortMalloc+0x5a>
     cf0:	59 c0       	rjmp	.+178    	; 0xda4 <pvPortMalloc+0x10c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;
     cf2:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <xStart>
     cf6:	f0 91 26 02 	lds	r31, 0x0226	; 0x800226 <xStart+0x1>

        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
     cfa:	a5 e2       	ldi	r26, 0x25	; 37
     cfc:	b2 e0       	ldi	r27, 0x02	; 2
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <pvPortMalloc+0x6c>
            {
                pxPreviousBlock = pxBlock;
     d00:	df 01       	movw	r26, r30
                pxBlock = pxBlock->pxNextFreeBlock;
     d02:	fc 01       	movw	r30, r24
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     d04:	82 81       	ldd	r24, Z+2	; 0x02
     d06:	93 81       	ldd	r25, Z+3	; 0x03
     d08:	8c 17       	cp	r24, r28
     d0a:	9d 07       	cpc	r25, r29
     d0c:	20 f4       	brcc	.+8      	; 0xd16 <pvPortMalloc+0x7e>
     d0e:	80 81       	ld	r24, Z
     d10:	91 81       	ldd	r25, Z+1	; 0x01
     d12:	00 97       	sbiw	r24, 0x00	; 0
     d14:	a9 f7       	brne	.-22     	; 0xd00 <pvPortMalloc+0x68>
                pxPreviousBlock = pxBlock;
                pxBlock = pxBlock->pxNextFreeBlock;
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
     d16:	82 e0       	ldi	r24, 0x02	; 2
     d18:	e1 32       	cpi	r30, 0x21	; 33
     d1a:	f8 07       	cpc	r31, r24
     d1c:	09 f4       	brne	.+2      	; 0xd20 <pvPortMalloc+0x88>
     d1e:	45 c0       	rjmp	.+138    	; 0xdaa <pvPortMalloc+0x112>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     d20:	0d 91       	ld	r16, X+
     d22:	1c 91       	ld	r17, X
     d24:	11 97       	sbiw	r26, 0x01	; 1
     d26:	0c 5f       	subi	r16, 0xFC	; 252
     d28:	1f 4f       	sbci	r17, 0xFF	; 255

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     d2a:	80 81       	ld	r24, Z
     d2c:	91 81       	ldd	r25, Z+1	; 0x01
     d2e:	8d 93       	st	X+, r24
     d30:	9c 93       	st	X, r25

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     d32:	82 81       	ldd	r24, Z+2	; 0x02
     d34:	93 81       	ldd	r25, Z+3	; 0x03
     d36:	8c 1b       	sub	r24, r28
     d38:	9d 0b       	sbc	r25, r29
     d3a:	89 30       	cpi	r24, 0x09	; 9
     d3c:	91 05       	cpc	r25, r1
     d3e:	30 f1       	brcs	.+76     	; 0xd8c <pvPortMalloc+0xf4>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     d40:	bf 01       	movw	r22, r30
     d42:	6c 0f       	add	r22, r28
     d44:	7d 1f       	adc	r23, r29

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     d46:	db 01       	movw	r26, r22
     d48:	13 96       	adiw	r26, 0x03	; 3
     d4a:	9c 93       	st	X, r25
     d4c:	8e 93       	st	-X, r24
     d4e:	12 97       	sbiw	r26, 0x02	; 2
                    pxBlock->xBlockSize = xWantedSize;
     d50:	d3 83       	std	Z+3, r29	; 0x03
     d52:	c2 83       	std	Z+2, r28	; 0x02

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     d54:	12 96       	adiw	r26, 0x02	; 2
     d56:	4d 91       	ld	r20, X+
     d58:	5c 91       	ld	r21, X
     d5a:	13 97       	sbiw	r26, 0x03	; 3
     d5c:	0f 2e       	mov	r0, r31
     d5e:	f5 e2       	ldi	r31, 0x25	; 37
     d60:	ef 2e       	mov	r14, r31
     d62:	f2 e0       	ldi	r31, 0x02	; 2
     d64:	ff 2e       	mov	r15, r31
     d66:	f0 2d       	mov	r31, r0
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <pvPortMalloc+0xd4>
     d6a:	7d 01       	movw	r14, r26
     d6c:	e7 01       	movw	r28, r14
     d6e:	a8 81       	ld	r26, Y
     d70:	b9 81       	ldd	r27, Y+1	; 0x01
     d72:	12 96       	adiw	r26, 0x02	; 2
     d74:	8d 91       	ld	r24, X+
     d76:	9c 91       	ld	r25, X
     d78:	13 97       	sbiw	r26, 0x03	; 3
     d7a:	84 17       	cp	r24, r20
     d7c:	95 07       	cpc	r25, r21
     d7e:	a8 f3       	brcs	.-22     	; 0xd6a <pvPortMalloc+0xd2>
     d80:	eb 01       	movw	r28, r22
     d82:	b9 83       	std	Y+1, r27	; 0x01
     d84:	a8 83       	st	Y, r26
     d86:	d7 01       	movw	r26, r14
     d88:	6d 93       	st	X+, r22
     d8a:	7c 93       	st	X, r23
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
     d8c:	82 81       	ldd	r24, Z+2	; 0x02
     d8e:	93 81       	ldd	r25, Z+3	; 0x03
     d90:	28 1b       	sub	r18, r24
     d92:	39 0b       	sbc	r19, r25
     d94:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     d98:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
     d9c:	08 c0       	rjmp	.+16     	; 0xdae <pvPortMalloc+0x116>

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     d9e:	00 e0       	ldi	r16, 0x00	; 0
     da0:	10 e0       	ldi	r17, 0x00	; 0
     da2:	05 c0       	rjmp	.+10     	; 0xdae <pvPortMalloc+0x116>
     da4:	00 e0       	ldi	r16, 0x00	; 0
     da6:	10 e0       	ldi	r17, 0x00	; 0
     da8:	02 c0       	rjmp	.+4      	; 0xdae <pvPortMalloc+0x116>
     daa:	00 e0       	ldi	r16, 0x00	; 0
     dac:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     dae:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     db2:	c8 01       	movw	r24, r16
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ff 90       	pop	r15
     dbe:	ef 90       	pop	r14
     dc0:	08 95       	ret

00000dc2 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	41 f1       	breq	.+80     	; 0xe1e <vPortFree+0x5c>
     dce:	ec 01       	movw	r28, r24
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     dd0:	8c 01       	movw	r16, r24
     dd2:	04 50       	subi	r16, 0x04	; 4
     dd4:	11 09       	sbc	r17, r1

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;

        vTaskSuspendAll();
     dd6:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     dda:	f8 01       	movw	r30, r16
     ddc:	42 81       	ldd	r20, Z+2	; 0x02
     dde:	53 81       	ldd	r21, Z+3	; 0x03
     de0:	a5 e2       	ldi	r26, 0x25	; 37
     de2:	b2 e0       	ldi	r27, 0x02	; 2
     de4:	01 c0       	rjmp	.+2      	; 0xde8 <vPortFree+0x26>
     de6:	df 01       	movw	r26, r30
     de8:	ed 91       	ld	r30, X+
     dea:	fc 91       	ld	r31, X
     dec:	11 97       	sbiw	r26, 0x01	; 1
     dee:	22 81       	ldd	r18, Z+2	; 0x02
     df0:	33 81       	ldd	r19, Z+3	; 0x03
     df2:	24 17       	cp	r18, r20
     df4:	35 07       	cpc	r19, r21
     df6:	b8 f3       	brcs	.-18     	; 0xde6 <vPortFree+0x24>
     df8:	24 97       	sbiw	r28, 0x04	; 4
     dfa:	f9 83       	std	Y+1, r31	; 0x01
     dfc:	e8 83       	st	Y, r30
     dfe:	0d 93       	st	X+, r16
     e00:	1c 93       	st	X, r17
            xFreeBytesRemaining += pxLink->xBlockSize;
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	9b 81       	ldd	r25, Y+3	; 0x03
     e06:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     e0a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     e0e:	82 0f       	add	r24, r18
     e10:	93 1f       	adc	r25, r19
     e12:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     e16:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
     e1a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <xTaskResumeAll>
    }
}
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	08 95       	ret

00000e28 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     e28:	fc 01       	movw	r30, r24
     e2a:	03 96       	adiw	r24, 0x03	; 3
     e2c:	92 83       	std	Z+2, r25	; 0x02
     e2e:	81 83       	std	Z+1, r24	; 0x01
     e30:	2f ef       	ldi	r18, 0xFF	; 255
     e32:	3f ef       	ldi	r19, 0xFF	; 255
     e34:	34 83       	std	Z+4, r19	; 0x04
     e36:	23 83       	std	Z+3, r18	; 0x03
     e38:	96 83       	std	Z+6, r25	; 0x06
     e3a:	85 83       	std	Z+5, r24	; 0x05
     e3c:	90 87       	std	Z+8, r25	; 0x08
     e3e:	87 83       	std	Z+7, r24	; 0x07
     e40:	10 82       	st	Z, r1
     e42:	08 95       	ret

00000e44 <vListInitialiseItem>:
     e44:	fc 01       	movw	r30, r24
     e46:	11 86       	std	Z+9, r1	; 0x09
     e48:	10 86       	std	Z+8, r1	; 0x08
     e4a:	08 95       	ret

00000e4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     e52:	48 81       	ld	r20, Y
     e54:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     e56:	4f 3f       	cpi	r20, 0xFF	; 255
     e58:	2f ef       	ldi	r18, 0xFF	; 255
     e5a:	52 07       	cpc	r21, r18
     e5c:	21 f4       	brne	.+8      	; 0xe66 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     e5e:	fc 01       	movw	r30, r24
     e60:	a7 81       	ldd	r26, Z+7	; 0x07
     e62:	b0 85       	ldd	r27, Z+8	; 0x08
     e64:	0d c0       	rjmp	.+26     	; 0xe80 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     e66:	dc 01       	movw	r26, r24
     e68:	13 96       	adiw	r26, 0x03	; 3
     e6a:	01 c0       	rjmp	.+2      	; 0xe6e <vListInsert+0x22>
     e6c:	df 01       	movw	r26, r30
     e6e:	12 96       	adiw	r26, 0x02	; 2
     e70:	ed 91       	ld	r30, X+
     e72:	fc 91       	ld	r31, X
     e74:	13 97       	sbiw	r26, 0x03	; 3
     e76:	20 81       	ld	r18, Z
     e78:	31 81       	ldd	r19, Z+1	; 0x01
     e7a:	42 17       	cp	r20, r18
     e7c:	53 07       	cpc	r21, r19
     e7e:	b0 f7       	brcc	.-20     	; 0xe6c <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     e80:	12 96       	adiw	r26, 0x02	; 2
     e82:	ed 91       	ld	r30, X+
     e84:	fc 91       	ld	r31, X
     e86:	13 97       	sbiw	r26, 0x03	; 3
     e88:	fb 83       	std	Y+3, r31	; 0x03
     e8a:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     e8c:	d5 83       	std	Z+5, r29	; 0x05
     e8e:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     e90:	bd 83       	std	Y+5, r27	; 0x05
     e92:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     e94:	13 96       	adiw	r26, 0x03	; 3
     e96:	dc 93       	st	X, r29
     e98:	ce 93       	st	-X, r28
     e9a:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     e9c:	99 87       	std	Y+9, r25	; 0x09
     e9e:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     ea0:	fc 01       	movw	r30, r24
     ea2:	20 81       	ld	r18, Z
     ea4:	2f 5f       	subi	r18, 0xFF	; 255
     ea6:	20 83       	st	Z, r18
}
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret

00000eae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     eb4:	a0 85       	ldd	r26, Z+8	; 0x08
     eb6:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     eb8:	c2 81       	ldd	r28, Z+2	; 0x02
     eba:	d3 81       	ldd	r29, Z+3	; 0x03
     ebc:	84 81       	ldd	r24, Z+4	; 0x04
     ebe:	95 81       	ldd	r25, Z+5	; 0x05
     ec0:	9d 83       	std	Y+5, r25	; 0x05
     ec2:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     ec4:	c4 81       	ldd	r28, Z+4	; 0x04
     ec6:	d5 81       	ldd	r29, Z+5	; 0x05
     ec8:	82 81       	ldd	r24, Z+2	; 0x02
     eca:	93 81       	ldd	r25, Z+3	; 0x03
     ecc:	9b 83       	std	Y+3, r25	; 0x03
     ece:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     ed0:	11 96       	adiw	r26, 0x01	; 1
     ed2:	8d 91       	ld	r24, X+
     ed4:	9c 91       	ld	r25, X
     ed6:	12 97       	sbiw	r26, 0x02	; 2
     ed8:	e8 17       	cp	r30, r24
     eda:	f9 07       	cpc	r31, r25
     edc:	31 f4       	brne	.+12     	; 0xeea <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     ede:	84 81       	ldd	r24, Z+4	; 0x04
     ee0:	95 81       	ldd	r25, Z+5	; 0x05
     ee2:	12 96       	adiw	r26, 0x02	; 2
     ee4:	9c 93       	st	X, r25
     ee6:	8e 93       	st	-X, r24
     ee8:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     eea:	11 86       	std	Z+9, r1	; 0x09
     eec:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     eee:	8c 91       	ld	r24, X
     ef0:	81 50       	subi	r24, 0x01	; 1
     ef2:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     ef4:	8c 91       	ld	r24, X
}
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     efc:	1b bc       	out	0x2b, r1	; 43
     efe:	8c e7       	ldi	r24, 0x7C	; 124
     f00:	8a bd       	out	0x2a, r24	; 42
     f02:	8b e0       	ldi	r24, 0x0B	; 11
     f04:	8e bd       	out	0x2e, r24	; 46
     f06:	89 b7       	in	r24, 0x39	; 57
     f08:	80 61       	ori	r24, 0x10	; 16
     f0a:	89 bf       	out	0x39, r24	; 57
     f0c:	08 95       	ret

00000f0e <pxPortInitialiseStack>:
     f0e:	31 e1       	ldi	r19, 0x11	; 17
     f10:	fc 01       	movw	r30, r24
     f12:	30 83       	st	Z, r19
     f14:	31 97       	sbiw	r30, 0x01	; 1
     f16:	22 e2       	ldi	r18, 0x22	; 34
     f18:	20 83       	st	Z, r18
     f1a:	31 97       	sbiw	r30, 0x01	; 1
     f1c:	a3 e3       	ldi	r26, 0x33	; 51
     f1e:	a0 83       	st	Z, r26
     f20:	31 97       	sbiw	r30, 0x01	; 1
     f22:	60 83       	st	Z, r22
     f24:	31 97       	sbiw	r30, 0x01	; 1
     f26:	70 83       	st	Z, r23
     f28:	31 97       	sbiw	r30, 0x01	; 1
     f2a:	10 82       	st	Z, r1
     f2c:	31 97       	sbiw	r30, 0x01	; 1
     f2e:	60 e8       	ldi	r22, 0x80	; 128
     f30:	60 83       	st	Z, r22
     f32:	31 97       	sbiw	r30, 0x01	; 1
     f34:	10 82       	st	Z, r1
     f36:	31 97       	sbiw	r30, 0x01	; 1
     f38:	62 e0       	ldi	r22, 0x02	; 2
     f3a:	60 83       	st	Z, r22
     f3c:	31 97       	sbiw	r30, 0x01	; 1
     f3e:	63 e0       	ldi	r22, 0x03	; 3
     f40:	60 83       	st	Z, r22
     f42:	31 97       	sbiw	r30, 0x01	; 1
     f44:	64 e0       	ldi	r22, 0x04	; 4
     f46:	60 83       	st	Z, r22
     f48:	31 97       	sbiw	r30, 0x01	; 1
     f4a:	65 e0       	ldi	r22, 0x05	; 5
     f4c:	60 83       	st	Z, r22
     f4e:	31 97       	sbiw	r30, 0x01	; 1
     f50:	66 e0       	ldi	r22, 0x06	; 6
     f52:	60 83       	st	Z, r22
     f54:	31 97       	sbiw	r30, 0x01	; 1
     f56:	67 e0       	ldi	r22, 0x07	; 7
     f58:	60 83       	st	Z, r22
     f5a:	31 97       	sbiw	r30, 0x01	; 1
     f5c:	68 e0       	ldi	r22, 0x08	; 8
     f5e:	60 83       	st	Z, r22
     f60:	31 97       	sbiw	r30, 0x01	; 1
     f62:	69 e0       	ldi	r22, 0x09	; 9
     f64:	60 83       	st	Z, r22
     f66:	31 97       	sbiw	r30, 0x01	; 1
     f68:	60 e1       	ldi	r22, 0x10	; 16
     f6a:	60 83       	st	Z, r22
     f6c:	31 97       	sbiw	r30, 0x01	; 1
     f6e:	30 83       	st	Z, r19
     f70:	31 97       	sbiw	r30, 0x01	; 1
     f72:	32 e1       	ldi	r19, 0x12	; 18
     f74:	30 83       	st	Z, r19
     f76:	31 97       	sbiw	r30, 0x01	; 1
     f78:	33 e1       	ldi	r19, 0x13	; 19
     f7a:	30 83       	st	Z, r19
     f7c:	31 97       	sbiw	r30, 0x01	; 1
     f7e:	34 e1       	ldi	r19, 0x14	; 20
     f80:	30 83       	st	Z, r19
     f82:	31 97       	sbiw	r30, 0x01	; 1
     f84:	35 e1       	ldi	r19, 0x15	; 21
     f86:	30 83       	st	Z, r19
     f88:	31 97       	sbiw	r30, 0x01	; 1
     f8a:	36 e1       	ldi	r19, 0x16	; 22
     f8c:	30 83       	st	Z, r19
     f8e:	31 97       	sbiw	r30, 0x01	; 1
     f90:	37 e1       	ldi	r19, 0x17	; 23
     f92:	30 83       	st	Z, r19
     f94:	31 97       	sbiw	r30, 0x01	; 1
     f96:	38 e1       	ldi	r19, 0x18	; 24
     f98:	30 83       	st	Z, r19
     f9a:	31 97       	sbiw	r30, 0x01	; 1
     f9c:	39 e1       	ldi	r19, 0x19	; 25
     f9e:	30 83       	st	Z, r19
     fa0:	31 97       	sbiw	r30, 0x01	; 1
     fa2:	30 e2       	ldi	r19, 0x20	; 32
     fa4:	30 83       	st	Z, r19
     fa6:	31 97       	sbiw	r30, 0x01	; 1
     fa8:	31 e2       	ldi	r19, 0x21	; 33
     faa:	30 83       	st	Z, r19
     fac:	31 97       	sbiw	r30, 0x01	; 1
     fae:	20 83       	st	Z, r18
     fb0:	31 97       	sbiw	r30, 0x01	; 1
     fb2:	23 e2       	ldi	r18, 0x23	; 35
     fb4:	20 83       	st	Z, r18
     fb6:	31 97       	sbiw	r30, 0x01	; 1
     fb8:	40 83       	st	Z, r20
     fba:	31 97       	sbiw	r30, 0x01	; 1
     fbc:	50 83       	st	Z, r21
     fbe:	31 97       	sbiw	r30, 0x01	; 1
     fc0:	26 e2       	ldi	r18, 0x26	; 38
     fc2:	20 83       	st	Z, r18
     fc4:	31 97       	sbiw	r30, 0x01	; 1
     fc6:	27 e2       	ldi	r18, 0x27	; 39
     fc8:	20 83       	st	Z, r18
     fca:	31 97       	sbiw	r30, 0x01	; 1
     fcc:	28 e2       	ldi	r18, 0x28	; 40
     fce:	20 83       	st	Z, r18
     fd0:	31 97       	sbiw	r30, 0x01	; 1
     fd2:	29 e2       	ldi	r18, 0x29	; 41
     fd4:	20 83       	st	Z, r18
     fd6:	31 97       	sbiw	r30, 0x01	; 1
     fd8:	20 e3       	ldi	r18, 0x30	; 48
     fda:	20 83       	st	Z, r18
     fdc:	31 97       	sbiw	r30, 0x01	; 1
     fde:	21 e3       	ldi	r18, 0x31	; 49
     fe0:	20 83       	st	Z, r18
     fe2:	86 97       	sbiw	r24, 0x26	; 38
     fe4:	08 95       	ret

00000fe6 <xPortStartScheduler>:
     fe6:	0e 94 7e 07 	call	0xefc	; 0xefc <prvSetupTimerInterrupt>
     fea:	a0 91 b7 05 	lds	r26, 0x05B7	; 0x8005b7 <pxCurrentTCB>
     fee:	b0 91 b8 05 	lds	r27, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
     ff2:	cd 91       	ld	r28, X+
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	dd 91       	ld	r29, X+
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	ff 91       	pop	r31
     ffc:	ef 91       	pop	r30
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	bf 91       	pop	r27
    1004:	af 91       	pop	r26
    1006:	9f 91       	pop	r25
    1008:	8f 91       	pop	r24
    100a:	7f 91       	pop	r23
    100c:	6f 91       	pop	r22
    100e:	5f 91       	pop	r21
    1010:	4f 91       	pop	r20
    1012:	3f 91       	pop	r19
    1014:	2f 91       	pop	r18
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	ff 90       	pop	r15
    101c:	ef 90       	pop	r14
    101e:	df 90       	pop	r13
    1020:	cf 90       	pop	r12
    1022:	bf 90       	pop	r11
    1024:	af 90       	pop	r10
    1026:	9f 90       	pop	r9
    1028:	8f 90       	pop	r8
    102a:	7f 90       	pop	r7
    102c:	6f 90       	pop	r6
    102e:	5f 90       	pop	r5
    1030:	4f 90       	pop	r4
    1032:	3f 90       	pop	r3
    1034:	2f 90       	pop	r2
    1036:	1f 90       	pop	r1
    1038:	0f 90       	pop	r0
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	0f 90       	pop	r0
    103e:	08 95       	ret
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	08 95       	ret

00001044 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1044:	0f 92       	push	r0
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	0f 92       	push	r0
    104c:	1f 92       	push	r1
    104e:	11 24       	eor	r1, r1
    1050:	2f 92       	push	r2
    1052:	3f 92       	push	r3
    1054:	4f 92       	push	r4
    1056:	5f 92       	push	r5
    1058:	6f 92       	push	r6
    105a:	7f 92       	push	r7
    105c:	8f 92       	push	r8
    105e:	9f 92       	push	r9
    1060:	af 92       	push	r10
    1062:	bf 92       	push	r11
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	2f 93       	push	r18
    1072:	3f 93       	push	r19
    1074:	4f 93       	push	r20
    1076:	5f 93       	push	r21
    1078:	6f 93       	push	r22
    107a:	7f 93       	push	r23
    107c:	8f 93       	push	r24
    107e:	9f 93       	push	r25
    1080:	af 93       	push	r26
    1082:	bf 93       	push	r27
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	ef 93       	push	r30
    108a:	ff 93       	push	r31
    108c:	a0 91 b7 05 	lds	r26, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    1090:	b0 91 b8 05 	lds	r27, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    1094:	0d b6       	in	r0, 0x3d	; 61
    1096:	0d 92       	st	X+, r0
    1098:	0e b6       	in	r0, 0x3e	; 62
    109a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    109c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    10a0:	a0 91 b7 05 	lds	r26, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    10a4:	b0 91 b8 05 	lds	r27, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    10a8:	cd 91       	ld	r28, X+
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	dd 91       	ld	r29, X+
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	ff 91       	pop	r31
    10b2:	ef 91       	pop	r30
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	bf 91       	pop	r27
    10ba:	af 91       	pop	r26
    10bc:	9f 91       	pop	r25
    10be:	8f 91       	pop	r24
    10c0:	7f 91       	pop	r23
    10c2:	6f 91       	pop	r22
    10c4:	5f 91       	pop	r21
    10c6:	4f 91       	pop	r20
    10c8:	3f 91       	pop	r19
    10ca:	2f 91       	pop	r18
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	ef 90       	pop	r14
    10d4:	df 90       	pop	r13
    10d6:	cf 90       	pop	r12
    10d8:	bf 90       	pop	r11
    10da:	af 90       	pop	r10
    10dc:	9f 90       	pop	r9
    10de:	8f 90       	pop	r8
    10e0:	7f 90       	pop	r7
    10e2:	6f 90       	pop	r6
    10e4:	5f 90       	pop	r5
    10e6:	4f 90       	pop	r4
    10e8:	3f 90       	pop	r3
    10ea:	2f 90       	pop	r2
    10ec:	1f 90       	pop	r1
    10ee:	0f 90       	pop	r0
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	0f 90       	pop	r0

	asm volatile ( "ret" );
    10f4:	08 95       	ret

000010f6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    10f6:	0f 92       	push	r0
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	0f 92       	push	r0
    10fe:	1f 92       	push	r1
    1100:	11 24       	eor	r1, r1
    1102:	2f 92       	push	r2
    1104:	3f 92       	push	r3
    1106:	4f 92       	push	r4
    1108:	5f 92       	push	r5
    110a:	6f 92       	push	r6
    110c:	7f 92       	push	r7
    110e:	8f 92       	push	r8
    1110:	9f 92       	push	r9
    1112:	af 92       	push	r10
    1114:	bf 92       	push	r11
    1116:	cf 92       	push	r12
    1118:	df 92       	push	r13
    111a:	ef 92       	push	r14
    111c:	ff 92       	push	r15
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	2f 93       	push	r18
    1124:	3f 93       	push	r19
    1126:	4f 93       	push	r20
    1128:	5f 93       	push	r21
    112a:	6f 93       	push	r22
    112c:	7f 93       	push	r23
    112e:	8f 93       	push	r24
    1130:	9f 93       	push	r25
    1132:	af 93       	push	r26
    1134:	bf 93       	push	r27
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	ef 93       	push	r30
    113c:	ff 93       	push	r31
    113e:	a0 91 b7 05 	lds	r26, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    1142:	b0 91 b8 05 	lds	r27, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    1146:	0d b6       	in	r0, 0x3d	; 61
    1148:	0d 92       	st	X+, r0
    114a:	0e b6       	in	r0, 0x3e	; 62
    114c:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    114e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <xTaskIncrementTick>
    1152:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    1154:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1158:	a0 91 b7 05 	lds	r26, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    115c:	b0 91 b8 05 	lds	r27, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    1160:	cd 91       	ld	r28, X+
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	dd 91       	ld	r29, X+
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	ff 91       	pop	r31
    116a:	ef 91       	pop	r30
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	bf 91       	pop	r27
    1172:	af 91       	pop	r26
    1174:	9f 91       	pop	r25
    1176:	8f 91       	pop	r24
    1178:	7f 91       	pop	r23
    117a:	6f 91       	pop	r22
    117c:	5f 91       	pop	r21
    117e:	4f 91       	pop	r20
    1180:	3f 91       	pop	r19
    1182:	2f 91       	pop	r18
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	df 90       	pop	r13
    118e:	cf 90       	pop	r12
    1190:	bf 90       	pop	r11
    1192:	af 90       	pop	r10
    1194:	9f 90       	pop	r9
    1196:	8f 90       	pop	r8
    1198:	7f 90       	pop	r7
    119a:	6f 90       	pop	r6
    119c:	5f 90       	pop	r5
    119e:	4f 90       	pop	r4
    11a0:	3f 90       	pop	r3
    11a2:	2f 90       	pop	r2
    11a4:	1f 90       	pop	r1
    11a6:	0f 90       	pop	r0
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	0f 90       	pop	r0

	asm volatile ( "ret" );
    11ac:	08 95       	ret

000011ae <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    11ae:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <vPortYieldFromTick>
		asm volatile ( "reti" );
    11b2:	18 95       	reti

000011b4 <prvTaskCheckFreeStackSpace>:
        TCB_t * pxTCB;

        if( xTask != NULL )
        {
            pxTCB = xTask;
            pxTCB->uxTaskNumber = uxHandle;
    11b4:	fc 01       	movw	r30, r24
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	dc 01       	movw	r26, r24
    11bc:	04 c0       	rjmp	.+8      	; 0x11c6 <prvTaskCheckFreeStackSpace+0x12>
    11be:	31 96       	adiw	r30, 0x01	; 1
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	a1 1d       	adc	r26, r1
    11c4:	b1 1d       	adc	r27, r1
    11c6:	20 81       	ld	r18, Z
    11c8:	25 3a       	cpi	r18, 0xA5	; 165
    11ca:	c9 f3       	breq	.-14     	; 0x11be <prvTaskCheckFreeStackSpace+0xa>
    11cc:	08 95       	ret

000011ce <prvResetNextTaskUnblockTime>:
    11ce:	e0 91 76 05 	lds	r30, 0x0576	; 0x800576 <pxDelayedTaskList>
    11d2:	f0 91 77 05 	lds	r31, 0x0577	; 0x800577 <pxDelayedTaskList+0x1>
    11d6:	80 81       	ld	r24, Z
    11d8:	81 11       	cpse	r24, r1
    11da:	07 c0       	rjmp	.+14     	; 0x11ea <prvResetNextTaskUnblockTime+0x1c>
    11dc:	8f ef       	ldi	r24, 0xFF	; 255
    11de:	9f ef       	ldi	r25, 0xFF	; 255
    11e0:	90 93 4d 05 	sts	0x054D, r25	; 0x80054d <xNextTaskUnblockTime+0x1>
    11e4:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <xNextTaskUnblockTime>
    11e8:	08 95       	ret
    11ea:	e0 91 76 05 	lds	r30, 0x0576	; 0x800576 <pxDelayedTaskList>
    11ee:	f0 91 77 05 	lds	r31, 0x0577	; 0x800577 <pxDelayedTaskList+0x1>
    11f2:	05 80       	ldd	r0, Z+5	; 0x05
    11f4:	f6 81       	ldd	r31, Z+6	; 0x06
    11f6:	e0 2d       	mov	r30, r0
    11f8:	80 81       	ld	r24, Z
    11fa:	91 81       	ldd	r25, Z+1	; 0x01
    11fc:	90 93 4d 05 	sts	0x054D, r25	; 0x80054d <xNextTaskUnblockTime+0x1>
    1200:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <xNextTaskUnblockTime>
    1204:	08 95       	ret

00001206 <prvDeleteTCB>:
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	ec 01       	movw	r28, r24
    120c:	8f 89       	ldd	r24, Y+23	; 0x17
    120e:	98 8d       	ldd	r25, Y+24	; 0x18
    1210:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <vPortFree>
    1214:	ce 01       	movw	r24, r28
    1216:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <vPortFree>
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <prvInitialiseNewTask>:
    1220:	2f 92       	push	r2
    1222:	3f 92       	push	r3
    1224:	4f 92       	push	r4
    1226:	5f 92       	push	r5
    1228:	6f 92       	push	r6
    122a:	7f 92       	push	r7
    122c:	8f 92       	push	r8
    122e:	9f 92       	push	r9
    1230:	af 92       	push	r10
    1232:	bf 92       	push	r11
    1234:	cf 92       	push	r12
    1236:	df 92       	push	r13
    1238:	ef 92       	push	r14
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	1c 01       	movw	r2, r24
    1248:	4b 01       	movw	r8, r22
    124a:	29 01       	movw	r4, r18
    124c:	3a 01       	movw	r6, r20
    124e:	a9 01       	movw	r20, r18
    1250:	65 ea       	ldi	r22, 0xA5	; 165
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	d5 01       	movw	r26, r10
    1256:	57 96       	adiw	r26, 0x17	; 23
    1258:	8d 91       	ld	r24, X+
    125a:	9c 91       	ld	r25, X
    125c:	58 97       	sbiw	r26, 0x18	; 24
    125e:	0e 94 7e 10 	call	0x20fc	; 0x20fc <memset>
    1262:	f5 01       	movw	r30, r10
    1264:	87 89       	ldd	r24, Z+23	; 0x17
    1266:	90 8d       	ldd	r25, Z+24	; 0x18
    1268:	f1 e0       	ldi	r31, 0x01	; 1
    126a:	4f 1a       	sub	r4, r31
    126c:	51 08       	sbc	r5, r1
    126e:	48 0e       	add	r4, r24
    1270:	59 1e       	adc	r5, r25
    1272:	81 14       	cp	r8, r1
    1274:	91 04       	cpc	r9, r1
    1276:	89 f4       	brne	.+34     	; 0x129a <prvInitialiseNewTask+0x7a>
    1278:	17 c0       	rjmp	.+46     	; 0x12a8 <prvInitialiseNewTask+0x88>
    127a:	82 2f       	mov	r24, r18
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	f4 01       	movw	r30, r8
    1280:	e8 0f       	add	r30, r24
    1282:	f9 1f       	adc	r31, r25
    1284:	30 81       	ld	r19, Z
    1286:	d5 01       	movw	r26, r10
    1288:	a8 0f       	add	r26, r24
    128a:	b9 1f       	adc	r27, r25
    128c:	59 96       	adiw	r26, 0x19	; 25
    128e:	3c 93       	st	X, r19
    1290:	80 81       	ld	r24, Z
    1292:	88 23       	and	r24, r24
    1294:	29 f0       	breq	.+10     	; 0x12a0 <prvInitialiseNewTask+0x80>
    1296:	2f 5f       	subi	r18, 0xFF	; 255
    1298:	01 c0       	rjmp	.+2      	; 0x129c <prvInitialiseNewTask+0x7c>
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	2a 30       	cpi	r18, 0x0A	; 10
    129e:	68 f3       	brcs	.-38     	; 0x127a <prvInitialiseNewTask+0x5a>
    12a0:	d5 01       	movw	r26, r10
    12a2:	92 96       	adiw	r26, 0x22	; 34
    12a4:	1c 92       	st	X, r1
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <prvInitialiseNewTask+0x8c>
    12a8:	f5 01       	movw	r30, r10
    12aa:	11 8e       	std	Z+25, r1	; 0x19
    12ac:	f4 e0       	ldi	r31, 0x04	; 4
    12ae:	fe 15       	cp	r31, r14
    12b0:	18 f4       	brcc	.+6      	; 0x12b8 <prvInitialiseNewTask+0x98>
    12b2:	68 94       	set
    12b4:	ee 24       	eor	r14, r14
    12b6:	e2 f8       	bld	r14, 2
    12b8:	d5 01       	movw	r26, r10
    12ba:	56 96       	adiw	r26, 0x16	; 22
    12bc:	ec 92       	st	X, r14
    12be:	56 97       	sbiw	r26, 0x16	; 22
    12c0:	95 96       	adiw	r26, 0x25	; 37
    12c2:	ec 92       	st	X, r14
    12c4:	95 97       	sbiw	r26, 0x25	; 37
    12c6:	96 96       	adiw	r26, 0x26	; 38
    12c8:	1c 92       	st	X, r1
    12ca:	c5 01       	movw	r24, r10
    12cc:	02 96       	adiw	r24, 0x02	; 2
    12ce:	0e 94 22 07 	call	0xe44	; 0xe44 <vListInitialiseItem>
    12d2:	c5 01       	movw	r24, r10
    12d4:	0c 96       	adiw	r24, 0x0c	; 12
    12d6:	0e 94 22 07 	call	0xe44	; 0xe44 <vListInitialiseItem>
    12da:	f5 01       	movw	r30, r10
    12dc:	b1 86       	std	Z+9, r11	; 0x09
    12de:	a0 86       	std	Z+8, r10	; 0x08
    12e0:	85 e0       	ldi	r24, 0x05	; 5
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	8e 19       	sub	r24, r14
    12e6:	91 09       	sbc	r25, r1
    12e8:	95 87       	std	Z+13, r25	; 0x0d
    12ea:	84 87       	std	Z+12, r24	; 0x0c
    12ec:	b3 8a       	std	Z+19, r11	; 0x13
    12ee:	a2 8a       	std	Z+18, r10	; 0x12
    12f0:	84 e0       	ldi	r24, 0x04	; 4
    12f2:	b7 96       	adiw	r30, 0x27	; 39
    12f4:	df 01       	movw	r26, r30
    12f6:	1d 92       	st	X+, r1
    12f8:	8a 95       	dec	r24
    12fa:	e9 f7       	brne	.-6      	; 0x12f6 <prvInitialiseNewTask+0xd6>
    12fc:	f5 01       	movw	r30, r10
    12fe:	13 a6       	std	Z+43, r1	; 0x2b
    1300:	a8 01       	movw	r20, r16
    1302:	b1 01       	movw	r22, r2
    1304:	c2 01       	movw	r24, r4
    1306:	0e 94 87 07 	call	0xf0e	; 0xf0e <pxPortInitialiseStack>
    130a:	d5 01       	movw	r26, r10
    130c:	8d 93       	st	X+, r24
    130e:	9c 93       	st	X, r25
    1310:	c1 14       	cp	r12, r1
    1312:	d1 04       	cpc	r13, r1
    1314:	19 f0       	breq	.+6      	; 0x131c <prvInitialiseNewTask+0xfc>
    1316:	f6 01       	movw	r30, r12
    1318:	b1 82       	std	Z+1, r11	; 0x01
    131a:	a0 82       	st	Z, r10
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ef 90       	pop	r14
    1326:	df 90       	pop	r13
    1328:	cf 90       	pop	r12
    132a:	bf 90       	pop	r11
    132c:	af 90       	pop	r10
    132e:	9f 90       	pop	r9
    1330:	8f 90       	pop	r8
    1332:	7f 90       	pop	r7
    1334:	6f 90       	pop	r6
    1336:	5f 90       	pop	r5
    1338:	4f 90       	pop	r4
    133a:	3f 90       	pop	r3
    133c:	2f 90       	pop	r2
    133e:	08 95       	ret

00001340 <prvInitialiseTaskLists>:
    1340:	cf 93       	push	r28
    1342:	c0 e0       	ldi	r28, 0x00	; 0
    1344:	10 c0       	rjmp	.+32     	; 0x1366 <prvInitialiseTaskLists+0x26>
    1346:	8c 2f       	mov	r24, r28
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	9c 01       	movw	r18, r24
    134c:	22 0f       	add	r18, r18
    134e:	33 1f       	adc	r19, r19
    1350:	22 0f       	add	r18, r18
    1352:	33 1f       	adc	r19, r19
    1354:	22 0f       	add	r18, r18
    1356:	33 1f       	adc	r19, r19
    1358:	82 0f       	add	r24, r18
    135a:	93 1f       	adc	r25, r19
    135c:	86 57       	subi	r24, 0x76	; 118
    135e:	9a 4f       	sbci	r25, 0xFA	; 250
    1360:	0e 94 14 07 	call	0xe28	; 0xe28 <vListInitialise>
    1364:	cf 5f       	subi	r28, 0xFF	; 255
    1366:	c5 30       	cpi	r28, 0x05	; 5
    1368:	70 f3       	brcs	.-36     	; 0x1346 <prvInitialiseTaskLists+0x6>
    136a:	81 e8       	ldi	r24, 0x81	; 129
    136c:	95 e0       	ldi	r25, 0x05	; 5
    136e:	0e 94 14 07 	call	0xe28	; 0xe28 <vListInitialise>
    1372:	88 e7       	ldi	r24, 0x78	; 120
    1374:	95 e0       	ldi	r25, 0x05	; 5
    1376:	0e 94 14 07 	call	0xe28	; 0xe28 <vListInitialise>
    137a:	8b e6       	ldi	r24, 0x6B	; 107
    137c:	95 e0       	ldi	r25, 0x05	; 5
    137e:	0e 94 14 07 	call	0xe28	; 0xe28 <vListInitialise>
    1382:	82 e6       	ldi	r24, 0x62	; 98
    1384:	95 e0       	ldi	r25, 0x05	; 5
    1386:	0e 94 14 07 	call	0xe28	; 0xe28 <vListInitialise>
    138a:	88 e5       	ldi	r24, 0x58	; 88
    138c:	95 e0       	ldi	r25, 0x05	; 5
    138e:	0e 94 14 07 	call	0xe28	; 0xe28 <vListInitialise>
    1392:	81 e8       	ldi	r24, 0x81	; 129
    1394:	95 e0       	ldi	r25, 0x05	; 5
    1396:	90 93 77 05 	sts	0x0577, r25	; 0x800577 <pxDelayedTaskList+0x1>
    139a:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <pxDelayedTaskList>
    139e:	88 e7       	ldi	r24, 0x78	; 120
    13a0:	95 e0       	ldi	r25, 0x05	; 5
    13a2:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <pxOverflowDelayedTaskList+0x1>
    13a6:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <pxOverflowDelayedTaskList>
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <prvAddNewTaskToReadyList>:
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	ec 01       	movw	r28, r24
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	0f 92       	push	r0
    13ba:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <uxCurrentNumberOfTasks>
    13be:	8f 5f       	subi	r24, 0xFF	; 255
    13c0:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <uxCurrentNumberOfTasks>
    13c4:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    13c8:	90 91 b8 05 	lds	r25, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    13cc:	89 2b       	or	r24, r25
    13ce:	59 f4       	brne	.+22     	; 0x13e6 <prvAddNewTaskToReadyList+0x38>
    13d0:	d0 93 b8 05 	sts	0x05B8, r29	; 0x8005b8 <pxCurrentTCB+0x1>
    13d4:	c0 93 b7 05 	sts	0x05B7, r28	; 0x8005b7 <pxCurrentTCB>
    13d8:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <uxCurrentNumberOfTasks>
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	99 f4       	brne	.+38     	; 0x1406 <prvAddNewTaskToReadyList+0x58>
    13e0:	0e 94 a0 09 	call	0x1340	; 0x1340 <prvInitialiseTaskLists>
    13e4:	10 c0       	rjmp	.+32     	; 0x1406 <prvAddNewTaskToReadyList+0x58>
    13e6:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <xSchedulerRunning>
    13ea:	81 11       	cpse	r24, r1
    13ec:	0c c0       	rjmp	.+24     	; 0x1406 <prvAddNewTaskToReadyList+0x58>
    13ee:	e0 91 b7 05 	lds	r30, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    13f2:	f0 91 b8 05 	lds	r31, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    13f6:	96 89       	ldd	r25, Z+22	; 0x16
    13f8:	8e 89       	ldd	r24, Y+22	; 0x16
    13fa:	89 17       	cp	r24, r25
    13fc:	20 f0       	brcs	.+8      	; 0x1406 <prvAddNewTaskToReadyList+0x58>
    13fe:	d0 93 b8 05 	sts	0x05B8, r29	; 0x8005b8 <pxCurrentTCB+0x1>
    1402:	c0 93 b7 05 	sts	0x05B7, r28	; 0x8005b7 <pxCurrentTCB>
    1406:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <uxTaskNumber>
    140a:	8f 5f       	subi	r24, 0xFF	; 255
    140c:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <uxTaskNumber>
    1410:	8b a3       	std	Y+35, r24	; 0x23
    1412:	8e 89       	ldd	r24, Y+22	; 0x16
    1414:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <uxTopReadyPriority>
    1418:	98 17       	cp	r25, r24
    141a:	10 f4       	brcc	.+4      	; 0x1420 <prvAddNewTaskToReadyList+0x72>
    141c:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <uxTopReadyPriority>
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	fc 01       	movw	r30, r24
    1424:	ee 0f       	add	r30, r30
    1426:	ff 1f       	adc	r31, r31
    1428:	ee 0f       	add	r30, r30
    142a:	ff 1f       	adc	r31, r31
    142c:	ee 0f       	add	r30, r30
    142e:	ff 1f       	adc	r31, r31
    1430:	8e 0f       	add	r24, r30
    1432:	9f 1f       	adc	r25, r31
    1434:	fc 01       	movw	r30, r24
    1436:	e6 57       	subi	r30, 0x76	; 118
    1438:	fa 4f       	sbci	r31, 0xFA	; 250
    143a:	01 80       	ldd	r0, Z+1	; 0x01
    143c:	f2 81       	ldd	r31, Z+2	; 0x02
    143e:	e0 2d       	mov	r30, r0
    1440:	fd 83       	std	Y+5, r31	; 0x05
    1442:	ec 83       	std	Y+4, r30	; 0x04
    1444:	84 81       	ldd	r24, Z+4	; 0x04
    1446:	95 81       	ldd	r25, Z+5	; 0x05
    1448:	9f 83       	std	Y+7, r25	; 0x07
    144a:	8e 83       	std	Y+6, r24	; 0x06
    144c:	a4 81       	ldd	r26, Z+4	; 0x04
    144e:	b5 81       	ldd	r27, Z+5	; 0x05
    1450:	ce 01       	movw	r24, r28
    1452:	02 96       	adiw	r24, 0x02	; 2
    1454:	13 96       	adiw	r26, 0x03	; 3
    1456:	9c 93       	st	X, r25
    1458:	8e 93       	st	-X, r24
    145a:	12 97       	sbiw	r26, 0x02	; 2
    145c:	95 83       	std	Z+5, r25	; 0x05
    145e:	84 83       	std	Z+4, r24	; 0x04
    1460:	ee 89       	ldd	r30, Y+22	; 0x16
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	cf 01       	movw	r24, r30
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	e8 0f       	add	r30, r24
    1474:	f9 1f       	adc	r31, r25
    1476:	e6 57       	subi	r30, 0x76	; 118
    1478:	fa 4f       	sbci	r31, 0xFA	; 250
    147a:	fb 87       	std	Y+11, r31	; 0x0b
    147c:	ea 87       	std	Y+10, r30	; 0x0a
    147e:	80 81       	ld	r24, Z
    1480:	8f 5f       	subi	r24, 0xFF	; 255
    1482:	80 83       	st	Z, r24
    1484:	0f 90       	pop	r0
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <xSchedulerRunning>
    148c:	88 23       	and	r24, r24
    148e:	51 f0       	breq	.+20     	; 0x14a4 <prvAddNewTaskToReadyList+0xf6>
    1490:	e0 91 b7 05 	lds	r30, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    1494:	f0 91 b8 05 	lds	r31, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    1498:	96 89       	ldd	r25, Z+22	; 0x16
    149a:	8e 89       	ldd	r24, Y+22	; 0x16
    149c:	98 17       	cp	r25, r24
    149e:	10 f4       	brcc	.+4      	; 0x14a4 <prvAddNewTaskToReadyList+0xf6>
    14a0:	0e 94 22 08 	call	0x1044	; 0x1044 <vPortYield>
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	08 95       	ret

000014aa <prvCheckTasksWaitingTermination>:
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	1c c0       	rjmp	.+56     	; 0x14e8 <prvCheckTasksWaitingTermination+0x3e>
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	0f 92       	push	r0
    14b6:	e0 91 67 05 	lds	r30, 0x0567	; 0x800567 <xTasksWaitingTermination+0x5>
    14ba:	f0 91 68 05 	lds	r31, 0x0568	; 0x800568 <xTasksWaitingTermination+0x6>
    14be:	c6 81       	ldd	r28, Z+6	; 0x06
    14c0:	d7 81       	ldd	r29, Z+7	; 0x07
    14c2:	ce 01       	movw	r24, r28
    14c4:	02 96       	adiw	r24, 0x02	; 2
    14c6:	0e 94 57 07 	call	0xeae	; 0xeae <uxListRemove>
    14ca:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <uxCurrentNumberOfTasks>
    14ce:	81 50       	subi	r24, 0x01	; 1
    14d0:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <uxCurrentNumberOfTasks>
    14d4:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <uxDeletedTasksWaitingCleanUp>
    14d8:	81 50       	subi	r24, 0x01	; 1
    14da:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <uxDeletedTasksWaitingCleanUp>
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	ce 01       	movw	r24, r28
    14e4:	0e 94 03 09 	call	0x1206	; 0x1206 <prvDeleteTCB>
    14e8:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <uxDeletedTasksWaitingCleanUp>
    14ec:	81 11       	cpse	r24, r1
    14ee:	e0 cf       	rjmp	.-64     	; 0x14b0 <prvCheckTasksWaitingTermination+0x6>
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	08 95       	ret

000014f6 <prvIdleTask>:
    14f6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <prvCheckTasksWaitingTermination>
    14fa:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <pxReadyTasksLists>
    14fe:	82 30       	cpi	r24, 0x02	; 2
    1500:	d0 f3       	brcs	.-12     	; 0x14f6 <prvIdleTask>
    1502:	0e 94 22 08 	call	0x1044	; 0x1044 <vPortYield>
    1506:	f7 cf       	rjmp	.-18     	; 0x14f6 <prvIdleTask>

00001508 <prvAddCurrentTaskToDelayedList>:
    1508:	ff 92       	push	r15
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	ec 01       	movw	r28, r24
    1514:	f6 2e       	mov	r15, r22
    1516:	00 91 55 05 	lds	r16, 0x0555	; 0x800555 <xTickCount>
    151a:	10 91 56 05 	lds	r17, 0x0556	; 0x800556 <xTickCount+0x1>
    151e:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    1522:	90 91 b8 05 	lds	r25, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    1526:	02 96       	adiw	r24, 0x02	; 2
    1528:	0e 94 57 07 	call	0xeae	; 0xeae <uxListRemove>
    152c:	cf 3f       	cpi	r28, 0xFF	; 255
    152e:	8f ef       	ldi	r24, 0xFF	; 255
    1530:	d8 07       	cpc	r29, r24
    1532:	b1 f5       	brne	.+108    	; 0x15a0 <prvAddCurrentTaskToDelayedList+0x98>
    1534:	ff 20       	and	r15, r15
    1536:	a1 f1       	breq	.+104    	; 0x15a0 <prvAddCurrentTaskToDelayedList+0x98>
    1538:	e8 e5       	ldi	r30, 0x58	; 88
    153a:	f5 e0       	ldi	r31, 0x05	; 5
    153c:	a1 81       	ldd	r26, Z+1	; 0x01
    153e:	b2 81       	ldd	r27, Z+2	; 0x02
    1540:	c0 91 b7 05 	lds	r28, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    1544:	d0 91 b8 05 	lds	r29, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    1548:	bd 83       	std	Y+5, r27	; 0x05
    154a:	ac 83       	std	Y+4, r26	; 0x04
    154c:	c0 91 b7 05 	lds	r28, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    1550:	d0 91 b8 05 	lds	r29, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    1554:	14 96       	adiw	r26, 0x04	; 4
    1556:	8d 91       	ld	r24, X+
    1558:	9c 91       	ld	r25, X
    155a:	15 97       	sbiw	r26, 0x05	; 5
    155c:	9f 83       	std	Y+7, r25	; 0x07
    155e:	8e 83       	std	Y+6, r24	; 0x06
    1560:	14 96       	adiw	r26, 0x04	; 4
    1562:	cd 91       	ld	r28, X+
    1564:	dc 91       	ld	r29, X
    1566:	15 97       	sbiw	r26, 0x05	; 5
    1568:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    156c:	90 91 b8 05 	lds	r25, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    1570:	02 96       	adiw	r24, 0x02	; 2
    1572:	9b 83       	std	Y+3, r25	; 0x03
    1574:	8a 83       	std	Y+2, r24	; 0x02
    1576:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    157a:	90 91 b8 05 	lds	r25, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    157e:	02 96       	adiw	r24, 0x02	; 2
    1580:	15 96       	adiw	r26, 0x05	; 5
    1582:	9c 93       	st	X, r25
    1584:	8e 93       	st	-X, r24
    1586:	14 97       	sbiw	r26, 0x04	; 4
    1588:	a0 91 b7 05 	lds	r26, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    158c:	b0 91 b8 05 	lds	r27, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    1590:	1b 96       	adiw	r26, 0x0b	; 11
    1592:	fc 93       	st	X, r31
    1594:	ee 93       	st	-X, r30
    1596:	1a 97       	sbiw	r26, 0x0a	; 10
    1598:	80 81       	ld	r24, Z
    159a:	8f 5f       	subi	r24, 0xFF	; 255
    159c:	80 83       	st	Z, r24
    159e:	2f c0       	rjmp	.+94     	; 0x15fe <prvAddCurrentTaskToDelayedList+0xf6>
    15a0:	c0 0f       	add	r28, r16
    15a2:	d1 1f       	adc	r29, r17
    15a4:	e0 91 b7 05 	lds	r30, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    15a8:	f0 91 b8 05 	lds	r31, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    15ac:	d3 83       	std	Z+3, r29	; 0x03
    15ae:	c2 83       	std	Z+2, r28	; 0x02
    15b0:	c0 17       	cp	r28, r16
    15b2:	d1 07       	cpc	r29, r17
    15b4:	68 f4       	brcc	.+26     	; 0x15d0 <prvAddCurrentTaskToDelayedList+0xc8>
    15b6:	60 91 b7 05 	lds	r22, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    15ba:	70 91 b8 05 	lds	r23, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    15be:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <pxOverflowDelayedTaskList>
    15c2:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <pxOverflowDelayedTaskList+0x1>
    15c6:	6e 5f       	subi	r22, 0xFE	; 254
    15c8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ca:	0e 94 26 07 	call	0xe4c	; 0xe4c <vListInsert>
    15ce:	17 c0       	rjmp	.+46     	; 0x15fe <prvAddCurrentTaskToDelayedList+0xf6>
    15d0:	60 91 b7 05 	lds	r22, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    15d4:	70 91 b8 05 	lds	r23, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    15d8:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <pxDelayedTaskList>
    15dc:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <pxDelayedTaskList+0x1>
    15e0:	6e 5f       	subi	r22, 0xFE	; 254
    15e2:	7f 4f       	sbci	r23, 0xFF	; 255
    15e4:	0e 94 26 07 	call	0xe4c	; 0xe4c <vListInsert>
    15e8:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <xNextTaskUnblockTime>
    15ec:	90 91 4d 05 	lds	r25, 0x054D	; 0x80054d <xNextTaskUnblockTime+0x1>
    15f0:	c8 17       	cp	r28, r24
    15f2:	d9 07       	cpc	r29, r25
    15f4:	20 f4       	brcc	.+8      	; 0x15fe <prvAddCurrentTaskToDelayedList+0xf6>
    15f6:	d0 93 4d 05 	sts	0x054D, r29	; 0x80054d <xNextTaskUnblockTime+0x1>
    15fa:	c0 93 4c 05 	sts	0x054C, r28	; 0x80054c <xNextTaskUnblockTime>
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	08 95       	ret

0000160a <xTaskCreate>:
    160a:	2f 92       	push	r2
    160c:	3f 92       	push	r3
    160e:	4f 92       	push	r4
    1610:	5f 92       	push	r5
    1612:	6f 92       	push	r6
    1614:	7f 92       	push	r7
    1616:	8f 92       	push	r8
    1618:	9f 92       	push	r9
    161a:	af 92       	push	r10
    161c:	bf 92       	push	r11
    161e:	cf 92       	push	r12
    1620:	df 92       	push	r13
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	3c 01       	movw	r6, r24
    1630:	1b 01       	movw	r2, r22
    1632:	5a 01       	movw	r10, r20
    1634:	29 01       	movw	r4, r18
    1636:	ca 01       	movw	r24, r20
    1638:	0e 94 4c 06 	call	0xc98	; 0xc98 <pvPortMalloc>
    163c:	6c 01       	movw	r12, r24
    163e:	89 2b       	or	r24, r25
    1640:	71 f0       	breq	.+28     	; 0x165e <xTaskCreate+0x54>
    1642:	8c e2       	ldi	r24, 0x2C	; 44
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	0e 94 4c 06 	call	0xc98	; 0xc98 <pvPortMalloc>
    164a:	ec 01       	movw	r28, r24
    164c:	89 2b       	or	r24, r25
    164e:	19 f0       	breq	.+6      	; 0x1656 <xTaskCreate+0x4c>
    1650:	d8 8e       	std	Y+24, r13	; 0x18
    1652:	cf 8a       	std	Y+23, r12	; 0x17
    1654:	06 c0       	rjmp	.+12     	; 0x1662 <xTaskCreate+0x58>
    1656:	c6 01       	movw	r24, r12
    1658:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <vPortFree>
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <xTaskCreate+0x58>
    165e:	c0 e0       	ldi	r28, 0x00	; 0
    1660:	d0 e0       	ldi	r29, 0x00	; 0
    1662:	20 97       	sbiw	r28, 0x00	; 0
    1664:	91 f0       	breq	.+36     	; 0x168a <xTaskCreate+0x80>
    1666:	95 01       	movw	r18, r10
    1668:	40 e0       	ldi	r20, 0x00	; 0
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	81 2c       	mov	r8, r1
    166e:	91 2c       	mov	r9, r1
    1670:	5e 01       	movw	r10, r28
    1672:	67 01       	movw	r12, r14
    1674:	e0 2e       	mov	r14, r16
    1676:	82 01       	movw	r16, r4
    1678:	b1 01       	movw	r22, r2
    167a:	c3 01       	movw	r24, r6
    167c:	0e 94 10 09 	call	0x1220	; 0x1220 <prvInitialiseNewTask>
    1680:	ce 01       	movw	r24, r28
    1682:	0e 94 d7 09 	call	0x13ae	; 0x13ae <prvAddNewTaskToReadyList>
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	01 c0       	rjmp	.+2      	; 0x168c <xTaskCreate+0x82>
    168a:	8f ef       	ldi	r24, 0xFF	; 255
    168c:	df 91       	pop	r29
    168e:	cf 91       	pop	r28
    1690:	1f 91       	pop	r17
    1692:	0f 91       	pop	r16
    1694:	ff 90       	pop	r15
    1696:	ef 90       	pop	r14
    1698:	df 90       	pop	r13
    169a:	cf 90       	pop	r12
    169c:	bf 90       	pop	r11
    169e:	af 90       	pop	r10
    16a0:	9f 90       	pop	r9
    16a2:	8f 90       	pop	r8
    16a4:	7f 90       	pop	r7
    16a6:	6f 90       	pop	r6
    16a8:	5f 90       	pop	r5
    16aa:	4f 90       	pop	r4
    16ac:	3f 90       	pop	r3
    16ae:	2f 90       	pop	r2
    16b0:	08 95       	ret

000016b2 <eTaskGetState>:
    16b2:	20 91 b7 05 	lds	r18, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    16b6:	30 91 b8 05 	lds	r19, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    16ba:	82 17       	cp	r24, r18
    16bc:	93 07       	cpc	r25, r19
    16be:	09 f4       	brne	.+2      	; 0x16c2 <eTaskGetState+0x10>
    16c0:	38 c0       	rjmp	.+112    	; 0x1732 <eTaskGetState+0x80>
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	0f 92       	push	r0
    16c8:	fc 01       	movw	r30, r24
    16ca:	22 85       	ldd	r18, Z+10	; 0x0a
    16cc:	33 85       	ldd	r19, Z+11	; 0x0b
    16ce:	40 91 76 05 	lds	r20, 0x0576	; 0x800576 <pxDelayedTaskList>
    16d2:	50 91 77 05 	lds	r21, 0x0577	; 0x800577 <pxDelayedTaskList+0x1>
    16d6:	60 91 74 05 	lds	r22, 0x0574	; 0x800574 <pxOverflowDelayedTaskList>
    16da:	70 91 75 05 	lds	r23, 0x0575	; 0x800575 <pxOverflowDelayedTaskList+0x1>
    16de:	0f 90       	pop	r0
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	24 17       	cp	r18, r20
    16e4:	35 07       	cpc	r19, r21
    16e6:	39 f1       	breq	.+78     	; 0x1736 <eTaskGetState+0x84>
    16e8:	26 17       	cp	r18, r22
    16ea:	37 07       	cpc	r19, r23
    16ec:	31 f1       	breq	.+76     	; 0x173a <eTaskGetState+0x88>
    16ee:	f5 e0       	ldi	r31, 0x05	; 5
    16f0:	28 35       	cpi	r18, 0x58	; 88
    16f2:	3f 07       	cpc	r19, r31
    16f4:	b1 f4       	brne	.+44     	; 0x1722 <eTaskGetState+0x70>
    16f6:	fc 01       	movw	r30, r24
    16f8:	24 89       	ldd	r18, Z+20	; 0x14
    16fa:	35 89       	ldd	r19, Z+21	; 0x15
    16fc:	23 2b       	or	r18, r19
    16fe:	61 f0       	breq	.+24     	; 0x1718 <eTaskGetState+0x66>
    1700:	82 e0       	ldi	r24, 0x02	; 2
    1702:	08 95       	ret
    1704:	fc 01       	movw	r30, r24
    1706:	e2 0f       	add	r30, r18
    1708:	f1 1d       	adc	r31, r1
    170a:	27 fd       	sbrc	r18, 7
    170c:	fa 95       	dec	r31
    170e:	33 a5       	ldd	r19, Z+43	; 0x2b
    1710:	31 30       	cpi	r19, 0x01	; 1
    1712:	a9 f0       	breq	.+42     	; 0x173e <eTaskGetState+0x8c>
    1714:	2f 5f       	subi	r18, 0xFF	; 255
    1716:	01 c0       	rjmp	.+2      	; 0x171a <eTaskGetState+0x68>
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	12 16       	cp	r1, r18
    171c:	9c f7       	brge	.-26     	; 0x1704 <eTaskGetState+0x52>
    171e:	83 e0       	ldi	r24, 0x03	; 3
    1720:	08 95       	ret
    1722:	f5 e0       	ldi	r31, 0x05	; 5
    1724:	22 36       	cpi	r18, 0x62	; 98
    1726:	3f 07       	cpc	r19, r31
    1728:	61 f0       	breq	.+24     	; 0x1742 <eTaskGetState+0x90>
    172a:	23 2b       	or	r18, r19
    172c:	61 f4       	brne	.+24     	; 0x1746 <eTaskGetState+0x94>
    172e:	84 e0       	ldi	r24, 0x04	; 4
    1730:	08 95       	ret
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	08 95       	ret
    1736:	82 e0       	ldi	r24, 0x02	; 2
    1738:	08 95       	ret
    173a:	82 e0       	ldi	r24, 0x02	; 2
    173c:	08 95       	ret
    173e:	82 e0       	ldi	r24, 0x02	; 2
    1740:	08 95       	ret
    1742:	84 e0       	ldi	r24, 0x04	; 4
    1744:	08 95       	ret
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	08 95       	ret

0000174a <vTaskStartScheduler>:
    174a:	ef 92       	push	r14
    174c:	ff 92       	push	r15
    174e:	0f 93       	push	r16
    1750:	0f 2e       	mov	r0, r31
    1752:	fa e4       	ldi	r31, 0x4A	; 74
    1754:	ef 2e       	mov	r14, r31
    1756:	f5 e0       	ldi	r31, 0x05	; 5
    1758:	ff 2e       	mov	r15, r31
    175a:	f0 2d       	mov	r31, r0
    175c:	00 e0       	ldi	r16, 0x00	; 0
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	48 ec       	ldi	r20, 0xC8	; 200
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	6a e0       	ldi	r22, 0x0A	; 10
    1768:	72 e0       	ldi	r23, 0x02	; 2
    176a:	8b e7       	ldi	r24, 0x7B	; 123
    176c:	9a e0       	ldi	r25, 0x0A	; 10
    176e:	0e 94 05 0b 	call	0x160a	; 0x160a <xTaskCreate>
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	81 f4       	brne	.+32     	; 0x1796 <vTaskStartScheduler+0x4c>
    1776:	f8 94       	cli
    1778:	8f ef       	ldi	r24, 0xFF	; 255
    177a:	9f ef       	ldi	r25, 0xFF	; 255
    177c:	90 93 4d 05 	sts	0x054D, r25	; 0x80054d <xNextTaskUnblockTime+0x1>
    1780:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <xNextTaskUnblockTime>
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <xSchedulerRunning>
    178a:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <xTickCount+0x1>
    178e:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <xTickCount>
    1792:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <xPortStartScheduler>
    1796:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <uxTopUsedPriority>
    179a:	0f 91       	pop	r16
    179c:	ff 90       	pop	r15
    179e:	ef 90       	pop	r14
    17a0:	08 95       	ret

000017a2 <vTaskSuspendAll>:
    17a2:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <uxSchedulerSuspended>
    17a6:	8f 5f       	subi	r24, 0xFF	; 255
    17a8:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <uxSchedulerSuspended>
    17ac:	08 95       	ret

000017ae <xTaskGetTickCount>:
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	0f 92       	push	r0
    17b4:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <xTickCount>
    17b8:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <xTickCount+0x1>
    17bc:	0f 90       	pop	r0
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	08 95       	ret

000017c2 <xTaskIncrementTick>:
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <uxSchedulerSuspended>
    17ce:	81 11       	cpse	r24, r1
    17d0:	eb c0       	rjmp	.+470    	; 0x19a8 <xTaskIncrementTick+0x1e6>
    17d2:	c0 91 55 05 	lds	r28, 0x0555	; 0x800555 <xTickCount>
    17d6:	d0 91 56 05 	lds	r29, 0x0556	; 0x800556 <xTickCount+0x1>
    17da:	8e 01       	movw	r16, r28
    17dc:	0f 5f       	subi	r16, 0xFF	; 255
    17de:	1f 4f       	sbci	r17, 0xFF	; 255
    17e0:	10 93 56 05 	sts	0x0556, r17	; 0x800556 <xTickCount+0x1>
    17e4:	00 93 55 05 	sts	0x0555, r16	; 0x800555 <xTickCount>
    17e8:	01 15       	cp	r16, r1
    17ea:	11 05       	cpc	r17, r1
    17ec:	b9 f4       	brne	.+46     	; 0x181c <xTaskIncrementTick+0x5a>
    17ee:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <pxDelayedTaskList>
    17f2:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <pxDelayedTaskList+0x1>
    17f6:	20 91 74 05 	lds	r18, 0x0574	; 0x800574 <pxOverflowDelayedTaskList>
    17fa:	30 91 75 05 	lds	r19, 0x0575	; 0x800575 <pxOverflowDelayedTaskList+0x1>
    17fe:	30 93 77 05 	sts	0x0577, r19	; 0x800577 <pxDelayedTaskList+0x1>
    1802:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <pxDelayedTaskList>
    1806:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <pxOverflowDelayedTaskList+0x1>
    180a:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <pxOverflowDelayedTaskList>
    180e:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <xNumOfOverflows>
    1812:	8f 5f       	subi	r24, 0xFF	; 255
    1814:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <xNumOfOverflows>
    1818:	0e 94 e7 08 	call	0x11ce	; 0x11ce <prvResetNextTaskUnblockTime>
    181c:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <xNextTaskUnblockTime>
    1820:	90 91 4d 05 	lds	r25, 0x054D	; 0x80054d <xNextTaskUnblockTime+0x1>
    1824:	08 17       	cp	r16, r24
    1826:	19 07       	cpc	r17, r25
    1828:	20 f4       	brcc	.+8      	; 0x1832 <xTaskIncrementTick+0x70>
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	b8 c0       	rjmp	.+368    	; 0x199e <xTaskIncrementTick+0x1dc>
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	01 c0       	rjmp	.+2      	; 0x1834 <xTaskIncrementTick+0x72>
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	e0 91 76 05 	lds	r30, 0x0576	; 0x800576 <pxDelayedTaskList>
    1838:	f0 91 77 05 	lds	r31, 0x0577	; 0x800577 <pxDelayedTaskList+0x1>
    183c:	90 81       	ld	r25, Z
    183e:	91 11       	cpse	r25, r1
    1840:	07 c0       	rjmp	.+14     	; 0x1850 <xTaskIncrementTick+0x8e>
    1842:	2f ef       	ldi	r18, 0xFF	; 255
    1844:	3f ef       	ldi	r19, 0xFF	; 255
    1846:	30 93 4d 05 	sts	0x054D, r19	; 0x80054d <xNextTaskUnblockTime+0x1>
    184a:	20 93 4c 05 	sts	0x054C, r18	; 0x80054c <xNextTaskUnblockTime>
    184e:	a7 c0       	rjmp	.+334    	; 0x199e <xTaskIncrementTick+0x1dc>
    1850:	e0 91 76 05 	lds	r30, 0x0576	; 0x800576 <pxDelayedTaskList>
    1854:	f0 91 77 05 	lds	r31, 0x0577	; 0x800577 <pxDelayedTaskList+0x1>
    1858:	05 80       	ldd	r0, Z+5	; 0x05
    185a:	f6 81       	ldd	r31, Z+6	; 0x06
    185c:	e0 2d       	mov	r30, r0
    185e:	06 80       	ldd	r0, Z+6	; 0x06
    1860:	f7 81       	ldd	r31, Z+7	; 0x07
    1862:	e0 2d       	mov	r30, r0
    1864:	22 81       	ldd	r18, Z+2	; 0x02
    1866:	33 81       	ldd	r19, Z+3	; 0x03
    1868:	02 17       	cp	r16, r18
    186a:	13 07       	cpc	r17, r19
    186c:	28 f4       	brcc	.+10     	; 0x1878 <xTaskIncrementTick+0xb6>
    186e:	30 93 4d 05 	sts	0x054D, r19	; 0x80054d <xNextTaskUnblockTime+0x1>
    1872:	20 93 4c 05 	sts	0x054C, r18	; 0x80054c <xNextTaskUnblockTime>
    1876:	93 c0       	rjmp	.+294    	; 0x199e <xTaskIncrementTick+0x1dc>
    1878:	a2 85       	ldd	r26, Z+10	; 0x0a
    187a:	b3 85       	ldd	r27, Z+11	; 0x0b
    187c:	24 81       	ldd	r18, Z+4	; 0x04
    187e:	35 81       	ldd	r19, Z+5	; 0x05
    1880:	46 81       	ldd	r20, Z+6	; 0x06
    1882:	57 81       	ldd	r21, Z+7	; 0x07
    1884:	e9 01       	movw	r28, r18
    1886:	5d 83       	std	Y+5, r21	; 0x05
    1888:	4c 83       	std	Y+4, r20	; 0x04
    188a:	26 81       	ldd	r18, Z+6	; 0x06
    188c:	37 81       	ldd	r19, Z+7	; 0x07
    188e:	44 81       	ldd	r20, Z+4	; 0x04
    1890:	55 81       	ldd	r21, Z+5	; 0x05
    1892:	e9 01       	movw	r28, r18
    1894:	5b 83       	std	Y+3, r21	; 0x03
    1896:	4a 83       	std	Y+2, r20	; 0x02
    1898:	11 96       	adiw	r26, 0x01	; 1
    189a:	2d 91       	ld	r18, X+
    189c:	3c 91       	ld	r19, X
    189e:	12 97       	sbiw	r26, 0x02	; 2
    18a0:	af 01       	movw	r20, r30
    18a2:	4e 5f       	subi	r20, 0xFE	; 254
    18a4:	5f 4f       	sbci	r21, 0xFF	; 255
    18a6:	24 17       	cp	r18, r20
    18a8:	35 07       	cpc	r19, r21
    18aa:	31 f4       	brne	.+12     	; 0x18b8 <xTaskIncrementTick+0xf6>
    18ac:	26 81       	ldd	r18, Z+6	; 0x06
    18ae:	37 81       	ldd	r19, Z+7	; 0x07
    18b0:	12 96       	adiw	r26, 0x02	; 2
    18b2:	3c 93       	st	X, r19
    18b4:	2e 93       	st	-X, r18
    18b6:	11 97       	sbiw	r26, 0x01	; 1
    18b8:	13 86       	std	Z+11, r1	; 0x0b
    18ba:	12 86       	std	Z+10, r1	; 0x0a
    18bc:	9c 91       	ld	r25, X
    18be:	91 50       	subi	r25, 0x01	; 1
    18c0:	9c 93       	st	X, r25
    18c2:	a4 89       	ldd	r26, Z+20	; 0x14
    18c4:	b5 89       	ldd	r27, Z+21	; 0x15
    18c6:	10 97       	sbiw	r26, 0x00	; 0
    18c8:	19 f1       	breq	.+70     	; 0x1910 <xTaskIncrementTick+0x14e>
    18ca:	26 85       	ldd	r18, Z+14	; 0x0e
    18cc:	37 85       	ldd	r19, Z+15	; 0x0f
    18ce:	60 89       	ldd	r22, Z+16	; 0x10
    18d0:	71 89       	ldd	r23, Z+17	; 0x11
    18d2:	e9 01       	movw	r28, r18
    18d4:	7d 83       	std	Y+5, r23	; 0x05
    18d6:	6c 83       	std	Y+4, r22	; 0x04
    18d8:	20 89       	ldd	r18, Z+16	; 0x10
    18da:	31 89       	ldd	r19, Z+17	; 0x11
    18dc:	66 85       	ldd	r22, Z+14	; 0x0e
    18de:	77 85       	ldd	r23, Z+15	; 0x0f
    18e0:	e9 01       	movw	r28, r18
    18e2:	7b 83       	std	Y+3, r23	; 0x03
    18e4:	6a 83       	std	Y+2, r22	; 0x02
    18e6:	11 96       	adiw	r26, 0x01	; 1
    18e8:	6d 91       	ld	r22, X+
    18ea:	7c 91       	ld	r23, X
    18ec:	12 97       	sbiw	r26, 0x02	; 2
    18ee:	9f 01       	movw	r18, r30
    18f0:	24 5f       	subi	r18, 0xF4	; 244
    18f2:	3f 4f       	sbci	r19, 0xFF	; 255
    18f4:	62 17       	cp	r22, r18
    18f6:	73 07       	cpc	r23, r19
    18f8:	31 f4       	brne	.+12     	; 0x1906 <xTaskIncrementTick+0x144>
    18fa:	20 89       	ldd	r18, Z+16	; 0x10
    18fc:	31 89       	ldd	r19, Z+17	; 0x11
    18fe:	12 96       	adiw	r26, 0x02	; 2
    1900:	3c 93       	st	X, r19
    1902:	2e 93       	st	-X, r18
    1904:	11 97       	sbiw	r26, 0x01	; 1
    1906:	15 8a       	std	Z+21, r1	; 0x15
    1908:	14 8a       	std	Z+20, r1	; 0x14
    190a:	9c 91       	ld	r25, X
    190c:	91 50       	subi	r25, 0x01	; 1
    190e:	9c 93       	st	X, r25
    1910:	26 89       	ldd	r18, Z+22	; 0x16
    1912:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <uxTopReadyPriority>
    1916:	92 17       	cp	r25, r18
    1918:	10 f4       	brcc	.+4      	; 0x191e <xTaskIncrementTick+0x15c>
    191a:	20 93 54 05 	sts	0x0554, r18	; 0x800554 <uxTopReadyPriority>
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	d9 01       	movw	r26, r18
    1922:	aa 0f       	add	r26, r26
    1924:	bb 1f       	adc	r27, r27
    1926:	aa 0f       	add	r26, r26
    1928:	bb 1f       	adc	r27, r27
    192a:	aa 0f       	add	r26, r26
    192c:	bb 1f       	adc	r27, r27
    192e:	2a 0f       	add	r18, r26
    1930:	3b 1f       	adc	r19, r27
    1932:	d9 01       	movw	r26, r18
    1934:	a6 57       	subi	r26, 0x76	; 118
    1936:	ba 4f       	sbci	r27, 0xFA	; 250
    1938:	11 96       	adiw	r26, 0x01	; 1
    193a:	0d 90       	ld	r0, X+
    193c:	bc 91       	ld	r27, X
    193e:	a0 2d       	mov	r26, r0
    1940:	b5 83       	std	Z+5, r27	; 0x05
    1942:	a4 83       	std	Z+4, r26	; 0x04
    1944:	14 96       	adiw	r26, 0x04	; 4
    1946:	2d 91       	ld	r18, X+
    1948:	3c 91       	ld	r19, X
    194a:	15 97       	sbiw	r26, 0x05	; 5
    194c:	37 83       	std	Z+7, r19	; 0x07
    194e:	26 83       	std	Z+6, r18	; 0x06
    1950:	14 96       	adiw	r26, 0x04	; 4
    1952:	2d 91       	ld	r18, X+
    1954:	3c 91       	ld	r19, X
    1956:	15 97       	sbiw	r26, 0x05	; 5
    1958:	e9 01       	movw	r28, r18
    195a:	5b 83       	std	Y+3, r21	; 0x03
    195c:	4a 83       	std	Y+2, r20	; 0x02
    195e:	15 96       	adiw	r26, 0x05	; 5
    1960:	5c 93       	st	X, r21
    1962:	4e 93       	st	-X, r20
    1964:	14 97       	sbiw	r26, 0x04	; 4
    1966:	a6 89       	ldd	r26, Z+22	; 0x16
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	9d 01       	movw	r18, r26
    196c:	22 0f       	add	r18, r18
    196e:	33 1f       	adc	r19, r19
    1970:	22 0f       	add	r18, r18
    1972:	33 1f       	adc	r19, r19
    1974:	22 0f       	add	r18, r18
    1976:	33 1f       	adc	r19, r19
    1978:	a2 0f       	add	r26, r18
    197a:	b3 1f       	adc	r27, r19
    197c:	a6 57       	subi	r26, 0x76	; 118
    197e:	ba 4f       	sbci	r27, 0xFA	; 250
    1980:	b3 87       	std	Z+11, r27	; 0x0b
    1982:	a2 87       	std	Z+10, r26	; 0x0a
    1984:	9c 91       	ld	r25, X
    1986:	9f 5f       	subi	r25, 0xFF	; 255
    1988:	9c 93       	st	X, r25
    198a:	26 89       	ldd	r18, Z+22	; 0x16
    198c:	e0 91 b7 05 	lds	r30, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    1990:	f0 91 b8 05 	lds	r31, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    1994:	96 89       	ldd	r25, Z+22	; 0x16
    1996:	29 17       	cp	r18, r25
    1998:	08 f0       	brcs	.+2      	; 0x199c <xTaskIncrementTick+0x1da>
    199a:	49 cf       	rjmp	.-366    	; 0x182e <xTaskIncrementTick+0x6c>
    199c:	4b cf       	rjmp	.-362    	; 0x1834 <xTaskIncrementTick+0x72>
    199e:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <xYieldPending>
    19a2:	91 11       	cpse	r25, r1
    19a4:	0c c0       	rjmp	.+24     	; 0x19be <xTaskIncrementTick+0x1fc>
    19a6:	0c c0       	rjmp	.+24     	; 0x19c0 <xTaskIncrementTick+0x1fe>
    19a8:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <xPendedTicks>
    19ac:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <xPendedTicks+0x1>
    19b0:	01 96       	adiw	r24, 0x01	; 1
    19b2:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <xPendedTicks+0x1>
    19b6:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <xPendedTicks>
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	01 c0       	rjmp	.+2      	; 0x19c0 <xTaskIncrementTick+0x1fe>
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	08 95       	ret

000019ca <xTaskResumeAll>:
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	0f 92       	push	r0
    19d4:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <uxSchedulerSuspended>
    19d8:	81 50       	subi	r24, 0x01	; 1
    19da:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <uxSchedulerSuspended>
    19de:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <uxSchedulerSuspended>
    19e2:	81 11       	cpse	r24, r1
    19e4:	bf c0       	rjmp	.+382    	; 0x1b64 <xTaskResumeAll+0x19a>
    19e6:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <uxCurrentNumberOfTasks>
    19ea:	81 11       	cpse	r24, r1
    19ec:	96 c0       	rjmp	.+300    	; 0x1b1a <xTaskResumeAll+0x150>
    19ee:	bd c0       	rjmp	.+378    	; 0x1b6a <xTaskResumeAll+0x1a0>
    19f0:	e0 91 70 05 	lds	r30, 0x0570	; 0x800570 <xPendingReadyList+0x5>
    19f4:	f0 91 71 05 	lds	r31, 0x0571	; 0x800571 <xPendingReadyList+0x6>
    19f8:	06 80       	ldd	r0, Z+6	; 0x06
    19fa:	f7 81       	ldd	r31, Z+7	; 0x07
    19fc:	e0 2d       	mov	r30, r0
    19fe:	a4 89       	ldd	r26, Z+20	; 0x14
    1a00:	b5 89       	ldd	r27, Z+21	; 0x15
    1a02:	c6 85       	ldd	r28, Z+14	; 0x0e
    1a04:	d7 85       	ldd	r29, Z+15	; 0x0f
    1a06:	80 89       	ldd	r24, Z+16	; 0x10
    1a08:	91 89       	ldd	r25, Z+17	; 0x11
    1a0a:	9d 83       	std	Y+5, r25	; 0x05
    1a0c:	8c 83       	std	Y+4, r24	; 0x04
    1a0e:	c0 89       	ldd	r28, Z+16	; 0x10
    1a10:	d1 89       	ldd	r29, Z+17	; 0x11
    1a12:	86 85       	ldd	r24, Z+14	; 0x0e
    1a14:	97 85       	ldd	r25, Z+15	; 0x0f
    1a16:	9b 83       	std	Y+3, r25	; 0x03
    1a18:	8a 83       	std	Y+2, r24	; 0x02
    1a1a:	11 96       	adiw	r26, 0x01	; 1
    1a1c:	2d 91       	ld	r18, X+
    1a1e:	3c 91       	ld	r19, X
    1a20:	12 97       	sbiw	r26, 0x02	; 2
    1a22:	cf 01       	movw	r24, r30
    1a24:	0c 96       	adiw	r24, 0x0c	; 12
    1a26:	28 17       	cp	r18, r24
    1a28:	39 07       	cpc	r19, r25
    1a2a:	31 f4       	brne	.+12     	; 0x1a38 <xTaskResumeAll+0x6e>
    1a2c:	80 89       	ldd	r24, Z+16	; 0x10
    1a2e:	91 89       	ldd	r25, Z+17	; 0x11
    1a30:	12 96       	adiw	r26, 0x02	; 2
    1a32:	9c 93       	st	X, r25
    1a34:	8e 93       	st	-X, r24
    1a36:	11 97       	sbiw	r26, 0x01	; 1
    1a38:	15 8a       	std	Z+21, r1	; 0x15
    1a3a:	14 8a       	std	Z+20, r1	; 0x14
    1a3c:	8c 91       	ld	r24, X
    1a3e:	81 50       	subi	r24, 0x01	; 1
    1a40:	8c 93       	st	X, r24
    1a42:	a2 85       	ldd	r26, Z+10	; 0x0a
    1a44:	b3 85       	ldd	r27, Z+11	; 0x0b
    1a46:	c4 81       	ldd	r28, Z+4	; 0x04
    1a48:	d5 81       	ldd	r29, Z+5	; 0x05
    1a4a:	86 81       	ldd	r24, Z+6	; 0x06
    1a4c:	97 81       	ldd	r25, Z+7	; 0x07
    1a4e:	9d 83       	std	Y+5, r25	; 0x05
    1a50:	8c 83       	std	Y+4, r24	; 0x04
    1a52:	c6 81       	ldd	r28, Z+6	; 0x06
    1a54:	d7 81       	ldd	r29, Z+7	; 0x07
    1a56:	84 81       	ldd	r24, Z+4	; 0x04
    1a58:	95 81       	ldd	r25, Z+5	; 0x05
    1a5a:	9b 83       	std	Y+3, r25	; 0x03
    1a5c:	8a 83       	std	Y+2, r24	; 0x02
    1a5e:	11 96       	adiw	r26, 0x01	; 1
    1a60:	8d 91       	ld	r24, X+
    1a62:	9c 91       	ld	r25, X
    1a64:	12 97       	sbiw	r26, 0x02	; 2
    1a66:	9f 01       	movw	r18, r30
    1a68:	2e 5f       	subi	r18, 0xFE	; 254
    1a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6c:	82 17       	cp	r24, r18
    1a6e:	93 07       	cpc	r25, r19
    1a70:	31 f4       	brne	.+12     	; 0x1a7e <xTaskResumeAll+0xb4>
    1a72:	86 81       	ldd	r24, Z+6	; 0x06
    1a74:	97 81       	ldd	r25, Z+7	; 0x07
    1a76:	12 96       	adiw	r26, 0x02	; 2
    1a78:	9c 93       	st	X, r25
    1a7a:	8e 93       	st	-X, r24
    1a7c:	11 97       	sbiw	r26, 0x01	; 1
    1a7e:	13 86       	std	Z+11, r1	; 0x0b
    1a80:	12 86       	std	Z+10, r1	; 0x0a
    1a82:	8c 91       	ld	r24, X
    1a84:	81 50       	subi	r24, 0x01	; 1
    1a86:	8c 93       	st	X, r24
    1a88:	86 89       	ldd	r24, Z+22	; 0x16
    1a8a:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <uxTopReadyPriority>
    1a8e:	98 17       	cp	r25, r24
    1a90:	10 f4       	brcc	.+4      	; 0x1a96 <xTaskResumeAll+0xcc>
    1a92:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <uxTopReadyPriority>
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	dc 01       	movw	r26, r24
    1a9a:	aa 0f       	add	r26, r26
    1a9c:	bb 1f       	adc	r27, r27
    1a9e:	aa 0f       	add	r26, r26
    1aa0:	bb 1f       	adc	r27, r27
    1aa2:	aa 0f       	add	r26, r26
    1aa4:	bb 1f       	adc	r27, r27
    1aa6:	8a 0f       	add	r24, r26
    1aa8:	9b 1f       	adc	r25, r27
    1aaa:	dc 01       	movw	r26, r24
    1aac:	a6 57       	subi	r26, 0x76	; 118
    1aae:	ba 4f       	sbci	r27, 0xFA	; 250
    1ab0:	11 96       	adiw	r26, 0x01	; 1
    1ab2:	0d 90       	ld	r0, X+
    1ab4:	bc 91       	ld	r27, X
    1ab6:	a0 2d       	mov	r26, r0
    1ab8:	b5 83       	std	Z+5, r27	; 0x05
    1aba:	a4 83       	std	Z+4, r26	; 0x04
    1abc:	14 96       	adiw	r26, 0x04	; 4
    1abe:	8d 91       	ld	r24, X+
    1ac0:	9c 91       	ld	r25, X
    1ac2:	15 97       	sbiw	r26, 0x05	; 5
    1ac4:	97 83       	std	Z+7, r25	; 0x07
    1ac6:	86 83       	std	Z+6, r24	; 0x06
    1ac8:	14 96       	adiw	r26, 0x04	; 4
    1aca:	cd 91       	ld	r28, X+
    1acc:	dc 91       	ld	r29, X
    1ace:	15 97       	sbiw	r26, 0x05	; 5
    1ad0:	3b 83       	std	Y+3, r19	; 0x03
    1ad2:	2a 83       	std	Y+2, r18	; 0x02
    1ad4:	15 96       	adiw	r26, 0x05	; 5
    1ad6:	3c 93       	st	X, r19
    1ad8:	2e 93       	st	-X, r18
    1ada:	14 97       	sbiw	r26, 0x04	; 4
    1adc:	a6 89       	ldd	r26, Z+22	; 0x16
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	cd 01       	movw	r24, r26
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	a8 0f       	add	r26, r24
    1af0:	b9 1f       	adc	r27, r25
    1af2:	a6 57       	subi	r26, 0x76	; 118
    1af4:	ba 4f       	sbci	r27, 0xFA	; 250
    1af6:	b3 87       	std	Z+11, r27	; 0x0b
    1af8:	a2 87       	std	Z+10, r26	; 0x0a
    1afa:	8c 91       	ld	r24, X
    1afc:	8f 5f       	subi	r24, 0xFF	; 255
    1afe:	8c 93       	st	X, r24
    1b00:	96 89       	ldd	r25, Z+22	; 0x16
    1b02:	a0 91 b7 05 	lds	r26, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    1b06:	b0 91 b8 05 	lds	r27, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    1b0a:	56 96       	adiw	r26, 0x16	; 22
    1b0c:	8c 91       	ld	r24, X
    1b0e:	98 17       	cp	r25, r24
    1b10:	30 f0       	brcs	.+12     	; 0x1b1e <xTaskResumeAll+0x154>
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <xYieldPending>
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <xTaskResumeAll+0x154>
    1b1a:	e0 e0       	ldi	r30, 0x00	; 0
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <xPendingReadyList>
    1b22:	81 11       	cpse	r24, r1
    1b24:	65 cf       	rjmp	.-310    	; 0x19f0 <xTaskResumeAll+0x26>
    1b26:	ef 2b       	or	r30, r31
    1b28:	11 f0       	breq	.+4      	; 0x1b2e <xTaskResumeAll+0x164>
    1b2a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <prvResetNextTaskUnblockTime>
    1b2e:	c0 91 51 05 	lds	r28, 0x0551	; 0x800551 <xPendedTicks>
    1b32:	d0 91 52 05 	lds	r29, 0x0552	; 0x800552 <xPendedTicks+0x1>
    1b36:	20 97       	sbiw	r28, 0x00	; 0
    1b38:	69 f0       	breq	.+26     	; 0x1b54 <xTaskResumeAll+0x18a>
    1b3a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <xTaskIncrementTick>
    1b3e:	88 23       	and	r24, r24
    1b40:	19 f0       	breq	.+6      	; 0x1b48 <xTaskResumeAll+0x17e>
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <xYieldPending>
    1b48:	21 97       	sbiw	r28, 0x01	; 1
    1b4a:	b9 f7       	brne	.-18     	; 0x1b3a <xTaskResumeAll+0x170>
    1b4c:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <xPendedTicks+0x1>
    1b50:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <xPendedTicks>
    1b54:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <xYieldPending>
    1b58:	88 23       	and	r24, r24
    1b5a:	31 f0       	breq	.+12     	; 0x1b68 <xTaskResumeAll+0x19e>
    1b5c:	0e 94 22 08 	call	0x1044	; 0x1044 <vPortYield>
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	03 c0       	rjmp	.+6      	; 0x1b6a <xTaskResumeAll+0x1a0>
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <xTaskResumeAll+0x1a0>
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	08 95       	ret

00001b74 <xTaskDelayUntil>:
    1b74:	0f 93       	push	r16
    1b76:	1f 93       	push	r17
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	8c 01       	movw	r16, r24
    1b7e:	eb 01       	movw	r28, r22
    1b80:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <vTaskSuspendAll>
    1b84:	40 91 55 05 	lds	r20, 0x0555	; 0x800555 <xTickCount>
    1b88:	50 91 56 05 	lds	r21, 0x0556	; 0x800556 <xTickCount+0x1>
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	20 81       	ld	r18, Z
    1b90:	31 81       	ldd	r19, Z+1	; 0x01
    1b92:	c9 01       	movw	r24, r18
    1b94:	8c 0f       	add	r24, r28
    1b96:	9d 1f       	adc	r25, r29
    1b98:	42 17       	cp	r20, r18
    1b9a:	53 07       	cpc	r21, r19
    1b9c:	40 f4       	brcc	.+16     	; 0x1bae <xTaskDelayUntil+0x3a>
    1b9e:	82 17       	cp	r24, r18
    1ba0:	93 07       	cpc	r25, r19
    1ba2:	68 f4       	brcc	.+26     	; 0x1bbe <xTaskDelayUntil+0x4a>
    1ba4:	48 17       	cp	r20, r24
    1ba6:	59 07       	cpc	r21, r25
    1ba8:	60 f0       	brcs	.+24     	; 0x1bc2 <xTaskDelayUntil+0x4e>
    1baa:	c0 e0       	ldi	r28, 0x00	; 0
    1bac:	0f c0       	rjmp	.+30     	; 0x1bcc <xTaskDelayUntil+0x58>
    1bae:	82 17       	cp	r24, r18
    1bb0:	93 07       	cpc	r25, r19
    1bb2:	48 f0       	brcs	.+18     	; 0x1bc6 <xTaskDelayUntil+0x52>
    1bb4:	48 17       	cp	r20, r24
    1bb6:	59 07       	cpc	r21, r25
    1bb8:	40 f0       	brcs	.+16     	; 0x1bca <xTaskDelayUntil+0x56>
    1bba:	c0 e0       	ldi	r28, 0x00	; 0
    1bbc:	07 c0       	rjmp	.+14     	; 0x1bcc <xTaskDelayUntil+0x58>
    1bbe:	c0 e0       	ldi	r28, 0x00	; 0
    1bc0:	05 c0       	rjmp	.+10     	; 0x1bcc <xTaskDelayUntil+0x58>
    1bc2:	c1 e0       	ldi	r28, 0x01	; 1
    1bc4:	03 c0       	rjmp	.+6      	; 0x1bcc <xTaskDelayUntil+0x58>
    1bc6:	c1 e0       	ldi	r28, 0x01	; 1
    1bc8:	01 c0       	rjmp	.+2      	; 0x1bcc <xTaskDelayUntil+0x58>
    1bca:	c1 e0       	ldi	r28, 0x01	; 1
    1bcc:	f8 01       	movw	r30, r16
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
    1bd2:	cc 23       	and	r28, r28
    1bd4:	29 f0       	breq	.+10     	; 0x1be0 <xTaskDelayUntil+0x6c>
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	84 1b       	sub	r24, r20
    1bda:	95 0b       	sbc	r25, r21
    1bdc:	0e 94 84 0a 	call	0x1508	; 0x1508 <prvAddCurrentTaskToDelayedList>
    1be0:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <xTaskResumeAll>
    1be4:	81 11       	cpse	r24, r1
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <xTaskDelayUntil+0x78>
    1be8:	0e 94 22 08 	call	0x1044	; 0x1044 <vPortYield>
    1bec:	8c 2f       	mov	r24, r28
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	08 95       	ret

00001bf8 <vTaskSwitchContext>:
    1bf8:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <uxSchedulerSuspended>
    1bfc:	88 23       	and	r24, r24
    1bfe:	21 f0       	breq	.+8      	; 0x1c08 <vTaskSwitchContext+0x10>
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <xYieldPending>
    1c06:	08 95       	ret
    1c08:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <xYieldPending>
    1c0c:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <uxTopReadyPriority>
    1c10:	01 c0       	rjmp	.+2      	; 0x1c14 <vTaskSwitchContext+0x1c>
    1c12:	21 50       	subi	r18, 0x01	; 1
    1c14:	82 2f       	mov	r24, r18
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	fc 01       	movw	r30, r24
    1c1a:	ee 0f       	add	r30, r30
    1c1c:	ff 1f       	adc	r31, r31
    1c1e:	ee 0f       	add	r30, r30
    1c20:	ff 1f       	adc	r31, r31
    1c22:	ee 0f       	add	r30, r30
    1c24:	ff 1f       	adc	r31, r31
    1c26:	e8 0f       	add	r30, r24
    1c28:	f9 1f       	adc	r31, r25
    1c2a:	e6 57       	subi	r30, 0x76	; 118
    1c2c:	fa 4f       	sbci	r31, 0xFA	; 250
    1c2e:	30 81       	ld	r19, Z
    1c30:	33 23       	and	r19, r19
    1c32:	79 f3       	breq	.-34     	; 0x1c12 <vTaskSwitchContext+0x1a>
    1c34:	ac 01       	movw	r20, r24
    1c36:	44 0f       	add	r20, r20
    1c38:	55 1f       	adc	r21, r21
    1c3a:	44 0f       	add	r20, r20
    1c3c:	55 1f       	adc	r21, r21
    1c3e:	44 0f       	add	r20, r20
    1c40:	55 1f       	adc	r21, r21
    1c42:	48 0f       	add	r20, r24
    1c44:	59 1f       	adc	r21, r25
    1c46:	df 01       	movw	r26, r30
    1c48:	01 80       	ldd	r0, Z+1	; 0x01
    1c4a:	f2 81       	ldd	r31, Z+2	; 0x02
    1c4c:	e0 2d       	mov	r30, r0
    1c4e:	02 80       	ldd	r0, Z+2	; 0x02
    1c50:	f3 81       	ldd	r31, Z+3	; 0x03
    1c52:	e0 2d       	mov	r30, r0
    1c54:	12 96       	adiw	r26, 0x02	; 2
    1c56:	fc 93       	st	X, r31
    1c58:	ee 93       	st	-X, r30
    1c5a:	11 97       	sbiw	r26, 0x01	; 1
    1c5c:	43 57       	subi	r20, 0x73	; 115
    1c5e:	5a 4f       	sbci	r21, 0xFA	; 250
    1c60:	e4 17       	cp	r30, r20
    1c62:	f5 07       	cpc	r31, r21
    1c64:	29 f4       	brne	.+10     	; 0x1c70 <vTaskSwitchContext+0x78>
    1c66:	42 81       	ldd	r20, Z+2	; 0x02
    1c68:	53 81       	ldd	r21, Z+3	; 0x03
    1c6a:	fd 01       	movw	r30, r26
    1c6c:	52 83       	std	Z+2, r21	; 0x02
    1c6e:	41 83       	std	Z+1, r20	; 0x01
    1c70:	fc 01       	movw	r30, r24
    1c72:	ee 0f       	add	r30, r30
    1c74:	ff 1f       	adc	r31, r31
    1c76:	ee 0f       	add	r30, r30
    1c78:	ff 1f       	adc	r31, r31
    1c7a:	ee 0f       	add	r30, r30
    1c7c:	ff 1f       	adc	r31, r31
    1c7e:	8e 0f       	add	r24, r30
    1c80:	9f 1f       	adc	r25, r31
    1c82:	fc 01       	movw	r30, r24
    1c84:	e6 57       	subi	r30, 0x76	; 118
    1c86:	fa 4f       	sbci	r31, 0xFA	; 250
    1c88:	01 80       	ldd	r0, Z+1	; 0x01
    1c8a:	f2 81       	ldd	r31, Z+2	; 0x02
    1c8c:	e0 2d       	mov	r30, r0
    1c8e:	86 81       	ldd	r24, Z+6	; 0x06
    1c90:	97 81       	ldd	r25, Z+7	; 0x07
    1c92:	90 93 b8 05 	sts	0x05B8, r25	; 0x8005b8 <pxCurrentTCB+0x1>
    1c96:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <pxCurrentTCB>
    1c9a:	20 93 54 05 	sts	0x0554, r18	; 0x800554 <uxTopReadyPriority>
    1c9e:	08 95       	ret

00001ca0 <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
    1ca0:	ff 92       	push	r15
    1ca2:	0f 93       	push	r16
    1ca4:	1f 93       	push	r17
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	8c 01       	movw	r16, r24
    1cac:	eb 01       	movw	r28, r22
    1cae:	f4 2e       	mov	r15, r20
        TCB_t * pxTCB;

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
    1cb0:	89 2b       	or	r24, r25
    1cb2:	21 f4       	brne	.+8      	; 0x1cbc <vTaskGetInfo+0x1c>
    1cb4:	00 91 b7 05 	lds	r16, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    1cb8:	10 91 b8 05 	lds	r17, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>

        pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
    1cbc:	19 83       	std	Y+1, r17	; 0x01
    1cbe:	08 83       	st	Y, r16
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
    1cc0:	c8 01       	movw	r24, r16
    1cc2:	49 96       	adiw	r24, 0x19	; 25
    1cc4:	9b 83       	std	Y+3, r25	; 0x03
    1cc6:	8a 83       	std	Y+2, r24	; 0x02
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
    1cc8:	f8 01       	movw	r30, r16
    1cca:	86 89       	ldd	r24, Z+22	; 0x16
    1ccc:	8e 83       	std	Y+6, r24	; 0x06
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
    1cce:	87 89       	ldd	r24, Z+23	; 0x17
    1cd0:	90 8d       	ldd	r25, Z+24	; 0x18
    1cd2:	9d 87       	std	Y+13, r25	; 0x0d
    1cd4:	8c 87       	std	Y+12, r24	; 0x0c
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
    1cd6:	83 a1       	ldd	r24, Z+35	; 0x23
    1cd8:	8c 83       	std	Y+4, r24	; 0x04

        #if ( configUSE_MUTEXES == 1 )
            {
                pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
    1cda:	85 a1       	ldd	r24, Z+37	; 0x25
    1cdc:	8f 83       	std	Y+7, r24	; 0x07
            {
                pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
            }
        #else
            {
                pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
    1cde:	18 86       	std	Y+8, r1	; 0x08
    1ce0:	19 86       	std	Y+9, r1	; 0x09
    1ce2:	1a 86       	std	Y+10, r1	; 0x0a
    1ce4:	1b 86       	std	Y+11, r1	; 0x0b
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
    1ce6:	25 30       	cpi	r18, 0x05	; 5
    1ce8:	c1 f0       	breq	.+48     	; 0x1d1a <vTaskGetInfo+0x7a>
        {
            if( pxTCB == pxCurrentTCB )
    1cea:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <pxCurrentTCB>
    1cee:	90 91 b8 05 	lds	r25, 0x05B8	; 0x8005b8 <pxCurrentTCB+0x1>
    1cf2:	08 17       	cp	r16, r24
    1cf4:	19 07       	cpc	r17, r25
    1cf6:	11 f4       	brne	.+4      	; 0x1cfc <vTaskGetInfo+0x5c>
            {
                pxTaskStatus->eCurrentState = eRunning;
    1cf8:	1d 82       	std	Y+5, r1	; 0x05
    1cfa:	13 c0       	rjmp	.+38     	; 0x1d22 <vTaskGetInfo+0x82>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
    1cfc:	2d 83       	std	Y+5, r18	; 0x05
                #if ( INCLUDE_vTaskSuspend == 1 )
                    {
                        /* If the task is in the suspended list then there is a
                         *  chance it is actually just blocked indefinitely - so really
                         *  it should be reported as being in the Blocked state. */
                        if( eState == eSuspended )
    1cfe:	23 30       	cpi	r18, 0x03	; 3
    1d00:	81 f4       	brne	.+32     	; 0x1d22 <vTaskGetInfo+0x82>
                        {
                            vTaskSuspendAll();
    1d02:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <vTaskSuspendAll>
                            {
                                if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1d06:	f8 01       	movw	r30, r16
    1d08:	84 89       	ldd	r24, Z+20	; 0x14
    1d0a:	95 89       	ldd	r25, Z+21	; 0x15
    1d0c:	89 2b       	or	r24, r25
    1d0e:	11 f0       	breq	.+4      	; 0x1d14 <vTaskGetInfo+0x74>
                                {
                                    pxTaskStatus->eCurrentState = eBlocked;
    1d10:	82 e0       	ldi	r24, 0x02	; 2
    1d12:	8d 83       	std	Y+5, r24	; 0x05
                                }
                            }
                            ( void ) xTaskResumeAll();
    1d14:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <xTaskResumeAll>
    1d18:	04 c0       	rjmp	.+8      	; 0x1d22 <vTaskGetInfo+0x82>
                #endif /* INCLUDE_vTaskSuspend */
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
    1d1a:	c8 01       	movw	r24, r16
    1d1c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <eTaskGetState>
    1d20:	8d 83       	std	Y+5, r24	; 0x05
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
    1d22:	ff 20       	and	r15, r15
    1d24:	41 f0       	breq	.+16     	; 0x1d36 <vTaskGetInfo+0x96>
                {
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
                }
            #else
                {
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
    1d26:	f8 01       	movw	r30, r16
    1d28:	87 89       	ldd	r24, Z+23	; 0x17
    1d2a:	90 8d       	ldd	r25, Z+24	; 0x18
    1d2c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <prvTaskCheckFreeStackSpace>
    1d30:	9f 87       	std	Y+15, r25	; 0x0f
    1d32:	8e 87       	std	Y+14, r24	; 0x0e
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <vTaskGetInfo+0x9a>
                }
            #endif
        }
        else
        {
            pxTaskStatus->usStackHighWaterMark = 0;
    1d36:	1f 86       	std	Y+15, r1	; 0x0f
    1d38:	1e 86       	std	Y+14, r1	; 0x0e
        }
    }
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	ff 90       	pop	r15
    1d44:	08 95       	ret

00001d46 <__subsf3>:
    1d46:	50 58       	subi	r21, 0x80	; 128

00001d48 <__addsf3>:
    1d48:	bb 27       	eor	r27, r27
    1d4a:	aa 27       	eor	r26, r26
    1d4c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__addsf3x>
    1d50:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__fp_round>
    1d54:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <__fp_pscA>
    1d58:	38 f0       	brcs	.+14     	; 0x1d68 <__addsf3+0x20>
    1d5a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__fp_pscB>
    1d5e:	20 f0       	brcs	.+8      	; 0x1d68 <__addsf3+0x20>
    1d60:	39 f4       	brne	.+14     	; 0x1d70 <__addsf3+0x28>
    1d62:	9f 3f       	cpi	r25, 0xFF	; 255
    1d64:	19 f4       	brne	.+6      	; 0x1d6c <__addsf3+0x24>
    1d66:	26 f4       	brtc	.+8      	; 0x1d70 <__addsf3+0x28>
    1d68:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <__fp_nan>
    1d6c:	0e f4       	brtc	.+2      	; 0x1d70 <__addsf3+0x28>
    1d6e:	e0 95       	com	r30
    1d70:	e7 fb       	bst	r30, 7
    1d72:	0c 94 5d 0f 	jmp	0x1eba	; 0x1eba <__fp_inf>

00001d76 <__addsf3x>:
    1d76:	e9 2f       	mov	r30, r25
    1d78:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__fp_split3>
    1d7c:	58 f3       	brcs	.-42     	; 0x1d54 <__addsf3+0xc>
    1d7e:	ba 17       	cp	r27, r26
    1d80:	62 07       	cpc	r22, r18
    1d82:	73 07       	cpc	r23, r19
    1d84:	84 07       	cpc	r24, r20
    1d86:	95 07       	cpc	r25, r21
    1d88:	20 f0       	brcs	.+8      	; 0x1d92 <__addsf3x+0x1c>
    1d8a:	79 f4       	brne	.+30     	; 0x1daa <__addsf3x+0x34>
    1d8c:	a6 f5       	brtc	.+104    	; 0x1df6 <__addsf3x+0x80>
    1d8e:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__fp_zero>
    1d92:	0e f4       	brtc	.+2      	; 0x1d96 <__addsf3x+0x20>
    1d94:	e0 95       	com	r30
    1d96:	0b 2e       	mov	r0, r27
    1d98:	ba 2f       	mov	r27, r26
    1d9a:	a0 2d       	mov	r26, r0
    1d9c:	0b 01       	movw	r0, r22
    1d9e:	b9 01       	movw	r22, r18
    1da0:	90 01       	movw	r18, r0
    1da2:	0c 01       	movw	r0, r24
    1da4:	ca 01       	movw	r24, r20
    1da6:	a0 01       	movw	r20, r0
    1da8:	11 24       	eor	r1, r1
    1daa:	ff 27       	eor	r31, r31
    1dac:	59 1b       	sub	r21, r25
    1dae:	99 f0       	breq	.+38     	; 0x1dd6 <__addsf3x+0x60>
    1db0:	59 3f       	cpi	r21, 0xF9	; 249
    1db2:	50 f4       	brcc	.+20     	; 0x1dc8 <__addsf3x+0x52>
    1db4:	50 3e       	cpi	r21, 0xE0	; 224
    1db6:	68 f1       	brcs	.+90     	; 0x1e12 <__addsf3x+0x9c>
    1db8:	1a 16       	cp	r1, r26
    1dba:	f0 40       	sbci	r31, 0x00	; 0
    1dbc:	a2 2f       	mov	r26, r18
    1dbe:	23 2f       	mov	r18, r19
    1dc0:	34 2f       	mov	r19, r20
    1dc2:	44 27       	eor	r20, r20
    1dc4:	58 5f       	subi	r21, 0xF8	; 248
    1dc6:	f3 cf       	rjmp	.-26     	; 0x1dae <__addsf3x+0x38>
    1dc8:	46 95       	lsr	r20
    1dca:	37 95       	ror	r19
    1dcc:	27 95       	ror	r18
    1dce:	a7 95       	ror	r26
    1dd0:	f0 40       	sbci	r31, 0x00	; 0
    1dd2:	53 95       	inc	r21
    1dd4:	c9 f7       	brne	.-14     	; 0x1dc8 <__addsf3x+0x52>
    1dd6:	7e f4       	brtc	.+30     	; 0x1df6 <__addsf3x+0x80>
    1dd8:	1f 16       	cp	r1, r31
    1dda:	ba 0b       	sbc	r27, r26
    1ddc:	62 0b       	sbc	r22, r18
    1dde:	73 0b       	sbc	r23, r19
    1de0:	84 0b       	sbc	r24, r20
    1de2:	ba f0       	brmi	.+46     	; 0x1e12 <__addsf3x+0x9c>
    1de4:	91 50       	subi	r25, 0x01	; 1
    1de6:	a1 f0       	breq	.+40     	; 0x1e10 <__addsf3x+0x9a>
    1de8:	ff 0f       	add	r31, r31
    1dea:	bb 1f       	adc	r27, r27
    1dec:	66 1f       	adc	r22, r22
    1dee:	77 1f       	adc	r23, r23
    1df0:	88 1f       	adc	r24, r24
    1df2:	c2 f7       	brpl	.-16     	; 0x1de4 <__addsf3x+0x6e>
    1df4:	0e c0       	rjmp	.+28     	; 0x1e12 <__addsf3x+0x9c>
    1df6:	ba 0f       	add	r27, r26
    1df8:	62 1f       	adc	r22, r18
    1dfa:	73 1f       	adc	r23, r19
    1dfc:	84 1f       	adc	r24, r20
    1dfe:	48 f4       	brcc	.+18     	; 0x1e12 <__addsf3x+0x9c>
    1e00:	87 95       	ror	r24
    1e02:	77 95       	ror	r23
    1e04:	67 95       	ror	r22
    1e06:	b7 95       	ror	r27
    1e08:	f7 95       	ror	r31
    1e0a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e0c:	08 f0       	brcs	.+2      	; 0x1e10 <__addsf3x+0x9a>
    1e0e:	b0 cf       	rjmp	.-160    	; 0x1d70 <__addsf3+0x28>
    1e10:	93 95       	inc	r25
    1e12:	88 0f       	add	r24, r24
    1e14:	08 f0       	brcs	.+2      	; 0x1e18 <__addsf3x+0xa2>
    1e16:	99 27       	eor	r25, r25
    1e18:	ee 0f       	add	r30, r30
    1e1a:	97 95       	ror	r25
    1e1c:	87 95       	ror	r24
    1e1e:	08 95       	ret

00001e20 <__fixsfsi>:
    1e20:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <__fixunssfsi>
    1e24:	68 94       	set
    1e26:	b1 11       	cpse	r27, r1
    1e28:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__fp_szero>
    1e2c:	08 95       	ret

00001e2e <__fixunssfsi>:
    1e2e:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__fp_splitA>
    1e32:	88 f0       	brcs	.+34     	; 0x1e56 <__fixunssfsi+0x28>
    1e34:	9f 57       	subi	r25, 0x7F	; 127
    1e36:	98 f0       	brcs	.+38     	; 0x1e5e <__fixunssfsi+0x30>
    1e38:	b9 2f       	mov	r27, r25
    1e3a:	99 27       	eor	r25, r25
    1e3c:	b7 51       	subi	r27, 0x17	; 23
    1e3e:	b0 f0       	brcs	.+44     	; 0x1e6c <__fixunssfsi+0x3e>
    1e40:	e1 f0       	breq	.+56     	; 0x1e7a <__fixunssfsi+0x4c>
    1e42:	66 0f       	add	r22, r22
    1e44:	77 1f       	adc	r23, r23
    1e46:	88 1f       	adc	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	1a f0       	brmi	.+6      	; 0x1e52 <__fixunssfsi+0x24>
    1e4c:	ba 95       	dec	r27
    1e4e:	c9 f7       	brne	.-14     	; 0x1e42 <__fixunssfsi+0x14>
    1e50:	14 c0       	rjmp	.+40     	; 0x1e7a <__fixunssfsi+0x4c>
    1e52:	b1 30       	cpi	r27, 0x01	; 1
    1e54:	91 f0       	breq	.+36     	; 0x1e7a <__fixunssfsi+0x4c>
    1e56:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__fp_zero>
    1e5a:	b1 e0       	ldi	r27, 0x01	; 1
    1e5c:	08 95       	ret
    1e5e:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__fp_zero>
    1e62:	67 2f       	mov	r22, r23
    1e64:	78 2f       	mov	r23, r24
    1e66:	88 27       	eor	r24, r24
    1e68:	b8 5f       	subi	r27, 0xF8	; 248
    1e6a:	39 f0       	breq	.+14     	; 0x1e7a <__fixunssfsi+0x4c>
    1e6c:	b9 3f       	cpi	r27, 0xF9	; 249
    1e6e:	cc f3       	brlt	.-14     	; 0x1e62 <__fixunssfsi+0x34>
    1e70:	86 95       	lsr	r24
    1e72:	77 95       	ror	r23
    1e74:	67 95       	ror	r22
    1e76:	b3 95       	inc	r27
    1e78:	d9 f7       	brne	.-10     	; 0x1e70 <__fixunssfsi+0x42>
    1e7a:	3e f4       	brtc	.+14     	; 0x1e8a <__fixunssfsi+0x5c>
    1e7c:	90 95       	com	r25
    1e7e:	80 95       	com	r24
    1e80:	70 95       	com	r23
    1e82:	61 95       	neg	r22
    1e84:	7f 4f       	sbci	r23, 0xFF	; 255
    1e86:	8f 4f       	sbci	r24, 0xFF	; 255
    1e88:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8a:	08 95       	ret

00001e8c <floor>:
    1e8c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__fp_trunc>
    1e90:	90 f0       	brcs	.+36     	; 0x1eb6 <floor+0x2a>
    1e92:	9f 37       	cpi	r25, 0x7F	; 127
    1e94:	48 f4       	brcc	.+18     	; 0x1ea8 <floor+0x1c>
    1e96:	91 11       	cpse	r25, r1
    1e98:	16 f0       	brts	.+4      	; 0x1e9e <floor+0x12>
    1e9a:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__fp_szero>
    1e9e:	60 e0       	ldi	r22, 0x00	; 0
    1ea0:	70 e0       	ldi	r23, 0x00	; 0
    1ea2:	80 e8       	ldi	r24, 0x80	; 128
    1ea4:	9f eb       	ldi	r25, 0xBF	; 191
    1ea6:	08 95       	ret
    1ea8:	26 f4       	brtc	.+8      	; 0x1eb2 <floor+0x26>
    1eaa:	1b 16       	cp	r1, r27
    1eac:	61 1d       	adc	r22, r1
    1eae:	71 1d       	adc	r23, r1
    1eb0:	81 1d       	adc	r24, r1
    1eb2:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__fp_mintl>
    1eb6:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <__fp_mpack>

00001eba <__fp_inf>:
    1eba:	97 f9       	bld	r25, 7
    1ebc:	9f 67       	ori	r25, 0x7F	; 127
    1ebe:	80 e8       	ldi	r24, 0x80	; 128
    1ec0:	70 e0       	ldi	r23, 0x00	; 0
    1ec2:	60 e0       	ldi	r22, 0x00	; 0
    1ec4:	08 95       	ret

00001ec6 <__fp_mintl>:
    1ec6:	88 23       	and	r24, r24
    1ec8:	71 f4       	brne	.+28     	; 0x1ee6 <__fp_mintl+0x20>
    1eca:	77 23       	and	r23, r23
    1ecc:	21 f0       	breq	.+8      	; 0x1ed6 <__fp_mintl+0x10>
    1ece:	98 50       	subi	r25, 0x08	; 8
    1ed0:	87 2b       	or	r24, r23
    1ed2:	76 2f       	mov	r23, r22
    1ed4:	07 c0       	rjmp	.+14     	; 0x1ee4 <__fp_mintl+0x1e>
    1ed6:	66 23       	and	r22, r22
    1ed8:	11 f4       	brne	.+4      	; 0x1ede <__fp_mintl+0x18>
    1eda:	99 27       	eor	r25, r25
    1edc:	0d c0       	rjmp	.+26     	; 0x1ef8 <__fp_mintl+0x32>
    1ede:	90 51       	subi	r25, 0x10	; 16
    1ee0:	86 2b       	or	r24, r22
    1ee2:	70 e0       	ldi	r23, 0x00	; 0
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	2a f0       	brmi	.+10     	; 0x1ef2 <__fp_mintl+0x2c>
    1ee8:	9a 95       	dec	r25
    1eea:	66 0f       	add	r22, r22
    1eec:	77 1f       	adc	r23, r23
    1eee:	88 1f       	adc	r24, r24
    1ef0:	da f7       	brpl	.-10     	; 0x1ee8 <__fp_mintl+0x22>
    1ef2:	88 0f       	add	r24, r24
    1ef4:	96 95       	lsr	r25
    1ef6:	87 95       	ror	r24
    1ef8:	97 f9       	bld	r25, 7
    1efa:	08 95       	ret

00001efc <__fp_mpack>:
    1efc:	9f 3f       	cpi	r25, 0xFF	; 255
    1efe:	31 f0       	breq	.+12     	; 0x1f0c <__fp_mpack_finite+0xc>

00001f00 <__fp_mpack_finite>:
    1f00:	91 50       	subi	r25, 0x01	; 1
    1f02:	20 f4       	brcc	.+8      	; 0x1f0c <__fp_mpack_finite+0xc>
    1f04:	87 95       	ror	r24
    1f06:	77 95       	ror	r23
    1f08:	67 95       	ror	r22
    1f0a:	b7 95       	ror	r27
    1f0c:	88 0f       	add	r24, r24
    1f0e:	91 1d       	adc	r25, r1
    1f10:	96 95       	lsr	r25
    1f12:	87 95       	ror	r24
    1f14:	97 f9       	bld	r25, 7
    1f16:	08 95       	ret

00001f18 <__fp_nan>:
    1f18:	9f ef       	ldi	r25, 0xFF	; 255
    1f1a:	80 ec       	ldi	r24, 0xC0	; 192
    1f1c:	08 95       	ret

00001f1e <__fp_pscA>:
    1f1e:	00 24       	eor	r0, r0
    1f20:	0a 94       	dec	r0
    1f22:	16 16       	cp	r1, r22
    1f24:	17 06       	cpc	r1, r23
    1f26:	18 06       	cpc	r1, r24
    1f28:	09 06       	cpc	r0, r25
    1f2a:	08 95       	ret

00001f2c <__fp_pscB>:
    1f2c:	00 24       	eor	r0, r0
    1f2e:	0a 94       	dec	r0
    1f30:	12 16       	cp	r1, r18
    1f32:	13 06       	cpc	r1, r19
    1f34:	14 06       	cpc	r1, r20
    1f36:	05 06       	cpc	r0, r21
    1f38:	08 95       	ret

00001f3a <__fp_round>:
    1f3a:	09 2e       	mov	r0, r25
    1f3c:	03 94       	inc	r0
    1f3e:	00 0c       	add	r0, r0
    1f40:	11 f4       	brne	.+4      	; 0x1f46 <__fp_round+0xc>
    1f42:	88 23       	and	r24, r24
    1f44:	52 f0       	brmi	.+20     	; 0x1f5a <__fp_round+0x20>
    1f46:	bb 0f       	add	r27, r27
    1f48:	40 f4       	brcc	.+16     	; 0x1f5a <__fp_round+0x20>
    1f4a:	bf 2b       	or	r27, r31
    1f4c:	11 f4       	brne	.+4      	; 0x1f52 <__fp_round+0x18>
    1f4e:	60 ff       	sbrs	r22, 0
    1f50:	04 c0       	rjmp	.+8      	; 0x1f5a <__fp_round+0x20>
    1f52:	6f 5f       	subi	r22, 0xFF	; 255
    1f54:	7f 4f       	sbci	r23, 0xFF	; 255
    1f56:	8f 4f       	sbci	r24, 0xFF	; 255
    1f58:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5a:	08 95       	ret

00001f5c <__fp_split3>:
    1f5c:	57 fd       	sbrc	r21, 7
    1f5e:	90 58       	subi	r25, 0x80	; 128
    1f60:	44 0f       	add	r20, r20
    1f62:	55 1f       	adc	r21, r21
    1f64:	59 f0       	breq	.+22     	; 0x1f7c <__fp_splitA+0x10>
    1f66:	5f 3f       	cpi	r21, 0xFF	; 255
    1f68:	71 f0       	breq	.+28     	; 0x1f86 <__fp_splitA+0x1a>
    1f6a:	47 95       	ror	r20

00001f6c <__fp_splitA>:
    1f6c:	88 0f       	add	r24, r24
    1f6e:	97 fb       	bst	r25, 7
    1f70:	99 1f       	adc	r25, r25
    1f72:	61 f0       	breq	.+24     	; 0x1f8c <__fp_splitA+0x20>
    1f74:	9f 3f       	cpi	r25, 0xFF	; 255
    1f76:	79 f0       	breq	.+30     	; 0x1f96 <__fp_splitA+0x2a>
    1f78:	87 95       	ror	r24
    1f7a:	08 95       	ret
    1f7c:	12 16       	cp	r1, r18
    1f7e:	13 06       	cpc	r1, r19
    1f80:	14 06       	cpc	r1, r20
    1f82:	55 1f       	adc	r21, r21
    1f84:	f2 cf       	rjmp	.-28     	; 0x1f6a <__fp_split3+0xe>
    1f86:	46 95       	lsr	r20
    1f88:	f1 df       	rcall	.-30     	; 0x1f6c <__fp_splitA>
    1f8a:	08 c0       	rjmp	.+16     	; 0x1f9c <__fp_splitA+0x30>
    1f8c:	16 16       	cp	r1, r22
    1f8e:	17 06       	cpc	r1, r23
    1f90:	18 06       	cpc	r1, r24
    1f92:	99 1f       	adc	r25, r25
    1f94:	f1 cf       	rjmp	.-30     	; 0x1f78 <__fp_splitA+0xc>
    1f96:	86 95       	lsr	r24
    1f98:	71 05       	cpc	r23, r1
    1f9a:	61 05       	cpc	r22, r1
    1f9c:	08 94       	sec
    1f9e:	08 95       	ret

00001fa0 <__fp_trunc>:
    1fa0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__fp_splitA>
    1fa4:	a0 f0       	brcs	.+40     	; 0x1fce <__fp_trunc+0x2e>
    1fa6:	be e7       	ldi	r27, 0x7E	; 126
    1fa8:	b9 17       	cp	r27, r25
    1faa:	88 f4       	brcc	.+34     	; 0x1fce <__fp_trunc+0x2e>
    1fac:	bb 27       	eor	r27, r27
    1fae:	9f 38       	cpi	r25, 0x8F	; 143
    1fb0:	60 f4       	brcc	.+24     	; 0x1fca <__fp_trunc+0x2a>
    1fb2:	16 16       	cp	r1, r22
    1fb4:	b1 1d       	adc	r27, r1
    1fb6:	67 2f       	mov	r22, r23
    1fb8:	78 2f       	mov	r23, r24
    1fba:	88 27       	eor	r24, r24
    1fbc:	98 5f       	subi	r25, 0xF8	; 248
    1fbe:	f7 cf       	rjmp	.-18     	; 0x1fae <__fp_trunc+0xe>
    1fc0:	86 95       	lsr	r24
    1fc2:	77 95       	ror	r23
    1fc4:	67 95       	ror	r22
    1fc6:	b1 1d       	adc	r27, r1
    1fc8:	93 95       	inc	r25
    1fca:	96 39       	cpi	r25, 0x96	; 150
    1fcc:	c8 f3       	brcs	.-14     	; 0x1fc0 <__fp_trunc+0x20>
    1fce:	08 95       	ret

00001fd0 <__fp_zero>:
    1fd0:	e8 94       	clt

00001fd2 <__fp_szero>:
    1fd2:	bb 27       	eor	r27, r27
    1fd4:	66 27       	eor	r22, r22
    1fd6:	77 27       	eor	r23, r23
    1fd8:	cb 01       	movw	r24, r22
    1fda:	97 f9       	bld	r25, 7
    1fdc:	08 95       	ret

00001fde <__mulsf3>:
    1fde:	0e 94 02 10 	call	0x2004	; 0x2004 <__mulsf3x>
    1fe2:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__fp_round>
    1fe6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <__fp_pscA>
    1fea:	38 f0       	brcs	.+14     	; 0x1ffa <__mulsf3+0x1c>
    1fec:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__fp_pscB>
    1ff0:	20 f0       	brcs	.+8      	; 0x1ffa <__mulsf3+0x1c>
    1ff2:	95 23       	and	r25, r21
    1ff4:	11 f0       	breq	.+4      	; 0x1ffa <__mulsf3+0x1c>
    1ff6:	0c 94 5d 0f 	jmp	0x1eba	; 0x1eba <__fp_inf>
    1ffa:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <__fp_nan>
    1ffe:	11 24       	eor	r1, r1
    2000:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__fp_szero>

00002004 <__mulsf3x>:
    2004:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__fp_split3>
    2008:	70 f3       	brcs	.-36     	; 0x1fe6 <__mulsf3+0x8>

0000200a <__mulsf3_pse>:
    200a:	95 9f       	mul	r25, r21
    200c:	c1 f3       	breq	.-16     	; 0x1ffe <__mulsf3+0x20>
    200e:	95 0f       	add	r25, r21
    2010:	50 e0       	ldi	r21, 0x00	; 0
    2012:	55 1f       	adc	r21, r21
    2014:	62 9f       	mul	r22, r18
    2016:	f0 01       	movw	r30, r0
    2018:	72 9f       	mul	r23, r18
    201a:	bb 27       	eor	r27, r27
    201c:	f0 0d       	add	r31, r0
    201e:	b1 1d       	adc	r27, r1
    2020:	63 9f       	mul	r22, r19
    2022:	aa 27       	eor	r26, r26
    2024:	f0 0d       	add	r31, r0
    2026:	b1 1d       	adc	r27, r1
    2028:	aa 1f       	adc	r26, r26
    202a:	64 9f       	mul	r22, r20
    202c:	66 27       	eor	r22, r22
    202e:	b0 0d       	add	r27, r0
    2030:	a1 1d       	adc	r26, r1
    2032:	66 1f       	adc	r22, r22
    2034:	82 9f       	mul	r24, r18
    2036:	22 27       	eor	r18, r18
    2038:	b0 0d       	add	r27, r0
    203a:	a1 1d       	adc	r26, r1
    203c:	62 1f       	adc	r22, r18
    203e:	73 9f       	mul	r23, r19
    2040:	b0 0d       	add	r27, r0
    2042:	a1 1d       	adc	r26, r1
    2044:	62 1f       	adc	r22, r18
    2046:	83 9f       	mul	r24, r19
    2048:	a0 0d       	add	r26, r0
    204a:	61 1d       	adc	r22, r1
    204c:	22 1f       	adc	r18, r18
    204e:	74 9f       	mul	r23, r20
    2050:	33 27       	eor	r19, r19
    2052:	a0 0d       	add	r26, r0
    2054:	61 1d       	adc	r22, r1
    2056:	23 1f       	adc	r18, r19
    2058:	84 9f       	mul	r24, r20
    205a:	60 0d       	add	r22, r0
    205c:	21 1d       	adc	r18, r1
    205e:	82 2f       	mov	r24, r18
    2060:	76 2f       	mov	r23, r22
    2062:	6a 2f       	mov	r22, r26
    2064:	11 24       	eor	r1, r1
    2066:	9f 57       	subi	r25, 0x7F	; 127
    2068:	50 40       	sbci	r21, 0x00	; 0
    206a:	9a f0       	brmi	.+38     	; 0x2092 <__mulsf3_pse+0x88>
    206c:	f1 f0       	breq	.+60     	; 0x20aa <__mulsf3_pse+0xa0>
    206e:	88 23       	and	r24, r24
    2070:	4a f0       	brmi	.+18     	; 0x2084 <__mulsf3_pse+0x7a>
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	bb 1f       	adc	r27, r27
    2078:	66 1f       	adc	r22, r22
    207a:	77 1f       	adc	r23, r23
    207c:	88 1f       	adc	r24, r24
    207e:	91 50       	subi	r25, 0x01	; 1
    2080:	50 40       	sbci	r21, 0x00	; 0
    2082:	a9 f7       	brne	.-22     	; 0x206e <__mulsf3_pse+0x64>
    2084:	9e 3f       	cpi	r25, 0xFE	; 254
    2086:	51 05       	cpc	r21, r1
    2088:	80 f0       	brcs	.+32     	; 0x20aa <__mulsf3_pse+0xa0>
    208a:	0c 94 5d 0f 	jmp	0x1eba	; 0x1eba <__fp_inf>
    208e:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__fp_szero>
    2092:	5f 3f       	cpi	r21, 0xFF	; 255
    2094:	e4 f3       	brlt	.-8      	; 0x208e <__mulsf3_pse+0x84>
    2096:	98 3e       	cpi	r25, 0xE8	; 232
    2098:	d4 f3       	brlt	.-12     	; 0x208e <__mulsf3_pse+0x84>
    209a:	86 95       	lsr	r24
    209c:	77 95       	ror	r23
    209e:	67 95       	ror	r22
    20a0:	b7 95       	ror	r27
    20a2:	f7 95       	ror	r31
    20a4:	e7 95       	ror	r30
    20a6:	9f 5f       	subi	r25, 0xFF	; 255
    20a8:	c1 f7       	brne	.-16     	; 0x209a <__mulsf3_pse+0x90>
    20aa:	fe 2b       	or	r31, r30
    20ac:	88 0f       	add	r24, r24
    20ae:	91 1d       	adc	r25, r1
    20b0:	96 95       	lsr	r25
    20b2:	87 95       	ror	r24
    20b4:	97 f9       	bld	r25, 7
    20b6:	08 95       	ret

000020b8 <__udivmodsi4>:
    20b8:	a1 e2       	ldi	r26, 0x21	; 33
    20ba:	1a 2e       	mov	r1, r26
    20bc:	aa 1b       	sub	r26, r26
    20be:	bb 1b       	sub	r27, r27
    20c0:	fd 01       	movw	r30, r26
    20c2:	0d c0       	rjmp	.+26     	; 0x20de <__udivmodsi4_ep>

000020c4 <__udivmodsi4_loop>:
    20c4:	aa 1f       	adc	r26, r26
    20c6:	bb 1f       	adc	r27, r27
    20c8:	ee 1f       	adc	r30, r30
    20ca:	ff 1f       	adc	r31, r31
    20cc:	a2 17       	cp	r26, r18
    20ce:	b3 07       	cpc	r27, r19
    20d0:	e4 07       	cpc	r30, r20
    20d2:	f5 07       	cpc	r31, r21
    20d4:	20 f0       	brcs	.+8      	; 0x20de <__udivmodsi4_ep>
    20d6:	a2 1b       	sub	r26, r18
    20d8:	b3 0b       	sbc	r27, r19
    20da:	e4 0b       	sbc	r30, r20
    20dc:	f5 0b       	sbc	r31, r21

000020de <__udivmodsi4_ep>:
    20de:	66 1f       	adc	r22, r22
    20e0:	77 1f       	adc	r23, r23
    20e2:	88 1f       	adc	r24, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	1a 94       	dec	r1
    20e8:	69 f7       	brne	.-38     	; 0x20c4 <__udivmodsi4_loop>
    20ea:	60 95       	com	r22
    20ec:	70 95       	com	r23
    20ee:	80 95       	com	r24
    20f0:	90 95       	com	r25
    20f2:	9b 01       	movw	r18, r22
    20f4:	ac 01       	movw	r20, r24
    20f6:	bd 01       	movw	r22, r26
    20f8:	cf 01       	movw	r24, r30
    20fa:	08 95       	ret

000020fc <memset>:
    20fc:	dc 01       	movw	r26, r24
    20fe:	01 c0       	rjmp	.+2      	; 0x2102 <memset+0x6>
    2100:	6d 93       	st	X+, r22
    2102:	41 50       	subi	r20, 0x01	; 1
    2104:	50 40       	sbci	r21, 0x00	; 0
    2106:	e0 f7       	brcc	.-8      	; 0x2100 <memset+0x4>
    2108:	08 95       	ret

0000210a <sprintf>:
    210a:	ae e0       	ldi	r26, 0x0E	; 14
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	eb e8       	ldi	r30, 0x8B	; 139
    2110:	f0 e1       	ldi	r31, 0x10	; 16
    2112:	0c 94 46 13 	jmp	0x268c	; 0x268c <__prologue_saves__+0x1c>
    2116:	0d 89       	ldd	r16, Y+21	; 0x15
    2118:	1e 89       	ldd	r17, Y+22	; 0x16
    211a:	86 e0       	ldi	r24, 0x06	; 6
    211c:	8c 83       	std	Y+4, r24	; 0x04
    211e:	1a 83       	std	Y+2, r17	; 0x02
    2120:	09 83       	std	Y+1, r16	; 0x01
    2122:	8f ef       	ldi	r24, 0xFF	; 255
    2124:	9f e7       	ldi	r25, 0x7F	; 127
    2126:	9e 83       	std	Y+6, r25	; 0x06
    2128:	8d 83       	std	Y+5, r24	; 0x05
    212a:	ae 01       	movw	r20, r28
    212c:	47 5e       	subi	r20, 0xE7	; 231
    212e:	5f 4f       	sbci	r21, 0xFF	; 255
    2130:	6f 89       	ldd	r22, Y+23	; 0x17
    2132:	78 8d       	ldd	r23, Y+24	; 0x18
    2134:	ce 01       	movw	r24, r28
    2136:	01 96       	adiw	r24, 0x01	; 1
    2138:	0e 94 a7 10 	call	0x214e	; 0x214e <vfprintf>
    213c:	ef 81       	ldd	r30, Y+7	; 0x07
    213e:	f8 85       	ldd	r31, Y+8	; 0x08
    2140:	e0 0f       	add	r30, r16
    2142:	f1 1f       	adc	r31, r17
    2144:	10 82       	st	Z, r1
    2146:	2e 96       	adiw	r28, 0x0e	; 14
    2148:	e4 e0       	ldi	r30, 0x04	; 4
    214a:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__epilogue_restores__+0x1c>

0000214e <vfprintf>:
    214e:	ab e0       	ldi	r26, 0x0B	; 11
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	ed ea       	ldi	r30, 0xAD	; 173
    2154:	f0 e1       	ldi	r31, 0x10	; 16
    2156:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__prologue_saves__>
    215a:	6c 01       	movw	r12, r24
    215c:	7b 01       	movw	r14, r22
    215e:	8a 01       	movw	r16, r20
    2160:	fc 01       	movw	r30, r24
    2162:	17 82       	std	Z+7, r1	; 0x07
    2164:	16 82       	std	Z+6, r1	; 0x06
    2166:	83 81       	ldd	r24, Z+3	; 0x03
    2168:	81 ff       	sbrs	r24, 1
    216a:	cc c1       	rjmp	.+920    	; 0x2504 <vfprintf+0x3b6>
    216c:	ce 01       	movw	r24, r28
    216e:	01 96       	adiw	r24, 0x01	; 1
    2170:	3c 01       	movw	r6, r24
    2172:	f6 01       	movw	r30, r12
    2174:	93 81       	ldd	r25, Z+3	; 0x03
    2176:	f7 01       	movw	r30, r14
    2178:	93 fd       	sbrc	r25, 3
    217a:	85 91       	lpm	r24, Z+
    217c:	93 ff       	sbrs	r25, 3
    217e:	81 91       	ld	r24, Z+
    2180:	7f 01       	movw	r14, r30
    2182:	88 23       	and	r24, r24
    2184:	09 f4       	brne	.+2      	; 0x2188 <vfprintf+0x3a>
    2186:	ba c1       	rjmp	.+884    	; 0x24fc <vfprintf+0x3ae>
    2188:	85 32       	cpi	r24, 0x25	; 37
    218a:	39 f4       	brne	.+14     	; 0x219a <vfprintf+0x4c>
    218c:	93 fd       	sbrc	r25, 3
    218e:	85 91       	lpm	r24, Z+
    2190:	93 ff       	sbrs	r25, 3
    2192:	81 91       	ld	r24, Z+
    2194:	7f 01       	movw	r14, r30
    2196:	85 32       	cpi	r24, 0x25	; 37
    2198:	29 f4       	brne	.+10     	; 0x21a4 <vfprintf+0x56>
    219a:	b6 01       	movw	r22, r12
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	0e 94 9e 12 	call	0x253c	; 0x253c <fputc>
    21a2:	e7 cf       	rjmp	.-50     	; 0x2172 <vfprintf+0x24>
    21a4:	91 2c       	mov	r9, r1
    21a6:	21 2c       	mov	r2, r1
    21a8:	31 2c       	mov	r3, r1
    21aa:	ff e1       	ldi	r31, 0x1F	; 31
    21ac:	f3 15       	cp	r31, r3
    21ae:	d8 f0       	brcs	.+54     	; 0x21e6 <vfprintf+0x98>
    21b0:	8b 32       	cpi	r24, 0x2B	; 43
    21b2:	79 f0       	breq	.+30     	; 0x21d2 <vfprintf+0x84>
    21b4:	38 f4       	brcc	.+14     	; 0x21c4 <vfprintf+0x76>
    21b6:	80 32       	cpi	r24, 0x20	; 32
    21b8:	79 f0       	breq	.+30     	; 0x21d8 <vfprintf+0x8a>
    21ba:	83 32       	cpi	r24, 0x23	; 35
    21bc:	a1 f4       	brne	.+40     	; 0x21e6 <vfprintf+0x98>
    21be:	23 2d       	mov	r18, r3
    21c0:	20 61       	ori	r18, 0x10	; 16
    21c2:	1d c0       	rjmp	.+58     	; 0x21fe <vfprintf+0xb0>
    21c4:	8d 32       	cpi	r24, 0x2D	; 45
    21c6:	61 f0       	breq	.+24     	; 0x21e0 <vfprintf+0x92>
    21c8:	80 33       	cpi	r24, 0x30	; 48
    21ca:	69 f4       	brne	.+26     	; 0x21e6 <vfprintf+0x98>
    21cc:	23 2d       	mov	r18, r3
    21ce:	21 60       	ori	r18, 0x01	; 1
    21d0:	16 c0       	rjmp	.+44     	; 0x21fe <vfprintf+0xb0>
    21d2:	83 2d       	mov	r24, r3
    21d4:	82 60       	ori	r24, 0x02	; 2
    21d6:	38 2e       	mov	r3, r24
    21d8:	e3 2d       	mov	r30, r3
    21da:	e4 60       	ori	r30, 0x04	; 4
    21dc:	3e 2e       	mov	r3, r30
    21de:	2a c0       	rjmp	.+84     	; 0x2234 <vfprintf+0xe6>
    21e0:	f3 2d       	mov	r31, r3
    21e2:	f8 60       	ori	r31, 0x08	; 8
    21e4:	1d c0       	rjmp	.+58     	; 0x2220 <vfprintf+0xd2>
    21e6:	37 fc       	sbrc	r3, 7
    21e8:	2d c0       	rjmp	.+90     	; 0x2244 <vfprintf+0xf6>
    21ea:	20 ed       	ldi	r18, 0xD0	; 208
    21ec:	28 0f       	add	r18, r24
    21ee:	2a 30       	cpi	r18, 0x0A	; 10
    21f0:	40 f0       	brcs	.+16     	; 0x2202 <vfprintf+0xb4>
    21f2:	8e 32       	cpi	r24, 0x2E	; 46
    21f4:	b9 f4       	brne	.+46     	; 0x2224 <vfprintf+0xd6>
    21f6:	36 fc       	sbrc	r3, 6
    21f8:	81 c1       	rjmp	.+770    	; 0x24fc <vfprintf+0x3ae>
    21fa:	23 2d       	mov	r18, r3
    21fc:	20 64       	ori	r18, 0x40	; 64
    21fe:	32 2e       	mov	r3, r18
    2200:	19 c0       	rjmp	.+50     	; 0x2234 <vfprintf+0xe6>
    2202:	36 fe       	sbrs	r3, 6
    2204:	06 c0       	rjmp	.+12     	; 0x2212 <vfprintf+0xc4>
    2206:	8a e0       	ldi	r24, 0x0A	; 10
    2208:	98 9e       	mul	r9, r24
    220a:	20 0d       	add	r18, r0
    220c:	11 24       	eor	r1, r1
    220e:	92 2e       	mov	r9, r18
    2210:	11 c0       	rjmp	.+34     	; 0x2234 <vfprintf+0xe6>
    2212:	ea e0       	ldi	r30, 0x0A	; 10
    2214:	2e 9e       	mul	r2, r30
    2216:	20 0d       	add	r18, r0
    2218:	11 24       	eor	r1, r1
    221a:	22 2e       	mov	r2, r18
    221c:	f3 2d       	mov	r31, r3
    221e:	f0 62       	ori	r31, 0x20	; 32
    2220:	3f 2e       	mov	r3, r31
    2222:	08 c0       	rjmp	.+16     	; 0x2234 <vfprintf+0xe6>
    2224:	8c 36       	cpi	r24, 0x6C	; 108
    2226:	21 f4       	brne	.+8      	; 0x2230 <vfprintf+0xe2>
    2228:	83 2d       	mov	r24, r3
    222a:	80 68       	ori	r24, 0x80	; 128
    222c:	38 2e       	mov	r3, r24
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <vfprintf+0xe6>
    2230:	88 36       	cpi	r24, 0x68	; 104
    2232:	41 f4       	brne	.+16     	; 0x2244 <vfprintf+0xf6>
    2234:	f7 01       	movw	r30, r14
    2236:	93 fd       	sbrc	r25, 3
    2238:	85 91       	lpm	r24, Z+
    223a:	93 ff       	sbrs	r25, 3
    223c:	81 91       	ld	r24, Z+
    223e:	7f 01       	movw	r14, r30
    2240:	81 11       	cpse	r24, r1
    2242:	b3 cf       	rjmp	.-154    	; 0x21aa <vfprintf+0x5c>
    2244:	98 2f       	mov	r25, r24
    2246:	9f 7d       	andi	r25, 0xDF	; 223
    2248:	95 54       	subi	r25, 0x45	; 69
    224a:	93 30       	cpi	r25, 0x03	; 3
    224c:	28 f4       	brcc	.+10     	; 0x2258 <vfprintf+0x10a>
    224e:	0c 5f       	subi	r16, 0xFC	; 252
    2250:	1f 4f       	sbci	r17, 0xFF	; 255
    2252:	9f e3       	ldi	r25, 0x3F	; 63
    2254:	99 83       	std	Y+1, r25	; 0x01
    2256:	0d c0       	rjmp	.+26     	; 0x2272 <vfprintf+0x124>
    2258:	83 36       	cpi	r24, 0x63	; 99
    225a:	31 f0       	breq	.+12     	; 0x2268 <vfprintf+0x11a>
    225c:	83 37       	cpi	r24, 0x73	; 115
    225e:	71 f0       	breq	.+28     	; 0x227c <vfprintf+0x12e>
    2260:	83 35       	cpi	r24, 0x53	; 83
    2262:	09 f0       	breq	.+2      	; 0x2266 <vfprintf+0x118>
    2264:	59 c0       	rjmp	.+178    	; 0x2318 <vfprintf+0x1ca>
    2266:	21 c0       	rjmp	.+66     	; 0x22aa <vfprintf+0x15c>
    2268:	f8 01       	movw	r30, r16
    226a:	80 81       	ld	r24, Z
    226c:	89 83       	std	Y+1, r24	; 0x01
    226e:	0e 5f       	subi	r16, 0xFE	; 254
    2270:	1f 4f       	sbci	r17, 0xFF	; 255
    2272:	88 24       	eor	r8, r8
    2274:	83 94       	inc	r8
    2276:	91 2c       	mov	r9, r1
    2278:	53 01       	movw	r10, r6
    227a:	13 c0       	rjmp	.+38     	; 0x22a2 <vfprintf+0x154>
    227c:	28 01       	movw	r4, r16
    227e:	f2 e0       	ldi	r31, 0x02	; 2
    2280:	4f 0e       	add	r4, r31
    2282:	51 1c       	adc	r5, r1
    2284:	f8 01       	movw	r30, r16
    2286:	a0 80       	ld	r10, Z
    2288:	b1 80       	ldd	r11, Z+1	; 0x01
    228a:	36 fe       	sbrs	r3, 6
    228c:	03 c0       	rjmp	.+6      	; 0x2294 <vfprintf+0x146>
    228e:	69 2d       	mov	r22, r9
    2290:	70 e0       	ldi	r23, 0x00	; 0
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <vfprintf+0x14a>
    2294:	6f ef       	ldi	r22, 0xFF	; 255
    2296:	7f ef       	ldi	r23, 0xFF	; 255
    2298:	c5 01       	movw	r24, r10
    229a:	0e 94 93 12 	call	0x2526	; 0x2526 <strnlen>
    229e:	4c 01       	movw	r8, r24
    22a0:	82 01       	movw	r16, r4
    22a2:	f3 2d       	mov	r31, r3
    22a4:	ff 77       	andi	r31, 0x7F	; 127
    22a6:	3f 2e       	mov	r3, r31
    22a8:	16 c0       	rjmp	.+44     	; 0x22d6 <vfprintf+0x188>
    22aa:	28 01       	movw	r4, r16
    22ac:	22 e0       	ldi	r18, 0x02	; 2
    22ae:	42 0e       	add	r4, r18
    22b0:	51 1c       	adc	r5, r1
    22b2:	f8 01       	movw	r30, r16
    22b4:	a0 80       	ld	r10, Z
    22b6:	b1 80       	ldd	r11, Z+1	; 0x01
    22b8:	36 fe       	sbrs	r3, 6
    22ba:	03 c0       	rjmp	.+6      	; 0x22c2 <vfprintf+0x174>
    22bc:	69 2d       	mov	r22, r9
    22be:	70 e0       	ldi	r23, 0x00	; 0
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <vfprintf+0x178>
    22c2:	6f ef       	ldi	r22, 0xFF	; 255
    22c4:	7f ef       	ldi	r23, 0xFF	; 255
    22c6:	c5 01       	movw	r24, r10
    22c8:	0e 94 88 12 	call	0x2510	; 0x2510 <strnlen_P>
    22cc:	4c 01       	movw	r8, r24
    22ce:	f3 2d       	mov	r31, r3
    22d0:	f0 68       	ori	r31, 0x80	; 128
    22d2:	3f 2e       	mov	r3, r31
    22d4:	82 01       	movw	r16, r4
    22d6:	33 fc       	sbrc	r3, 3
    22d8:	1b c0       	rjmp	.+54     	; 0x2310 <vfprintf+0x1c2>
    22da:	82 2d       	mov	r24, r2
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	88 16       	cp	r8, r24
    22e0:	99 06       	cpc	r9, r25
    22e2:	b0 f4       	brcc	.+44     	; 0x2310 <vfprintf+0x1c2>
    22e4:	b6 01       	movw	r22, r12
    22e6:	80 e2       	ldi	r24, 0x20	; 32
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	0e 94 9e 12 	call	0x253c	; 0x253c <fputc>
    22ee:	2a 94       	dec	r2
    22f0:	f4 cf       	rjmp	.-24     	; 0x22da <vfprintf+0x18c>
    22f2:	f5 01       	movw	r30, r10
    22f4:	37 fc       	sbrc	r3, 7
    22f6:	85 91       	lpm	r24, Z+
    22f8:	37 fe       	sbrs	r3, 7
    22fa:	81 91       	ld	r24, Z+
    22fc:	5f 01       	movw	r10, r30
    22fe:	b6 01       	movw	r22, r12
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	0e 94 9e 12 	call	0x253c	; 0x253c <fputc>
    2306:	21 10       	cpse	r2, r1
    2308:	2a 94       	dec	r2
    230a:	21 e0       	ldi	r18, 0x01	; 1
    230c:	82 1a       	sub	r8, r18
    230e:	91 08       	sbc	r9, r1
    2310:	81 14       	cp	r8, r1
    2312:	91 04       	cpc	r9, r1
    2314:	71 f7       	brne	.-36     	; 0x22f2 <vfprintf+0x1a4>
    2316:	e8 c0       	rjmp	.+464    	; 0x24e8 <vfprintf+0x39a>
    2318:	84 36       	cpi	r24, 0x64	; 100
    231a:	11 f0       	breq	.+4      	; 0x2320 <vfprintf+0x1d2>
    231c:	89 36       	cpi	r24, 0x69	; 105
    231e:	41 f5       	brne	.+80     	; 0x2370 <vfprintf+0x222>
    2320:	f8 01       	movw	r30, r16
    2322:	37 fe       	sbrs	r3, 7
    2324:	07 c0       	rjmp	.+14     	; 0x2334 <vfprintf+0x1e6>
    2326:	60 81       	ld	r22, Z
    2328:	71 81       	ldd	r23, Z+1	; 0x01
    232a:	82 81       	ldd	r24, Z+2	; 0x02
    232c:	93 81       	ldd	r25, Z+3	; 0x03
    232e:	0c 5f       	subi	r16, 0xFC	; 252
    2330:	1f 4f       	sbci	r17, 0xFF	; 255
    2332:	08 c0       	rjmp	.+16     	; 0x2344 <vfprintf+0x1f6>
    2334:	60 81       	ld	r22, Z
    2336:	71 81       	ldd	r23, Z+1	; 0x01
    2338:	07 2e       	mov	r0, r23
    233a:	00 0c       	add	r0, r0
    233c:	88 0b       	sbc	r24, r24
    233e:	99 0b       	sbc	r25, r25
    2340:	0e 5f       	subi	r16, 0xFE	; 254
    2342:	1f 4f       	sbci	r17, 0xFF	; 255
    2344:	f3 2d       	mov	r31, r3
    2346:	ff 76       	andi	r31, 0x6F	; 111
    2348:	3f 2e       	mov	r3, r31
    234a:	97 ff       	sbrs	r25, 7
    234c:	09 c0       	rjmp	.+18     	; 0x2360 <vfprintf+0x212>
    234e:	90 95       	com	r25
    2350:	80 95       	com	r24
    2352:	70 95       	com	r23
    2354:	61 95       	neg	r22
    2356:	7f 4f       	sbci	r23, 0xFF	; 255
    2358:	8f 4f       	sbci	r24, 0xFF	; 255
    235a:	9f 4f       	sbci	r25, 0xFF	; 255
    235c:	f0 68       	ori	r31, 0x80	; 128
    235e:	3f 2e       	mov	r3, r31
    2360:	2a e0       	ldi	r18, 0x0A	; 10
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	a3 01       	movw	r20, r6
    2366:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__ultoa_invert>
    236a:	88 2e       	mov	r8, r24
    236c:	86 18       	sub	r8, r6
    236e:	45 c0       	rjmp	.+138    	; 0x23fa <vfprintf+0x2ac>
    2370:	85 37       	cpi	r24, 0x75	; 117
    2372:	31 f4       	brne	.+12     	; 0x2380 <vfprintf+0x232>
    2374:	23 2d       	mov	r18, r3
    2376:	2f 7e       	andi	r18, 0xEF	; 239
    2378:	b2 2e       	mov	r11, r18
    237a:	2a e0       	ldi	r18, 0x0A	; 10
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	25 c0       	rjmp	.+74     	; 0x23ca <vfprintf+0x27c>
    2380:	93 2d       	mov	r25, r3
    2382:	99 7f       	andi	r25, 0xF9	; 249
    2384:	b9 2e       	mov	r11, r25
    2386:	8f 36       	cpi	r24, 0x6F	; 111
    2388:	c1 f0       	breq	.+48     	; 0x23ba <vfprintf+0x26c>
    238a:	18 f4       	brcc	.+6      	; 0x2392 <vfprintf+0x244>
    238c:	88 35       	cpi	r24, 0x58	; 88
    238e:	79 f0       	breq	.+30     	; 0x23ae <vfprintf+0x260>
    2390:	b5 c0       	rjmp	.+362    	; 0x24fc <vfprintf+0x3ae>
    2392:	80 37       	cpi	r24, 0x70	; 112
    2394:	19 f0       	breq	.+6      	; 0x239c <vfprintf+0x24e>
    2396:	88 37       	cpi	r24, 0x78	; 120
    2398:	21 f0       	breq	.+8      	; 0x23a2 <vfprintf+0x254>
    239a:	b0 c0       	rjmp	.+352    	; 0x24fc <vfprintf+0x3ae>
    239c:	e9 2f       	mov	r30, r25
    239e:	e0 61       	ori	r30, 0x10	; 16
    23a0:	be 2e       	mov	r11, r30
    23a2:	b4 fe       	sbrs	r11, 4
    23a4:	0d c0       	rjmp	.+26     	; 0x23c0 <vfprintf+0x272>
    23a6:	fb 2d       	mov	r31, r11
    23a8:	f4 60       	ori	r31, 0x04	; 4
    23aa:	bf 2e       	mov	r11, r31
    23ac:	09 c0       	rjmp	.+18     	; 0x23c0 <vfprintf+0x272>
    23ae:	34 fe       	sbrs	r3, 4
    23b0:	0a c0       	rjmp	.+20     	; 0x23c6 <vfprintf+0x278>
    23b2:	29 2f       	mov	r18, r25
    23b4:	26 60       	ori	r18, 0x06	; 6
    23b6:	b2 2e       	mov	r11, r18
    23b8:	06 c0       	rjmp	.+12     	; 0x23c6 <vfprintf+0x278>
    23ba:	28 e0       	ldi	r18, 0x08	; 8
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	05 c0       	rjmp	.+10     	; 0x23ca <vfprintf+0x27c>
    23c0:	20 e1       	ldi	r18, 0x10	; 16
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	02 c0       	rjmp	.+4      	; 0x23ca <vfprintf+0x27c>
    23c6:	20 e1       	ldi	r18, 0x10	; 16
    23c8:	32 e0       	ldi	r19, 0x02	; 2
    23ca:	f8 01       	movw	r30, r16
    23cc:	b7 fe       	sbrs	r11, 7
    23ce:	07 c0       	rjmp	.+14     	; 0x23de <vfprintf+0x290>
    23d0:	60 81       	ld	r22, Z
    23d2:	71 81       	ldd	r23, Z+1	; 0x01
    23d4:	82 81       	ldd	r24, Z+2	; 0x02
    23d6:	93 81       	ldd	r25, Z+3	; 0x03
    23d8:	0c 5f       	subi	r16, 0xFC	; 252
    23da:	1f 4f       	sbci	r17, 0xFF	; 255
    23dc:	06 c0       	rjmp	.+12     	; 0x23ea <vfprintf+0x29c>
    23de:	60 81       	ld	r22, Z
    23e0:	71 81       	ldd	r23, Z+1	; 0x01
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	0e 5f       	subi	r16, 0xFE	; 254
    23e8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ea:	a3 01       	movw	r20, r6
    23ec:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__ultoa_invert>
    23f0:	88 2e       	mov	r8, r24
    23f2:	86 18       	sub	r8, r6
    23f4:	fb 2d       	mov	r31, r11
    23f6:	ff 77       	andi	r31, 0x7F	; 127
    23f8:	3f 2e       	mov	r3, r31
    23fa:	36 fe       	sbrs	r3, 6
    23fc:	0d c0       	rjmp	.+26     	; 0x2418 <vfprintf+0x2ca>
    23fe:	23 2d       	mov	r18, r3
    2400:	2e 7f       	andi	r18, 0xFE	; 254
    2402:	a2 2e       	mov	r10, r18
    2404:	89 14       	cp	r8, r9
    2406:	58 f4       	brcc	.+22     	; 0x241e <vfprintf+0x2d0>
    2408:	34 fe       	sbrs	r3, 4
    240a:	0b c0       	rjmp	.+22     	; 0x2422 <vfprintf+0x2d4>
    240c:	32 fc       	sbrc	r3, 2
    240e:	09 c0       	rjmp	.+18     	; 0x2422 <vfprintf+0x2d4>
    2410:	83 2d       	mov	r24, r3
    2412:	8e 7e       	andi	r24, 0xEE	; 238
    2414:	a8 2e       	mov	r10, r24
    2416:	05 c0       	rjmp	.+10     	; 0x2422 <vfprintf+0x2d4>
    2418:	b8 2c       	mov	r11, r8
    241a:	a3 2c       	mov	r10, r3
    241c:	03 c0       	rjmp	.+6      	; 0x2424 <vfprintf+0x2d6>
    241e:	b8 2c       	mov	r11, r8
    2420:	01 c0       	rjmp	.+2      	; 0x2424 <vfprintf+0x2d6>
    2422:	b9 2c       	mov	r11, r9
    2424:	a4 fe       	sbrs	r10, 4
    2426:	0f c0       	rjmp	.+30     	; 0x2446 <vfprintf+0x2f8>
    2428:	fe 01       	movw	r30, r28
    242a:	e8 0d       	add	r30, r8
    242c:	f1 1d       	adc	r31, r1
    242e:	80 81       	ld	r24, Z
    2430:	80 33       	cpi	r24, 0x30	; 48
    2432:	21 f4       	brne	.+8      	; 0x243c <vfprintf+0x2ee>
    2434:	9a 2d       	mov	r25, r10
    2436:	99 7e       	andi	r25, 0xE9	; 233
    2438:	a9 2e       	mov	r10, r25
    243a:	09 c0       	rjmp	.+18     	; 0x244e <vfprintf+0x300>
    243c:	a2 fe       	sbrs	r10, 2
    243e:	06 c0       	rjmp	.+12     	; 0x244c <vfprintf+0x2fe>
    2440:	b3 94       	inc	r11
    2442:	b3 94       	inc	r11
    2444:	04 c0       	rjmp	.+8      	; 0x244e <vfprintf+0x300>
    2446:	8a 2d       	mov	r24, r10
    2448:	86 78       	andi	r24, 0x86	; 134
    244a:	09 f0       	breq	.+2      	; 0x244e <vfprintf+0x300>
    244c:	b3 94       	inc	r11
    244e:	a3 fc       	sbrc	r10, 3
    2450:	11 c0       	rjmp	.+34     	; 0x2474 <vfprintf+0x326>
    2452:	a0 fe       	sbrs	r10, 0
    2454:	06 c0       	rjmp	.+12     	; 0x2462 <vfprintf+0x314>
    2456:	b2 14       	cp	r11, r2
    2458:	88 f4       	brcc	.+34     	; 0x247c <vfprintf+0x32e>
    245a:	28 0c       	add	r2, r8
    245c:	92 2c       	mov	r9, r2
    245e:	9b 18       	sub	r9, r11
    2460:	0e c0       	rjmp	.+28     	; 0x247e <vfprintf+0x330>
    2462:	b2 14       	cp	r11, r2
    2464:	60 f4       	brcc	.+24     	; 0x247e <vfprintf+0x330>
    2466:	b6 01       	movw	r22, r12
    2468:	80 e2       	ldi	r24, 0x20	; 32
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	0e 94 9e 12 	call	0x253c	; 0x253c <fputc>
    2470:	b3 94       	inc	r11
    2472:	f7 cf       	rjmp	.-18     	; 0x2462 <vfprintf+0x314>
    2474:	b2 14       	cp	r11, r2
    2476:	18 f4       	brcc	.+6      	; 0x247e <vfprintf+0x330>
    2478:	2b 18       	sub	r2, r11
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <vfprintf+0x332>
    247c:	98 2c       	mov	r9, r8
    247e:	21 2c       	mov	r2, r1
    2480:	a4 fe       	sbrs	r10, 4
    2482:	10 c0       	rjmp	.+32     	; 0x24a4 <vfprintf+0x356>
    2484:	b6 01       	movw	r22, r12
    2486:	80 e3       	ldi	r24, 0x30	; 48
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	0e 94 9e 12 	call	0x253c	; 0x253c <fputc>
    248e:	a2 fe       	sbrs	r10, 2
    2490:	17 c0       	rjmp	.+46     	; 0x24c0 <vfprintf+0x372>
    2492:	a1 fc       	sbrc	r10, 1
    2494:	03 c0       	rjmp	.+6      	; 0x249c <vfprintf+0x34e>
    2496:	88 e7       	ldi	r24, 0x78	; 120
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <vfprintf+0x352>
    249c:	88 e5       	ldi	r24, 0x58	; 88
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	b6 01       	movw	r22, r12
    24a2:	0c c0       	rjmp	.+24     	; 0x24bc <vfprintf+0x36e>
    24a4:	8a 2d       	mov	r24, r10
    24a6:	86 78       	andi	r24, 0x86	; 134
    24a8:	59 f0       	breq	.+22     	; 0x24c0 <vfprintf+0x372>
    24aa:	a1 fe       	sbrs	r10, 1
    24ac:	02 c0       	rjmp	.+4      	; 0x24b2 <vfprintf+0x364>
    24ae:	8b e2       	ldi	r24, 0x2B	; 43
    24b0:	01 c0       	rjmp	.+2      	; 0x24b4 <vfprintf+0x366>
    24b2:	80 e2       	ldi	r24, 0x20	; 32
    24b4:	a7 fc       	sbrc	r10, 7
    24b6:	8d e2       	ldi	r24, 0x2D	; 45
    24b8:	b6 01       	movw	r22, r12
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	0e 94 9e 12 	call	0x253c	; 0x253c <fputc>
    24c0:	89 14       	cp	r8, r9
    24c2:	38 f4       	brcc	.+14     	; 0x24d2 <vfprintf+0x384>
    24c4:	b6 01       	movw	r22, r12
    24c6:	80 e3       	ldi	r24, 0x30	; 48
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	0e 94 9e 12 	call	0x253c	; 0x253c <fputc>
    24ce:	9a 94       	dec	r9
    24d0:	f7 cf       	rjmp	.-18     	; 0x24c0 <vfprintf+0x372>
    24d2:	8a 94       	dec	r8
    24d4:	f3 01       	movw	r30, r6
    24d6:	e8 0d       	add	r30, r8
    24d8:	f1 1d       	adc	r31, r1
    24da:	80 81       	ld	r24, Z
    24dc:	b6 01       	movw	r22, r12
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	0e 94 9e 12 	call	0x253c	; 0x253c <fputc>
    24e4:	81 10       	cpse	r8, r1
    24e6:	f5 cf       	rjmp	.-22     	; 0x24d2 <vfprintf+0x384>
    24e8:	22 20       	and	r2, r2
    24ea:	09 f4       	brne	.+2      	; 0x24ee <vfprintf+0x3a0>
    24ec:	42 ce       	rjmp	.-892    	; 0x2172 <vfprintf+0x24>
    24ee:	b6 01       	movw	r22, r12
    24f0:	80 e2       	ldi	r24, 0x20	; 32
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	0e 94 9e 12 	call	0x253c	; 0x253c <fputc>
    24f8:	2a 94       	dec	r2
    24fa:	f6 cf       	rjmp	.-20     	; 0x24e8 <vfprintf+0x39a>
    24fc:	f6 01       	movw	r30, r12
    24fe:	86 81       	ldd	r24, Z+6	; 0x06
    2500:	97 81       	ldd	r25, Z+7	; 0x07
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <vfprintf+0x3ba>
    2504:	8f ef       	ldi	r24, 0xFF	; 255
    2506:	9f ef       	ldi	r25, 0xFF	; 255
    2508:	2b 96       	adiw	r28, 0x0b	; 11
    250a:	e2 e1       	ldi	r30, 0x12	; 18
    250c:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__epilogue_restores__>

00002510 <strnlen_P>:
    2510:	fc 01       	movw	r30, r24
    2512:	05 90       	lpm	r0, Z+
    2514:	61 50       	subi	r22, 0x01	; 1
    2516:	70 40       	sbci	r23, 0x00	; 0
    2518:	01 10       	cpse	r0, r1
    251a:	d8 f7       	brcc	.-10     	; 0x2512 <strnlen_P+0x2>
    251c:	80 95       	com	r24
    251e:	90 95       	com	r25
    2520:	8e 0f       	add	r24, r30
    2522:	9f 1f       	adc	r25, r31
    2524:	08 95       	ret

00002526 <strnlen>:
    2526:	fc 01       	movw	r30, r24
    2528:	61 50       	subi	r22, 0x01	; 1
    252a:	70 40       	sbci	r23, 0x00	; 0
    252c:	01 90       	ld	r0, Z+
    252e:	01 10       	cpse	r0, r1
    2530:	d8 f7       	brcc	.-10     	; 0x2528 <strnlen+0x2>
    2532:	80 95       	com	r24
    2534:	90 95       	com	r25
    2536:	8e 0f       	add	r24, r30
    2538:	9f 1f       	adc	r25, r31
    253a:	08 95       	ret

0000253c <fputc>:
    253c:	0f 93       	push	r16
    253e:	1f 93       	push	r17
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	fb 01       	movw	r30, r22
    2546:	23 81       	ldd	r18, Z+3	; 0x03
    2548:	21 fd       	sbrc	r18, 1
    254a:	03 c0       	rjmp	.+6      	; 0x2552 <fputc+0x16>
    254c:	8f ef       	ldi	r24, 0xFF	; 255
    254e:	9f ef       	ldi	r25, 0xFF	; 255
    2550:	2c c0       	rjmp	.+88     	; 0x25aa <fputc+0x6e>
    2552:	22 ff       	sbrs	r18, 2
    2554:	16 c0       	rjmp	.+44     	; 0x2582 <fputc+0x46>
    2556:	46 81       	ldd	r20, Z+6	; 0x06
    2558:	57 81       	ldd	r21, Z+7	; 0x07
    255a:	24 81       	ldd	r18, Z+4	; 0x04
    255c:	35 81       	ldd	r19, Z+5	; 0x05
    255e:	42 17       	cp	r20, r18
    2560:	53 07       	cpc	r21, r19
    2562:	44 f4       	brge	.+16     	; 0x2574 <fputc+0x38>
    2564:	a0 81       	ld	r26, Z
    2566:	b1 81       	ldd	r27, Z+1	; 0x01
    2568:	9d 01       	movw	r18, r26
    256a:	2f 5f       	subi	r18, 0xFF	; 255
    256c:	3f 4f       	sbci	r19, 0xFF	; 255
    256e:	31 83       	std	Z+1, r19	; 0x01
    2570:	20 83       	st	Z, r18
    2572:	8c 93       	st	X, r24
    2574:	26 81       	ldd	r18, Z+6	; 0x06
    2576:	37 81       	ldd	r19, Z+7	; 0x07
    2578:	2f 5f       	subi	r18, 0xFF	; 255
    257a:	3f 4f       	sbci	r19, 0xFF	; 255
    257c:	37 83       	std	Z+7, r19	; 0x07
    257e:	26 83       	std	Z+6, r18	; 0x06
    2580:	14 c0       	rjmp	.+40     	; 0x25aa <fputc+0x6e>
    2582:	8b 01       	movw	r16, r22
    2584:	ec 01       	movw	r28, r24
    2586:	fb 01       	movw	r30, r22
    2588:	00 84       	ldd	r0, Z+8	; 0x08
    258a:	f1 85       	ldd	r31, Z+9	; 0x09
    258c:	e0 2d       	mov	r30, r0
    258e:	09 95       	icall
    2590:	89 2b       	or	r24, r25
    2592:	e1 f6       	brne	.-72     	; 0x254c <fputc+0x10>
    2594:	d8 01       	movw	r26, r16
    2596:	16 96       	adiw	r26, 0x06	; 6
    2598:	8d 91       	ld	r24, X+
    259a:	9c 91       	ld	r25, X
    259c:	17 97       	sbiw	r26, 0x07	; 7
    259e:	01 96       	adiw	r24, 0x01	; 1
    25a0:	17 96       	adiw	r26, 0x07	; 7
    25a2:	9c 93       	st	X, r25
    25a4:	8e 93       	st	-X, r24
    25a6:	16 97       	sbiw	r26, 0x06	; 6
    25a8:	ce 01       	movw	r24, r28
    25aa:	df 91       	pop	r29
    25ac:	cf 91       	pop	r28
    25ae:	1f 91       	pop	r17
    25b0:	0f 91       	pop	r16
    25b2:	08 95       	ret

000025b4 <__ultoa_invert>:
    25b4:	fa 01       	movw	r30, r20
    25b6:	aa 27       	eor	r26, r26
    25b8:	28 30       	cpi	r18, 0x08	; 8
    25ba:	51 f1       	breq	.+84     	; 0x2610 <__ultoa_invert+0x5c>
    25bc:	20 31       	cpi	r18, 0x10	; 16
    25be:	81 f1       	breq	.+96     	; 0x2620 <__ultoa_invert+0x6c>
    25c0:	e8 94       	clt
    25c2:	6f 93       	push	r22
    25c4:	6e 7f       	andi	r22, 0xFE	; 254
    25c6:	6e 5f       	subi	r22, 0xFE	; 254
    25c8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ca:	8f 4f       	sbci	r24, 0xFF	; 255
    25cc:	9f 4f       	sbci	r25, 0xFF	; 255
    25ce:	af 4f       	sbci	r26, 0xFF	; 255
    25d0:	b1 e0       	ldi	r27, 0x01	; 1
    25d2:	3e d0       	rcall	.+124    	; 0x2650 <__ultoa_invert+0x9c>
    25d4:	b4 e0       	ldi	r27, 0x04	; 4
    25d6:	3c d0       	rcall	.+120    	; 0x2650 <__ultoa_invert+0x9c>
    25d8:	67 0f       	add	r22, r23
    25da:	78 1f       	adc	r23, r24
    25dc:	89 1f       	adc	r24, r25
    25de:	9a 1f       	adc	r25, r26
    25e0:	a1 1d       	adc	r26, r1
    25e2:	68 0f       	add	r22, r24
    25e4:	79 1f       	adc	r23, r25
    25e6:	8a 1f       	adc	r24, r26
    25e8:	91 1d       	adc	r25, r1
    25ea:	a1 1d       	adc	r26, r1
    25ec:	6a 0f       	add	r22, r26
    25ee:	71 1d       	adc	r23, r1
    25f0:	81 1d       	adc	r24, r1
    25f2:	91 1d       	adc	r25, r1
    25f4:	a1 1d       	adc	r26, r1
    25f6:	20 d0       	rcall	.+64     	; 0x2638 <__ultoa_invert+0x84>
    25f8:	09 f4       	brne	.+2      	; 0x25fc <__ultoa_invert+0x48>
    25fa:	68 94       	set
    25fc:	3f 91       	pop	r19
    25fe:	2a e0       	ldi	r18, 0x0A	; 10
    2600:	26 9f       	mul	r18, r22
    2602:	11 24       	eor	r1, r1
    2604:	30 19       	sub	r19, r0
    2606:	30 5d       	subi	r19, 0xD0	; 208
    2608:	31 93       	st	Z+, r19
    260a:	de f6       	brtc	.-74     	; 0x25c2 <__ultoa_invert+0xe>
    260c:	cf 01       	movw	r24, r30
    260e:	08 95       	ret
    2610:	46 2f       	mov	r20, r22
    2612:	47 70       	andi	r20, 0x07	; 7
    2614:	40 5d       	subi	r20, 0xD0	; 208
    2616:	41 93       	st	Z+, r20
    2618:	b3 e0       	ldi	r27, 0x03	; 3
    261a:	0f d0       	rcall	.+30     	; 0x263a <__ultoa_invert+0x86>
    261c:	c9 f7       	brne	.-14     	; 0x2610 <__ultoa_invert+0x5c>
    261e:	f6 cf       	rjmp	.-20     	; 0x260c <__ultoa_invert+0x58>
    2620:	46 2f       	mov	r20, r22
    2622:	4f 70       	andi	r20, 0x0F	; 15
    2624:	40 5d       	subi	r20, 0xD0	; 208
    2626:	4a 33       	cpi	r20, 0x3A	; 58
    2628:	18 f0       	brcs	.+6      	; 0x2630 <__ultoa_invert+0x7c>
    262a:	49 5d       	subi	r20, 0xD9	; 217
    262c:	31 fd       	sbrc	r19, 1
    262e:	40 52       	subi	r20, 0x20	; 32
    2630:	41 93       	st	Z+, r20
    2632:	02 d0       	rcall	.+4      	; 0x2638 <__ultoa_invert+0x84>
    2634:	a9 f7       	brne	.-22     	; 0x2620 <__ultoa_invert+0x6c>
    2636:	ea cf       	rjmp	.-44     	; 0x260c <__ultoa_invert+0x58>
    2638:	b4 e0       	ldi	r27, 0x04	; 4
    263a:	a6 95       	lsr	r26
    263c:	97 95       	ror	r25
    263e:	87 95       	ror	r24
    2640:	77 95       	ror	r23
    2642:	67 95       	ror	r22
    2644:	ba 95       	dec	r27
    2646:	c9 f7       	brne	.-14     	; 0x263a <__ultoa_invert+0x86>
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	61 05       	cpc	r22, r1
    264c:	71 05       	cpc	r23, r1
    264e:	08 95       	ret
    2650:	9b 01       	movw	r18, r22
    2652:	ac 01       	movw	r20, r24
    2654:	0a 2e       	mov	r0, r26
    2656:	06 94       	lsr	r0
    2658:	57 95       	ror	r21
    265a:	47 95       	ror	r20
    265c:	37 95       	ror	r19
    265e:	27 95       	ror	r18
    2660:	ba 95       	dec	r27
    2662:	c9 f7       	brne	.-14     	; 0x2656 <__ultoa_invert+0xa2>
    2664:	62 0f       	add	r22, r18
    2666:	73 1f       	adc	r23, r19
    2668:	84 1f       	adc	r24, r20
    266a:	95 1f       	adc	r25, r21
    266c:	a0 1d       	adc	r26, r0
    266e:	08 95       	ret

00002670 <__prologue_saves__>:
    2670:	2f 92       	push	r2
    2672:	3f 92       	push	r3
    2674:	4f 92       	push	r4
    2676:	5f 92       	push	r5
    2678:	6f 92       	push	r6
    267a:	7f 92       	push	r7
    267c:	8f 92       	push	r8
    267e:	9f 92       	push	r9
    2680:	af 92       	push	r10
    2682:	bf 92       	push	r11
    2684:	cf 92       	push	r12
    2686:	df 92       	push	r13
    2688:	ef 92       	push	r14
    268a:	ff 92       	push	r15
    268c:	0f 93       	push	r16
    268e:	1f 93       	push	r17
    2690:	cf 93       	push	r28
    2692:	df 93       	push	r29
    2694:	cd b7       	in	r28, 0x3d	; 61
    2696:	de b7       	in	r29, 0x3e	; 62
    2698:	ca 1b       	sub	r28, r26
    269a:	db 0b       	sbc	r29, r27
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	f8 94       	cli
    26a0:	de bf       	out	0x3e, r29	; 62
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	cd bf       	out	0x3d, r28	; 61
    26a6:	09 94       	ijmp

000026a8 <__epilogue_restores__>:
    26a8:	2a 88       	ldd	r2, Y+18	; 0x12
    26aa:	39 88       	ldd	r3, Y+17	; 0x11
    26ac:	48 88       	ldd	r4, Y+16	; 0x10
    26ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    26b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    26b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    26b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    26b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    26b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    26ba:	b9 84       	ldd	r11, Y+9	; 0x09
    26bc:	c8 84       	ldd	r12, Y+8	; 0x08
    26be:	df 80       	ldd	r13, Y+7	; 0x07
    26c0:	ee 80       	ldd	r14, Y+6	; 0x06
    26c2:	fd 80       	ldd	r15, Y+5	; 0x05
    26c4:	0c 81       	ldd	r16, Y+4	; 0x04
    26c6:	1b 81       	ldd	r17, Y+3	; 0x03
    26c8:	aa 81       	ldd	r26, Y+2	; 0x02
    26ca:	b9 81       	ldd	r27, Y+1	; 0x01
    26cc:	ce 0f       	add	r28, r30
    26ce:	d1 1d       	adc	r29, r1
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	f8 94       	cli
    26d4:	de bf       	out	0x3e, r29	; 62
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	cd bf       	out	0x3d, r28	; 61
    26da:	ed 01       	movw	r28, r26
    26dc:	08 95       	ret

000026de <_exit>:
    26de:	f8 94       	cli

000026e0 <__stop_program>:
    26e0:	ff cf       	rjmp	.-2      	; 0x26e0 <__stop_program>
