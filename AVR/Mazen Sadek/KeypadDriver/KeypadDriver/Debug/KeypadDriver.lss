
KeypadDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000049e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000049e  00000512  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a75  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000725  00000000  00000000  0000108d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006bc  00000000  00000000  000017b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001e70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b3  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003b0  00000000  00000000  00002303  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000026b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 35 02 	call	0x46a	; 0x46a <main>
  7a:	0c 94 4d 02 	jmp	0x49a	; 0x49a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <pinModepin>:

//#include <avr/io.h>

void pinModepin(u8 port,u8 pin ,u8 states){
	//PORTA
	      if (  ( port ==portA ) && (states == INPUT) )
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	f1 f4       	brne	.+60     	; 0xc2 <pinModepin+0x40>
  86:	41 11       	cpse	r20, r1
  88:	0d c0       	rjmp	.+26     	; 0xa4 <pinModepin+0x22>
	
		 DDRA_REG &=~(1<<pin);
  8a:	9a b3       	in	r25, 0x1a	; 26
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	06 2e       	mov	r0, r22
  92:	02 c0       	rjmp	.+4      	; 0x98 <pinModepin+0x16>
  94:	22 0f       	add	r18, r18
  96:	33 1f       	adc	r19, r19
  98:	0a 94       	dec	r0
  9a:	e2 f7       	brpl	.-8      	; 0x94 <pinModepin+0x12>
  9c:	20 95       	com	r18
  9e:	29 23       	and	r18, r25
  a0:	2a bb       	out	0x1a, r18	; 26
  a2:	4a c0       	rjmp	.+148    	; 0x138 <pinModepin+0xb6>
		 
		 else if (  ( port ==portA ) &&(states == OUTPUT) )
  a4:	41 30       	cpi	r20, 0x01	; 1
  a6:	09 f0       	breq	.+2      	; 0xaa <pinModepin+0x28>
  a8:	47 c0       	rjmp	.+142    	; 0x138 <pinModepin+0xb6>
		 DDRA_REG |=(1<<pin);
  aa:	9a b3       	in	r25, 0x1a	; 26
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	06 2e       	mov	r0, r22
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <pinModepin+0x36>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <pinModepin+0x32>
  bc:	29 2b       	or	r18, r25
  be:	2a bb       	out	0x1a, r18	; 26
  c0:	3b c0       	rjmp	.+118    	; 0x138 <pinModepin+0xb6>
			 PORTA_REG |=(1<<pin);
		 }	
//PORTB	
	
	
 if (  ( port ==portB ) && (states == INPUT) )
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	e1 f4       	brne	.+56     	; 0xfe <pinModepin+0x7c>
  c6:	41 11       	cpse	r20, r1
  c8:	0c c0       	rjmp	.+24     	; 0xe2 <pinModepin+0x60>
 
 DDRB_REG &=~(1<<pin);
  ca:	27 b3       	in	r18, 0x17	; 23
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <pinModepin+0x54>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <pinModepin+0x50>
  da:	80 95       	com	r24
  dc:	82 23       	and	r24, r18
  de:	87 bb       	out	0x17, r24	; 23
  e0:	08 95       	ret
 
 else if (  ( port ==portB ) &&(states == OUTPUT) )
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	09 f0       	breq	.+2      	; 0xe8 <pinModepin+0x66>
  e6:	44 c0       	rjmp	.+136    	; 0x170 <pinModepin+0xee>
 DDRB_REG |=(1<<pin);
  e8:	27 b3       	in	r18, 0x17	; 23
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <pinModepin+0x72>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <pinModepin+0x6e>
  f8:	82 2b       	or	r24, r18
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	08 95       	ret
	 PORTB_REG |=(1<<pin);
 }
 
 //PORTC
 
  if (  ( port ==portC ) && (states == INPUT) )
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	d9 f4       	brne	.+54     	; 0x138 <pinModepin+0xb6>
 102:	41 11       	cpse	r20, r1
 104:	0c c0       	rjmp	.+24     	; 0x11e <pinModepin+0x9c>
  
  DDRC_REG &=~(1<<pin);
 106:	24 b3       	in	r18, 0x14	; 20
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <pinModepin+0x90>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <pinModepin+0x8c>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	84 bb       	out	0x14, r24	; 20
 11c:	08 95       	ret
  
  else if (  ( port ==portC ) &&(states == OUTPUT) )
 11e:	41 30       	cpi	r20, 0x01	; 1
 120:	39 f5       	brne	.+78     	; 0x170 <pinModepin+0xee>
  DDRC_REG |=(1<<pin);
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <pinModepin+0xac>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <pinModepin+0xa8>
 132:	82 2b       	or	r24, r18
 134:	84 bb       	out	0x14, r24	; 20
 136:	08 95       	ret
	  PORTC_REG |=(1<<pin);
  }
  
  //PORTD
  
   if (  ( port ==portD ) && (states == INPUT) )
 138:	84 30       	cpi	r24, 0x04	; 4
 13a:	d1 f4       	brne	.+52     	; 0x170 <pinModepin+0xee>
 13c:	41 11       	cpse	r20, r1
 13e:	0c c0       	rjmp	.+24     	; 0x158 <pinModepin+0xd6>
   
   DDRD_REG &=~(1<<pin);
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <pinModepin+0xca>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <pinModepin+0xc6>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret
   
   else if (  ( port ==portD) &&(states == OUTPUT) )
 158:	41 30       	cpi	r20, 0x01	; 1
 15a:	51 f4       	brne	.+20     	; 0x170 <pinModepin+0xee>
   DDRD_REG |=(1<<pin);
 15c:	21 b3       	in	r18, 0x11	; 17
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <pinModepin+0xe6>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <pinModepin+0xe2>
 16c:	82 2b       	or	r24, r18
 16e:	81 bb       	out	0x11, r24	; 17
 170:	08 95       	ret

00000172 <pinModeport>:


void pinModeport(u8 port,u8 states){
	
	//PORTA
	  if( (port==portA) &&(states==INPUT))
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	49 f4       	brne	.+18     	; 0x188 <pinModeport+0x16>
 176:	61 11       	cpse	r22, r1
 178:	02 c0       	rjmp	.+4      	; 0x17e <pinModeport+0xc>
		DDRA_REG =0x00;
 17a:	1a ba       	out	0x1a, r1	; 26
 17c:	1b c0       	rjmp	.+54     	; 0x1b4 <pinModeport+0x42>
		else if  ( (port==portA) &&(states==OUTPUT) )
 17e:	61 30       	cpi	r22, 0x01	; 1
 180:	c9 f4       	brne	.+50     	; 0x1b4 <pinModeport+0x42>
		DDRA_REG =0xff;
 182:	9f ef       	ldi	r25, 0xFF	; 255
 184:	9a bb       	out	0x1a, r25	; 26
 186:	16 c0       	rjmp	.+44     	; 0x1b4 <pinModeport+0x42>
			DDRA_REG =0X00;
			PORTA_REG =0Xff;
		}
		
		//PORTB
		if( (port==portB) &&(states==INPUT))
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	49 f4       	brne	.+18     	; 0x19e <pinModeport+0x2c>
 18c:	61 11       	cpse	r22, r1
 18e:	02 c0       	rjmp	.+4      	; 0x194 <pinModeport+0x22>
		DDRB_REG =0x00;
 190:	17 ba       	out	0x17, r1	; 23
 192:	08 95       	ret
		else if  ( (port==portB) &&(states==OUTPUT) )
 194:	61 30       	cpi	r22, 0x01	; 1
 196:	c1 f4       	brne	.+48     	; 0x1c8 <pinModeport+0x56>
		DDRB_REG =0xff;
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	87 bb       	out	0x17, r24	; 23
 19c:	08 95       	ret
			DDRB_REG =0X00;
			PORTB_REG =0Xff;
		}
		
		//PORTC
		if( (port==portC) &&(states==INPUT))
 19e:	83 30       	cpi	r24, 0x03	; 3
 1a0:	49 f4       	brne	.+18     	; 0x1b4 <pinModeport+0x42>
 1a2:	61 11       	cpse	r22, r1
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <pinModeport+0x38>
		DDRC_REG =0x00;
 1a6:	14 ba       	out	0x14, r1	; 20
 1a8:	08 95       	ret
		else if  ( (port==portC) &&(states==OUTPUT) )
 1aa:	61 30       	cpi	r22, 0x01	; 1
 1ac:	69 f4       	brne	.+26     	; 0x1c8 <pinModeport+0x56>
		DDRC_REG =0xff;
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	84 bb       	out	0x14, r24	; 20
 1b2:	08 95       	ret
			DDRC_REG =0X00;
			PORTC_REG =0Xff;
		}
		
		//PORTD
		if( (port==portD) &&(states==INPUT))
 1b4:	84 30       	cpi	r24, 0x04	; 4
 1b6:	41 f4       	brne	.+16     	; 0x1c8 <pinModeport+0x56>
 1b8:	61 11       	cpse	r22, r1
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <pinModeport+0x4e>
		DDRD_REG =0x00;
 1bc:	11 ba       	out	0x11, r1	; 17
 1be:	08 95       	ret
		else if  ( (port==portD) &&(states==OUTPUT) )
 1c0:	61 30       	cpi	r22, 0x01	; 1
 1c2:	11 f4       	brne	.+4      	; 0x1c8 <pinModeport+0x56>
		DDRD_REG =0xff;
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	81 bb       	out	0x11, r24	; 17
 1c8:	08 95       	ret

000001ca <digitalWrightpin>:


void digitalWrightpin(u8 port,u8 pin ,u8 states){
	
//PORTA
	   if((port ==portA) && (states== HIGH))
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	e9 f4       	brne	.+58     	; 0x208 <digitalWrightpin+0x3e>
 1ce:	41 30       	cpi	r20, 0x01	; 1
 1d0:	61 f4       	brne	.+24     	; 0x1ea <digitalWrightpin+0x20>
		
		PORTA_REG |=(1<<pin);
 1d2:	9b b3       	in	r25, 0x1b	; 27
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	06 2e       	mov	r0, r22
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <digitalWrightpin+0x16>
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	0a 94       	dec	r0
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <digitalWrightpin+0x12>
 1e4:	29 2b       	or	r18, r25
 1e6:	2b bb       	out	0x1b, r18	; 27
 1e8:	49 c0       	rjmp	.+146    	; 0x27c <digitalWrightpin+0xb2>
		
		else if((port ==portA) && (states==LOW))
 1ea:	41 11       	cpse	r20, r1
 1ec:	47 c0       	rjmp	.+142    	; 0x27c <digitalWrightpin+0xb2>
		
		PORTA_REG &=~(1<<pin);
 1ee:	9b b3       	in	r25, 0x1b	; 27
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	06 2e       	mov	r0, r22
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <digitalWrightpin+0x32>
 1f8:	22 0f       	add	r18, r18
 1fa:	33 1f       	adc	r19, r19
 1fc:	0a 94       	dec	r0
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <digitalWrightpin+0x2e>
 200:	20 95       	com	r18
 202:	29 23       	and	r18, r25
 204:	2b bb       	out	0x1b, r18	; 27
 206:	3a c0       	rjmp	.+116    	; 0x27c <digitalWrightpin+0xb2>
		
 //PORTB
	
	if((port ==portB) &&  (states== HIGH))
 208:	82 30       	cpi	r24, 0x02	; 2
 20a:	d9 f4       	brne	.+54     	; 0x242 <digitalWrightpin+0x78>
 20c:	41 30       	cpi	r20, 0x01	; 1
 20e:	59 f4       	brne	.+22     	; 0x226 <digitalWrightpin+0x5c>
	
	PORTB_REG |=(1<<pin);
 210:	28 b3       	in	r18, 0x18	; 24
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <digitalWrightpin+0x52>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <digitalWrightpin+0x4e>
 220:	82 2b       	or	r24, r18
 222:	88 bb       	out	0x18, r24	; 24
 224:	08 95       	ret
	
	else if((port ==portB) && (states==LOW))
 226:	41 11       	cpse	r20, r1
 228:	45 c0       	rjmp	.+138    	; 0x2b4 <digitalWrightpin+0xea>
	
	PORTB_REG &=~(1<<pin);
 22a:	28 b3       	in	r18, 0x18	; 24
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <digitalWrightpin+0x6c>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <digitalWrightpin+0x68>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	88 bb       	out	0x18, r24	; 24
 240:	08 95       	ret
	
	//PORTC
	if((port ==portC) &&(states== HIGH))
 242:	83 30       	cpi	r24, 0x03	; 3
 244:	d9 f4       	brne	.+54     	; 0x27c <digitalWrightpin+0xb2>
 246:	41 30       	cpi	r20, 0x01	; 1
 248:	59 f4       	brne	.+22     	; 0x260 <digitalWrightpin+0x96>
	
	PORTC_REG |=(1<<pin);
 24a:	25 b3       	in	r18, 0x15	; 21
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <digitalWrightpin+0x8c>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <digitalWrightpin+0x88>
 25a:	82 2b       	or	r24, r18
 25c:	85 bb       	out	0x15, r24	; 21
 25e:	08 95       	ret
	
	else if((port ==portC)&&(states==LOW))
 260:	41 11       	cpse	r20, r1
 262:	28 c0       	rjmp	.+80     	; 0x2b4 <digitalWrightpin+0xea>
	
	PORTC_REG &=~(1<<pin);
 264:	25 b3       	in	r18, 0x15	; 21
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <digitalWrightpin+0xa6>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <digitalWrightpin+0xa2>
 274:	80 95       	com	r24
 276:	82 23       	and	r24, r18
 278:	85 bb       	out	0x15, r24	; 21
 27a:	08 95       	ret
	
	//PORTD
	if((port ==portD) &&(states== HIGH))
 27c:	84 30       	cpi	r24, 0x04	; 4
 27e:	d1 f4       	brne	.+52     	; 0x2b4 <digitalWrightpin+0xea>
 280:	41 30       	cpi	r20, 0x01	; 1
 282:	59 f4       	brne	.+22     	; 0x29a <digitalWrightpin+0xd0>
	
	PORTD_REG |=(1<<pin);
 284:	22 b3       	in	r18, 0x12	; 18
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <digitalWrightpin+0xc6>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <digitalWrightpin+0xc2>
 294:	82 2b       	or	r24, r18
 296:	82 bb       	out	0x12, r24	; 18
 298:	08 95       	ret
	
	else if((port ==portD)&&(states==LOW))
 29a:	41 11       	cpse	r20, r1
 29c:	0b c0       	rjmp	.+22     	; 0x2b4 <digitalWrightpin+0xea>
	
	PORTD_REG &=~(1<<pin);
 29e:	22 b3       	in	r18, 0x12	; 18
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <digitalWrightpin+0xe0>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <digitalWrightpin+0xdc>
 2ae:	80 95       	com	r24
 2b0:	82 23       	and	r24, r18
 2b2:	82 bb       	out	0x12, r24	; 18
 2b4:	08 95       	ret

000002b6 <digitalWrightport>:
}

void digitalWrightport(u8 port,u8 states){
	
	//	PORTA
	if((port ==portA ) && (states==HIGH))
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	69 f4       	brne	.+26     	; 0x2d4 <digitalWrightport+0x1e>
 2ba:	61 30       	cpi	r22, 0x01	; 1
 2bc:	19 f4       	brne	.+6      	; 0x2c4 <digitalWrightport+0xe>
		PORTA_REG =0xff;
 2be:	9f ef       	ldi	r25, 0xFF	; 255
 2c0:	9b bb       	out	0x1b, r25	; 27
 2c2:	26 c0       	rjmp	.+76     	; 0x310 <digitalWrightport+0x5a>
		
		else if((port ==portA ) &&(states==LOW)) 
 2c4:	61 11       	cpse	r22, r1
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <digitalWrightport+0x16>
		PORTA_REG =0x00;
 2c8:	1b ba       	out	0x1b, r1	; 27
 2ca:	22 c0       	rjmp	.+68     	; 0x310 <digitalWrightport+0x5a>
		
		else if	((port ==portA ) && ( (states!=LOW)&&(states!=HIGH) )  )
 2cc:	62 30       	cpi	r22, 0x02	; 2
 2ce:	00 f1       	brcs	.+64     	; 0x310 <digitalWrightport+0x5a>
		PORTA_REG=states;
 2d0:	6b bb       	out	0x1b, r22	; 27
 2d2:	1e c0       	rjmp	.+60     	; 0x310 <digitalWrightport+0x5a>
		
//PORTB
     if((port ==portB ) && (states==HIGH))
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	69 f4       	brne	.+26     	; 0x2f2 <digitalWrightport+0x3c>
 2d8:	61 30       	cpi	r22, 0x01	; 1
 2da:	19 f4       	brne	.+6      	; 0x2e2 <digitalWrightport+0x2c>
	PORTB_REG =0xff;
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	88 bb       	out	0x18, r24	; 24
 2e0:	08 95       	ret

	else if((port ==portB ) &&(states==LOW))
 2e2:	61 11       	cpse	r22, r1
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <digitalWrightport+0x34>
	PORTB_REG =0x00;
 2e6:	18 ba       	out	0x18, r1	; 24
 2e8:	08 95       	ret
	
	else if	((port ==portB ) && ( (states!=LOW)&&(states!=HIGH) )  )
 2ea:	62 30       	cpi	r22, 0x02	; 2
 2ec:	f8 f0       	brcs	.+62     	; 0x32c <digitalWrightport+0x76>
	PORTB_REG=states;
 2ee:	68 bb       	out	0x18, r22	; 24
 2f0:	08 95       	ret

//PORTC
if((port ==portC ) && (states==HIGH))
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	69 f4       	brne	.+26     	; 0x310 <digitalWrightport+0x5a>
 2f6:	61 30       	cpi	r22, 0x01	; 1
 2f8:	19 f4       	brne	.+6      	; 0x300 <digitalWrightport+0x4a>
PORTC_REG =0xff;
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	85 bb       	out	0x15, r24	; 21
 2fe:	08 95       	ret

else if((port ==portC ) &&(states==LOW))
 300:	61 11       	cpse	r22, r1
 302:	02 c0       	rjmp	.+4      	; 0x308 <digitalWrightport+0x52>
PORTC_REG =0x00;
 304:	15 ba       	out	0x15, r1	; 21
 306:	08 95       	ret

else if	((port ==portC ) && ( (states!=LOW)&&(states!=HIGH) )  )
 308:	62 30       	cpi	r22, 0x02	; 2
 30a:	80 f0       	brcs	.+32     	; 0x32c <digitalWrightport+0x76>
PORTC_REG=states;
 30c:	65 bb       	out	0x15, r22	; 21
 30e:	08 95       	ret

//PORTD

if((port ==portD ) && (states==HIGH))
 310:	84 30       	cpi	r24, 0x04	; 4
 312:	61 f4       	brne	.+24     	; 0x32c <digitalWrightport+0x76>
 314:	61 30       	cpi	r22, 0x01	; 1
 316:	19 f4       	brne	.+6      	; 0x31e <digitalWrightport+0x68>
PORTD_REG =0xff;
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	82 bb       	out	0x12, r24	; 18
 31c:	08 95       	ret

else if((port ==portD ) &&(states==LOW))
 31e:	61 11       	cpse	r22, r1
 320:	02 c0       	rjmp	.+4      	; 0x326 <digitalWrightport+0x70>
PORTD_REG =0x00;
 322:	12 ba       	out	0x12, r1	; 18
 324:	08 95       	ret

else if	((port ==portD ) && ( (states!=LOW)&&(states!=HIGH) )  )
 326:	62 30       	cpi	r22, 0x02	; 2
 328:	08 f0       	brcs	.+2      	; 0x32c <digitalWrightport+0x76>
PORTD_REG=states;
 32a:	62 bb       	out	0x12, r22	; 18
 32c:	08 95       	ret

0000032e <digitalRead>:

u8 digitalRead(u8 port,u8 pin){
	
	
		//PORTA
		if(port==portA)
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	49 f4       	brne	.+18     	; 0x344 <digitalRead+0x16>
		return ((PINA_REG >>pin)&(0x01));
 332:	89 b3       	in	r24, 0x19	; 25
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	02 c0       	rjmp	.+4      	; 0x33c <digitalRead+0xe>
 338:	95 95       	asr	r25
 33a:	87 95       	ror	r24
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <digitalRead+0xa>
 340:	81 70       	andi	r24, 0x01	; 1
 342:	08 95       	ret
		//PORTB
		else if(port==portB)
 344:	82 30       	cpi	r24, 0x02	; 2
 346:	49 f4       	brne	.+18     	; 0x35a <digitalRead+0x2c>
		return ((PINB_REG >>pin)&(0x01));
 348:	86 b3       	in	r24, 0x16	; 22
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <digitalRead+0x24>
 34e:	95 95       	asr	r25
 350:	87 95       	ror	r24
 352:	6a 95       	dec	r22
 354:	e2 f7       	brpl	.-8      	; 0x34e <digitalRead+0x20>
 356:	81 70       	andi	r24, 0x01	; 1
 358:	08 95       	ret
		//PORTC
		else if(port==portC)
 35a:	83 30       	cpi	r24, 0x03	; 3
 35c:	49 f4       	brne	.+18     	; 0x370 <digitalRead+0x42>
		return ((PINC_REG >>pin)&(0x01));
 35e:	83 b3       	in	r24, 0x13	; 19
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <digitalRead+0x3a>
 364:	95 95       	asr	r25
 366:	87 95       	ror	r24
 368:	6a 95       	dec	r22
 36a:	e2 f7       	brpl	.-8      	; 0x364 <digitalRead+0x36>
 36c:	81 70       	andi	r24, 0x01	; 1
 36e:	08 95       	ret
		//PORTD
		else if(port==portD)
 370:	84 30       	cpi	r24, 0x04	; 4
 372:	49 f4       	brne	.+18     	; 0x386 <digitalRead+0x58>
		return ((PIND_REG >>pin)&(0x01));
 374:	80 b3       	in	r24, 0x10	; 16
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 c0       	rjmp	.+4      	; 0x37e <digitalRead+0x50>
 37a:	95 95       	asr	r25
 37c:	87 95       	ror	r24
 37e:	6a 95       	dec	r22
 380:	e2 f7       	brpl	.-8      	; 0x37a <digitalRead+0x4c>
 382:	81 70       	andi	r24, 0x01	; 1
 384:	08 95       	ret
		
		else
		return -1;
 386:	8f ef       	ldi	r24, 0xFF	; 255
		
}
 388:	08 95       	ret

0000038a <keypad_initilaization>:
			 };
 
 
void keypad_initilaization(){
	 
	 pinModepin(keypad_port,R0,OUTPUT);
 38a:	41 e0       	ldi	r20, 0x01	; 1
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	83 e0       	ldi	r24, 0x03	; 3
 390:	0e 94 41 00 	call	0x82	; 0x82 <pinModepin>
	 pinModepin(keypad_port,R1,OUTPUT);
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	83 e0       	ldi	r24, 0x03	; 3
 39a:	0e 94 41 00 	call	0x82	; 0x82 <pinModepin>
	 pinModepin(keypad_port,R2,OUTPUT);
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	62 e0       	ldi	r22, 0x02	; 2
 3a2:	83 e0       	ldi	r24, 0x03	; 3
 3a4:	0e 94 41 00 	call	0x82	; 0x82 <pinModepin>
	 pinModepin(keypad_port,R3,OUTPUT);
 3a8:	41 e0       	ldi	r20, 0x01	; 1
 3aa:	63 e0       	ldi	r22, 0x03	; 3
 3ac:	83 e0       	ldi	r24, 0x03	; 3
 3ae:	0e 94 41 00 	call	0x82	; 0x82 <pinModepin>
	 
	  pinModepin(keypad_port,C0,INPUT);
 3b2:	40 e0       	ldi	r20, 0x00	; 0
 3b4:	64 e0       	ldi	r22, 0x04	; 4
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	0e 94 41 00 	call	0x82	; 0x82 <pinModepin>
	  pinModepin(keypad_port,C1,INPUT);
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	65 e0       	ldi	r22, 0x05	; 5
 3c0:	83 e0       	ldi	r24, 0x03	; 3
 3c2:	0e 94 41 00 	call	0x82	; 0x82 <pinModepin>
	  pinModepin(keypad_port,C2,INPUT);
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	66 e0       	ldi	r22, 0x06	; 6
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	0e 94 41 00 	call	0x82	; 0x82 <pinModepin>
	  pinModepin(keypad_port,C3,INPUT);
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	67 e0       	ldi	r22, 0x07	; 7
 3d4:	83 e0       	ldi	r24, 0x03	; 3
 3d6:	0e 94 41 00 	call	0x82	; 0x82 <pinModepin>
	 
	 digitalWrightport(keypad_port,HIGH);
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	83 e0       	ldi	r24, 0x03	; 3
 3de:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <digitalWrightport>
 3e2:	08 95       	ret

000003e4 <keypad_getpress>:
	 
 }


u8 keypad_getpress(){
 3e4:	df 92       	push	r13
 3e6:	ef 92       	push	r14
 3e8:	ff 92       	push	r15
 3ea:	0f 93       	push	r16
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	0f 2e       	mov	r0, r31
 3f4:	f0 e6       	ldi	r31, 0x60	; 96
 3f6:	ef 2e       	mov	r14, r31
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	ff 2e       	mov	r15, r31
 3fc:	f0 2d       	mov	r31, r0
	u8 result=0;
	
	for(u8 Rows=0; Rows<4;Rows++){
 3fe:	d0 e0       	ldi	r29, 0x00	; 0
	 
 }


u8 keypad_getpress(){
	u8 result=0;
 400:	d1 2c       	mov	r13, r1
	
	for(u8 Rows=0; Rows<4;Rows++){
		
		digitalWrightpin(keypad_port,Rows,LOW);
 402:	40 e0       	ldi	r20, 0x00	; 0
 404:	6d 2f       	mov	r22, r29
 406:	83 e0       	ldi	r24, 0x03	; 3
 408:	0e 94 e5 00 	call	0x1ca	; 0x1ca <digitalWrightpin>
 40c:	87 01       	movw	r16, r14
		for(u8 collum=4;collum<8;collum++){
 40e:	c4 e0       	ldi	r28, 0x04	; 4
			
			if(digitalRead(keypad_port,collum)==LOW){
 410:	6c 2f       	mov	r22, r28
 412:	83 e0       	ldi	r24, 0x03	; 3
 414:	0e 94 97 01 	call	0x32e	; 0x32e <digitalRead>
 418:	81 11       	cpse	r24, r1
 41a:	0e c0       	rjmp	.+28     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
				
				 result =arr[Rows][collum-4];
 41c:	f8 01       	movw	r30, r16
 41e:	d0 80       	ld	r13, Z
				while(digitalRead(keypad_port,collum)==LOW);
 420:	6c 2f       	mov	r22, r28
 422:	83 e0       	ldi	r24, 0x03	; 3
 424:	0e 94 97 01 	call	0x32e	; 0x32e <digitalRead>
 428:	88 23       	and	r24, r24
 42a:	d1 f3       	breq	.-12     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42c:	8f e3       	ldi	r24, 0x3F	; 63
 42e:	9c e9       	ldi	r25, 0x9C	; 156
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 436:	00 00       	nop
	u8 result=0;
	
	for(u8 Rows=0; Rows<4;Rows++){
		
		digitalWrightpin(keypad_port,Rows,LOW);
		for(u8 collum=4;collum<8;collum++){
 438:	cf 5f       	subi	r28, 0xFF	; 255
 43a:	0f 5f       	subi	r16, 0xFF	; 255
 43c:	1f 4f       	sbci	r17, 0xFF	; 255
 43e:	c8 30       	cpi	r28, 0x08	; 8
 440:	39 f7       	brne	.-50     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				_delay_ms(10);
				
			}
			
		}
		digitalWrightpin(keypad_port,Rows,HIGH);
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	6d 2f       	mov	r22, r29
 446:	83 e0       	ldi	r24, 0x03	; 3
 448:	0e 94 e5 00 	call	0x1ca	; 0x1ca <digitalWrightpin>


u8 keypad_getpress(){
	u8 result=0;
	
	for(u8 Rows=0; Rows<4;Rows++){
 44c:	df 5f       	subi	r29, 0xFF	; 255
 44e:	94 e0       	ldi	r25, 0x04	; 4
 450:	e9 0e       	add	r14, r25
 452:	f1 1c       	adc	r15, r1
 454:	d4 30       	cpi	r29, 0x04	; 4
 456:	a9 f6       	brne	.-86     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		
	}
	
	return result;
	
 458:	8d 2d       	mov	r24, r13
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	ff 90       	pop	r15
 464:	ef 90       	pop	r14
 466:	df 90       	pop	r13
 468:	08 95       	ret

0000046a <main>:
 #include "RegDIO.h"

int main(void)
{

keypad_initilaization();
 46a:	0e 94 c5 01 	call	0x38a	; 0x38a <keypad_initilaization>
pinModeport(portD,OUTPUT);
 46e:	61 e0       	ldi	r22, 0x01	; 1
 470:	84 e0       	ldi	r24, 0x04	; 4
 472:	0e 94 b9 00 	call	0x172	; 0x172 <pinModeport>

    while (1) 
    {
		u8 x=keypad_getpress();
 476:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <keypad_getpress>
		if( x=='2'){
 47a:	82 33       	cpi	r24, 0x32	; 50
 47c:	31 f4       	brne	.+12     	; 0x48a <main+0x20>
			
			digitalWrightpin(portD,0,HIGH);
 47e:	41 e0       	ldi	r20, 0x01	; 1
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	84 e0       	ldi	r24, 0x04	; 4
 484:	0e 94 e5 00 	call	0x1ca	; 0x1ca <digitalWrightpin>
 488:	f6 cf       	rjmp	.-20     	; 0x476 <main+0xc>
		}
		else if( x=='*'){
 48a:	8a 32       	cpi	r24, 0x2A	; 42
 48c:	a1 f7       	brne	.-24     	; 0x476 <main+0xc>
			
			digitalWrightpin(portD,1,HIGH);
 48e:	41 e0       	ldi	r20, 0x01	; 1
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	84 e0       	ldi	r24, 0x04	; 4
 494:	0e 94 e5 00 	call	0x1ca	; 0x1ca <digitalWrightpin>
 498:	ee cf       	rjmp	.-36     	; 0x476 <main+0xc>

0000049a <_exit>:
 49a:	f8 94       	cli

0000049c <__stop_program>:
 49c:	ff cf       	rjmp	.-2      	; 0x49c <__stop_program>
