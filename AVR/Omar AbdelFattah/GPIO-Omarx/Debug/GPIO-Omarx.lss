
GPIO-Omarx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000a2c  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000089e  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 99 01 	call	0x332	; 0x332 <main>
  64:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GetPinVal>:

#include <avr/io.h>


void GetPinVal(U8 PORT,U8 PINNUMB,U8*container)
{
  6c:	fa 01       	movw	r30, r20
	*container=((DIO_PINB>>PINNUMB)&(1<<0));
  6e:	86 b3       	in	r24, 0x16	; 22
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	02 c0       	rjmp	.+4      	; 0x78 <GetPinVal+0xc>
  74:	95 95       	asr	r25
  76:	87 95       	ror	r24
  78:	6a 95       	dec	r22
  7a:	e2 f7       	brpl	.-8      	; 0x74 <GetPinVal+0x8>
  7c:	81 70       	andi	r24, 0x01	; 1
  7e:	80 83       	st	Z, r24
}
  80:	08 95       	ret

00000082 <DIO_SetPinDir>:
//void SetPinDir ()

void DIO_SetPinDir (U8 port,U8 pinnum,U8 state)
{
	switch (port)
  82:	82 34       	cpi	r24, 0x42	; 66
  84:	51 f1       	breq	.+84     	; 0xda <DIO_SetPinDir+0x58>
  86:	83 34       	cpi	r24, 0x43	; 67
  88:	20 f4       	brcc	.+8      	; 0x92 <DIO_SetPinDir+0x10>
  8a:	81 34       	cpi	r24, 0x41	; 65
  8c:	09 f0       	breq	.+2      	; 0x90 <DIO_SetPinDir+0xe>
  8e:	7b c0       	rjmp	.+246    	; 0x186 <DIO_SetPinDir+0x104>
  90:	07 c0       	rjmp	.+14     	; 0xa0 <DIO_SetPinDir+0x1e>
  92:	83 34       	cpi	r24, 0x43	; 67
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_SetPinDir+0x16>
  96:	3e c0       	rjmp	.+124    	; 0x114 <DIO_SetPinDir+0x92>
  98:	84 34       	cpi	r24, 0x44	; 68
  9a:	09 f0       	breq	.+2      	; 0x9e <DIO_SetPinDir+0x1c>
  9c:	74 c0       	rjmp	.+232    	; 0x186 <DIO_SetPinDir+0x104>
  9e:	57 c0       	rjmp	.+174    	; 0x14e <DIO_SetPinDir+0xcc>
	{
	case 'A':
		if (state == 1)
  a0:	41 30       	cpi	r20, 0x01	; 1
  a2:	69 f4       	brne	.+26     	; 0xbe <DIO_SetPinDir+0x3c>
		{
			DIO_DDRA|=(1<<pinnum);
  a4:	ea e3       	ldi	r30, 0x3A	; 58
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	20 81       	ld	r18, Z
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <DIO_SetPinDir+0x32>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <DIO_SetPinDir+0x2e>
  b8:	28 2b       	or	r18, r24
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret
		}
		else
		{
			DIO_DDRA&=~(1<<pinnum);
  be:	ea e3       	ldi	r30, 0x3A	; 58
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	20 81       	ld	r18, Z
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPinDir+0x4c>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPinDir+0x48>
  d2:	80 95       	com	r24
  d4:	82 23       	and	r24, r18
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret
		}
		break;
	case 'B':
		if (state == 1)
  da:	41 30       	cpi	r20, 0x01	; 1
  dc:	69 f4       	brne	.+26     	; 0xf8 <DIO_SetPinDir+0x76>
		{
			DIO_DDRB|=(1<<pinnum);
  de:	e7 e3       	ldi	r30, 0x37	; 55
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	20 81       	ld	r18, Z
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_SetPinDir+0x6c>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_SetPinDir+0x68>
  f2:	28 2b       	or	r18, r24
  f4:	20 83       	st	Z, r18
  f6:	08 95       	ret
		}
		else
		{
			DIO_DDRB&=~(1<<pinnum);
  f8:	e7 e3       	ldi	r30, 0x37	; 55
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	20 81       	ld	r18, Z
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_SetPinDir+0x86>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_SetPinDir+0x82>
 10c:	80 95       	com	r24
 10e:	82 23       	and	r24, r18
 110:	80 83       	st	Z, r24
 112:	08 95       	ret
		}
		break;
	case 'C':
		if (state == 1)
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	69 f4       	brne	.+26     	; 0x132 <DIO_SetPinDir+0xb0>
		{
			DIO_DDRC|=(1<<pinnum);
 118:	e4 e3       	ldi	r30, 0x34	; 52
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	20 81       	ld	r18, Z
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPinDir+0xa6>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPinDir+0xa2>
 12c:	28 2b       	or	r18, r24
 12e:	20 83       	st	Z, r18
 130:	08 95       	ret
		}
		else
		{
			DIO_DDRC&=~(1<<pinnum);
 132:	e4 e3       	ldi	r30, 0x34	; 52
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	20 81       	ld	r18, Z
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPinDir+0xc0>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPinDir+0xbc>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	80 83       	st	Z, r24
 14c:	08 95       	ret
		}
		break;
	case 'D':
		if (state == 1)
 14e:	41 30       	cpi	r20, 0x01	; 1
 150:	69 f4       	brne	.+26     	; 0x16c <DIO_SetPinDir+0xea>
		{
			DIO_DDRD|=(1<<pinnum);
 152:	e1 e3       	ldi	r30, 0x31	; 49
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	20 81       	ld	r18, Z
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_SetPinDir+0xe0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_SetPinDir+0xdc>
 166:	28 2b       	or	r18, r24
 168:	20 83       	st	Z, r18
 16a:	08 95       	ret
		}
		else
		{
			DIO_DDRD&=~(1<<pinnum);
 16c:	e1 e3       	ldi	r30, 0x31	; 49
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	20 81       	ld	r18, Z
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_SetPinDir+0xfa>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_SetPinDir+0xf6>
 180:	80 95       	com	r24
 182:	82 23       	and	r24, r18
 184:	80 83       	st	Z, r24
 186:	08 95       	ret

00000188 <DIO_SetPortDir>:
		break;
	}
}
void DIO_SetPortDir(U8 Port,U8 state )
{
	switch (Port)
 188:	82 34       	cpi	r24, 0x42	; 66
 18a:	89 f0       	breq	.+34     	; 0x1ae <DIO_SetPortDir+0x26>
 18c:	83 34       	cpi	r24, 0x43	; 67
 18e:	18 f4       	brcc	.+6      	; 0x196 <DIO_SetPortDir+0xe>
 190:	81 34       	cpi	r24, 0x41	; 65
 192:	09 f5       	brne	.+66     	; 0x1d6 <DIO_SetPortDir+0x4e>
 194:	05 c0       	rjmp	.+10     	; 0x1a0 <DIO_SetPortDir+0x18>
 196:	83 34       	cpi	r24, 0x43	; 67
 198:	89 f0       	breq	.+34     	; 0x1bc <DIO_SetPortDir+0x34>
 19a:	84 34       	cpi	r24, 0x44	; 68
 19c:	e1 f4       	brne	.+56     	; 0x1d6 <DIO_SetPortDir+0x4e>
 19e:	15 c0       	rjmp	.+42     	; 0x1ca <DIO_SetPortDir+0x42>
	{
	case 'A':
		if (state == 1)
 1a0:	61 30       	cpi	r22, 0x01	; 1
 1a2:	19 f4       	brne	.+6      	; 0x1aa <DIO_SetPortDir+0x22>
		{
			DIO_DDRA=0xFF;
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	8a bb       	out	0x1a, r24	; 26
 1a8:	08 95       	ret
		}
		else
		{
			DIO_DDRA=0x00;
 1aa:	1a ba       	out	0x1a, r1	; 26
 1ac:	08 95       	ret
		}
		break;
	case 'B':
		if (state == 1)
 1ae:	61 30       	cpi	r22, 0x01	; 1
 1b0:	19 f4       	brne	.+6      	; 0x1b8 <DIO_SetPortDir+0x30>
		{
			DIO_DDRB=0xFF;
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	87 bb       	out	0x17, r24	; 23
 1b6:	08 95       	ret
		}
		else
		{
			DIO_DDRB=0x00;
 1b8:	17 ba       	out	0x17, r1	; 23
 1ba:	08 95       	ret
		}
		break;
	case 'C':
		if (state == 1)
 1bc:	61 30       	cpi	r22, 0x01	; 1
 1be:	19 f4       	brne	.+6      	; 0x1c6 <DIO_SetPortDir+0x3e>
		{
			DIO_DDRC=0xFF;
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	84 bb       	out	0x14, r24	; 20
 1c4:	08 95       	ret
		}
		else
		{
			DIO_DDRC=0x00;
 1c6:	14 ba       	out	0x14, r1	; 20
 1c8:	08 95       	ret
		}
		break;
	case 'D':
		if (state == 1)
 1ca:	61 30       	cpi	r22, 0x01	; 1
 1cc:	19 f4       	brne	.+6      	; 0x1d4 <DIO_SetPortDir+0x4c>
		{
			DIO_DDRD=0xFF;
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	81 bb       	out	0x11, r24	; 17
 1d2:	08 95       	ret
		}
		else
		{
			DIO_DDRD=0x00;
 1d4:	11 ba       	out	0x11, r1	; 17
 1d6:	08 95       	ret

000001d8 <DIO_SetPinValue>:
		break;
	}
}
void DIO_SetPinValue(U8 port,U8 pinnum,U8 state)
{
	switch (port)
 1d8:	82 34       	cpi	r24, 0x42	; 66
 1da:	51 f1       	breq	.+84     	; 0x230 <DIO_SetPinValue+0x58>
 1dc:	83 34       	cpi	r24, 0x43	; 67
 1de:	20 f4       	brcc	.+8      	; 0x1e8 <DIO_SetPinValue+0x10>
 1e0:	81 34       	cpi	r24, 0x41	; 65
 1e2:	09 f0       	breq	.+2      	; 0x1e6 <DIO_SetPinValue+0xe>
 1e4:	7b c0       	rjmp	.+246    	; 0x2dc <DIO_SetPinValue+0x104>
 1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <DIO_SetPinValue+0x1e>
 1e8:	83 34       	cpi	r24, 0x43	; 67
 1ea:	09 f4       	brne	.+2      	; 0x1ee <DIO_SetPinValue+0x16>
 1ec:	3e c0       	rjmp	.+124    	; 0x26a <DIO_SetPinValue+0x92>
 1ee:	84 34       	cpi	r24, 0x44	; 68
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <DIO_SetPinValue+0x1c>
 1f2:	74 c0       	rjmp	.+232    	; 0x2dc <DIO_SetPinValue+0x104>
 1f4:	57 c0       	rjmp	.+174    	; 0x2a4 <DIO_SetPinValue+0xcc>
		{
		case 'A':
			if (state == 1)
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	69 f4       	brne	.+26     	; 0x214 <DIO_SetPinValue+0x3c>
			{
				DIO_PORTA|=(1<<pinnum);
 1fa:	eb e3       	ldi	r30, 0x3B	; 59
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	20 81       	ld	r18, Z
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_SetPinValue+0x32>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_SetPinValue+0x2e>
 20e:	28 2b       	or	r18, r24
 210:	20 83       	st	Z, r18
 212:	08 95       	ret
			}
			else
			{
				DIO_PORTA&=~(1<<pinnum);
 214:	eb e3       	ldi	r30, 0x3B	; 59
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	20 81       	ld	r18, Z
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_SetPinValue+0x4c>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_SetPinValue+0x48>
 228:	80 95       	com	r24
 22a:	82 23       	and	r24, r18
 22c:	80 83       	st	Z, r24
 22e:	08 95       	ret
			}
			break;
		case 'B':
			if (state == 1)
 230:	41 30       	cpi	r20, 0x01	; 1
 232:	69 f4       	brne	.+26     	; 0x24e <DIO_SetPinValue+0x76>
			{
				DIO_PORTB|=(1<<pinnum);
 234:	e8 e3       	ldi	r30, 0x38	; 56
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	20 81       	ld	r18, Z
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_SetPinValue+0x6c>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_SetPinValue+0x68>
 248:	28 2b       	or	r18, r24
 24a:	20 83       	st	Z, r18
 24c:	08 95       	ret
			}
			else
			{
				DIO_PORTB&=~(1<<pinnum);
 24e:	e8 e3       	ldi	r30, 0x38	; 56
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	20 81       	ld	r18, Z
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_SetPinValue+0x86>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_SetPinValue+0x82>
 262:	80 95       	com	r24
 264:	82 23       	and	r24, r18
 266:	80 83       	st	Z, r24
 268:	08 95       	ret
			}
			break;
		case 'C':
			if (state == 1)
 26a:	41 30       	cpi	r20, 0x01	; 1
 26c:	69 f4       	brne	.+26     	; 0x288 <DIO_SetPinValue+0xb0>
			{
				DIO_PORTC|=(1<<pinnum);
 26e:	e5 e3       	ldi	r30, 0x35	; 53
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	20 81       	ld	r18, Z
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_SetPinValue+0xa6>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_SetPinValue+0xa2>
 282:	28 2b       	or	r18, r24
 284:	20 83       	st	Z, r18
 286:	08 95       	ret
			}
			else
			{
				DIO_PORTC&=~(1<<pinnum);
 288:	e5 e3       	ldi	r30, 0x35	; 53
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	20 81       	ld	r18, Z
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_SetPinValue+0xc0>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_SetPinValue+0xbc>
 29c:	80 95       	com	r24
 29e:	82 23       	and	r24, r18
 2a0:	80 83       	st	Z, r24
 2a2:	08 95       	ret
			}
			break;
		case 'D':
			if (state == 1)
 2a4:	41 30       	cpi	r20, 0x01	; 1
 2a6:	69 f4       	brne	.+26     	; 0x2c2 <DIO_SetPinValue+0xea>
			{
				DIO_PORTD|=(1<<pinnum);
 2a8:	e2 e3       	ldi	r30, 0x32	; 50
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	20 81       	ld	r18, Z
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_SetPinValue+0xe0>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_SetPinValue+0xdc>
 2bc:	28 2b       	or	r18, r24
 2be:	20 83       	st	Z, r18
 2c0:	08 95       	ret
			}
			else
			{
				DIO_PORTD&=~(1<<pinnum);
 2c2:	e2 e3       	ldi	r30, 0x32	; 50
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	20 81       	ld	r18, Z
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_SetPinValue+0xfa>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_SetPinValue+0xf6>
 2d6:	80 95       	com	r24
 2d8:	82 23       	and	r24, r18
 2da:	80 83       	st	Z, r24
 2dc:	08 95       	ret

000002de <DIO_SetPortValue>:
	}
}

void DIO_SetPortValue(U8 port,U8 state)
{
	switch (port)
 2de:	82 34       	cpi	r24, 0x42	; 66
 2e0:	91 f0       	breq	.+36     	; 0x306 <DIO_SetPortValue+0x28>
 2e2:	83 34       	cpi	r24, 0x43	; 67
 2e4:	18 f4       	brcc	.+6      	; 0x2ec <DIO_SetPortValue+0xe>
 2e6:	81 34       	cpi	r24, 0x41	; 65
 2e8:	19 f5       	brne	.+70     	; 0x330 <DIO_SetPortValue+0x52>
 2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <DIO_SetPortValue+0x18>
 2ec:	83 34       	cpi	r24, 0x43	; 67
 2ee:	99 f0       	breq	.+38     	; 0x316 <DIO_SetPortValue+0x38>
 2f0:	84 34       	cpi	r24, 0x44	; 68
 2f2:	f1 f4       	brne	.+60     	; 0x330 <DIO_SetPortValue+0x52>
 2f4:	17 c0       	rjmp	.+46     	; 0x324 <DIO_SetPortValue+0x46>
	{
	case 'A':
		if (state == 1)
 2f6:	61 30       	cpi	r22, 0x01	; 1
 2f8:	19 f4       	brne	.+6      	; 0x300 <DIO_SetPortValue+0x22>
		{
			DIO_PORTA=0xFF;
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	8b bb       	out	0x1b, r24	; 27
 2fe:	08 95       	ret
		}
		else if (state == 0)
 300:	66 23       	and	r22, r22
		{
			DIO_PORTA=0x00;
 302:	6b bb       	out	0x1b, r22	; 27
 304:	08 95       	ret
		{
			DIO_PORTA=state;
		}
		break;
	case 'B':
		if (state == 1)
 306:	61 30       	cpi	r22, 0x01	; 1
 308:	19 f4       	brne	.+6      	; 0x310 <DIO_SetPortValue+0x32>
		{
				DIO_PORTB=0xFF;
 30a:	8f ef       	ldi	r24, 0xFF	; 255
 30c:	88 bb       	out	0x18, r24	; 24
 30e:	08 95       	ret
		}
		else if (state == 0)
 310:	66 23       	and	r22, r22
		{
			DIO_PORTB=0x00;
 312:	68 bb       	out	0x18, r22	; 24
 314:	08 95       	ret
		{
			DIO_PORTB=state;
		}
		break;
	case 'C':
		if (state == 1)
 316:	61 30       	cpi	r22, 0x01	; 1
 318:	19 f4       	brne	.+6      	; 0x320 <DIO_SetPortValue+0x42>
		{
			DIO_PORTC=0xFF;
 31a:	8f ef       	ldi	r24, 0xFF	; 255
 31c:	85 bb       	out	0x15, r24	; 21
 31e:	08 95       	ret
		}
		else
		{
			DIO_PORTC=0x00;
 320:	15 ba       	out	0x15, r1	; 21
 322:	08 95       	ret
		}
		break;
	case 'D':
		if (state == 1)
 324:	61 30       	cpi	r22, 0x01	; 1
 326:	19 f4       	brne	.+6      	; 0x32e <DIO_SetPortValue+0x50>
		{
			DIO_PORTD=0xFF;
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	82 bb       	out	0x12, r24	; 18
 32c:	08 95       	ret
		}
		else
		{
			DIO_PORTD=0x00;
 32e:	12 ba       	out	0x12, r1	; 18
 330:	08 95       	ret

00000332 <main>:
#include "drivers.h"
#include "mytypedef.h"


int main(void)
{
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
	DIO_SetPortDir('A',DIO_OUTPUT);
 336:	81 e4       	ldi	r24, 0x41	; 65
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_SetPortDir>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 33e:	c0 e5       	ldi	r28, 0x50	; 80
 340:	d3 ec       	ldi	r29, 0xC3	; 195
    while(1)
    {
DIO_SetPinValue('A',0,DIO_HIGH);
 342:	81 e4       	ldi	r24, 0x41	; 65
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	41 e0       	ldi	r20, 0x01	; 1
 348:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_SetPinValue>
 34c:	ce 01       	movw	r24, r28
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <main+0x1c>
_delay_ms(200);
DIO_SetPinValue('A',1,DIO_HIGH);
 352:	81 e4       	ldi	r24, 0x41	; 65
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	41 e0       	ldi	r20, 0x01	; 1
 358:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_SetPinValue>
 35c:	ce 01       	movw	r24, r28
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <main+0x2c>
_delay_ms(200);
DIO_SetPinValue('A',2,DIO_HIGH);
 362:	81 e4       	ldi	r24, 0x41	; 65
 364:	62 e0       	ldi	r22, 0x02	; 2
 366:	41 e0       	ldi	r20, 0x01	; 1
 368:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_SetPinValue>
 36c:	ce 01       	movw	r24, r28
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <main+0x3c>
_delay_ms(200);
DIO_SetPinValue('A',3,DIO_HIGH);
 372:	81 e4       	ldi	r24, 0x41	; 65
 374:	63 e0       	ldi	r22, 0x03	; 3
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_SetPinValue>
 37c:	ce 01       	movw	r24, r28
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <main+0x4c>
_delay_ms(200);
DIO_SetPinValue('A',4,DIO_HIGH);
 382:	81 e4       	ldi	r24, 0x41	; 65
 384:	64 e0       	ldi	r22, 0x04	; 4
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_SetPinValue>
 38c:	ce 01       	movw	r24, r28
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <main+0x5c>
_delay_ms(200);
DIO_SetPinValue('A',5,DIO_HIGH);
 392:	81 e4       	ldi	r24, 0x41	; 65
 394:	65 e0       	ldi	r22, 0x05	; 5
 396:	41 e0       	ldi	r20, 0x01	; 1
 398:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_SetPinValue>
 39c:	ce 01       	movw	r24, r28
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <main+0x6c>
_delay_ms(200);
DIO_SetPinValue('A',6,DIO_HIGH);
 3a2:	81 e4       	ldi	r24, 0x41	; 65
 3a4:	66 e0       	ldi	r22, 0x06	; 6
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_SetPinValue>
 3ac:	ce 01       	movw	r24, r28
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <main+0x7c>
_delay_ms(200);
DIO_SetPinValue('A',7,DIO_HIGH);
 3b2:	81 e4       	ldi	r24, 0x41	; 65
 3b4:	67 e0       	ldi	r22, 0x07	; 7
 3b6:	41 e0       	ldi	r20, 0x01	; 1
 3b8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_SetPinValue>
 3bc:	ce 01       	movw	r24, r28
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <main+0x8c>
_delay_ms(200);

DIO_SetPortValue('A',DIO_LOW);
 3c2:	81 e4       	ldi	r24, 0x41	; 65
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_SetPortValue>
 3ca:	ce 01       	movw	r24, r28
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <main+0x9a>
 3d0:	b8 cf       	rjmp	.-144    	; 0x342 <main+0x10>

000003d2 <_exit>:
 3d2:	f8 94       	cli

000003d4 <__stop_program>:
 3d4:	ff cf       	rjmp	.-2      	; 0x3d4 <__stop_program>
